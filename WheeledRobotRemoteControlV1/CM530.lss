
CM530.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000134  08003000  08003000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003064  08003134  08003134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000014  20000000  08006198  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000204  20000014  080061ac  00008014  2**2
                  ALLOC
  4 ._usrstack    00000100  20000218  080063b0  00008014  2**0
                  ALLOC
  5 .comment      000002c0  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002f0  00000000  00000000  000082d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000022e3  00000000  00000000  000085c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000091ca  00000000  00000000  0000a8ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001e92  00000000  00000000  00013a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001de3  00000000  00000000  00015907  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001b3c  00000000  00000000  000176ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000341f  00000000  00000000  00019228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002f2c  00000000  00000000  0001c647  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000031  00000000  00000000  0001f573  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000248  00000000  00000000  0001f5a8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08003000 <g_pfnVectors>:
 8003000:	20010000 	.word	0x20010000
 8003004:	08005f6d 	.word	0x08005f6d
 8003008:	08003799 	.word	0x08003799
 800300c:	0800379d 	.word	0x0800379d
 8003010:	080037a1 	.word	0x080037a1
 8003014:	080037a5 	.word	0x080037a5
 8003018:	080037a9 	.word	0x080037a9
	...
 800302c:	080037b1 	.word	0x080037b1
 8003030:	080037ad 	.word	0x080037ad
 8003034:	00000000 	.word	0x00000000
 8003038:	080037b5 	.word	0x080037b5
 800303c:	080038b9 	.word	0x080038b9
 8003040:	080037b9 	.word	0x080037b9
 8003044:	080037bd 	.word	0x080037bd
 8003048:	080037c1 	.word	0x080037c1
 800304c:	080037c5 	.word	0x080037c5
 8003050:	080037c9 	.word	0x080037c9
 8003054:	080037cd 	.word	0x080037cd
 8003058:	080037d1 	.word	0x080037d1
 800305c:	080037d5 	.word	0x080037d5
 8003060:	080037d9 	.word	0x080037d9
 8003064:	080037dd 	.word	0x080037dd
 8003068:	080037e1 	.word	0x080037e1
	...
 8003088:	08003801 	.word	0x08003801
 800308c:	08003805 	.word	0x08003805
 8003090:	08003809 	.word	0x08003809
 8003094:	0800380d 	.word	0x0800380d
 8003098:	08003811 	.word	0x08003811
 800309c:	08003815 	.word	0x08003815
 80030a0:	08003819 	.word	0x08003819
 80030a4:	0800381d 	.word	0x0800381d
 80030a8:	08003821 	.word	0x08003821
 80030ac:	08003825 	.word	0x08003825
 80030b0:	080038ad 	.word	0x080038ad
 80030b4:	08003829 	.word	0x08003829
 80030b8:	0800382d 	.word	0x0800382d
 80030bc:	08003831 	.word	0x08003831
 80030c0:	08003835 	.word	0x08003835
 80030c4:	08003839 	.word	0x08003839
 80030c8:	0800383d 	.word	0x0800383d
 80030cc:	08003841 	.word	0x08003841
 80030d0:	08003845 	.word	0x08003845
 80030d4:	080038a1 	.word	0x080038a1
 80030d8:	08003849 	.word	0x08003849
 80030dc:	0800384d 	.word	0x0800384d
 80030e0:	08003851 	.word	0x08003851
 80030e4:	08003855 	.word	0x08003855
 80030e8:	08003859 	.word	0x08003859
 80030ec:	0800385d 	.word	0x0800385d
 80030f0:	08003861 	.word	0x08003861
 80030f4:	08003865 	.word	0x08003865
 80030f8:	08003869 	.word	0x08003869
 80030fc:	0800386d 	.word	0x0800386d
 8003100:	08003871 	.word	0x08003871
 8003104:	08003875 	.word	0x08003875
 8003108:	08003879 	.word	0x08003879
 800310c:	0800387d 	.word	0x0800387d
 8003110:	08003881 	.word	0x08003881
 8003114:	08003885 	.word	0x08003885
 8003118:	08003889 	.word	0x08003889
 800311c:	0800388d 	.word	0x0800388d
 8003120:	08003891 	.word	0x08003891
 8003124:	08003895 	.word	0x08003895
 8003128:	08003899 	.word	0x08003899
 800312c:	0800389d 	.word	0x0800389d
 8003130:	0000f85f 	.word	0x0000f85f

Disassembly of section .text:

08003134 <ClearBuffer256>:
	USART_Cmd(USART1, DISABLE);
}

void ClearBuffer256(void)
{
	gbRxBufferReadPointer = gbRxBufferWritePointer = 0;
 8003134:	4a03      	ldr	r2, [pc, #12]	(8003144 <ClearBuffer256+0x10>)
 8003136:	2300      	movs	r3, #0
 8003138:	7013      	strb	r3, [r2, #0]
 800313a:	7813      	ldrb	r3, [r2, #0]
 800313c:	4a02      	ldr	r2, [pc, #8]	(8003148 <ClearBuffer256+0x14>)
 800313e:	7013      	strb	r3, [r2, #0]
}
 8003140:	4770      	bx	lr
 8003142:	46c0      	nop			(mov r8, r8)
 8003144:	20000119 	.word	0x20000119
 8003148:	2000011a 	.word	0x2000011a

0800314c <CheckNewArrive>:

byte CheckNewArrive(void)
{
	if(gbRxBufferReadPointer != gbRxBufferWritePointer)
 800314c:	4b03      	ldr	r3, [pc, #12]	(800315c <CheckNewArrive+0x10>)
 800314e:	7818      	ldrb	r0, [r3, #0]
 8003150:	4b03      	ldr	r3, [pc, #12]	(8003160 <CheckNewArrive+0x14>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	1ac0      	subs	r0, r0, r3
 8003156:	bf18      	it	ne
 8003158:	2001      	movne	r0, #1
		return 1;
	else
		return 0;
}
 800315a:	4770      	bx	lr
 800315c:	2000011a 	.word	0x2000011a
 8003160:	20000119 	.word	0x20000119

08003164 <RxDByte_DXL>:
{
	byte bTemp;

	while(1)
	{
		if(gbRxBufferReadPointer != gbRxBufferWritePointer) break;
 8003164:	f8df c020 	ldr.w	ip, [pc, #32]	; 8003188 <RxDByte_DXL+0x24>
 8003168:	4808      	ldr	r0, [pc, #32]	(800318c <RxDByte_DXL+0x28>)
 800316a:	f89c 2000 	ldrb.w	r2, [ip]
 800316e:	7803      	ldrb	r3, [r0, #0]
 8003170:	4905      	ldr	r1, [pc, #20]	(8003188 <RxDByte_DXL+0x24>)
 8003172:	429a      	cmp	r2, r3
 8003174:	d0f9      	beq.n	800316a <RxDByte_DXL+0x6>
	}

	bTemp = gbpRxInterruptBuffer[gbRxBufferReadPointer];
 8003176:	780b      	ldrb	r3, [r1, #0]
 8003178:	4a05      	ldr	r2, [pc, #20]	(8003190 <RxDByte_DXL+0x2c>)
 800317a:	5cd0      	ldrb	r0, [r2, r3]
	gbRxBufferReadPointer++;
 800317c:	780b      	ldrb	r3, [r1, #0]
 800317e:	3301      	adds	r3, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	700b      	strb	r3, [r1, #0]

	return bTemp;
}
 8003184:	4770      	bx	lr
 8003186:	46c0      	nop			(mov r8, r8)
 8003188:	2000011a 	.word	0x2000011a
 800318c:	20000119 	.word	0x20000119
 8003190:	20000019 	.word	0x20000019

08003194 <__ISR_DELAY>:
	  SysTick_ITConfig(ENABLE);
}

void __ISR_DELAY(void)
{
	if (gwTimingDelay != 0x00)
 8003194:	4a03      	ldr	r2, [pc, #12]	(80031a4 <__ISR_DELAY+0x10>)
 8003196:	6813      	ldr	r3, [r2, #0]
 8003198:	b113      	cbz	r3, 80031a0 <__ISR_DELAY+0xc>
		gwTimingDelay--;
 800319a:	6813      	ldr	r3, [r2, #0]
 800319c:	3b01      	subs	r3, #1
 800319e:	6013      	str	r3, [r2, #0]
}
 80031a0:	4770      	bx	lr
 80031a2:	46c0      	nop			(mov r8, r8)
 80031a4:	2000011c 	.word	0x2000011c

080031a8 <StartDiscount>:
	SysTick_CounterCmd(SysTick_Counter_Clear);
}

void StartDiscount(s32 StartTime)
{
	gw1msCounter = StartTime;
 80031a8:	4b01      	ldr	r3, [pc, #4]	(80031b0 <StartDiscount+0x8>)
 80031aa:	6018      	str	r0, [r3, #0]
}
 80031ac:	4770      	bx	lr
 80031ae:	46c0      	nop			(mov r8, r8)
 80031b0:	20000120 	.word	0x20000120

080031b4 <CheckTimeOut>:
u8 CheckTimeOut(void)
{
	// Check timeout
	// Return: 0 is false, 1 is true(timeout occurred)

	if(gw1msCounter == 0)
 80031b4:	4b03      	ldr	r3, [pc, #12]	(80031c4 <CheckTimeOut+0x10>)
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	f1d0 0001 	rsbs	r0, r0, #1	; 0x1
 80031bc:	bf38      	it	cc
 80031be:	2000      	movcc	r0, #0
		return 1;
	else
		return 0;
}
 80031c0:	4770      	bx	lr
 80031c2:	46c0      	nop			(mov r8, r8)
 80031c4:	20000120 	.word	0x20000120

080031c8 <mDelay>:
	if (gwTimingDelay != 0x00)
		gwTimingDelay--;
}

void mDelay(u32 nTime)
{
 80031c8:	b510      	push	{r4, lr}
 80031ca:	4604      	mov	r4, r0
	/* Enable the SysTick Counter */
	SysTick_CounterCmd(SysTick_Counter_Enable);
 80031cc:	2001      	movs	r0, #1
 80031ce:	f001 fdb5 	bl	8004d3c <SysTick_CounterCmd>

	gwTimingDelay = nTime;
 80031d2:	4b07      	ldr	r3, [pc, #28]	(80031f0 <mDelay+0x28>)
 80031d4:	601c      	str	r4, [r3, #0]

	while(gwTimingDelay != 0);
 80031d6:	461a      	mov	r2, r3
 80031d8:	6813      	ldr	r3, [r2, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1fc      	bne.n	80031d8 <mDelay+0x10>

	/* Disable SysTick Counter */
	SysTick_CounterCmd(SysTick_Counter_Disable);
 80031de:	f06f 0001 	mvn.w	r0, #1	; 0x1
 80031e2:	f001 fdab 	bl	8004d3c <SysTick_CounterCmd>
	/* Clear SysTick Counter */
	SysTick_CounterCmd(SysTick_Counter_Clear);
 80031e6:	2000      	movs	r0, #0
 80031e8:	f001 fda8 	bl	8004d3c <SysTick_CounterCmd>
}
 80031ec:	bd10      	pop	{r4, pc}
 80031ee:	46c0      	nop			(mov r8, r8)
 80031f0:	2000011c 	.word	0x2000011c

080031f4 <SysTick_Configuration>:
	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
		gbpRxInterruptBuffer[gbRxBufferWritePointer++] = USART_ReceiveData(USART1);
}

void SysTick_Configuration(void)
{
 80031f4:	b500      	push	{lr}
	  /* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
	  SysTick_SetReload(9000);
 80031f6:	f242 3028 	movw	r0, #9000	; 0x2328
	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
		gbpRxInterruptBuffer[gbRxBufferWritePointer++] = USART_ReceiveData(USART1);
}

void SysTick_Configuration(void)
{
 80031fa:	b081      	sub	sp, #4
	  /* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
	  SysTick_SetReload(9000);
 80031fc:	f001 fd98 	bl	8004d30 <SysTick_SetReload>

	  /* Enable SysTick interrupt */
	  SysTick_ITConfig(ENABLE);
 8003200:	2001      	movs	r0, #1
 8003202:	f001 fdb1 	bl	8004d68 <SysTick_ITConfig>
}
 8003206:	b001      	add	sp, #4
 8003208:	bd00      	pop	{pc}
 800320a:	46c0      	nop			(mov r8, r8)

0800320c <RxD0Interrupt>:
	}
}

/*__interrupt*/
void RxD0Interrupt(void)
{
 800320c:	b530      	push	{r4, r5, lr}
	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 800320e:	480a      	ldr	r0, [pc, #40]	(8003238 <RxD0Interrupt+0x2c>)
	}
}

/*__interrupt*/
void RxD0Interrupt(void)
{
 8003210:	b081      	sub	sp, #4
	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 8003212:	f240 5125 	movw	r1, #1317	; 0x525
 8003216:	f002 fdab 	bl	8005d70 <USART_GetITStatus>
 800321a:	b150      	cbz	r0, 8003232 <RxD0Interrupt+0x26>
		gbpRxInterruptBuffer[gbRxBufferWritePointer++] = USART_ReceiveData(USART1);
 800321c:	4d07      	ldr	r5, [pc, #28]	(800323c <RxD0Interrupt+0x30>)
 800321e:	4806      	ldr	r0, [pc, #24]	(8003238 <RxD0Interrupt+0x2c>)
 8003220:	782c      	ldrb	r4, [r5, #0]
 8003222:	f002 fd37 	bl	8005c94 <USART_ReceiveData>
 8003226:	4b06      	ldr	r3, [pc, #24]	(8003240 <RxD0Interrupt+0x34>)
 8003228:	b2c0      	uxtb	r0, r0
 800322a:	5518      	strb	r0, [r3, r4]
 800322c:	3401      	adds	r4, #1
 800322e:	b2e4      	uxtb	r4, r4
 8003230:	702c      	strb	r4, [r5, #0]
}
 8003232:	b001      	add	sp, #4
 8003234:	bd30      	pop	{r4, r5, pc}
 8003236:	46c0      	nop			(mov r8, r8)
 8003238:	40013800 	.word	0x40013800
 800323c:	20000119 	.word	0x20000119
 8003240:	20000019 	.word	0x20000019

08003244 <TimerInterrupt_1ms>:
	/* TIM2 enable counter */
	TIM_Cmd(TIM2, ENABLE);
}

void TimerInterrupt_1ms(void) //OLLO CONTROL
{
 8003244:	b500      	push	{lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET) // 1ms//
 8003246:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	/* TIM2 enable counter */
	TIM_Cmd(TIM2, ENABLE);
}

void TimerInterrupt_1ms(void) //OLLO CONTROL
{
 800324a:	b081      	sub	sp, #4
	if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET) // 1ms//
 800324c:	2102      	movs	r1, #2
 800324e:	f002 fbff 	bl	8005a50 <TIM_GetITStatus>
 8003252:	b1c8      	cbz	r0, 8003288 <TimerInterrupt_1ms+0x44>
	{
		TIM_ClearITPendingBit(TIM2, TIM_IT_CC1);
 8003254:	2102      	movs	r1, #2
 8003256:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800325a:	f002 fc05 	bl	8005a68 <TIM_ClearITPendingBit>

		capture = TIM_GetCapture1(TIM2);
 800325e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003262:	f002 fbd1 	bl	8005a08 <TIM_GetCapture1>
 8003266:	4b09      	ldr	r3, [pc, #36]	(800328c <TimerInterrupt_1ms+0x48>)
 8003268:	6018      	str	r0, [r3, #0]
		TIM_SetCompare1(TIM2, capture + CCR1_Val);
 800326a:	6819      	ldr	r1, [r3, #0]
 800326c:	4b08      	ldr	r3, [pc, #32]	(8003290 <TimerInterrupt_1ms+0x4c>)
 800326e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	18c9      	adds	r1, r1, r3
 8003276:	b289      	uxth	r1, r1
 8003278:	f002 fb80 	bl	800597c <TIM_SetCompare1>

		if(gw1msCounter > 0)
 800327c:	4a05      	ldr	r2, [pc, #20]	(8003294 <TimerInterrupt_1ms+0x50>)
 800327e:	6813      	ldr	r3, [r2, #0]
 8003280:	b113      	cbz	r3, 8003288 <TimerInterrupt_1ms+0x44>
			gw1msCounter--;
 8003282:	6813      	ldr	r3, [r2, #0]
 8003284:	3b01      	subs	r3, #1
 8003286:	6013      	str	r3, [r2, #0]
	}
}
 8003288:	b001      	add	sp, #4
 800328a:	bd00      	pop	{pc}
 800328c:	20000014 	.word	0x20000014
 8003290:	20000008 	.word	0x20000008
 8003294:	20000120 	.word	0x20000120

08003298 <Timer_Configuration>:
	USART_SendData(USART3,bTxdData);
	while( USART_GetFlagStatus(USART3, USART_FLAG_TC)==RESET );
}

void Timer_Configuration(void)
{
 8003298:	b570      	push	{r4, r5, r6, lr}
 800329a:	b088      	sub	sp, #32
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;

	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 800329c:	f10d 0516 	add.w	r5, sp, #22	; 0x16
 80032a0:	4628      	mov	r0, r5
	TIM_OCStructInit(&TIM_OCInitStructure);
 80032a2:	f10d 0606 	add.w	r6, sp, #6	; 0x6

	TIM_DeInit(TIM2);
 80032a6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
void Timer_Configuration(void)
{
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;

	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 80032aa:	f002 f87d 	bl	80053a8 <TIM_TimeBaseStructInit>
	TIM_OCStructInit(&TIM_OCInitStructure);
 80032ae:	4630      	mov	r0, r6
 80032b0:	f002 f886 	bl	80053c0 <TIM_OCStructInit>

	TIM_DeInit(TIM2);
 80032b4:	4620      	mov	r0, r4
 80032b6:	f002 fbdd 	bl	8005a74 <TIM_DeInit>

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = 65535;
 80032ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032be:	f8ad 301a 	strh.w	r3, [sp, #26]
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80032c2:	4620      	mov	r0, r4

	TIM_DeInit(TIM2);

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = 65535;
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80032c4:	f04f 0300 	mov.w	r3, #0	; 0x0
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80032c8:	4629      	mov	r1, r5

	TIM_DeInit(TIM2);

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = 65535;
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80032ca:	f8ad 3016 	strh.w	r3, [sp, #22]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80032ce:	f8ad 301c 	strh.w	r3, [sp, #28]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80032d2:	f8ad 3018 	strh.w	r3, [sp, #24]

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80032d6:	f001 fd6f 	bl	8004db8 <TIM_TimeBaseInit>

	/* Prescaler configuration */
	TIM_PrescalerConfig(TIM2, 722, TIM_PSCReloadMode_Immediate);
 80032da:	2201      	movs	r2, #1
 80032dc:	4620      	mov	r0, r4
 80032de:	f240 21d2 	movw	r1, #722	; 0x2d2
 80032e2:	f002 f95b 	bl	800559c <TIM_PrescalerConfig>

	/* Output Compare Timing Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
 80032e6:	f04f 0300 	mov.w	r3, #0	; 0x0
 80032ea:	f8ad 3006 	strh.w	r3, [sp, #6]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
 80032ee:	f8ad 3008 	strh.w	r3, [sp, #8]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80032f2:	f8ad 300e 	strh.w	r3, [sp, #14]
	TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 80032f6:	4b0b      	ldr	r3, [pc, #44]	(8003324 <Timer_Configuration+0x8c>)

	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 80032f8:	4620      	mov	r0, r4

	/* Output Compare Timing Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 80032fa:	881b      	ldrh	r3, [r3, #0]

	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 80032fc:	4631      	mov	r1, r6

	/* Output Compare Timing Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_Timing;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OCInitStructure.TIM_Pulse = CCR1_Val ;
 80032fe:	f8ad 300c 	strh.w	r3, [sp, #12]

	TIM_OC1Init(TIM2, &TIM_OCInitStructure);
 8003302:	f001 fd83 	bl	8004e0c <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Disable);
 8003306:	4620      	mov	r0, r4
 8003308:	2100      	movs	r1, #0
 800330a:	f002 f9db 	bl	80056c4 <TIM_OC1PreloadConfig>

	/* TIM IT enable */
	TIM_ITConfig(TIM2, TIM_IT_CC1, ENABLE);
 800330e:	4620      	mov	r0, r4
 8003310:	2102      	movs	r1, #2
 8003312:	2201      	movs	r2, #1
 8003314:	f002 f892 	bl	800543c <TIM_ITConfig>

	/* TIM2 enable counter */
	TIM_Cmd(TIM2, ENABLE);
 8003318:	4620      	mov	r0, r4
 800331a:	2101      	movs	r1, #1
 800331c:	f002 f872 	bl	8005404 <TIM_Cmd>
}
 8003320:	b008      	add	sp, #32
 8003322:	bd70      	pop	{r4, r5, r6, pc}
 8003324:	20000008 	.word	0x20000008

08003328 <TxDByte_PC>:
		bTmp += 7;
	TxDByte_PC(bTmp);
}

void TxDByte_PC(byte bTxdData)
{
 8003328:	b500      	push	{lr}
	USART_SendData(USART3,bTxdData);
 800332a:	b281      	uxth	r1, r0
		bTmp += 7;
	TxDByte_PC(bTmp);
}

void TxDByte_PC(byte bTxdData)
{
 800332c:	b081      	sub	sp, #4
	USART_SendData(USART3,bTxdData);
 800332e:	4805      	ldr	r0, [pc, #20]	(8003344 <TxDByte_PC+0x1c>)
 8003330:	f002 fcac 	bl	8005c8c <USART_SendData>
	while( USART_GetFlagStatus(USART3, USART_FLAG_TC)==RESET );
 8003334:	4803      	ldr	r0, [pc, #12]	(8003344 <TxDByte_PC+0x1c>)
 8003336:	2140      	movs	r1, #64
 8003338:	f002 fd0e 	bl	8005d58 <USART_GetFlagStatus>
 800333c:	2800      	cmp	r0, #0
 800333e:	d0f9      	beq.n	8003334 <TxDByte_PC+0xc>
}
 8003340:	b001      	add	sp, #4
 8003342:	bd00      	pop	{pc}
 8003344:	40004800 	.word	0x40004800

08003348 <TxDByte16>:

void TxDByte16(byte bSentData)
{
	byte bTmp;

	bTmp = ((byte) (bSentData >> 4) & 0x0f) + (byte) '0';
 8003348:	0903      	lsrs	r3, r0, #4
	TxDByte16((wSentData >> 8) & 0xff);
	TxDByte16(wSentData & 0xff);
}

void TxDByte16(byte bSentData)
{
 800334a:	b510      	push	{r4, lr}
 800334c:	4604      	mov	r4, r0
	byte bTmp;

	bTmp = ((byte) (bSentData >> 4) & 0x0f) + (byte) '0';
 800334e:	f103 0030 	add.w	r0, r3, #48	; 0x30
	if (bTmp > '9')
 8003352:	2839      	cmp	r0, #57
		bTmp += 7;
 8003354:	bf88      	it	hi
 8003356:	3007      	addhi	r0, #7
	TxDByte_PC(bTmp);
 8003358:	f7ff ffe6 	bl	8003328 <TxDByte_PC>
	bTmp = (byte) (bSentData & 0x0f) + (byte) '0';
 800335c:	f004 030f 	and.w	r3, r4, #15	; 0xf
 8003360:	f103 0030 	add.w	r0, r3, #48	; 0x30
	if (bTmp > '9')
 8003364:	2839      	cmp	r0, #57
		bTmp += 7;
 8003366:	bf88      	it	hi
 8003368:	3007      	addhi	r0, #7
	TxDByte_PC(bTmp);
 800336a:	f7ff ffdd 	bl	8003328 <TxDByte_PC>
}
 800336e:	bd10      	pop	{r4, pc}

08003370 <TxDWord16>:
	while (*bData)
		TxDByte_PC(*bData++);
}

void TxDWord16(word wSentData)
{
 8003370:	b510      	push	{r4, lr}
 8003372:	4604      	mov	r4, r0
	TxDByte16((wSentData >> 8) & 0xff);
	TxDByte16(wSentData & 0xff);
 8003374:	b2e4      	uxtb	r4, r4
		TxDByte_PC(*bData++);
}

void TxDWord16(word wSentData)
{
	TxDByte16((wSentData >> 8) & 0xff);
 8003376:	0a00      	lsrs	r0, r0, #8
 8003378:	f7ff ffe6 	bl	8003348 <TxDByte16>
	TxDByte16(wSentData & 0xff);
 800337c:	4620      	mov	r0, r4
 800337e:	f7ff ffe3 	bl	8003348 <TxDByte16>
}
 8003382:	bd10      	pop	{r4, pc}

08003384 <TxDString>:
	if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
		TxDString("Instruction code error!\n");
}

void TxDString(byte *bData)
{
 8003384:	b530      	push	{r4, r5, lr}
 8003386:	4605      	mov	r5, r0
 8003388:	b081      	sub	sp, #4
 800338a:	2400      	movs	r4, #0
 800338c:	e001      	b.n	8003392 <TxDString+0xe>
	while (*bData)
		TxDByte_PC(*bData++);
 800338e:	f7ff ffcb 	bl	8003328 <TxDByte_PC>
		TxDString("Instruction code error!\n");
}

void TxDString(byte *bData)
{
	while (*bData)
 8003392:	5d28      	ldrb	r0, [r5, r4]
 8003394:	3401      	adds	r4, #1
 8003396:	2800      	cmp	r0, #0
 8003398:	d1f9      	bne.n	800338e <TxDString+0xa>
		TxDByte_PC(*bData++);
}
 800339a:	b001      	add	sp, #4
 800339c:	bd30      	pop	{r4, r5, pc}
 800339e:	46c0      	nop			(mov r8, r8)

080033a0 <PrintCommStatus>:
}


// Print communication result
void PrintCommStatus(int CommStatus)
{
 80033a0:	b500      	push	{lr}
	switch(CommStatus)
 80033a2:	3802      	subs	r0, #2
}


// Print communication result
void PrintCommStatus(int CommStatus)
{
 80033a4:	b081      	sub	sp, #4
	switch(CommStatus)
 80033a6:	2805      	cmp	r0, #5
 80033a8:	d810      	bhi.n	80033cc <PrintCommStatus+0x2c>
 80033aa:	e8df f000 	tbb	[pc, r0]
 80033ae:	0703      	.short	0x0703
 80033b0:	0d0b0905 	.word	0x0d0b0905
	{
	case COMM_TXFAIL:
		TxDString("COMM_TXFAIL: Failed transmit instruction packet!\n");
 80033b4:	4808      	ldr	r0, [pc, #32]	(80033d8 <PrintCommStatus+0x38>)
 80033b6:	e00a      	b.n	80033ce <PrintCommStatus+0x2e>
		break;

	case COMM_TXERROR:
		TxDString("COMM_TXERROR: Incorrect instruction packet!\n");
 80033b8:	4808      	ldr	r0, [pc, #32]	(80033dc <PrintCommStatus+0x3c>)
 80033ba:	e008      	b.n	80033ce <PrintCommStatus+0x2e>
		break;

	case COMM_RXFAIL:
		TxDString("COMM_RXFAIL: Failed get status packet from device!\n");
 80033bc:	4808      	ldr	r0, [pc, #32]	(80033e0 <PrintCommStatus+0x40>)
 80033be:	e006      	b.n	80033ce <PrintCommStatus+0x2e>
		break;

	case COMM_RXWAITING:
		TxDString("COMM_RXWAITING: Now recieving status packet!\n");
 80033c0:	4808      	ldr	r0, [pc, #32]	(80033e4 <PrintCommStatus+0x44>)
 80033c2:	e004      	b.n	80033ce <PrintCommStatus+0x2e>
		break;

	case COMM_RXTIMEOUT:
		TxDString("COMM_RXTIMEOUT: There is no status packet!\n");
 80033c4:	4808      	ldr	r0, [pc, #32]	(80033e8 <PrintCommStatus+0x48>)
 80033c6:	e002      	b.n	80033ce <PrintCommStatus+0x2e>
		break;

	case COMM_RXCORRUPT:
		TxDString("COMM_RXCORRUPT: Incorrect status packet!\n");
 80033c8:	4808      	ldr	r0, [pc, #32]	(80033ec <PrintCommStatus+0x4c>)
 80033ca:	e000      	b.n	80033ce <PrintCommStatus+0x2e>
		break;

	default:
		TxDString("This is unknown error code!\n");
 80033cc:	4808      	ldr	r0, [pc, #32]	(80033f0 <PrintCommStatus+0x50>)
 80033ce:	f7ff ffd9 	bl	8003384 <TxDString>
		break;
	}
}
 80033d2:	b001      	add	sp, #4
 80033d4:	bd00      	pop	{pc}
 80033d6:	46c0      	nop			(mov r8, r8)
 80033d8:	08005fd4 	.word	0x08005fd4
 80033dc:	08006006 	.word	0x08006006
 80033e0:	08006033 	.word	0x08006033
 80033e4:	08006067 	.word	0x08006067
 80033e8:	08006095 	.word	0x08006095
 80033ec:	080060c1 	.word	0x080060c1
 80033f0:	080060eb 	.word	0x080060eb

080033f4 <PrintErrorCode>:

// Print error bit of status packet
void PrintErrorCode()
{
 80033f4:	b500      	push	{lr}
	if(dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
 80033f6:	2001      	movs	r0, #1
	}
}

// Print error bit of status packet
void PrintErrorCode()
{
 80033f8:	b081      	sub	sp, #4
	if(dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
 80033fa:	f000 fac7 	bl	800398c <dxl_get_rxpacket_error>
 80033fe:	2801      	cmp	r0, #1
 8003400:	d102      	bne.n	8003408 <PrintErrorCode+0x14>
		TxDString("Input voltage error!\n");
 8003402:	481a      	ldr	r0, [pc, #104]	(800346c <PrintErrorCode+0x78>)
 8003404:	f7ff ffbe 	bl	8003384 <TxDString>

	if(dxl_get_rxpacket_error(ERRBIT_ANGLE) == 1)
 8003408:	2002      	movs	r0, #2
 800340a:	f000 fabf 	bl	800398c <dxl_get_rxpacket_error>
 800340e:	2801      	cmp	r0, #1
 8003410:	d102      	bne.n	8003418 <PrintErrorCode+0x24>
		TxDString("Angle limit error!\n");
 8003412:	4817      	ldr	r0, [pc, #92]	(8003470 <PrintErrorCode+0x7c>)
 8003414:	f7ff ffb6 	bl	8003384 <TxDString>

	if(dxl_get_rxpacket_error(ERRBIT_OVERHEAT) == 1)
 8003418:	2004      	movs	r0, #4
 800341a:	f000 fab7 	bl	800398c <dxl_get_rxpacket_error>
 800341e:	2801      	cmp	r0, #1
 8003420:	d102      	bne.n	8003428 <PrintErrorCode+0x34>
		TxDString("Overheat error!\n");
 8003422:	4814      	ldr	r0, [pc, #80]	(8003474 <PrintErrorCode+0x80>)
 8003424:	f7ff ffae 	bl	8003384 <TxDString>

	if(dxl_get_rxpacket_error(ERRBIT_RANGE) == 1)
 8003428:	2008      	movs	r0, #8
 800342a:	f000 faaf 	bl	800398c <dxl_get_rxpacket_error>
 800342e:	2801      	cmp	r0, #1
 8003430:	d102      	bne.n	8003438 <PrintErrorCode+0x44>
		TxDString("Out of range error!\n");
 8003432:	4811      	ldr	r0, [pc, #68]	(8003478 <PrintErrorCode+0x84>)
 8003434:	f7ff ffa6 	bl	8003384 <TxDString>

	if(dxl_get_rxpacket_error(ERRBIT_CHECKSUM) == 1)
 8003438:	2010      	movs	r0, #16
 800343a:	f000 faa7 	bl	800398c <dxl_get_rxpacket_error>
 800343e:	2801      	cmp	r0, #1
 8003440:	d102      	bne.n	8003448 <PrintErrorCode+0x54>
		TxDString("Checksum error!\n");
 8003442:	480e      	ldr	r0, [pc, #56]	(800347c <PrintErrorCode+0x88>)
 8003444:	f7ff ff9e 	bl	8003384 <TxDString>

	if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
 8003448:	2020      	movs	r0, #32
 800344a:	f000 fa9f 	bl	800398c <dxl_get_rxpacket_error>
 800344e:	2801      	cmp	r0, #1
 8003450:	d102      	bne.n	8003458 <PrintErrorCode+0x64>
		TxDString("Overload error!\n");
 8003452:	480b      	ldr	r0, [pc, #44]	(8003480 <PrintErrorCode+0x8c>)
 8003454:	f7ff ff96 	bl	8003384 <TxDString>

	if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
 8003458:	2040      	movs	r0, #64
 800345a:	f000 fa97 	bl	800398c <dxl_get_rxpacket_error>
 800345e:	2801      	cmp	r0, #1
 8003460:	d102      	bne.n	8003468 <PrintErrorCode+0x74>
		TxDString("Instruction code error!\n");
 8003462:	4808      	ldr	r0, [pc, #32]	(8003484 <PrintErrorCode+0x90>)
 8003464:	f7ff ff8e 	bl	8003384 <TxDString>
}
 8003468:	b001      	add	sp, #4
 800346a:	bd00      	pop	{pc}
 800346c:	08006108 	.word	0x08006108
 8003470:	0800611e 	.word	0x0800611e
 8003474:	08006132 	.word	0x08006132
 8003478:	08006143 	.word	0x08006143
 800347c:	08006158 	.word	0x08006158
 8003480:	08006169 	.word	0x08006169
 8003484:	0800617a 	.word	0x0800617a

08003488 <TxDByte_DXL>:
	else
		return 0;
}

void TxDByte_DXL(byte bTxdData)
{
 8003488:	b510      	push	{r4, lr}
	GPIO_ResetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Disable
 800348a:	2120      	movs	r1, #32
	else
		return 0;
}

void TxDByte_DXL(byte bTxdData)
{
 800348c:	4604      	mov	r4, r0
	GPIO_ResetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Disable
 800348e:	480d      	ldr	r0, [pc, #52]	(80034c4 <TxDByte_DXL+0x3c>)
 8003490:	f000 ff6a 	bl	8004368 <GPIO_ResetBits>
	GPIO_SetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Enable

	USART_SendData(USART1,bTxdData);
 8003494:	b2a4      	uxth	r4, r4
}

void TxDByte_DXL(byte bTxdData)
{
	GPIO_ResetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Disable
	GPIO_SetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Enable
 8003496:	480b      	ldr	r0, [pc, #44]	(80034c4 <TxDByte_DXL+0x3c>)
 8003498:	2110      	movs	r1, #16
 800349a:	f000 ff63 	bl	8004364 <GPIO_SetBits>

	USART_SendData(USART1,bTxdData);
 800349e:	480a      	ldr	r0, [pc, #40]	(80034c8 <TxDByte_DXL+0x40>)
 80034a0:	4621      	mov	r1, r4
 80034a2:	f002 fbf3 	bl	8005c8c <USART_SendData>
	while( USART_GetFlagStatus(USART1, USART_FLAG_TC)==RESET );
 80034a6:	4808      	ldr	r0, [pc, #32]	(80034c8 <TxDByte_DXL+0x40>)
 80034a8:	2140      	movs	r1, #64
 80034aa:	f002 fc55 	bl	8005d58 <USART_GetFlagStatus>
 80034ae:	2800      	cmp	r0, #0
 80034b0:	d0f9      	beq.n	80034a6 <TxDByte_DXL+0x1e>

	GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
 80034b2:	2110      	movs	r1, #16
 80034b4:	4803      	ldr	r0, [pc, #12]	(80034c4 <TxDByte_DXL+0x3c>)
 80034b6:	f000 ff57 	bl	8004368 <GPIO_ResetBits>
	GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
 80034ba:	4802      	ldr	r0, [pc, #8]	(80034c4 <TxDByte_DXL+0x3c>)
 80034bc:	2120      	movs	r1, #32
 80034be:	f000 ff51 	bl	8004364 <GPIO_SetBits>
}
 80034c2:	bd10      	pop	{r4, pc}
 80034c4:	40010c00 	.word	0x40010c00
 80034c8:	40013800 	.word	0x40013800

080034cc <DisableUSART1>:
		USART_Cmd(USART3, ENABLE);
	}
}

void DisableUSART1(void)
{
 80034cc:	b500      	push	{lr}
	USART_Cmd(USART1, DISABLE);
 80034ce:	4803      	ldr	r0, [pc, #12]	(80034dc <DisableUSART1+0x10>)
		USART_Cmd(USART3, ENABLE);
	}
}

void DisableUSART1(void)
{
 80034d0:	b081      	sub	sp, #4
	USART_Cmd(USART1, DISABLE);
 80034d2:	2100      	movs	r1, #0
 80034d4:	f002 fb60 	bl	8005b98 <USART_Cmd>
}
 80034d8:	b001      	add	sp, #4
 80034da:	bd00      	pop	{pc}
 80034dc:	40013800 	.word	0x40013800

080034e0 <USART_Configuration>:
{
	USART_Configuration(USART_DXL, baudrate);
}

void USART_Configuration(u8 PORT, u32 baudrate)
{
 80034e0:	b570      	push	{r4, r5, r6, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	4605      	mov	r5, r0

	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 80034e6:	4668      	mov	r0, sp
{
	USART_Configuration(USART_DXL, baudrate);
}

void USART_Configuration(u8 PORT, u32 baudrate)
{
 80034e8:	460c      	mov	r4, r1

	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 80034ea:	f002 fb29 	bl	8005b40 <USART_StructInit>


	USART_InitStructure.USART_BaudRate = baudrate;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80034ee:	f04f 0300 	mov.w	r3, #0	; 0x0
 80034f2:	f8ad 3004 	strh.w	r3, [sp, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80034f6:	f8ad 3006 	strh.w	r3, [sp, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No ;
 80034fa:	f8ad 3008 	strh.w	r3, [sp, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80034fe:	f8ad 300c 	strh.w	r3, [sp, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003502:	f04f 030c 	mov.w	r3, #12	; 0xc
void USART_Configuration(u8 PORT, u32 baudrate)
{

	USART_InitTypeDef USART_InitStructure;

	USART_StructInit(&USART_InitStructure);
 8003506:	466e      	mov	r6, sp


	USART_InitStructure.USART_BaudRate = baudrate;
 8003508:	9400      	str	r4, [sp, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No ;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800350a:	f8ad 300a 	strh.w	r3, [sp, #10]


	if( PORT == USART_DXL )
 800350e:	b98d      	cbnz	r5, 8003534 <USART_Configuration+0x54>
	{
		USART_DeInit(USART1);
 8003510:	4811      	ldr	r0, [pc, #68]	(8003558 <USART_Configuration+0x78>)
 8003512:	f002 fca9 	bl	8005e68 <USART_DeInit>
		mDelay(10);
 8003516:	200a      	movs	r0, #10
 8003518:	f7ff fe56 	bl	80031c8 <mDelay>
		/* Configure the USART1 */
		USART_Init(USART1, &USART_InitStructure);
 800351c:	480e      	ldr	r0, [pc, #56]	(8003558 <USART_Configuration+0x78>)
 800351e:	4669      	mov	r1, sp
 8003520:	f002 fc54 	bl	8005dcc <USART_Init>

		/* Enable USART1 Receive and Transmit interrupts */
		USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8003524:	480c      	ldr	r0, [pc, #48]	(8003558 <USART_Configuration+0x78>)
 8003526:	f240 5125 	movw	r1, #1317	; 0x525
 800352a:	2201      	movs	r2, #1
 800352c:	f002 fb42 	bl	8005bb4 <USART_ITConfig>
		//USART_ITConfig(USART1, USART_IT_TC, ENABLE);

		/* Enable the USART1 */
		USART_Cmd(USART1, ENABLE);
 8003530:	4809      	ldr	r0, [pc, #36]	(8003558 <USART_Configuration+0x78>)
 8003532:	e00c      	b.n	800354e <USART_Configuration+0x6e>
	}

	else if( PORT == USART_PC )
 8003534:	2d02      	cmp	r5, #2
 8003536:	d10d      	bne.n	8003554 <USART_Configuration+0x74>
	{
		USART_DeInit(USART3);
 8003538:	4808      	ldr	r0, [pc, #32]	(800355c <USART_Configuration+0x7c>)
 800353a:	f002 fc95 	bl	8005e68 <USART_DeInit>
		mDelay(10);
 800353e:	200a      	movs	r0, #10
 8003540:	f7ff fe42 	bl	80031c8 <mDelay>
		/* Configure the USART3 */
		USART_Init(USART3, &USART_InitStructure);
 8003544:	4805      	ldr	r0, [pc, #20]	(800355c <USART_Configuration+0x7c>)
 8003546:	4669      	mov	r1, sp
 8003548:	f002 fc40 	bl	8005dcc <USART_Init>
		/* Enable USART3 Receive and Transmit interrupts */
		//USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
		//USART_ITConfig(USART3, USART_IT_TC, ENABLE);

		/* Enable the USART3 */
		USART_Cmd(USART3, ENABLE);
 800354c:	4803      	ldr	r0, [pc, #12]	(800355c <USART_Configuration+0x7c>)
 800354e:	2101      	movs	r1, #1
 8003550:	f002 fb22 	bl	8005b98 <USART_Cmd>
	}
}
 8003554:	b004      	add	sp, #16
 8003556:	bd70      	pop	{r4, r5, r6, pc}
 8003558:	40013800 	.word	0x40013800
 800355c:	40004800 	.word	0x40004800

08003560 <USART1_Configuration>:
	GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
	GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
}

void USART1_Configuration(u32 baudrate)
{
 8003560:	b500      	push	{lr}
 8003562:	4601      	mov	r1, r0
 8003564:	b081      	sub	sp, #4
	USART_Configuration(USART_DXL, baudrate);
 8003566:	2000      	movs	r0, #0
 8003568:	f7ff ffba 	bl	80034e0 <USART_Configuration>
}
 800356c:	b001      	add	sp, #4
 800356e:	bd00      	pop	{pc}

08003570 <GPIO_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Configuration(void)
{
 8003570:	b570      	push	{r4, r5, r6, lr}
 8003572:	b082      	sub	sp, #8
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);
 8003574:	ad01      	add	r5, sp, #4

	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003576:	4c1e      	ldr	r4, [pc, #120]	(80035f0 <GPIO_Configuration+0x80>)
* Return         : None
*******************************************************************************/
void GPIO_Configuration(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);
 8003578:	4628      	mov	r0, r5
 800357a:	f000 fed7 	bl	800432c <GPIO_StructInit>

	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
 800357e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003582:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003586:	2603      	movs	r6, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003588:	2310      	movs	r3, #16
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800358a:	4620      	mov	r0, r4
 800358c:	4629      	mov	r1, r5
	GPIO_StructInit(&GPIO_InitStructure);

	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800358e:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);

	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = 	PIN_ENABLE_TXD | PIN_ENABLE_RXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003592:	f88d 6006 	strb.w	r6, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003596:	f000 fe75 	bl	8004284 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
 800359a:	f44f 6308 	mov.w	r3, #2176	; 0x880
 800359e:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80035a2:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80035a4:	2304      	movs	r3, #4
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80035a6:	4629      	mov	r1, r5
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80035a8:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80035ac:	f000 fe6a 	bl	8004284 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
 80035b0:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80035b4:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80035b8:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80035ba:	2318      	movs	r3, #24
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80035bc:	4629      	mov	r1, r5
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80035be:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80035c2:	f88d 6006 	strb.w	r6, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80035c6:	f000 fe5d 	bl	8004284 <GPIO_Init>

	GPIO_PinRemapConfig( GPIO_Remap_USART1, ENABLE);
 80035ca:	2004      	movs	r0, #4
 80035cc:	2101      	movs	r1, #1
 80035ce:	f000 fef3 	bl	80043b8 <GPIO_PinRemapConfig>
	GPIO_PinRemapConfig( GPIO_Remap_SWJ_Disable, ENABLE);
 80035d2:	2101      	movs	r1, #1
 80035d4:	4807      	ldr	r0, [pc, #28]	(80035f4 <GPIO_Configuration+0x84>)
 80035d6:	f000 feef 	bl	80043b8 <GPIO_PinRemapConfig>

	GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);	// TX Disable
 80035da:	4620      	mov	r0, r4
 80035dc:	2110      	movs	r1, #16
 80035de:	f000 fec3 	bl	8004368 <GPIO_ResetBits>
	GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);	// RX Enable
 80035e2:	4620      	mov	r0, r4
 80035e4:	2120      	movs	r1, #32
 80035e6:	f000 febd 	bl	8004364 <GPIO_SetBits>
}
 80035ea:	b002      	add	sp, #8
 80035ec:	bd70      	pop	{r4, r5, r6, pc}
 80035ee:	46c0      	nop			(mov r8, r8)
 80035f0:	40010c00 	.word	0x40010c00
 80035f4:	00300400 	.word	0x00300400

080035f8 <NVIC_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Configuration(void)
{
 80035f8:	b570      	push	{r4, r5, r6, lr}
	#ifdef  VECT_TAB_RAM
		// Set the Vector Table base location at 0x20000000
		NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
	#else  // VECT_TAB_FLASH
		// Set the Vector Table base location at 0x08003000
		NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 80035fa:	f44f 5140 	mov.w	r1, #12288	; 0x3000
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Configuration(void)
{
 80035fe:	b082      	sub	sp, #8
	#ifdef  VECT_TAB_RAM
		// Set the Vector Table base location at 0x20000000
		NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
	#else  // VECT_TAB_FLASH
		// Set the Vector Table base location at 0x08003000
		NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 8003600:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003604:	f001 f852 	bl	80046ac <NVIC_SetVectorTable>
	// Enable the USART1 Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8003608:	ae01      	add	r6, sp, #4
		// Set the Vector Table base location at 0x08003000
		NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
	#endif

	// Configure the NVIC Preemption Priority Bits
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 800360a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800360e:	f000 ffaf 	bl	8004570 <NVIC_PriorityGroupConfig>

	// Enable the USART1 Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003612:	2500      	movs	r5, #0

	// Configure the NVIC Preemption Priority Bits
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

	// Enable the USART1 Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 8003614:	2325      	movs	r3, #37
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003616:	2401      	movs	r4, #1
	NVIC_Init(&NVIC_InitStructure);
 8003618:	4630      	mov	r0, r6

	// Configure the NVIC Preemption Priority Bits
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);

	// Enable the USART1 Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 800361a:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800361e:	f88d 5005 	strb.w	r5, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8003622:	f88d 5006 	strb.w	r5, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003626:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 800362a:	f000 ffab 	bl	8004584 <NVIC_Init>

	// Enable the TIM2 Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
 800362e:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8003630:	4630      	mov	r0, r6
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	// Enable the TIM2 Interrupt
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQChannel;
 8003632:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8003636:	f88d 4005 	strb.w	r4, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800363a:	f88d 5006 	strb.w	r5, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800363e:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 8003642:	f000 ff9f 	bl	8004584 <NVIC_Init>
}
 8003646:	b002      	add	sp, #8
 8003648:	bd70      	pop	{r4, r5, r6, pc}
 800364a:	46c0      	nop			(mov r8, r8)

0800364c <RCC_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_Configuration(void)
{
 800364c:	b500      	push	{lr}
 800364e:	b081      	sub	sp, #4
	ErrorStatus HSEStartUpStatus;
	/* RCC system reset(for debug purpose) */
	RCC_DeInit();
 8003650:	f001 f98e 	bl	8004970 <RCC_DeInit>

	/* Enable HSE */
	RCC_HSEConfig(RCC_HSE_ON);
 8003654:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003658:	f001 f9aa 	bl	80049b0 <RCC_HSEConfig>

	/* Wait till HSE is ready */
	HSEStartUpStatus = RCC_WaitForHSEStartUp();
 800365c:	f001 f9c2 	bl	80049e4 <RCC_WaitForHSEStartUp>

	if(HSEStartUpStatus == SUCCESS)
 8003660:	2801      	cmp	r0, #1
 8003662:	d124      	bne.n	80036ae <RCC_Configuration+0x62>
	{
		/* Enable Prefetch Buffer */
		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8003664:	2010      	movs	r0, #16
 8003666:	f000 fb91 	bl	8003d8c <FLASH_PrefetchBufferCmd>

		/* Flash 2 wait state */
		FLASH_SetLatency(FLASH_Latency_2);
 800366a:	2002      	movs	r0, #2
 800366c:	f000 fb76 	bl	8003d5c <FLASH_SetLatency>

		/* HCLK = SYSCLK */
		RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8003670:	2000      	movs	r0, #0
 8003672:	f001 fa01 	bl	8004a78 <RCC_HCLKConfig>

		/* PCLK2 = HCLK */
		RCC_PCLK2Config(RCC_HCLK_Div1);
 8003676:	2000      	movs	r0, #0
 8003678:	f001 fa12 	bl	8004aa0 <RCC_PCLK2Config>

		/* PCLK1 = HCLK/2 */
		RCC_PCLK1Config(RCC_HCLK_Div2);
 800367c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003680:	f001 fa04 	bl	8004a8c <RCC_PCLK1Config>

		/* PLLCLK = 8MHz * 9 = 72 MHz */
		RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8003684:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003688:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 800368c:	f001 f9d2 	bl	8004a34 <RCC_PLLConfig>

		/* Enable PLL */
		RCC_PLLCmd(ENABLE);
 8003690:	2001      	movs	r0, #1
 8003692:	f001 f9d9 	bl	8004a48 <RCC_PLLCmd>

		/* Wait till PLL is ready */
		while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
 8003696:	2039      	movs	r0, #57
 8003698:	f001 fb02 	bl	8004ca0 <RCC_GetFlagStatus>
 800369c:	2800      	cmp	r0, #0
 800369e:	d0fa      	beq.n	8003696 <RCC_Configuration+0x4a>
		{
		}

		/* Select PLL as system clock source */
		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80036a0:	2002      	movs	r0, #2
 80036a2:	f001 f9d7 	bl	8004a54 <RCC_SYSCLKConfig>

		/* Wait till PLL is used as system clock source */
		while(RCC_GetSYSCLKSource() != 0x08)
 80036a6:	f001 f9df 	bl	8004a68 <RCC_GetSYSCLKSource>
 80036aa:	2808      	cmp	r0, #8
 80036ac:	d1fb      	bne.n	80036a6 <RCC_Configuration+0x5a>
	}

	/* Enable peripheral clocks --------------------------------------------------*/

	/* Enable USART1 and GPIOB clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOB, ENABLE);
 80036ae:	2101      	movs	r1, #1
 80036b0:	f244 0008 	movw	r0, #16392	; 0x4008
 80036b4:	f001 faaa 	bl	8004c0c <RCC_APB2PeriphClockCmd>

	/* Enable USART3 clocks */
	RCC_APB1PeriphClockCmd ( RCC_APB1Periph_USART3 | RCC_APB1Periph_TIM2, ENABLE);
 80036b8:	4804      	ldr	r0, [pc, #16]	(80036cc <RCC_Configuration+0x80>)
 80036ba:	2101      	movs	r1, #1
 80036bc:	f001 fab4 	bl	8004c28 <RCC_APB1PeriphClockCmd>

	PWR_BackupAccessCmd(ENABLE);
 80036c0:	2001      	movs	r0, #1
 80036c2:	f001 f8e5 	bl	8004890 <PWR_BackupAccessCmd>
}
 80036c6:	b001      	add	sp, #4
 80036c8:	bd00      	pop	{pc}
 80036ca:	46c0      	nop			(mov r8, r8)
 80036cc:	00040001 	.word	0x00040001

080036d0 <main>:
* Output         : None
* Return         : None
*******************************************************************************/

int main(void)
{
 80036d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036d2:	b081      	sub	sp, #4
    /* System Clocks Configuration */
	RCC_Configuration();
 80036d4:	f7ff ffba 	bl	800364c <RCC_Configuration>

	/* NVIC configuration */
	NVIC_Configuration();
 80036d8:	f7ff ff8e 	bl	80035f8 <NVIC_Configuration>

	/* GPIO configuration */
	GPIO_Configuration();
 80036dc:	f7ff ff48 	bl	8003570 <GPIO_Configuration>

	SysTick_Configuration();
 80036e0:	f7ff fd88 	bl	80031f4 <SysTick_Configuration>

	Timer_Configuration();
 80036e4:	f7ff fdd8 	bl	8003298 <Timer_Configuration>

	dxl_initialize( 0, 1 );
 80036e8:	2101      	movs	r1, #1
 80036ea:	2000      	movs	r0, #0
 80036ec:	f000 fb1c 	bl	8003d28 <dxl_initialize>
	USART_Configuration(USART_PC, Baudrate_PC);
 80036f0:	4b21      	ldr	r3, [pc, #132]	(8003778 <main+0xa8>)
 80036f2:	2002      	movs	r0, #2
 80036f4:	6819      	ldr	r1, [r3, #0]
 80036f6:	f7ff fef3 	bl	80034e0 <USART_Configuration>

	while(1)
	{
		bMoving = dxl_read_byte( id, P_MOVING );
 80036fa:	4c20      	ldr	r4, [pc, #128]	(800377c <main+0xac>)
 80036fc:	4e20      	ldr	r6, [pc, #128]	(8003780 <main+0xb0>)
		CommStatus = dxl_get_result();
 80036fe:	4f21      	ldr	r7, [pc, #132]	(8003784 <main+0xb4>)
			}

			PrintErrorCode();

			// Read present position
			wPresentPos = dxl_read_word( id, P_PRESENT_POSITION_L );
 8003700:	4d21      	ldr	r5, [pc, #132]	(8003788 <main+0xb8>)
	dxl_initialize( 0, 1 );
	USART_Configuration(USART_PC, Baudrate_PC);

	while(1)
	{
		bMoving = dxl_read_byte( id, P_MOVING );
 8003702:	212e      	movs	r1, #46
 8003704:	7820      	ldrb	r0, [r4, #0]
 8003706:	f000 fad9 	bl	8003cbc <dxl_read_byte>
 800370a:	7030      	strb	r0, [r6, #0]
		CommStatus = dxl_get_result();
 800370c:	f000 f920 	bl	8003950 <dxl_get_result>
 8003710:	b2c0      	uxtb	r0, r0
		if( CommStatus == COMM_RXSUCCESS )
 8003712:	2801      	cmp	r0, #1
	USART_Configuration(USART_PC, Baudrate_PC);

	while(1)
	{
		bMoving = dxl_read_byte( id, P_MOVING );
		CommStatus = dxl_get_result();
 8003714:	7038      	strb	r0, [r7, #0]
		if( CommStatus == COMM_RXSUCCESS )
 8003716:	d12b      	bne.n	8003770 <main+0xa0>
		{
			if( bMoving == 0 )
 8003718:	7831      	ldrb	r1, [r6, #0]
 800371a:	b971      	cbnz	r1, 800373a <main+0x6a>
			{
				// Change goal position
				if( INDEX == 0 )
 800371c:	4a1b      	ldr	r2, [pc, #108]	(800378c <main+0xbc>)
 800371e:	7813      	ldrb	r3, [r2, #0]
 8003720:	b90b      	cbnz	r3, 8003726 <main+0x56>
					INDEX = 1;
 8003722:	7010      	strb	r0, [r2, #0]
 8003724:	e000      	b.n	8003728 <main+0x58>
				else
					INDEX = 0;
 8003726:	7011      	strb	r1, [r2, #0]

				// Write goal position
				dxl_write_word( id, P_GOAL_POSITION_L, GoalPos[INDEX] );
 8003728:	4b18      	ldr	r3, [pc, #96]	(800378c <main+0xbc>)
 800372a:	7820      	ldrb	r0, [r4, #0]
 800372c:	781a      	ldrb	r2, [r3, #0]
 800372e:	4b18      	ldr	r3, [pc, #96]	(8003790 <main+0xc0>)
 8003730:	211e      	movs	r1, #30
 8003732:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003736:	f000 fa6f 	bl	8003c18 <dxl_write_word>
			}

			PrintErrorCode();
 800373a:	f7ff fe5b 	bl	80033f4 <PrintErrorCode>

			// Read present position
			wPresentPos = dxl_read_word( id, P_PRESENT_POSITION_L );
 800373e:	2124      	movs	r1, #36
 8003740:	7820      	ldrb	r0, [r4, #0]
 8003742:	f000 fa85 	bl	8003c50 <dxl_read_word>
			TxDWord16(GoalPos[INDEX]);
 8003746:	4b11      	ldr	r3, [pc, #68]	(800378c <main+0xbc>)
			}

			PrintErrorCode();

			// Read present position
			wPresentPos = dxl_read_word( id, P_PRESENT_POSITION_L );
 8003748:	8028      	strh	r0, [r5, #0]
			TxDWord16(GoalPos[INDEX]);
 800374a:	781a      	ldrb	r2, [r3, #0]
 800374c:	4b10      	ldr	r3, [pc, #64]	(8003790 <main+0xc0>)
 800374e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8003752:	f7ff fe0d 	bl	8003370 <TxDWord16>
			TxDString("   ");
 8003756:	480f      	ldr	r0, [pc, #60]	(8003794 <main+0xc4>)
 8003758:	f7ff fe14 	bl	8003384 <TxDString>
			TxDWord16(wPresentPos);
 800375c:	8828      	ldrh	r0, [r5, #0]
 800375e:	f7ff fe07 	bl	8003370 <TxDWord16>
			TxDByte_PC('\r');
 8003762:	200d      	movs	r0, #13
 8003764:	f7ff fde0 	bl	8003328 <TxDByte_PC>
			TxDByte_PC('\n');
 8003768:	200a      	movs	r0, #10
 800376a:	f7ff fddd 	bl	8003328 <TxDByte_PC>
 800376e:	e7c8      	b.n	8003702 <main+0x32>
		}
		else
			PrintCommStatus(CommStatus);
 8003770:	f7ff fe16 	bl	80033a0 <PrintCommStatus>
 8003774:	e7c5      	b.n	8003702 <main+0x32>
 8003776:	46c0      	nop			(mov r8, r8)
 8003778:	20000004 	.word	0x20000004
 800377c:	2000000e 	.word	0x2000000e
 8003780:	20000129 	.word	0x20000129
 8003784:	2000012a 	.word	0x2000012a
 8003788:	20000126 	.word	0x20000126
 800378c:	20000018 	.word	0x20000018
 8003790:	2000000a 	.word	0x2000000a
 8003794:	08006193 	.word	0x08006193

08003798 <NMIException>:
* Output         : None
* Return         : None
*******************************************************************************/
void NMIException(void)
{
}
 8003798:	4770      	bx	lr
 800379a:	46c0      	nop			(mov r8, r8)

0800379c <HardFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFaultException(void)
{
 800379c:	e7fe      	b.n	800379c <HardFaultException>
 800379e:	46c0      	nop			(mov r8, r8)

080037a0 <MemManageException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManageException(void)
{
 80037a0:	e7fe      	b.n	80037a0 <MemManageException>
 80037a2:	46c0      	nop			(mov r8, r8)

080037a4 <BusFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFaultException(void)
{
 80037a4:	e7fe      	b.n	80037a4 <BusFaultException>
 80037a6:	46c0      	nop			(mov r8, r8)

080037a8 <UsageFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFaultException(void)
{
 80037a8:	e7fe      	b.n	80037a8 <UsageFaultException>
 80037aa:	46c0      	nop			(mov r8, r8)

080037ac <DebugMonitor>:
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMonitor(void)
{
}
 80037ac:	4770      	bx	lr
 80037ae:	46c0      	nop			(mov r8, r8)

080037b0 <SVCHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SVCHandler(void)
{
}
 80037b0:	4770      	bx	lr
 80037b2:	46c0      	nop			(mov r8, r8)

080037b4 <PendSVC>:
* Output         : None
* Return         : None
*******************************************************************************/
void PendSVC(void)
{
}
 80037b4:	4770      	bx	lr
 80037b6:	46c0      	nop			(mov r8, r8)

080037b8 <WWDG_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void WWDG_IRQHandler(void)
{
}
 80037b8:	4770      	bx	lr
 80037ba:	46c0      	nop			(mov r8, r8)

080037bc <PVD_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void PVD_IRQHandler(void)
{
}
 80037bc:	4770      	bx	lr
 80037be:	46c0      	nop			(mov r8, r8)

080037c0 <TAMPER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TAMPER_IRQHandler(void)
{
}
 80037c0:	4770      	bx	lr
 80037c2:	46c0      	nop			(mov r8, r8)

080037c4 <RTC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_IRQHandler(void)
{
}
 80037c4:	4770      	bx	lr
 80037c6:	46c0      	nop			(mov r8, r8)

080037c8 <FLASH_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_IRQHandler(void)
{
}
 80037c8:	4770      	bx	lr
 80037ca:	46c0      	nop			(mov r8, r8)

080037cc <RCC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_IRQHandler(void)
{
}
 80037cc:	4770      	bx	lr
 80037ce:	46c0      	nop			(mov r8, r8)

080037d0 <EXTI0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI0_IRQHandler(void)
{
}
 80037d0:	4770      	bx	lr
 80037d2:	46c0      	nop			(mov r8, r8)

080037d4 <EXTI1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI1_IRQHandler(void)
{
}
 80037d4:	4770      	bx	lr
 80037d6:	46c0      	nop			(mov r8, r8)

080037d8 <EXTI2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI2_IRQHandler(void)
{
}
 80037d8:	4770      	bx	lr
 80037da:	46c0      	nop			(mov r8, r8)

080037dc <EXTI3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void)
{
}
 80037dc:	4770      	bx	lr
 80037de:	46c0      	nop			(mov r8, r8)

080037e0 <EXTI4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void)
{
}
 80037e0:	4770      	bx	lr
 80037e2:	46c0      	nop			(mov r8, r8)

080037e4 <DMA1_Channel1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel1_IRQHandler(void)
{
}
 80037e4:	4770      	bx	lr
 80037e6:	46c0      	nop			(mov r8, r8)

080037e8 <DMA1_Channel2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel2_IRQHandler(void)
{
}
 80037e8:	4770      	bx	lr
 80037ea:	46c0      	nop			(mov r8, r8)

080037ec <DMA1_Channel3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel3_IRQHandler(void)
{
}
 80037ec:	4770      	bx	lr
 80037ee:	46c0      	nop			(mov r8, r8)

080037f0 <DMA1_Channel4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel4_IRQHandler(void)
{
}
 80037f0:	4770      	bx	lr
 80037f2:	46c0      	nop			(mov r8, r8)

080037f4 <DMA1_Channel5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel5_IRQHandler(void)
{
}
 80037f4:	4770      	bx	lr
 80037f6:	46c0      	nop			(mov r8, r8)

080037f8 <DMA1_Channel6_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel6_IRQHandler(void)
{
}
 80037f8:	4770      	bx	lr
 80037fa:	46c0      	nop			(mov r8, r8)

080037fc <DMA1_Channel7_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel7_IRQHandler(void)
{
}
 80037fc:	4770      	bx	lr
 80037fe:	46c0      	nop			(mov r8, r8)

08003800 <ADC1_2_IRQHandler>:
* Return         : None
*******************************************************************************/

void ADC1_2_IRQHandler(void)
{
}
 8003800:	4770      	bx	lr
 8003802:	46c0      	nop			(mov r8, r8)

08003804 <USB_HP_CAN_TX_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
}
 8003804:	4770      	bx	lr
 8003806:	46c0      	nop			(mov r8, r8)

08003808 <USB_LP_CAN_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void)
{
}
 8003808:	4770      	bx	lr
 800380a:	46c0      	nop			(mov r8, r8)

0800380c <CAN_RX1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_RX1_IRQHandler(void)
{
}
 800380c:	4770      	bx	lr
 800380e:	46c0      	nop			(mov r8, r8)

08003810 <CAN_SCE_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_SCE_IRQHandler(void)
{
}
 8003810:	4770      	bx	lr
 8003812:	46c0      	nop			(mov r8, r8)

08003814 <EXTI9_5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI9_5_IRQHandler(void)
{
}
 8003814:	4770      	bx	lr
 8003816:	46c0      	nop			(mov r8, r8)

08003818 <TIM1_BRK_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_BRK_IRQHandler(void)
{
}
 8003818:	4770      	bx	lr
 800381a:	46c0      	nop			(mov r8, r8)

0800381c <TIM1_UP_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
}
 800381c:	4770      	bx	lr
 800381e:	46c0      	nop			(mov r8, r8)

08003820 <TIM1_TRG_COM_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void)
{
}
 8003820:	4770      	bx	lr
 8003822:	46c0      	nop			(mov r8, r8)

08003824 <TIM1_CC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_CC_IRQHandler(void)
{
}
 8003824:	4770      	bx	lr
 8003826:	46c0      	nop			(mov r8, r8)

08003828 <TIM3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM3_IRQHandler(void)
{
}
 8003828:	4770      	bx	lr
 800382a:	46c0      	nop			(mov r8, r8)

0800382c <TIM4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM4_IRQHandler(void)
{
}
 800382c:	4770      	bx	lr
 800382e:	46c0      	nop			(mov r8, r8)

08003830 <I2C1_EV_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
}
 8003830:	4770      	bx	lr
 8003832:	46c0      	nop			(mov r8, r8)

08003834 <I2C1_ER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_ER_IRQHandler(void)
{
}
 8003834:	4770      	bx	lr
 8003836:	46c0      	nop			(mov r8, r8)

08003838 <I2C2_EV_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_EV_IRQHandler(void)
{
}
 8003838:	4770      	bx	lr
 800383a:	46c0      	nop			(mov r8, r8)

0800383c <I2C2_ER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_ER_IRQHandler(void)
{
}
 800383c:	4770      	bx	lr
 800383e:	46c0      	nop			(mov r8, r8)

08003840 <SPI1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SPI1_IRQHandler(void)
{
}
 8003840:	4770      	bx	lr
 8003842:	46c0      	nop			(mov r8, r8)

08003844 <SPI2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SPI2_IRQHandler(void)
{
}
 8003844:	4770      	bx	lr
 8003846:	46c0      	nop			(mov r8, r8)

08003848 <USART2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void)
{
}
 8003848:	4770      	bx	lr
 800384a:	46c0      	nop			(mov r8, r8)

0800384c <USART3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USART3_IRQHandler(void)
{
}
 800384c:	4770      	bx	lr
 800384e:	46c0      	nop			(mov r8, r8)

08003850 <EXTI15_10_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI15_10_IRQHandler(void)
{
}
 8003850:	4770      	bx	lr
 8003852:	46c0      	nop			(mov r8, r8)

08003854 <RTCAlarm_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RTCAlarm_IRQHandler(void)
{
}
 8003854:	4770      	bx	lr
 8003856:	46c0      	nop			(mov r8, r8)

08003858 <USBWakeUp_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
}
 8003858:	4770      	bx	lr
 800385a:	46c0      	nop			(mov r8, r8)

0800385c <TIM8_BRK_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_BRK_IRQHandler(void)
{
}
 800385c:	4770      	bx	lr
 800385e:	46c0      	nop			(mov r8, r8)

08003860 <TIM8_UP_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_UP_IRQHandler(void)
{
}
 8003860:	4770      	bx	lr
 8003862:	46c0      	nop			(mov r8, r8)

08003864 <TIM8_TRG_COM_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_TRG_COM_IRQHandler(void)
{
}
 8003864:	4770      	bx	lr
 8003866:	46c0      	nop			(mov r8, r8)

08003868 <TIM8_CC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_CC_IRQHandler(void)
{
}
 8003868:	4770      	bx	lr
 800386a:	46c0      	nop			(mov r8, r8)

0800386c <ADC3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void ADC3_IRQHandler(void)
{
}
 800386c:	4770      	bx	lr
 800386e:	46c0      	nop			(mov r8, r8)

08003870 <FSMC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void FSMC_IRQHandler(void)
{
}
 8003870:	4770      	bx	lr
 8003872:	46c0      	nop			(mov r8, r8)

08003874 <SDIO_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SDIO_IRQHandler(void)
{
}
 8003874:	4770      	bx	lr
 8003876:	46c0      	nop			(mov r8, r8)

08003878 <TIM5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM5_IRQHandler(void)
{
}
 8003878:	4770      	bx	lr
 800387a:	46c0      	nop			(mov r8, r8)

0800387c <SPI3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SPI3_IRQHandler(void)
{
}
 800387c:	4770      	bx	lr
 800387e:	46c0      	nop			(mov r8, r8)

08003880 <UART4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void UART4_IRQHandler(void)
{
}
 8003880:	4770      	bx	lr
 8003882:	46c0      	nop			(mov r8, r8)

08003884 <UART5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void UART5_IRQHandler(void)
{
}
 8003884:	4770      	bx	lr
 8003886:	46c0      	nop			(mov r8, r8)

08003888 <TIM6_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM6_IRQHandler(void)
{
}
 8003888:	4770      	bx	lr
 800388a:	46c0      	nop			(mov r8, r8)

0800388c <TIM7_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM7_IRQHandler(void)
{
}
 800388c:	4770      	bx	lr
 800388e:	46c0      	nop			(mov r8, r8)

08003890 <DMA2_Channel1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel1_IRQHandler(void)
{
}
 8003890:	4770      	bx	lr
 8003892:	46c0      	nop			(mov r8, r8)

08003894 <DMA2_Channel2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel2_IRQHandler(void)
{
}
 8003894:	4770      	bx	lr
 8003896:	46c0      	nop			(mov r8, r8)

08003898 <DMA2_Channel3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel3_IRQHandler(void)
{
}
 8003898:	4770      	bx	lr
 800389a:	46c0      	nop			(mov r8, r8)

0800389c <DMA2_Channel4_5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel4_5_IRQHandler(void)
{
}
 800389c:	4770      	bx	lr
 800389e:	46c0      	nop			(mov r8, r8)

080038a0 <USART1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART1_IRQHandler(void)
{
 80038a0:	b500      	push	{lr}
 80038a2:	b081      	sub	sp, #4
	RxD0Interrupt();
 80038a4:	f7ff fcb2 	bl	800320c <RxD0Interrupt>
}
 80038a8:	b001      	add	sp, #4
 80038aa:	bd00      	pop	{pc}

080038ac <TIM2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void)
{
 80038ac:	b500      	push	{lr}
 80038ae:	b081      	sub	sp, #4
	TimerInterrupt_1ms();
 80038b0:	f7ff fcc8 	bl	8003244 <TimerInterrupt_1ms>
}
 80038b4:	b001      	add	sp, #4
 80038b6:	bd00      	pop	{pc}

080038b8 <SysTickHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SysTickHandler(void)
{
 80038b8:	b500      	push	{lr}
 80038ba:	b081      	sub	sp, #4
	__ISR_DELAY();
 80038bc:	f7ff fc6a 	bl	8003194 <__ISR_DELAY>
}
 80038c0:	b001      	add	sp, #4
 80038c2:	bd00      	pop	{pc}

080038c4 <dxl_hal_timeout>:
	//exceed range of int...
	StartDiscount(NumRcvByte*100);
}

int dxl_hal_timeout(void)
{
 80038c4:	b500      	push	{lr}
 80038c6:	b081      	sub	sp, #4
	// Check timeout
	// Return: 0 is false, 1 is true(timeout occurred)

	return CheckTimeOut();
 80038c8:	f7ff fc74 	bl	80031b4 <CheckTimeOut>
}
 80038cc:	b001      	add	sp, #4
 80038ce:	bd00      	pop	{pc}

080038d0 <dxl_hal_set_timeout>:
	}
	return numPacket;
}

void dxl_hal_set_timeout( int NumRcvByte )
{
 80038d0:	b500      	push	{lr}
 80038d2:	4603      	mov	r3, r0
	// Start stop watch
	// NumRcvByte: number of recieving data(to calculate maximum waiting time)

	//exceed range of int...
	StartDiscount(NumRcvByte*100);
 80038d4:	2064      	movs	r0, #100
	}
	return numPacket;
}

void dxl_hal_set_timeout( int NumRcvByte )
{
 80038d6:	b081      	sub	sp, #4
	// Start stop watch
	// NumRcvByte: number of recieving data(to calculate maximum waiting time)

	//exceed range of int...
	StartDiscount(NumRcvByte*100);
 80038d8:	fb00 f003 	mul.w	r0, r0, r3
 80038dc:	f7ff fc64 	bl	80031a8 <StartDiscount>
}
 80038e0:	b001      	add	sp, #4
 80038e2:	bd00      	pop	{pc}

080038e4 <dxl_hal_rx>:

	return numPacket;
}

int dxl_hal_rx( unsigned char *pPacket, int numPacket )
{
 80038e4:	b570      	push	{r4, r5, r6, lr}
 80038e6:	4606      	mov	r6, r0
 80038e8:	460d      	mov	r5, r1
 80038ea:	2400      	movs	r4, #0
 80038ec:	e009      	b.n	8003902 <dxl_hal_rx+0x1e>
	// Return: number of data received. -1 is error.

	unsigned char i;
	for( i=0 ; i<numPacket ; i++ )
	{
		if (CheckNewArrive())
 80038ee:	f7ff fc2d 	bl	800314c <CheckNewArrive>
 80038f2:	b908      	cbnz	r0, 80038f8 <dxl_hal_rx+0x14>
 80038f4:	4625      	mov	r5, r4
 80038f6:	e006      	b.n	8003906 <dxl_hal_rx+0x22>
			pPacket[i] =  RxDByte_DXL();
 80038f8:	f7ff fc34 	bl	8003164 <RxDByte_DXL>
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data received. -1 is error.

	unsigned char i;
	for( i=0 ; i<numPacket ; i++ )
 80038fc:	1c63      	adds	r3, r4, #1
	{
		if (CheckNewArrive())
			pPacket[i] =  RxDByte_DXL();
 80038fe:	5530      	strb	r0, [r6, r4]
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data received. -1 is error.

	unsigned char i;
	for( i=0 ; i<numPacket ; i++ )
 8003900:	b2dc      	uxtb	r4, r3
 8003902:	42ac      	cmp	r4, r5
 8003904:	dbf3      	blt.n	80038ee <dxl_hal_rx+0xa>
			pPacket[i] =  RxDByte_DXL();
		else
			return i;
	}
	return numPacket;
}
 8003906:	4628      	mov	r0, r5
 8003908:	bd70      	pop	{r4, r5, r6, pc}
 800390a:	46c0      	nop			(mov r8, r8)

0800390c <dxl_hal_tx>:

	ClearBuffer256();
}

int dxl_hal_tx( unsigned char *pPacket, int numPacket )
{
 800390c:	b570      	push	{r4, r5, r6, lr}
 800390e:	4606      	mov	r6, r0
 8003910:	460d      	mov	r5, r1
 8003912:	2400      	movs	r4, #0
 8003914:	e004      	b.n	8003920 <dxl_hal_tx+0x14>
	// numPacket: number of data array
	// Return: number of data transmitted. -1 is error.

	unsigned char i;
	for(i=0 ; i<numPacket; i++  )
		TxDByte_DXL(pPacket[i]);
 8003916:	5d30      	ldrb	r0, [r6, r4]
 8003918:	f7ff fdb6 	bl	8003488 <TxDByte_DXL>
	// *pPacket: data array pointer
	// numPacket: number of data array
	// Return: number of data transmitted. -1 is error.

	unsigned char i;
	for(i=0 ; i<numPacket; i++  )
 800391c:	1c63      	adds	r3, r4, #1
 800391e:	b2dc      	uxtb	r4, r3
 8003920:	42ac      	cmp	r4, r5
 8003922:	dbf8      	blt.n	8003916 <dxl_hal_tx+0xa>
		TxDByte_DXL(pPacket[i]);

	return numPacket;
}
 8003924:	4628      	mov	r0, r5
 8003926:	bd70      	pop	{r4, r5, r6, pc}

08003928 <dxl_hal_clear>:
	/* Disable the USART1 */
	DisableUSART1();
}

void dxl_hal_clear(void)
{
 8003928:	b500      	push	{lr}
 800392a:	b081      	sub	sp, #4
	// Clear communication buffer

	ClearBuffer256();
 800392c:	f7ff fc02 	bl	8003134 <ClearBuffer256>
}
 8003930:	b001      	add	sp, #4
 8003932:	bd00      	pop	{pc}

08003934 <dxl_hal_close>:
	USART1_Configuration(baudrate);
	return 1;
}

void dxl_hal_close()
{
 8003934:	b500      	push	{lr}
 8003936:	b081      	sub	sp, #4
	// Closing device

	/* Disable the USART1 */
	DisableUSART1();
 8003938:	f7ff fdc8 	bl	80034cc <DisableUSART1>
}
 800393c:	b001      	add	sp, #4
 800393e:	bd00      	pop	{pc}

08003940 <dxl_hal_open>:
// Dynamixel SDK platform dependent source
#include "dxl_hal.h"

int dxl_hal_open( int devIndex, int baudrate )
{
 8003940:	b500      	push	{lr}
	// Opening device
	// devIndex: Device index
	// baudrate: Real baudrate (ex> 115200, 57600, 38400...)
	// Return: 0(Failed), 1(Succeed)

	USART1_Configuration(baudrate);
 8003942:	4608      	mov	r0, r1
// Dynamixel SDK platform dependent source
#include "dxl_hal.h"

int dxl_hal_open( int devIndex, int baudrate )
{
 8003944:	b081      	sub	sp, #4
	// Opening device
	// devIndex: Device index
	// baudrate: Real baudrate (ex> 115200, 57600, 38400...)
	// Return: 0(Failed), 1(Succeed)

	USART1_Configuration(baudrate);
 8003946:	f7ff fe0b 	bl	8003560 <USART1_Configuration>
	return 1;
}
 800394a:	2001      	movs	r0, #1
 800394c:	b001      	add	sp, #4
 800394e:	bd00      	pop	{pc}

08003950 <dxl_get_result>:


}

int dxl_get_result()
{
 8003950:	4b01      	ldr	r3, [pc, #4]	(8003958 <dxl_get_result+0x8>)
 8003952:	6818      	ldr	r0, [r3, #0]
	return gbCommStatus;
}
 8003954:	4770      	bx	lr
 8003956:	46c0      	nop			(mov r8, r8)
 8003958:	20000010 	.word	0x20000010

0800395c <dxl_set_txpacket_id>:

void dxl_set_txpacket_id( int id )
{
	gbInstructionPacket[ID] = (unsigned char)id;
 800395c:	4b01      	ldr	r3, [pc, #4]	(8003964 <dxl_set_txpacket_id+0x8>)
 800395e:	7098      	strb	r0, [r3, #2]
}
 8003960:	4770      	bx	lr
 8003962:	46c0      	nop			(mov r8, r8)
 8003964:	2000012c 	.word	0x2000012c

08003968 <dxl_set_txpacket_instruction>:

void dxl_set_txpacket_instruction( int instruction )
{
	gbInstructionPacket[INSTRUCTION] = (unsigned char)instruction;
 8003968:	4b01      	ldr	r3, [pc, #4]	(8003970 <dxl_set_txpacket_instruction+0x8>)
 800396a:	7118      	strb	r0, [r3, #4]
}
 800396c:	4770      	bx	lr
 800396e:	46c0      	nop			(mov r8, r8)
 8003970:	2000012c 	.word	0x2000012c

08003974 <dxl_set_txpacket_parameter>:

void dxl_set_txpacket_parameter( int index, int value )
{
	gbInstructionPacket[PARAMETER+index] = (unsigned char)value;
 8003974:	4b01      	ldr	r3, [pc, #4]	(800397c <dxl_set_txpacket_parameter+0x8>)
 8003976:	181b      	adds	r3, r3, r0
 8003978:	7159      	strb	r1, [r3, #5]
}
 800397a:	4770      	bx	lr
 800397c:	2000012c 	.word	0x2000012c

08003980 <dxl_set_txpacket_length>:

void dxl_set_txpacket_length( int length )
{
	gbInstructionPacket[LENGTH] = (unsigned char)length;
 8003980:	4b01      	ldr	r3, [pc, #4]	(8003988 <dxl_set_txpacket_length+0x8>)
 8003982:	70d8      	strb	r0, [r3, #3]
}
 8003984:	4770      	bx	lr
 8003986:	46c0      	nop			(mov r8, r8)
 8003988:	2000012c 	.word	0x2000012c

0800398c <dxl_get_rxpacket_error>:

int dxl_get_rxpacket_error( int errbit )
{
 800398c:	4b03      	ldr	r3, [pc, #12]	(800399c <dxl_get_rxpacket_error+0x10>)
 800398e:	791b      	ldrb	r3, [r3, #4]
 8003990:	4218      	tst	r0, r3
 8003992:	bf0c      	ite	eq
 8003994:	2000      	moveq	r0, #0
 8003996:	2001      	movne	r0, #1
	if( gbStatusPacket[ERRBIT] & (unsigned char)errbit )
		return 1;

	return 0;
}
 8003998:	4770      	bx	lr
 800399a:	46c0      	nop			(mov r8, r8)
 800399c:	200001cc 	.word	0x200001cc

080039a0 <dxl_get_rxpacket_length>:

int dxl_get_rxpacket_length()
{
 80039a0:	4b01      	ldr	r3, [pc, #4]	(80039a8 <dxl_get_rxpacket_length+0x8>)
 80039a2:	78d8      	ldrb	r0, [r3, #3]
	return (int)gbStatusPacket[LENGTH];
}
 80039a4:	4770      	bx	lr
 80039a6:	46c0      	nop			(mov r8, r8)
 80039a8:	200001cc 	.word	0x200001cc

080039ac <dxl_get_rxpacket_parameter>:

int dxl_get_rxpacket_parameter( int index )
{
 80039ac:	4b01      	ldr	r3, [pc, #4]	(80039b4 <dxl_get_rxpacket_parameter+0x8>)
 80039ae:	181b      	adds	r3, r3, r0
 80039b0:	7958      	ldrb	r0, [r3, #5]
	return (int)gbStatusPacket[PARAMETER+index];
}
 80039b2:	4770      	bx	lr
 80039b4:	200001cc 	.word	0x200001cc

080039b8 <dxl_makeword>:
int dxl_makeword( int lowbyte, int highbyte )
{
	unsigned short word;

	word = highbyte;
	word = word << 8;
 80039b8:	eb00 2001 	add.w	r0, r0, r1, lsl #8
 80039bc:	b280      	uxth	r0, r0
	word = word + lowbyte;
	return (int)word;
}
 80039be:	4770      	bx	lr

080039c0 <dxl_get_lowbyte>:

int dxl_get_lowbyte( int word )
{
 80039c0:	b2c0      	uxtb	r0, r0
	unsigned short temp;

	temp = word & 0xff;
	return (int)temp;
}
 80039c2:	4770      	bx	lr

080039c4 <dxl_get_highbyte>:

int dxl_get_highbyte( int word )
{
	unsigned short temp;

	temp = word & 0xff00;
 80039c4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80039c8:	0a00      	lsrs	r0, r0, #8
	temp = temp >> 8;
	return (int)temp;
}
 80039ca:	4770      	bx	lr

080039cc <dxl_rx_packet>:

	gbCommStatus = COMM_TXSUCCESS;
}

void dxl_rx_packet()
{
 80039cc:	b530      	push	{r4, r5, lr}
	unsigned char i, j, nRead;
	unsigned char checksum = 0;

	if( giBusUsing == 0 )
 80039ce:	4953      	ldr	r1, [pc, #332]	(8003b1c <dxl_rx_packet+0x150>)

	gbCommStatus = COMM_TXSUCCESS;
}

void dxl_rx_packet()
{
 80039d0:	b081      	sub	sp, #4
	unsigned char i, j, nRead;
	unsigned char checksum = 0;

	if( giBusUsing == 0 )
 80039d2:	680b      	ldr	r3, [r1, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 809f 	beq.w	8003b18 <dxl_rx_packet+0x14c>
		return;

	if( gbInstructionPacket[ID] == BROADCAST_ID )
 80039da:	4b51      	ldr	r3, [pc, #324]	(8003b20 <dxl_rx_packet+0x154>)
 80039dc:	4a51      	ldr	r2, [pc, #324]	(8003b24 <dxl_rx_packet+0x158>)
 80039de:	789b      	ldrb	r3, [r3, #2]
 80039e0:	2bfe      	cmp	r3, #254
 80039e2:	f000 8095 	beq.w	8003b10 <dxl_rx_packet+0x144>
		gbCommStatus = COMM_RXSUCCESS;
		giBusUsing = 0;
		return;
	}
	
	if( gbCommStatus == COMM_TXSUCCESS )
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	b922      	cbnz	r2, 80039f4 <dxl_rx_packet+0x28>
	{
		gbRxGetLength = 0;
 80039ea:	4b4f      	ldr	r3, [pc, #316]	(8003b28 <dxl_rx_packet+0x15c>)
 80039ec:	701a      	strb	r2, [r3, #0]
		gbRxPacketLength = 6;
 80039ee:	4b4f      	ldr	r3, [pc, #316]	(8003b2c <dxl_rx_packet+0x160>)
 80039f0:	2206      	movs	r2, #6
 80039f2:	701a      	strb	r2, [r3, #0]
	}

	nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
 80039f4:	4d4c      	ldr	r5, [pc, #304]	(8003b28 <dxl_rx_packet+0x15c>)
 80039f6:	4c4d      	ldr	r4, [pc, #308]	(8003b2c <dxl_rx_packet+0x160>)
 80039f8:	782b      	ldrb	r3, [r5, #0]
 80039fa:	7821      	ldrb	r1, [r4, #0]
 80039fc:	484c      	ldr	r0, [pc, #304]	(8003b30 <dxl_rx_packet+0x164>)
 80039fe:	1ac9      	subs	r1, r1, r3
 8003a00:	18c0      	adds	r0, r0, r3
 8003a02:	f7ff ff6f 	bl	80038e4 <dxl_hal_rx>
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 8003a06:	782b      	ldrb	r3, [r5, #0]
 8003a08:	18c0      	adds	r0, r0, r3
	if( gbRxGetLength < gbRxPacketLength )
 8003a0a:	7823      	ldrb	r3, [r4, #0]
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 8003a0c:	b2c0      	uxtb	r0, r0
	if( gbRxGetLength < gbRxPacketLength )
 8003a0e:	4283      	cmp	r3, r0
/*
	TxDByte16(nRead);
	TxDByte_PC('\r');
	TxDByte_PC('\n');
*/
	gbRxGetLength += nRead;
 8003a10:	7028      	strb	r0, [r5, #0]
	if( gbRxGetLength < gbRxPacketLength )
 8003a12:	d903      	bls.n	8003a1c <dxl_rx_packet+0x50>
	{
		if( dxl_hal_timeout() == 1 )
 8003a14:	f7ff ff56 	bl	80038c4 <dxl_hal_timeout>
 8003a18:	2801      	cmp	r0, #1
 8003a1a:	d008      	beq.n	8003a2e <dxl_rx_packet+0x62>
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 8003a1c:	4b42      	ldr	r3, [pc, #264]	(8003b28 <dxl_rx_packet+0x15c>)
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 8003a1e:	2000      	movs	r0, #0
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 8003a20:	781a      	ldrb	r2, [r3, #0]
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
 8003a22:	4943      	ldr	r1, [pc, #268]	(8003b30 <dxl_rx_packet+0x164>)
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 8003a24:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 8003a28:	f1a2 0e02 	sub.w	lr, r2, #2	; 0x2
 8003a2c:	e019      	b.n	8003a62 <dxl_rx_packet+0x96>
	{
		if( dxl_hal_timeout() == 1 )
		{


			if(gbRxGetLength == 0)
 8003a2e:	782b      	ldrb	r3, [r5, #0]
 8003a30:	4a3c      	ldr	r2, [pc, #240]	(8003b24 <dxl_rx_packet+0x158>)
 8003a32:	b90b      	cbnz	r3, 8003a38 <dxl_rx_packet+0x6c>
				gbCommStatus = COMM_RXTIMEOUT;
 8003a34:	2306      	movs	r3, #6
 8003a36:	e000      	b.n	8003a3a <dxl_rx_packet+0x6e>
			else
				gbCommStatus = COMM_RXCORRUPT;
 8003a38:	2307      	movs	r3, #7
 8003a3a:	6013      	str	r3, [r2, #0]
			giBusUsing = 0;
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	4b37      	ldr	r3, [pc, #220]	(8003b1c <dxl_rx_packet+0x150>)
 8003a40:	e04f      	b.n	8003ae2 <dxl_rx_packet+0x116>
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
	{
		if( gbStatusPacket[i] == 0xff && gbStatusPacket[i+1] == 0xff )
 8003a42:	5c0b      	ldrb	r3, [r1, r0]
 8003a44:	2bff      	cmp	r3, #255
 8003a46:	d104      	bne.n	8003a52 <dxl_rx_packet+0x86>
 8003a48:	eb01 0300 	add.w	r3, r1, r0
 8003a4c:	785b      	ldrb	r3, [r3, #1]
 8003a4e:	2bff      	cmp	r3, #255
 8003a50:	d009      	beq.n	8003a66 <dxl_rx_packet+0x9a>
		{
			break;
		}
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
 8003a52:	4570      	cmp	r0, lr
 8003a54:	d103      	bne.n	8003a5e <dxl_rx_packet+0x92>
 8003a56:	f811 300c 	ldrb.w	r3, [r1, ip]
 8003a5a:	2bff      	cmp	r3, #255
 8003a5c:	d003      	beq.n	8003a66 <dxl_rx_packet+0x9a>
			return;
		}
	}
	
	// Find packet header
	for( i=0; i<(gbRxGetLength-1); i++ )
 8003a5e:	1c43      	adds	r3, r0, #1
 8003a60:	b2d8      	uxtb	r0, r3
 8003a62:	4560      	cmp	r0, ip
 8003a64:	dbed      	blt.n	8003a42 <dxl_rx_packet+0x76>
		else if( i == gbRxGetLength-2 && gbStatusPacket[gbRxGetLength-1] == 0xff )
		{
			break;
		}
	}	
	if( i > 0 )
 8003a66:	b188      	cbz	r0, 8003a8c <dxl_rx_packet+0xc0>
 8003a68:	2100      	movs	r1, #0
	{
		for( j=0; j<(gbRxGetLength-i); j++ )
 8003a6a:	ebc0 0c02 	rsb	ip, r0, r2
			gbStatusPacket[j] = gbStatusPacket[j + i];
 8003a6e:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 8003b30 <dxl_rx_packet+0x164>
 8003a72:	e006      	b.n	8003a82 <dxl_rx_packet+0xb6>
 8003a74:	eb0e 0301 	add.w	r3, lr, r1
 8003a78:	5c1b      	ldrb	r3, [r3, r0]
 8003a7a:	f80e 3001 	strb.w	r3, [lr, r1]
			break;
		}
	}	
	if( i > 0 )
	{
		for( j=0; j<(gbRxGetLength-i); j++ )
 8003a7e:	1c4b      	adds	r3, r1, #1
 8003a80:	b2d9      	uxtb	r1, r3
 8003a82:	4561      	cmp	r1, ip
 8003a84:	dbf6      	blt.n	8003a74 <dxl_rx_packet+0xa8>
			gbStatusPacket[j] = gbStatusPacket[j + i];
			
		gbRxGetLength -= i;		
 8003a86:	4b28      	ldr	r3, [pc, #160]	(8003b28 <dxl_rx_packet+0x15c>)
 8003a88:	1a12      	subs	r2, r2, r0
 8003a8a:	701a      	strb	r2, [r3, #0]
	}

	if( gbRxGetLength < gbRxPacketLength )
 8003a8c:	4d26      	ldr	r5, [pc, #152]	(8003b28 <dxl_rx_packet+0x15c>)
 8003a8e:	4c27      	ldr	r4, [pc, #156]	(8003b2c <dxl_rx_packet+0x160>)
 8003a90:	f895 c000 	ldrb.w	ip, [r5]
 8003a94:	7823      	ldrb	r3, [r4, #0]
 8003a96:	4563      	cmp	r3, ip
 8003a98:	d821      	bhi.n	8003ade <dxl_rx_packet+0x112>
		return;
	}


	// Check id pairing
	if( gbInstructionPacket[ID] != gbStatusPacket[ID])
 8003a9a:	4b21      	ldr	r3, [pc, #132]	(8003b20 <dxl_rx_packet+0x154>)
 8003a9c:	4824      	ldr	r0, [pc, #144]	(8003b30 <dxl_rx_packet+0x164>)
 8003a9e:	789a      	ldrb	r2, [r3, #2]
 8003aa0:	7883      	ldrb	r3, [r0, #2]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d003      	beq.n	8003aae <dxl_rx_packet+0xe2>
	{
		gbCommStatus = COMM_RXCORRUPT;
 8003aa6:	4b1f      	ldr	r3, [pc, #124]	(8003b24 <dxl_rx_packet+0x158>)
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	e7c6      	b.n	8003a3c <dxl_rx_packet+0x70>
		giBusUsing = 0;
		return;
	}
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
 8003aae:	78c3      	ldrb	r3, [r0, #3]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	b2d9      	uxtb	r1, r3
	if( gbRxGetLength < gbRxPacketLength )
 8003ab4:	458c      	cmp	ip, r1
		gbCommStatus = COMM_RXCORRUPT;
		giBusUsing = 0;
		return;
	}
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
 8003ab6:	7021      	strb	r1, [r4, #0]
	if( gbRxGetLength < gbRxPacketLength )
 8003ab8:	d20b      	bcs.n	8003ad2 <dxl_rx_packet+0x106>
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
 8003aba:	4460      	add	r0, ip
 8003abc:	ebcc 0101 	rsb	r1, ip, r1
 8003ac0:	f7ff ff10 	bl	80038e4 <dxl_hal_rx>
		gbRxGetLength += nRead;
 8003ac4:	782b      	ldrb	r3, [r5, #0]
 8003ac6:	18c0      	adds	r0, r0, r3
		if( gbRxGetLength < gbRxPacketLength )
 8003ac8:	7823      	ldrb	r3, [r4, #0]
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
	if( gbRxGetLength < gbRxPacketLength )
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
 8003aca:	b2c0      	uxtb	r0, r0
		if( gbRxGetLength < gbRxPacketLength )
 8003acc:	4283      	cmp	r3, r0
	
	gbRxPacketLength = gbStatusPacket[LENGTH] + 4;
	if( gbRxGetLength < gbRxPacketLength )
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
 8003ace:	7028      	strb	r0, [r5, #0]
		if( gbRxGetLength < gbRxPacketLength )
 8003ad0:	d805      	bhi.n	8003ade <dxl_rx_packet+0x112>
			return;
		}
	}

	// Check checksum
	for( i=0; i<(gbStatusPacket[LENGTH]+1); i++ )
 8003ad2:	4b17      	ldr	r3, [pc, #92]	(8003b30 <dxl_rx_packet+0x164>)
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	78d8      	ldrb	r0, [r3, #3]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	469c      	mov	ip, r3
 8003adc:	e00a      	b.n	8003af4 <dxl_rx_packet+0x128>
	{
		nRead = dxl_hal_rx( (unsigned char*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength );
		gbRxGetLength += nRead;
		if( gbRxGetLength < gbRxPacketLength )
		{
			gbCommStatus = COMM_RXWAITING;
 8003ade:	4b11      	ldr	r3, [pc, #68]	(8003b24 <dxl_rx_packet+0x158>)
 8003ae0:	2205      	movs	r2, #5
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e018      	b.n	8003b18 <dxl_rx_packet+0x14c>
		}
	}

	// Check checksum
	for( i=0; i<(gbStatusPacket[LENGTH]+1); i++ )
		checksum += gbStatusPacket[i+2];
 8003ae6:	eb0c 0301 	add.w	r3, ip, r1
 8003aea:	789b      	ldrb	r3, [r3, #2]
 8003aec:	4413      	add	r3, r2
 8003aee:	b2da      	uxtb	r2, r3
			return;
		}
	}

	// Check checksum
	for( i=0; i<(gbStatusPacket[LENGTH]+1); i++ )
 8003af0:	1c4b      	adds	r3, r1, #1
 8003af2:	b2d9      	uxtb	r1, r3
 8003af4:	4288      	cmp	r0, r1
 8003af6:	daf6      	bge.n	8003ae6 <dxl_rx_packet+0x11a>
		checksum += gbStatusPacket[i+2];
	checksum = ~checksum;

	if( gbStatusPacket[gbStatusPacket[LENGTH]+3] != checksum )
 8003af8:	4b0d      	ldr	r3, [pc, #52]	(8003b30 <dxl_rx_packet+0x164>)
 8003afa:	ea6f 0202 	mvn.w	r2, r2
 8003afe:	181b      	adds	r3, r3, r0
 8003b00:	78db      	ldrb	r3, [r3, #3]
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	4293      	cmp	r3, r2
 8003b06:	4905      	ldr	r1, [pc, #20]	(8003b1c <dxl_rx_packet+0x150>)
 8003b08:	4a06      	ldr	r2, [pc, #24]	(8003b24 <dxl_rx_packet+0x158>)
 8003b0a:	d001      	beq.n	8003b10 <dxl_rx_packet+0x144>
	{
		gbCommStatus = COMM_RXCORRUPT;
 8003b0c:	2307      	movs	r3, #7
 8003b0e:	e000      	b.n	8003b12 <dxl_rx_packet+0x146>
		giBusUsing = 0;
		return;
	}

	gbCommStatus = COMM_RXSUCCESS;
 8003b10:	2301      	movs	r3, #1
 8003b12:	6013      	str	r3, [r2, #0]
	giBusUsing = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	600b      	str	r3, [r1, #0]
}
 8003b18:	b001      	add	sp, #4
 8003b1a:	bd30      	pop	{r4, r5, pc}
 8003b1c:	20000214 	.word	0x20000214
 8003b20:	2000012c 	.word	0x2000012c
 8003b24:	20000010 	.word	0x20000010
 8003b28:	20000213 	.word	0x20000213
 8003b2c:	20000212 	.word	0x20000212
 8003b30:	200001cc 	.word	0x200001cc

08003b34 <dxl_tx_packet>:
{
	dxl_hal_close();
}

void dxl_tx_packet()
{
 8003b34:	b530      	push	{r4, r5, lr}
	unsigned char i;
	unsigned char TxNumByte, RealTxNumByte;
	unsigned char checksum = 0;

	if( giBusUsing == 1 )
 8003b36:	492d      	ldr	r1, [pc, #180]	(8003bec <dxl_tx_packet+0xb8>)
{
	dxl_hal_close();
}

void dxl_tx_packet()
{
 8003b38:	b081      	sub	sp, #4
	unsigned char i;
	unsigned char TxNumByte, RealTxNumByte;
	unsigned char checksum = 0;

	if( giBusUsing == 1 )
 8003b3a:	680b      	ldr	r3, [r1, #0]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d052      	beq.n	8003be6 <dxl_tx_packet+0xb2>
	


	giBusUsing = 1;

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003b40:	482b      	ldr	r0, [pc, #172]	(8003bf0 <dxl_tx_packet+0xbc>)
	if( giBusUsing == 1 )
		return;
	


	giBusUsing = 1;
 8003b42:	2301      	movs	r3, #1

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003b44:	f890 c003 	ldrb.w	ip, [r0, #3]
	if( giBusUsing == 1 )
		return;
	


	giBusUsing = 1;
 8003b48:	600b      	str	r3, [r1, #0]

	if( gbInstructionPacket[LENGTH] > (MAXNUM_TXPARAM+2) )
 8003b4a:	f1bc 0f98 	cmp.w	ip, #152	; 0x98
 8003b4e:	d80b      	bhi.n	8003b68 <dxl_tx_packet+0x34>
		gbCommStatus = COMM_TXERROR;
		giBusUsing = 0;
		return;
	}

	if( gbInstructionPacket[INSTRUCTION] != INST_PING
 8003b50:	7903      	ldrb	r3, [r0, #4]
 8003b52:	1e5a      	subs	r2, r3, #1
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	3b83      	subs	r3, #131
 8003b58:	bf18      	it	ne
 8003b5a:	2301      	movne	r3, #1
 8003b5c:	2a05      	cmp	r2, #5
 8003b5e:	bf94      	ite	ls
 8003b60:	2300      	movls	r3, #0
 8003b62:	f003 0301 	andhi.w	r3, r3, #1	; 0x1
 8003b66:	b12b      	cbz	r3, 8003b74 <dxl_tx_packet+0x40>
		&& gbInstructionPacket[INSTRUCTION] != INST_REG_WRITE
		&& gbInstructionPacket[INSTRUCTION] != INST_ACTION
		&& gbInstructionPacket[INSTRUCTION] != INST_RESET
		&& gbInstructionPacket[INSTRUCTION] != INST_SYNC_WRITE )
	{
		gbCommStatus = COMM_TXERROR;
 8003b68:	4a22      	ldr	r2, [pc, #136]	(8003bf4 <dxl_tx_packet+0xc0>)
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	6013      	str	r3, [r2, #0]
		giBusUsing = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	600b      	str	r3, [r1, #0]
 8003b72:	e038      	b.n	8003be6 <dxl_tx_packet+0xb2>
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
 8003b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b78:	7003      	strb	r3, [r0, #0]
	gbInstructionPacket[1] = 0xff;
 8003b7a:	7043      	strb	r3, [r0, #1]
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	2200      	movs	r2, #0
 8003b80:	e006      	b.n	8003b90 <dxl_tx_packet+0x5c>
		checksum += gbInstructionPacket[i+2];
 8003b82:	eb00 0301 	add.w	r3, r0, r1
 8003b86:	789b      	ldrb	r3, [r3, #2]
 8003b88:	4413      	add	r3, r2
 8003b8a:	b2da      	uxtb	r2, r3
		return;
	}
	
	gbInstructionPacket[0] = 0xff;
	gbInstructionPacket[1] = 0xff;
	for( i=0; i<(gbInstructionPacket[LENGTH]+1); i++ )
 8003b8c:	1c4b      	adds	r3, r1, #1
 8003b8e:	b2d9      	uxtb	r1, r3
 8003b90:	458c      	cmp	ip, r1
 8003b92:	daf6      	bge.n	8003b82 <dxl_tx_packet+0x4e>
		checksum += gbInstructionPacket[i+2];
	gbInstructionPacket[gbInstructionPacket[LENGTH]+3] = ~checksum;
 8003b94:	4b16      	ldr	r3, [pc, #88]	(8003bf0 <dxl_tx_packet+0xbc>)
 8003b96:	ea6f 0202 	mvn.w	r2, r2
 8003b9a:	4463      	add	r3, ip
 8003b9c:	70da      	strb	r2, [r3, #3]
	
	if( gbCommStatus == COMM_RXTIMEOUT || gbCommStatus == COMM_RXCORRUPT )
 8003b9e:	4b15      	ldr	r3, [pc, #84]	(8003bf4 <dxl_tx_packet+0xc0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	3b06      	subs	r3, #6
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d801      	bhi.n	8003bac <dxl_tx_packet+0x78>
	{




		dxl_hal_clear();
 8003ba8:	f7ff febe 	bl	8003928 <dxl_hal_clear>
	}

	TxNumByte = gbInstructionPacket[LENGTH] + 4;
 8003bac:	4d10      	ldr	r5, [pc, #64]	(8003bf0 <dxl_tx_packet+0xbc>)
 8003bae:	78ec      	ldrb	r4, [r5, #3]
	RealTxNumByte = dxl_hal_tx( (unsigned char*)gbInstructionPacket, TxNumByte );
 8003bb0:	4628      	mov	r0, r5


		dxl_hal_clear();
	}

	TxNumByte = gbInstructionPacket[LENGTH] + 4;
 8003bb2:	3404      	adds	r4, #4
 8003bb4:	b2e4      	uxtb	r4, r4
	RealTxNumByte = dxl_hal_tx( (unsigned char*)gbInstructionPacket, TxNumByte );
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	f7ff fea8 	bl	800390c <dxl_hal_tx>

	if( TxNumByte != RealTxNumByte )
 8003bbc:	b2c0      	uxtb	r0, r0
 8003bbe:	4284      	cmp	r4, r0
 8003bc0:	d005      	beq.n	8003bce <dxl_tx_packet+0x9a>
	{

		gbCommStatus = COMM_TXFAIL;
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	(8003bf4 <dxl_tx_packet+0xc0>)
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	601a      	str	r2, [r3, #0]
		giBusUsing = 0;
 8003bc8:	2200      	movs	r2, #0
 8003bca:	4b08      	ldr	r3, [pc, #32]	(8003bec <dxl_tx_packet+0xb8>)
 8003bcc:	e00a      	b.n	8003be4 <dxl_tx_packet+0xb0>
		return;
	}

	if( gbInstructionPacket[INSTRUCTION] == INST_READ )
 8003bce:	792b      	ldrb	r3, [r5, #4]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d102      	bne.n	8003bda <dxl_tx_packet+0xa6>
		dxl_hal_set_timeout( gbInstructionPacket[PARAMETER+1] + 6 );
 8003bd4:	79a8      	ldrb	r0, [r5, #6]
 8003bd6:	3006      	adds	r0, #6
 8003bd8:	e000      	b.n	8003bdc <dxl_tx_packet+0xa8>
	else
		dxl_hal_set_timeout( 6 );
 8003bda:	2006      	movs	r0, #6
 8003bdc:	f7ff fe78 	bl	80038d0 <dxl_hal_set_timeout>

	gbCommStatus = COMM_TXSUCCESS;
 8003be0:	4b04      	ldr	r3, [pc, #16]	(8003bf4 <dxl_tx_packet+0xc0>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
}
 8003be6:	b001      	add	sp, #4
 8003be8:	bd30      	pop	{r4, r5, pc}
 8003bea:	46c0      	nop			(mov r8, r8)
 8003bec:	20000214 	.word	0x20000214
 8003bf0:	2000012c 	.word	0x2000012c
 8003bf4:	20000010 	.word	0x20000010

08003bf8 <dxl_txrx_packet>:
	gbCommStatus = COMM_RXSUCCESS;
	giBusUsing = 0;
}

void dxl_txrx_packet()
{
 8003bf8:	b510      	push	{r4, lr}

	dxl_tx_packet();
 8003bfa:	f7ff ff9b 	bl	8003b34 <dxl_tx_packet>

	if( gbCommStatus != COMM_TXSUCCESS )
 8003bfe:	4a05      	ldr	r2, [pc, #20]	(8003c14 <dxl_txrx_packet+0x1c>)
 8003c00:	6813      	ldr	r3, [r2, #0]
 8003c02:	b92b      	cbnz	r3, 8003c10 <dxl_txrx_packet+0x18>

	do{

		dxl_rx_packet();

	}while( gbCommStatus == COMM_RXWAITING );	
 8003c04:	4614      	mov	r4, r2
	if( gbCommStatus != COMM_TXSUCCESS )
		return;	

	do{

		dxl_rx_packet();
 8003c06:	f7ff fee1 	bl	80039cc <dxl_rx_packet>

	}while( gbCommStatus == COMM_RXWAITING );	
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d0fa      	beq.n	8003c06 <dxl_txrx_packet+0xe>


}
 8003c10:	bd10      	pop	{r4, pc}
 8003c12:	46c0      	nop			(mov r8, r8)
 8003c14:	20000010 	.word	0x20000010

08003c18 <dxl_write_word>:

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}

void dxl_write_word( int id, int address, int value )
{
 8003c18:	b500      	push	{lr}
	while(giBusUsing);
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	(8003c48 <dxl_write_word+0x30>)

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}

void dxl_write_word( int id, int address, int value )
{
 8003c1c:	b081      	sub	sp, #4
	while(giBusUsing);
 8003c1e:	681b      	ldr	r3, [r3, #0]

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}

void dxl_write_word( int id, int address, int value )
{
 8003c20:	4694      	mov	ip, r2
	while(giBusUsing);
 8003c22:	b97b      	cbnz	r3, 8003c44 <dxl_write_word+0x2c>

	gbInstructionPacket[ID] = (unsigned char)id;
 8003c24:	4a09      	ldr	r2, [pc, #36]	(8003c4c <dxl_write_word+0x34>)
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 8003c26:	2303      	movs	r3, #3
 8003c28:	7113      	strb	r3, [r2, #4]

int dxl_get_lowbyte( int word )
{
	unsigned short temp;

	temp = word & 0xff;
 8003c2a:	fa1f f38c 	uxth.w	r3, ip
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
 8003c2e:	7193      	strb	r3, [r2, #6]
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	71d3      	strb	r3, [r2, #7]
	gbInstructionPacket[LENGTH] = 5;
 8003c34:	2305      	movs	r3, #5

void dxl_write_word( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8003c36:	7090      	strb	r0, [r2, #2]
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8003c38:	7151      	strb	r1, [r2, #5]
	gbInstructionPacket[PARAMETER+1] = (unsigned char)dxl_get_lowbyte(value);
	gbInstructionPacket[PARAMETER+2] = (unsigned char)dxl_get_highbyte(value);
	gbInstructionPacket[LENGTH] = 5;
 8003c3a:	70d3      	strb	r3, [r2, #3]
	
	dxl_txrx_packet();
 8003c3c:	f7ff ffdc 	bl	8003bf8 <dxl_txrx_packet>
}
 8003c40:	b001      	add	sp, #4
 8003c42:	bd00      	pop	{pc}
 8003c44:	e7fe      	b.n	8003c44 <dxl_write_word+0x2c>
 8003c46:	46c0      	nop			(mov r8, r8)
 8003c48:	20000214 	.word	0x20000214
 8003c4c:	2000012c 	.word	0x2000012c

08003c50 <dxl_read_word>:
	
	dxl_txrx_packet();
}

int dxl_read_word( int id, int address )
{
 8003c50:	b500      	push	{lr}
	while(giBusUsing);
 8003c52:	4b0b      	ldr	r3, [pc, #44]	(8003c80 <dxl_read_word+0x30>)
	
	dxl_txrx_packet();
}

int dxl_read_word( int id, int address )
{
 8003c54:	b081      	sub	sp, #4
	while(giBusUsing);
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	b98b      	cbnz	r3, 8003c7e <dxl_read_word+0x2e>

	gbInstructionPacket[ID] = (unsigned char)id;
 8003c5a:	4a0a      	ldr	r2, [pc, #40]	(8003c84 <dxl_read_word+0x34>)
	gbInstructionPacket[INSTRUCTION] = INST_READ;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	7113      	strb	r3, [r2, #4]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 2;
 8003c60:	7193      	strb	r3, [r2, #6]
	gbInstructionPacket[LENGTH] = 4;
 8003c62:	2304      	movs	r3, #4

int dxl_read_word( int id, int address )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8003c64:	7090      	strb	r0, [r2, #2]
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8003c66:	7151      	strb	r1, [r2, #5]
	gbInstructionPacket[PARAMETER+1] = 2;
	gbInstructionPacket[LENGTH] = 4;
 8003c68:	70d3      	strb	r3, [r2, #3]
	



	dxl_txrx_packet();
 8003c6a:	f7ff ffc5 	bl	8003bf8 <dxl_txrx_packet>

int dxl_makeword( int lowbyte, int highbyte )
{
	unsigned short word;

	word = highbyte;
 8003c6e:	4b06      	ldr	r3, [pc, #24]	(8003c88 <dxl_read_word+0x38>)
 8003c70:	799a      	ldrb	r2, [r3, #6]
	word = word << 8;
 8003c72:	7958      	ldrb	r0, [r3, #5]
 8003c74:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8003c78:	b280      	uxth	r0, r0


	dxl_txrx_packet();

	return dxl_makeword((int)gbStatusPacket[PARAMETER], (int)gbStatusPacket[PARAMETER+1]);
}
 8003c7a:	b001      	add	sp, #4
 8003c7c:	bd00      	pop	{pc}
 8003c7e:	e7fe      	b.n	8003c7e <dxl_read_word+0x2e>
 8003c80:	20000214 	.word	0x20000214
 8003c84:	2000012c 	.word	0x2000012c
 8003c88:	200001cc 	.word	0x200001cc

08003c8c <dxl_write_byte>:

	return (int)gbStatusPacket[PARAMETER];
}

void dxl_write_byte( int id, int address, int value )
{
 8003c8c:	b500      	push	{lr}
	while(giBusUsing);
 8003c8e:	4b09      	ldr	r3, [pc, #36]	(8003cb4 <dxl_write_byte+0x28>)

	return (int)gbStatusPacket[PARAMETER];
}

void dxl_write_byte( int id, int address, int value )
{
 8003c90:	b081      	sub	sp, #4
	while(giBusUsing);
 8003c92:	681b      	ldr	r3, [r3, #0]

	return (int)gbStatusPacket[PARAMETER];
}

void dxl_write_byte( int id, int address, int value )
{
 8003c94:	4694      	mov	ip, r2
	while(giBusUsing);
 8003c96:	b963      	cbnz	r3, 8003cb2 <dxl_write_byte+0x26>

	gbInstructionPacket[ID] = (unsigned char)id;
 8003c98:	4b07      	ldr	r3, [pc, #28]	(8003cb8 <dxl_write_byte+0x2c>)
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	711a      	strb	r2, [r3, #4]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
	gbInstructionPacket[LENGTH] = 4;
 8003c9e:	2204      	movs	r2, #4

void dxl_write_byte( int id, int address, int value )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8003ca0:	7098      	strb	r0, [r3, #2]
	gbInstructionPacket[INSTRUCTION] = INST_WRITE;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8003ca2:	7159      	strb	r1, [r3, #5]
	gbInstructionPacket[PARAMETER+1] = (unsigned char)value;
 8003ca4:	f883 c006 	strb.w	ip, [r3, #6]
	gbInstructionPacket[LENGTH] = 4;
 8003ca8:	70da      	strb	r2, [r3, #3]
	
	dxl_txrx_packet();
 8003caa:	f7ff ffa5 	bl	8003bf8 <dxl_txrx_packet>
}
 8003cae:	b001      	add	sp, #4
 8003cb0:	bd00      	pop	{pc}
 8003cb2:	e7fe      	b.n	8003cb2 <dxl_write_byte+0x26>
 8003cb4:	20000214 	.word	0x20000214
 8003cb8:	2000012c 	.word	0x2000012c

08003cbc <dxl_read_byte>:
	
	dxl_txrx_packet();
}

int dxl_read_byte( int id, int address )
{
 8003cbc:	b500      	push	{lr}
	while(giBusUsing);
 8003cbe:	4b0a      	ldr	r3, [pc, #40]	(8003ce8 <dxl_read_byte+0x2c>)
	
	dxl_txrx_packet();
}

int dxl_read_byte( int id, int address )
{
 8003cc0:	b081      	sub	sp, #4
	while(giBusUsing);
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	b973      	cbnz	r3, 8003ce4 <dxl_read_byte+0x28>

	gbInstructionPacket[ID] = (unsigned char)id;
 8003cc6:	4a09      	ldr	r2, [pc, #36]	(8003cec <dxl_read_byte+0x30>)
	gbInstructionPacket[INSTRUCTION] = INST_READ;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	7113      	strb	r3, [r2, #4]
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 1;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	7193      	strb	r3, [r2, #6]
	gbInstructionPacket[LENGTH] = 4;
 8003cd0:	2304      	movs	r3, #4

int dxl_read_byte( int id, int address )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8003cd2:	7090      	strb	r0, [r2, #2]
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
	gbInstructionPacket[PARAMETER+1] = 1;
	gbInstructionPacket[LENGTH] = 4;
 8003cd4:	70d3      	strb	r3, [r2, #3]
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
	gbInstructionPacket[INSTRUCTION] = INST_READ;
	gbInstructionPacket[PARAMETER] = (unsigned char)address;
 8003cd6:	7151      	strb	r1, [r2, #5]
	gbInstructionPacket[PARAMETER+1] = 1;
	gbInstructionPacket[LENGTH] = 4;
	
	dxl_txrx_packet();
 8003cd8:	f7ff ff8e 	bl	8003bf8 <dxl_txrx_packet>
 8003cdc:	4b04      	ldr	r3, [pc, #16]	(8003cf0 <dxl_read_byte+0x34>)
 8003cde:	7958      	ldrb	r0, [r3, #5]

	return (int)gbStatusPacket[PARAMETER];
}
 8003ce0:	b001      	add	sp, #4
 8003ce2:	bd00      	pop	{pc}
 8003ce4:	e7fe      	b.n	8003ce4 <dxl_read_byte+0x28>
 8003ce6:	46c0      	nop			(mov r8, r8)
 8003ce8:	20000214 	.word	0x20000214
 8003cec:	2000012c 	.word	0x2000012c
 8003cf0:	200001cc 	.word	0x200001cc

08003cf4 <dxl_ping>:
	temp = temp >> 8;
	return (int)temp;
}

void dxl_ping( int id )
{
 8003cf4:	b500      	push	{lr}
	while(giBusUsing);
 8003cf6:	4b07      	ldr	r3, [pc, #28]	(8003d14 <dxl_ping+0x20>)
	temp = temp >> 8;
	return (int)temp;
}

void dxl_ping( int id )
{
 8003cf8:	b081      	sub	sp, #4
	while(giBusUsing);
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	b94b      	cbnz	r3, 8003d12 <dxl_ping+0x1e>

	gbInstructionPacket[ID] = (unsigned char)id;
 8003cfe:	4b06      	ldr	r3, [pc, #24]	(8003d18 <dxl_ping+0x24>)
	gbInstructionPacket[INSTRUCTION] = INST_PING;
 8003d00:	2201      	movs	r2, #1
 8003d02:	711a      	strb	r2, [r3, #4]
	gbInstructionPacket[LENGTH] = 2;
 8003d04:	2202      	movs	r2, #2

void dxl_ping( int id )
{
	while(giBusUsing);

	gbInstructionPacket[ID] = (unsigned char)id;
 8003d06:	7098      	strb	r0, [r3, #2]
	gbInstructionPacket[INSTRUCTION] = INST_PING;
	gbInstructionPacket[LENGTH] = 2;
 8003d08:	70da      	strb	r2, [r3, #3]
	
	dxl_txrx_packet();
 8003d0a:	f7ff ff75 	bl	8003bf8 <dxl_txrx_packet>
}
 8003d0e:	b001      	add	sp, #4
 8003d10:	bd00      	pop	{pc}
 8003d12:	e7fe      	b.n	8003d12 <dxl_ping+0x1e>
 8003d14:	20000214 	.word	0x20000214
 8003d18:	2000012c 	.word	0x2000012c

08003d1c <dxl_terminate>:

	return 1;
}

void dxl_terminate()
{
 8003d1c:	b500      	push	{lr}
 8003d1e:	b081      	sub	sp, #4
	dxl_hal_close();
 8003d20:	f7ff fe08 	bl	8003934 <dxl_hal_close>
}
 8003d24:	b001      	add	sp, #4
 8003d26:	bd00      	pop	{pc}

08003d28 <dxl_initialize>:
int gbCommStatus = COMM_RXSUCCESS;
int giBusUsing = 0;


int dxl_initialize( int devIndex, int baudnum )
{
 8003d28:	b500      	push	{lr}
	int baudrate;
	baudrate = 2000000 / (baudnum + 1);
	
	if( dxl_hal_open(devIndex, baudrate) == 0 )
 8003d2a:	4b09      	ldr	r3, [pc, #36]	(8003d50 <dxl_initialize+0x28>)
 8003d2c:	3101      	adds	r1, #1
 8003d2e:	fb93 f3f1 	sdiv	r3, r3, r1
int gbCommStatus = COMM_RXSUCCESS;
int giBusUsing = 0;


int dxl_initialize( int devIndex, int baudnum )
{
 8003d32:	b081      	sub	sp, #4
	int baudrate;
	baudrate = 2000000 / (baudnum + 1);
	
	if( dxl_hal_open(devIndex, baudrate) == 0 )
 8003d34:	4619      	mov	r1, r3
 8003d36:	f7ff fe03 	bl	8003940 <dxl_hal_open>
 8003d3a:	b130      	cbz	r0, 8003d4a <dxl_initialize+0x22>
		return 0;

	gbCommStatus = COMM_RXSUCCESS;
 8003d3c:	4b05      	ldr	r3, [pc, #20]	(8003d54 <dxl_initialize+0x2c>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
	giBusUsing = 0;
 8003d42:	4b05      	ldr	r3, [pc, #20]	(8003d58 <dxl_initialize+0x30>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	2001      	movs	r0, #1



	return 1;
}
 8003d4a:	b001      	add	sp, #4
 8003d4c:	bd00      	pop	{pc}
 8003d4e:	46c0      	nop			(mov r8, r8)
 8003d50:	001e8480 	.word	0x001e8480
 8003d54:	20000010 	.word	0x20000010
 8003d58:	20000214 	.word	0x20000214

08003d5c <FLASH_SetLatency>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Sets the Latency value */
  FLASH->ACR &= ACR_LATENCY_Mask;
 8003d5c:	4a04      	ldr	r2, [pc, #16]	(8003d70 <FLASH_SetLatency+0x14>)
 8003d5e:	6813      	ldr	r3, [r2, #0]
 8003d60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d64:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_Latency;
 8003d66:	6813      	ldr	r3, [r2, #0]
 8003d68:	4318      	orrs	r0, r3
 8003d6a:	6010      	str	r0, [r2, #0]
}
 8003d6c:	4770      	bx	lr
 8003d6e:	46c0      	nop			(mov r8, r8)
 8003d70:	40022000 	.word	0x40022000

08003d74 <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 8003d74:	4a04      	ldr	r2, [pc, #16]	(8003d88 <FLASH_HalfCycleAccessCmd+0x14>)
 8003d76:	6813      	ldr	r3, [r2, #0]
 8003d78:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 8003d7c:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 8003d7e:	6813      	ldr	r3, [r2, #0]
 8003d80:	4318      	orrs	r0, r3
 8003d82:	6010      	str	r0, [r2, #0]
}
 8003d84:	4770      	bx	lr
 8003d86:	46c0      	nop			(mov r8, r8)
 8003d88:	40022000 	.word	0x40022000

08003d8c <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 8003d8c:	4a04      	ldr	r2, [pc, #16]	(8003da0 <FLASH_PrefetchBufferCmd+0x14>)
 8003d8e:	6813      	ldr	r3, [r2, #0]
 8003d90:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 8003d94:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 8003d96:	6813      	ldr	r3, [r2, #0]
 8003d98:	4318      	orrs	r0, r3
 8003d9a:	6010      	str	r0, [r2, #0]
}
 8003d9c:	4770      	bx	lr
 8003d9e:	46c0      	nop			(mov r8, r8)
 8003da0:	40022000 	.word	0x40022000

08003da4 <FLASH_Unlock>:
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8003da4:	4b03      	ldr	r3, [pc, #12]	(8003db4 <FLASH_Unlock+0x10>)
 8003da6:	4a04      	ldr	r2, [pc, #16]	(8003db8 <FLASH_Unlock+0x14>)
 8003da8:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8003daa:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003dae:	605a      	str	r2, [r3, #4]
}
 8003db0:	4770      	bx	lr
 8003db2:	46c0      	nop			(mov r8, r8)
 8003db4:	40022000 	.word	0x40022000
 8003db8:	45670123 	.word	0x45670123

08003dbc <FLASH_Lock>:
* Return         : None
*******************************************************************************/
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
 8003dbc:	4a02      	ldr	r2, [pc, #8]	(8003dc8 <FLASH_Lock+0xc>)
 8003dbe:	6913      	ldr	r3, [r2, #16]
 8003dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc4:	6113      	str	r3, [r2, #16]
}
 8003dc6:	4770      	bx	lr
 8003dc8:	40022000 	.word	0x40022000

08003dcc <FLASH_GetUserOptionByte>:
*                  and RST_STDBY(Bit2).
*******************************************************************************/
u32 FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (u32)(FLASH->OBR >> 2);
 8003dcc:	4b01      	ldr	r3, [pc, #4]	(8003dd4 <FLASH_GetUserOptionByte+0x8>)
 8003dce:	69d8      	ldr	r0, [r3, #28]
 8003dd0:	0880      	lsrs	r0, r0, #2
}
 8003dd2:	4770      	bx	lr
 8003dd4:	40022000 	.word	0x40022000

08003dd8 <FLASH_GetWriteProtectionOptionByte>:
* Return         : The FLASH Write Protection  Option Bytes Register value
*******************************************************************************/
u32 FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Falsh write protection Register value */
  return (u32)(FLASH->WRPR);
 8003dd8:	4b01      	ldr	r3, [pc, #4]	(8003de0 <FLASH_GetWriteProtectionOptionByte+0x8>)
 8003dda:	6a18      	ldr	r0, [r3, #32]
}
 8003ddc:	4770      	bx	lr
 8003dde:	46c0      	nop			(mov r8, r8)
 8003de0:	40022000 	.word	0x40022000

08003de4 <FLASH_GetReadOutProtectionStatus>:
*******************************************************************************/
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;

  if ((FLASH->OBR & RDPRT_Mask) != (u32)RESET)
 8003de4:	4b02      	ldr	r3, [pc, #8]	(8003df0 <FLASH_GetReadOutProtectionStatus+0xc>)
 8003de6:	69d8      	ldr	r0, [r3, #28]
 8003de8:	0840      	lsrs	r0, r0, #1
 8003dea:	f000 0001 	and.w	r0, r0, #1	; 0x1
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 8003dee:	4770      	bx	lr
 8003df0:	40022000 	.word	0x40022000

08003df4 <FLASH_GetPrefetchBufferStatus>:
*******************************************************************************/
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (u32)RESET)
 8003df4:	4b02      	ldr	r3, [pc, #8]	(8003e00 <FLASH_GetPrefetchBufferStatus+0xc>)
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	0940      	lsrs	r0, r0, #5
 8003dfa:	f000 0001 	and.w	r0, r0, #1	; 0x1
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 8003dfe:	4770      	bx	lr
 8003e00:	40022000 	.word	0x40022000

08003e04 <FLASH_ITConfig>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8003e04:	b121      	cbz	r1, 8003e10 <FLASH_ITConfig+0xc>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8003e06:	4a05      	ldr	r2, [pc, #20]	(8003e1c <FLASH_ITConfig+0x18>)
 8003e08:	6913      	ldr	r3, [r2, #16]
 8003e0a:	ea40 0303 	orr.w	r3, r0, r3
 8003e0e:	e003      	b.n	8003e18 <FLASH_ITConfig+0x14>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(u32)FLASH_IT;
 8003e10:	4a02      	ldr	r2, [pc, #8]	(8003e1c <FLASH_ITConfig+0x18>)
 8003e12:	6913      	ldr	r3, [r2, #16]
 8003e14:	ea23 0300 	bic.w	r3, r3, r0
 8003e18:	6113      	str	r3, [r2, #16]
  }
}
 8003e1a:	4770      	bx	lr
 8003e1c:	40022000 	.word	0x40022000

08003e20 <FLASH_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;

  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 8003e20:	2801      	cmp	r0, #1
 8003e22:	d104      	bne.n	8003e2e <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (u32)RESET)
 8003e24:	4b05      	ldr	r3, [pc, #20]	(8003e3c <FLASH_GetFlagStatus+0x1c>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	f003 0001 	and.w	r0, r3, #1	; 0x1
 8003e2c:	e005      	b.n	8003e3a <FLASH_GetFlagStatus+0x1a>
      bitstatus = RESET;
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (u32)RESET)
 8003e2e:	4b03      	ldr	r3, [pc, #12]	(8003e3c <FLASH_GetFlagStatus+0x1c>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	4218      	tst	r0, r3
 8003e34:	bf0c      	ite	eq
 8003e36:	2000      	moveq	r0, #0
 8003e38:	2001      	movne	r0, #1
      bitstatus = RESET;
    }
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 8003e3a:	4770      	bx	lr
 8003e3c:	40022000 	.word	0x40022000

08003e40 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8003e40:	4b01      	ldr	r3, [pc, #4]	(8003e48 <FLASH_ClearFlag+0x8>)
 8003e42:	60d8      	str	r0, [r3, #12]
}
 8003e44:	4770      	bx	lr
 8003e46:	46c0      	nop			(mov r8, r8)
 8003e48:	40022000 	.word	0x40022000

08003e4c <FLASH_GetStatus>:
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8003e4c:	4a09      	ldr	r2, [pc, #36]	(8003e74 <FLASH_GetStatus+0x28>)
 8003e4e:	68d3      	ldr	r3, [r2, #12]
 8003e50:	f013 0f01 	tst.w	r3, #1	; 0x1
 8003e54:	d001      	beq.n	8003e5a <FLASH_GetStatus+0xe>
 8003e56:	2001      	movs	r0, #1
 8003e58:	e00b      	b.n	8003e72 <FLASH_GetStatus+0x26>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 8003e5a:	68d3      	ldr	r3, [r2, #12]
 8003e5c:	f013 0f04 	tst.w	r3, #4	; 0x4
 8003e60:	d001      	beq.n	8003e66 <FLASH_GetStatus+0x1a>
 8003e62:	2002      	movs	r0, #2
 8003e64:	e005      	b.n	8003e72 <FLASH_GetStatus+0x26>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 8003e66:	68d3      	ldr	r3, [r2, #12]
 8003e68:	f013 0f10 	tst.w	r3, #16	; 0x10
 8003e6c:	bf14      	ite	ne
 8003e6e:	2003      	movne	r0, #3
 8003e70:	2004      	moveq	r0, #4
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 8003e72:	4770      	bx	lr
 8003e74:	40022000 	.word	0x40022000

08003e78 <FLASH_WaitForLastOperation>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 8003e78:	b510      	push	{r4, lr}
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8003e7a:	4a23      	ldr	r2, [pc, #140]	(8003f08 <FLASH_WaitForLastOperation+0x90>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 8003e7c:	b082      	sub	sp, #8
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8003e7e:	68d3      	ldr	r3, [r2, #12]
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 8003e80:	4601      	mov	r1, r0
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8003e82:	f013 0f01 	tst.w	r3, #1	; 0x1
 8003e86:	d001      	beq.n	8003e8c <FLASH_WaitForLastOperation+0x14>
 8003e88:	2001      	movs	r0, #1
 8003e8a:	e02a      	b.n	8003ee2 <FLASH_WaitForLastOperation+0x6a>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 8003e8c:	68d3      	ldr	r3, [r2, #12]
 8003e8e:	f013 0f04 	tst.w	r3, #4	; 0x4
 8003e92:	d001      	beq.n	8003e98 <FLASH_WaitForLastOperation+0x20>
 8003e94:	2002      	movs	r0, #2
 8003e96:	e024      	b.n	8003ee2 <FLASH_WaitForLastOperation+0x6a>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 8003e98:	68d3      	ldr	r3, [r2, #12]
 8003e9a:	f013 0f10 	tst.w	r3, #16	; 0x10
 8003e9e:	bf14      	ite	ne
 8003ea0:	2003      	movne	r0, #3
 8003ea2:	2004      	moveq	r0, #4
 8003ea4:	e01d      	b.n	8003ee2 <FLASH_WaitForLastOperation+0x6a>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 8003ea6:	9401      	str	r4, [sp, #4]

  for(i = 0xFF; i != 0; i--)
 8003ea8:	f8cd c004 	str.w	ip, [sp, #4]
 8003eac:	e002      	b.n	8003eb4 <FLASH_WaitForLastOperation+0x3c>
 8003eae:	9b01      	ldr	r3, [sp, #4]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	9301      	str	r3, [sp, #4]
 8003eb4:	9b01      	ldr	r3, [sp, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f9      	bne.n	8003eae <FLASH_WaitForLastOperation+0x36>
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8003eba:	68d3      	ldr	r3, [r2, #12]
 8003ebc:	f013 0f01 	tst.w	r3, #1	; 0x1
 8003ec0:	d001      	beq.n	8003ec6 <FLASH_WaitForLastOperation+0x4e>
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	e00b      	b.n	8003ede <FLASH_WaitForLastOperation+0x66>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 8003ec6:	68d3      	ldr	r3, [r2, #12]
 8003ec8:	f013 0f04 	tst.w	r3, #4	; 0x4
 8003ecc:	d001      	beq.n	8003ed2 <FLASH_WaitForLastOperation+0x5a>
 8003ece:	2002      	movs	r0, #2
 8003ed0:	e005      	b.n	8003ede <FLASH_WaitForLastOperation+0x66>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 8003ed2:	68d3      	ldr	r3, [r2, #12]
 8003ed4:	f013 0f10 	tst.w	r3, #16	; 0x10
 8003ed8:	bf14      	ite	ne
 8003eda:	2003      	movne	r0, #3
 8003edc:	2004      	moveq	r0, #4
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    status = FLASH_GetStatus();
    Timeout--;
 8003ede:	3901      	subs	r1, #1
 8003ee0:	e003      	b.n	8003eea <FLASH_WaitForLastOperation+0x72>
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8003ee2:	4a09      	ldr	r2, [pc, #36]	(8003f08 <FLASH_WaitForLastOperation+0x90>)
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 8003ee4:	2400      	movs	r4, #0

  for(i = 0xFF; i != 0; i--)
 8003ee6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8003eea:	1e0b      	subs	r3, r1, #0
 8003eec:	bf18      	it	ne
 8003eee:	2301      	movne	r3, #1
 8003ef0:	2801      	cmp	r0, #1
 8003ef2:	bf14      	ite	ne
 8003ef4:	2300      	movne	r3, #0
 8003ef6:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1d3      	bne.n	8003ea6 <FLASH_WaitForLastOperation+0x2e>
    delay();
    status = FLASH_GetStatus();
    Timeout--;
  }

  if(Timeout == 0x00 )
 8003efe:	2900      	cmp	r1, #0
 8003f00:	bf08      	it	eq
 8003f02:	2005      	moveq	r0, #5
    status = FLASH_TIMEOUT;
  }

  /* Return the operation status */
  return status;
}
 8003f04:	b002      	add	sp, #8
 8003f06:	bd10      	pop	{r4, pc}
 8003f08:	40022000 	.word	0x40022000

08003f0c <FLASH_UserOptionByteConfig>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8003f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8003f0e:	4b13      	ldr	r3, [pc, #76]	(8003f5c <FLASH_UserOptionByteConfig+0x50>)
 8003f10:	4c13      	ldr	r4, [pc, #76]	(8003f60 <FLASH_UserOptionByteConfig+0x54>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8003f12:	b081      	sub	sp, #4
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8003f14:	60a3      	str	r3, [r4, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 8003f16:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8003f1a:	4605      	mov	r5, r0
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
 8003f1c:	60a3      	str	r3, [r4, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003f1e:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8003f20:	460e      	mov	r6, r1
 8003f22:	4617      	mov	r7, r2
  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003f24:	f7ff ffa8 	bl	8003e78 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8003f28:	2804      	cmp	r0, #4
 8003f2a:	d115      	bne.n	8003f58 <FLASH_UserOptionByteConfig+0x4c>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8003f2c:	6923      	ldr	r3, [r4, #16]
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 8003f2e:	4a0d      	ldr	r2, [pc, #52]	(8003f64 <FLASH_UserOptionByteConfig+0x58>)
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8003f30:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8003f34:	6123      	str	r3, [r4, #16]
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 8003f36:	f045 03f8 	orr.w	r3, r5, #248	; 0xf8
 8003f3a:	ea46 0303 	orr.w	r3, r6, r3
 8003f3e:	ea47 0303 	orr.w	r3, r7, r3
 8003f42:	8053      	strh	r3, [r2, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003f44:	200f      	movs	r0, #15
 8003f46:	f7ff ff97 	bl	8003e78 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8003f4a:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8003f4c:	bf1f      	itttt	ne
 8003f4e:	6922      	ldrne	r2, [r4, #16]
 8003f50:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8003f54:	4013      	andne	r3, r2
 8003f56:	6123      	strne	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 8003f58:	b001      	add	sp, #4
 8003f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f5c:	45670123 	.word	0x45670123
 8003f60:	40022000 	.word	0x40022000
 8003f64:	1ffff800 	.word	0x1ffff800

08003f68 <FLASH_ReadOutProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 8003f68:	b530      	push	{r4, r5, lr}
 8003f6a:	4605      	mov	r5, r0
 8003f6c:	b081      	sub	sp, #4
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  status = FLASH_WaitForLastOperation(EraseTimeout);
 8003f6e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003f72:	f7ff ff81 	bl	8003e78 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8003f76:	2804      	cmp	r0, #4
 8003f78:	d13c      	bne.n	8003ff4 <FLASH_ReadOutProtection+0x8c>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8003f7a:	4c1f      	ldr	r4, [pc, #124]	(8003ff8 <FLASH_ReadOutProtection+0x90>)
 8003f7c:	4b1f      	ldr	r3, [pc, #124]	(8003ffc <FLASH_ReadOutProtection+0x94>)

    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8003f7e:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8003f82:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8003f84:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8003f88:	60a3      	str	r3, [r4, #8]

    FLASH->CR |= CR_OPTER_Set;
 8003f8a:	6923      	ldr	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8003f8c:	301b      	adds	r0, #27
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;

    FLASH->CR |= CR_OPTER_Set;
 8003f8e:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 8003f92:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 8003f94:	6923      	ldr	r3, [r4, #16]
 8003f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f9a:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8003f9c:	f7ff ff6c 	bl	8003e78 <FLASH_WaitForLastOperation>

    if(status == FLASH_COMPLETE)
 8003fa0:	2804      	cmp	r0, #4
 8003fa2:	d120      	bne.n	8003fe6 <FLASH_ReadOutProtection+0x7e>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 8003fa4:	6923      	ldr	r3, [r4, #16]
 8003fa6:	f641 72df 	movw	r2, #8159	; 0x1fdf
 8003faa:	ea03 0202 	and.w	r2, r3, r2
 8003fae:	6122      	str	r2, [r4, #16]

      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set; 
 8003fb0:	6923      	ldr	r3, [r4, #16]
 8003fb2:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8003fb6:	6123      	str	r3, [r4, #16]

      if(NewState != DISABLE)
 8003fb8:	b11d      	cbz	r5, 8003fc2 <FLASH_ReadOutProtection+0x5a>
      {
        OB->RDP = 0x00;
 8003fba:	4b11      	ldr	r3, [pc, #68]	(8004000 <FLASH_ReadOutProtection+0x98>)
 8003fbc:	f04f 0200 	mov.w	r2, #0	; 0x0
 8003fc0:	e002      	b.n	8003fc8 <FLASH_ReadOutProtection+0x60>
      }
      else
      {
        OB->RDP = RDP_Key;  
 8003fc2:	4b0f      	ldr	r3, [pc, #60]	(8004000 <FLASH_ReadOutProtection+0x98>)
 8003fc4:	f04f 02a5 	mov.w	r2, #165	; 0xa5
 8003fc8:	801a      	strh	r2, [r3, #0]
      }

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 8003fca:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003fce:	f7ff ff53 	bl	8003e78 <FLASH_WaitForLastOperation>
    
      if(status != FLASH_BUSY)
 8003fd2:	2801      	cmp	r0, #1
 8003fd4:	d00e      	beq.n	8003ff4 <FLASH_ReadOutProtection+0x8c>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 8003fd6:	4908      	ldr	r1, [pc, #32]	(8003ff8 <FLASH_ReadOutProtection+0x90>)
 8003fd8:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8003fdc:	690a      	ldr	r2, [r1, #16]
 8003fde:	ea02 0303 	and.w	r3, r2, r3
 8003fe2:	610b      	str	r3, [r1, #16]
 8003fe4:	e006      	b.n	8003ff4 <FLASH_ReadOutProtection+0x8c>
      }
    }
    else 
    {
      if(status != FLASH_BUSY)
 8003fe6:	2801      	cmp	r0, #1
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= CR_OPTER_Reset;
 8003fe8:	bf1f      	itttt	ne
 8003fea:	6922      	ldrne	r2, [r4, #16]
 8003fec:	f641 73df 	movwne	r3, #8159	; 0x1fdf
 8003ff0:	4013      	andne	r3, r2
 8003ff2:	6123      	strne	r3, [r4, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;      
}
 8003ff4:	b001      	add	sp, #4
 8003ff6:	bd30      	pop	{r4, r5, pc}
 8003ff8:	40022000 	.word	0x40022000
 8003ffc:	45670123 	.word	0x45670123
 8004000:	1ffff800 	.word	0x1ffff800

08004004 <FLASH_EnableWriteProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EnableWriteProtection(u32 FLASH_Pages)
{
 8004004:	b510      	push	{r4, lr}
 8004006:	4604      	mov	r4, r0
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004008:	200f      	movs	r0, #15
 800400a:	f7ff ff35 	bl	8003e78 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800400e:	2804      	cmp	r0, #4
 8004010:	d150      	bne.n	80040b4 <FLASH_EnableWriteProtection+0xb0>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8004012:	4a29      	ldr	r2, [pc, #164]	(80040b8 <FLASH_EnableWriteProtection+0xb4>)
 8004014:	4b29      	ldr	r3, [pc, #164]	(80040bc <FLASH_EnableWriteProtection+0xb8>)
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
 8004016:	ea6f 0404 	mvn.w	r4, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800401a:	6093      	str	r3, [r2, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 800401c:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8004020:	6093      	str	r3, [r2, #8]
    FLASH->CR |= CR_OPTPG_Set;
 8004022:	6913      	ldr	r3, [r2, #16]
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
 8004024:	b2e1      	uxtb	r1, r4
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 8004026:	f043 0310 	orr.w	r3, r3, #16	; 0x10

    if(WRP0_Data != 0xFF)
 800402a:	29ff      	cmp	r1, #255
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 800402c:	6113      	str	r3, [r2, #16]

    if(WRP0_Data != 0xFF)
 800402e:	d004      	beq.n	800403a <FLASH_EnableWriteProtection+0x36>
    {
      OB->WRP0 = WRP0_Data;
 8004030:	4b23      	ldr	r3, [pc, #140]	(80040c0 <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004032:	200f      	movs	r0, #15
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;

    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 8004034:	8119      	strh	r1, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004036:	f7ff ff1f 	bl	8003e78 <FLASH_WaitForLastOperation>
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
 800403a:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 800403e:	0a1a      	lsrs	r2, r3, #8
      OB->WRP0 = WRP0_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8004040:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 8004044:	bf18      	it	ne
 8004046:	2301      	movne	r3, #1
 8004048:	2804      	cmp	r0, #4
 800404a:	bf14      	ite	ne
 800404c:	2300      	movne	r3, #0
 800404e:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 8004052:	b123      	cbz	r3, 800405e <FLASH_EnableWriteProtection+0x5a>
    {
      OB->WRP1 = WRP1_Data;
 8004054:	4b1a      	ldr	r3, [pc, #104]	(80040c0 <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004056:	200f      	movs	r0, #15
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 8004058:	815a      	strh	r2, [r3, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800405a:	f7ff ff0d 	bl	8003e78 <FLASH_WaitForLastOperation>
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
 800405e:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 8004062:	0c1a      	lsrs	r2, r3, #16
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 8004064:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 8004068:	bf18      	it	ne
 800406a:	2301      	movne	r3, #1
 800406c:	2804      	cmp	r0, #4
 800406e:	bf14      	ite	ne
 8004070:	2300      	movne	r3, #0
 8004072:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 8004076:	b123      	cbz	r3, 8004082 <FLASH_EnableWriteProtection+0x7e>
    {
      OB->WRP2 = WRP2_Data;
 8004078:	4b11      	ldr	r3, [pc, #68]	(80040c0 <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800407a:	200f      	movs	r0, #15
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
    {
      OB->WRP2 = WRP2_Data;
 800407c:	819a      	strh	r2, [r3, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800407e:	f7ff fefb 	bl	8003e78 <FLASH_WaitForLastOperation>
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
 8004082:	0e22      	lsrs	r2, r4, #24
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8004084:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 8004088:	bf18      	it	ne
 800408a:	2301      	movne	r3, #1
 800408c:	2804      	cmp	r0, #4
 800408e:	bf14      	ite	ne
 8004090:	2300      	movne	r3, #0
 8004092:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 8004096:	b123      	cbz	r3, 80040a2 <FLASH_EnableWriteProtection+0x9e>
    {
      OB->WRP3 = WRP3_Data;
 8004098:	4b09      	ldr	r3, [pc, #36]	(80040c0 <FLASH_EnableWriteProtection+0xbc>)
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800409a:	200f      	movs	r0, #15
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
 800409c:	81da      	strh	r2, [r3, #14]
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800409e:	f7ff feeb 	bl	8003e78 <FLASH_WaitForLastOperation>
    }
          
    if(status != FLASH_BUSY)
 80040a2:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 80040a4:	bf1f      	itttt	ne
 80040a6:	4904      	ldrne	r1, [pc, #16]	(80040b8 <FLASH_EnableWriteProtection+0xb4>)
 80040a8:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80040ac:	690a      	ldrne	r2, [r1, #16]
 80040ae:	4013      	andne	r3, r2
 80040b0:	bf18      	it	ne
 80040b2:	610b      	strne	r3, [r1, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
 80040b4:	bd10      	pop	{r4, pc}
 80040b6:	46c0      	nop			(mov r8, r8)
 80040b8:	40022000 	.word	0x40022000
 80040bc:	45670123 	.word	0x45670123
 80040c0:	1ffff800 	.word	0x1ffff800

080040c4 <FLASH_ProgramOptionByteData>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	4606      	mov	r6, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80040c8:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 80040ca:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80040cc:	f7ff fed4 	bl	8003e78 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 80040d0:	2804      	cmp	r0, #4
 80040d2:	d114      	bne.n	80040fe <FLASH_ProgramOptionByteData+0x3a>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80040d4:	4c0a      	ldr	r4, [pc, #40]	(8004100 <FLASH_ProgramOptionByteData+0x3c>)
 80040d6:	4b0b      	ldr	r3, [pc, #44]	(8004104 <FLASH_ProgramOptionByteData+0x40>)
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
    *(vu16*)Address = Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80040d8:	200f      	movs	r0, #15
  status = FLASH_WaitForLastOperation(ProgramTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80040da:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80040dc:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80040e0:	60a3      	str	r3, [r4, #8]

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 80040e2:	6923      	ldr	r3, [r4, #16]
 80040e4:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 80040e8:	6123      	str	r3, [r4, #16]
    *(vu16*)Address = Data;
 80040ea:	8035      	strh	r5, [r6, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80040ec:	f7ff fec4 	bl	8003e78 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 80040f0:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 80040f2:	bf1f      	itttt	ne
 80040f4:	6922      	ldrne	r2, [r4, #16]
 80040f6:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80040fa:	4013      	andne	r3, r2
 80040fc:	6123      	strne	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte Data Program Status */
  return status;      
}
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
 8004100:	40022000 	.word	0x40022000
 8004104:	45670123 	.word	0x45670123

08004108 <FLASH_ProgramHalfWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800410c:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 800410e:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004110:	f7ff feb2 	bl	8003e78 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8004114:	2804      	cmp	r0, #4
 8004116:	d10f      	bne.n	8004138 <FLASH_ProgramHalfWord+0x30>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8004118:	4c08      	ldr	r4, [pc, #32]	(800413c <FLASH_ProgramHalfWord+0x34>)
  
    *(vu16*)Address = Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800411a:	200f      	movs	r0, #15
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 800411c:	6923      	ldr	r3, [r4, #16]
 800411e:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8004122:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = Data;
 8004124:	8035      	strh	r5, [r6, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004126:	f7ff fea7 	bl	8003e78 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 800412a:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 800412c:	bf1f      	itttt	ne
 800412e:	6922      	ldrne	r2, [r4, #16]
 8004130:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 8004134:	4013      	andne	r3, r2
 8004136:	6123      	strne	r3, [r4, #16]
    }
  } 
  /* Return the Program Status */
  return status;
}
 8004138:	bd70      	pop	{r4, r5, r6, pc}
 800413a:	46c0      	nop			(mov r8, r8)
 800413c:	40022000 	.word	0x40022000

08004140 <FLASH_ProgramWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004144:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8004146:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004148:	f7ff fe96 	bl	8003e78 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800414c:	2804      	cmp	r0, #4
 800414e:	d117      	bne.n	8004180 <FLASH_ProgramWord+0x40>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8004150:	4c0c      	ldr	r4, [pc, #48]	(8004184 <FLASH_ProgramWord+0x44>)
  
    *(vu16*)Address = (u16)Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004152:	200f      	movs	r0, #15
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8004154:	6923      	ldr	r3, [r4, #16]
 8004156:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 800415a:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = (u16)Data;
 800415c:	b2ab      	uxth	r3, r5
 800415e:	8033      	strh	r3, [r6, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004160:	f7ff fe8a 	bl	8003e78 <FLASH_WaitForLastOperation>
 
    if(status == FLASH_COMPLETE)
 8004164:	2804      	cmp	r0, #4
 8004166:	d104      	bne.n	8004172 <FLASH_ProgramWord+0x32>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      *(vu16*)(Address + 2) = Data >> 16;
 8004168:	0c2b      	lsrs	r3, r5, #16
 800416a:	8073      	strh	r3, [r6, #2]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800416c:	200f      	movs	r0, #15
 800416e:	f7ff fe83 	bl	8003e78 <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_PG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 8004172:	2801      	cmp	r0, #1
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
 8004174:	bf1f      	itttt	ne
 8004176:	6922      	ldrne	r2, [r4, #16]
 8004178:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 800417c:	4013      	andne	r3, r2
 800417e:	6123      	strne	r3, [r4, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 8004180:	bd70      	pop	{r4, r5, r6, pc}
 8004182:	46c0      	nop			(mov r8, r8)
 8004184:	40022000 	.word	0x40022000

08004188 <FLASH_EraseOptionBytes>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseOptionBytes(void)
{
 8004188:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 800418a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800418e:	f7ff fe73 	bl	8003e78 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8004192:	2804      	cmp	r0, #4
 8004194:	d12c      	bne.n	80041f0 <FLASH_EraseOptionBytes+0x68>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8004196:	4c17      	ldr	r4, [pc, #92]	(80041f4 <FLASH_EraseOptionBytes+0x6c>)
 8004198:	4b17      	ldr	r3, [pc, #92]	(80041f8 <FLASH_EraseOptionBytes+0x70>)
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800419a:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800419e:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80041a0:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80041a4:	60a3      	str	r3, [r4, #8]
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 80041a6:	6923      	ldr	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80041a8:	301b      	adds	r0, #27
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 80041aa:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 80041ae:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 80041b0:	6923      	ldr	r3, [r4, #16]
 80041b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041b6:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80041b8:	f7ff fe5e 	bl	8003e78 <FLASH_WaitForLastOperation>
    
    if(status == FLASH_COMPLETE)
 80041bc:	2804      	cmp	r0, #4
 80041be:	d110      	bne.n	80041e2 <FLASH_EraseOptionBytes+0x5a>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80041c0:	6922      	ldr	r2, [r4, #16]
 80041c2:	f641 73df 	movw	r3, #8159	; 0x1fdf
 80041c6:	ea02 0303 	and.w	r3, r2, r3
 80041ca:	6123      	str	r3, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 80041cc:	6923      	ldr	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 80041ce:	f04f 02a5 	mov.w	r2, #165	; 0xa5
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 80041d2:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 80041d6:	6123      	str	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 80041d8:	4b08      	ldr	r3, [pc, #32]	(80041fc <FLASH_EraseOptionBytes+0x74>)

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80041da:	200f      	movs	r0, #15
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 80041dc:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80041de:	f7ff fe4b 	bl	8003e78 <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_OPTPG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 80041e2:	2801      	cmp	r0, #1
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 80041e4:	bf1f      	itttt	ne
 80041e6:	6922      	ldrne	r2, [r4, #16]
 80041e8:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80041ec:	4013      	andne	r3, r2
 80041ee:	6123      	strne	r3, [r4, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 80041f0:	bd10      	pop	{r4, pc}
 80041f2:	46c0      	nop			(mov r8, r8)
 80041f4:	40022000 	.word	0x40022000
 80041f8:	45670123 	.word	0x45670123
 80041fc:	1ffff800 	.word	0x1ffff800

08004200 <FLASH_EraseAllPages>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseAllPages(void)
{
 8004200:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8004202:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004206:	f7ff fe37 	bl	8003e78 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800420a:	2804      	cmp	r0, #4
 800420c:	d113      	bne.n	8004236 <FLASH_EraseAllPages+0x36>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 800420e:	4c0a      	ldr	r4, [pc, #40]	(8004238 <FLASH_EraseAllPages+0x38>)
 8004210:	6923      	ldr	r3, [r4, #16]
 8004212:	4303      	orrs	r3, r0
 8004214:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 8004216:	6923      	ldr	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004218:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
     FLASH->CR |= CR_STRT_Set;
 800421c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004220:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004222:	301b      	adds	r0, #27
 8004224:	f7ff fe28 	bl	8003e78 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8004228:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= CR_MER_Reset;
 800422a:	bf1f      	itttt	ne
 800422c:	6922      	ldrne	r2, [r4, #16]
 800422e:	f641 73fb 	movwne	r3, #8187	; 0x1ffb
 8004232:	4013      	andne	r3, r2
 8004234:	6123      	strne	r3, [r4, #16]
    }
  }	   
  /* Return the Erase Status */
  return status;
}
 8004236:	bd10      	pop	{r4, pc}
 8004238:	40022000 	.word	0x40022000

0800423c <FLASH_ErasePage>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ErasePage(u32 Page_Address)
{
 800423c:	b530      	push	{r4, r5, lr}
 800423e:	4605      	mov	r5, r0
 8004240:	b081      	sub	sp, #4

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8004242:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004246:	f7ff fe17 	bl	8003e78 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800424a:	2804      	cmp	r0, #4
 800424c:	d115      	bne.n	800427a <FLASH_ErasePage+0x3e>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 800424e:	4c0c      	ldr	r4, [pc, #48]	(8004280 <FLASH_ErasePage+0x44>)
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004250:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8004254:	6923      	ldr	r3, [r4, #16]
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004256:	301b      	adds	r0, #27
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8004258:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 800425c:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 800425e:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 8004260:	6923      	ldr	r3, [r4, #16]
 8004262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004266:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004268:	f7ff fe06 	bl	8003e78 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 800426c:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
 800426e:	bf1f      	itttt	ne
 8004270:	6922      	ldrne	r2, [r4, #16]
 8004272:	f641 73fd 	movwne	r3, #8189	; 0x1ffd
 8004276:	4013      	andne	r3, r2
 8004278:	6123      	strne	r3, [r4, #16]
    }
  }
  /* Return the Erase Status */
  return status;
}
 800427a:	b001      	add	sp, #4
 800427c:	bd30      	pop	{r4, r5, pc}
 800427e:	46c0      	nop			(mov r8, r8)
 8004280:	40022000 	.word	0x40022000

08004284 <GPIO_Init>:
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004284:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 8004286:	78cd      	ldrb	r5, [r1, #3]
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8004288:	880e      	ldrh	r6, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);

  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
 800428a:	f015 0f10 	tst.w	r5, #16	; 0x10
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 800428e:	bf18      	it	ne
 8004290:	788b      	ldrbne	r3, [r1, #2]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 8004292:	f005 070f 	and.w	r7, r5, #15	; 0xf
  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 8004296:	bf18      	it	ne
 8004298:	431f      	orrne	r7, r3
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 800429a:	f016 0fff 	tst.w	r6, #255	; 0xff
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800429e:	b083      	sub	sp, #12
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 80042a0:	d01e      	beq.n	80042e0 <GPIO_Init+0x5c>
  {
    tmpreg = GPIOx->CRL;
 80042a2:	6804      	ldr	r4, [r0, #0]
 80042a4:	2100      	movs	r1, #0

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((u32)0x01) << pinpos;
 80042a6:	2201      	movs	r2, #1
 80042a8:	fa12 f301 	lsls.w	r3, r2, r1
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80042ac:	ea03 0c06 	and.w	ip, r3, r6

      if (currentpin == pos)
 80042b0:	459c      	cmp	ip, r3
 80042b2:	d111      	bne.n	80042d8 <GPIO_Init+0x54>
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
 80042b4:	008a      	lsls	r2, r1, #2
        tmpreg &= ~pinmask;
 80042b6:	230f      	movs	r3, #15
 80042b8:	4093      	lsls	r3, r2

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80042ba:	fa17 f202 	lsls.w	r2, r7, r2
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 80042be:	ea24 0403 	bic.w	r4, r4, r3

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80042c2:	4314      	orrs	r4, r2

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80042c4:	2d28      	cmp	r5, #40
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 80042c6:	9301      	str	r3, [sp, #4]
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((u32)0x01) << pinpos);
 80042c8:	bf08      	it	eq
 80042ca:	f8c0 c014 	streq.w	ip, [r0, #20]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80042ce:	d003      	beq.n	80042d8 <GPIO_Init+0x54>
          GPIOx->BRR = (((u32)0x01) << pinpos);
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80042d0:	2d48      	cmp	r5, #72
          {
            GPIOx->BSRR = (((u32)0x01) << pinpos);
 80042d2:	bf08      	it	eq
 80042d4:	f8c0 c010 	streq.w	ip, [r0, #16]
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80042d8:	3101      	adds	r1, #1
 80042da:	2908      	cmp	r1, #8
 80042dc:	d1e3      	bne.n	80042a6 <GPIO_Init+0x22>
            GPIOx->BSRR = (((u32)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80042de:	6004      	str	r4, [r0, #0]
  }

/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80042e0:	2eff      	cmp	r6, #255
 80042e2:	d920      	bls.n	8004326 <GPIO_Init+0xa2>
  {
    tmpreg = GPIOx->CRH;
 80042e4:	6844      	ldr	r4, [r0, #4]
 80042e6:	2100      	movs	r1, #0
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((u32)0x01) << (pinpos + 0x08));
 80042e8:	2201      	movs	r2, #1
 80042ea:	f101 0308 	add.w	r3, r1, #8	; 0x8
 80042ee:	fa12 f303 	lsls.w	r3, r2, r3
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80042f2:	ea03 0c06 	and.w	ip, r3, r6
      if (currentpin == pos)
 80042f6:	459c      	cmp	ip, r3
 80042f8:	d111      	bne.n	800431e <GPIO_Init+0x9a>
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
 80042fa:	008a      	lsls	r2, r1, #2
        tmpreg &= ~pinmask;
 80042fc:	230f      	movs	r3, #15
 80042fe:	4093      	lsls	r3, r2

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004300:	fa17 f202 	lsls.w	r2, r7, r2
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 8004304:	ea24 0403 	bic.w	r4, r4, r3

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004308:	4314      	orrs	r4, r2

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800430a:	2d28      	cmp	r5, #40
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 800430c:	9301      	str	r3, [sp, #4]
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
 800430e:	bf08      	it	eq
 8004310:	f8c0 c014 	streq.w	ip, [r0, #20]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004314:	d003      	beq.n	800431e <GPIO_Init+0x9a>
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8004316:	2d48      	cmp	r5, #72
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
 8004318:	bf08      	it	eq
 800431a:	f8c0 c010 	streq.w	ip, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800431e:	3101      	adds	r1, #1
 8004320:	2908      	cmp	r1, #8
 8004322:	d1e1      	bne.n	80042e8 <GPIO_Init+0x64>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8004324:	6044      	str	r4, [r0, #4]
  }
}
 8004326:	b003      	add	sp, #12
 8004328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800432a:	46c0      	nop			(mov r8, r8)

0800432c <GPIO_StructInit>:
* Return         : None
*******************************************************************************/
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800432c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004330:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8004332:	2302      	movs	r3, #2
 8004334:	7083      	strb	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8004336:	2304      	movs	r3, #4
 8004338:	70c3      	strb	r3, [r0, #3]
}
 800433a:	4770      	bx	lr

0800433c <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
 800433c:	6883      	ldr	r3, [r0, #8]
 800433e:	4219      	tst	r1, r3
 8004340:	bf0c      	ite	eq
 8004342:	2000      	moveq	r0, #0
 8004344:	2001      	movne	r0, #1
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 8004346:	4770      	bx	lr

08004348 <GPIO_ReadInputData>:
u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((u16)GPIOx->IDR);
 8004348:	6880      	ldr	r0, [r0, #8]
 800434a:	b280      	uxth	r0, r0
}
 800434c:	4770      	bx	lr
 800434e:	46c0      	nop			(mov r8, r8)

08004350 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
 8004350:	68c3      	ldr	r3, [r0, #12]
 8004352:	4219      	tst	r1, r3
 8004354:	bf0c      	ite	eq
 8004356:	2000      	moveq	r0, #0
 8004358:	2001      	movne	r0, #1
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 800435a:	4770      	bx	lr

0800435c <GPIO_ReadOutputData>:
u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((u16)GPIOx->ODR);
 800435c:	68c0      	ldr	r0, [r0, #12]
 800435e:	b280      	uxth	r0, r0
}
 8004360:	4770      	bx	lr
 8004362:	46c0      	nop			(mov r8, r8)

08004364 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8004364:	6101      	str	r1, [r0, #16]
}
 8004366:	4770      	bx	lr

08004368 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8004368:	6141      	str	r1, [r0, #20]
}
 800436a:	4770      	bx	lr

0800436c <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 800436c:	b10a      	cbz	r2, 8004372 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800436e:	6101      	str	r1, [r0, #16]
 8004370:	e000      	b.n	8004374 <GPIO_WriteBit+0x8>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8004372:	6141      	str	r1, [r0, #20]
  }
}
 8004374:	4770      	bx	lr
 8004376:	46c0      	nop			(mov r8, r8)

08004378 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8004378:	60c1      	str	r1, [r0, #12]
}
 800437a:	4770      	bx	lr

0800437c <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 800437c:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8004380:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8004382:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8004384:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8004386:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8004388:	6983      	ldr	r3, [r0, #24]
}
 800438a:	4770      	bx	lr

0800438c <GPIO_EventOutputConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 800438c:	f8df c018 	ldr.w	ip, [pc, #24]	; 80043a8 <GPIO_EventOutputConfig+0x1c>
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8004390:	f64f 7380 	movw	r3, #65408	; 0xff80

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8004394:	f8dc 2000 	ldr.w	r2, [ip]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
  tmpreg |= (u32)GPIO_PortSource << 0x04;
 8004398:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 800439c:	ea02 0303 	and.w	r3, r2, r3
  tmpreg |= (u32)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 80043a0:	4319      	orrs	r1, r3

  AFIO->EVCR = tmpreg;
 80043a2:	f8cc 1000 	str.w	r1, [ip]
}
 80043a6:	4770      	bx	lr
 80043a8:	40010000 	.word	0x40010000

080043ac <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
 80043ac:	4b01      	ldr	r3, [pc, #4]	(80043b4 <GPIO_EventOutputCmd+0x8>)
 80043ae:	6018      	str	r0, [r3, #0]
}
 80043b0:	4770      	bx	lr
 80043b2:	46c0      	nop			(mov r8, r8)
 80043b4:	4220001c 	.word	0x4220001c

080043b8 <GPIO_PinRemapConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 80043b8:	b530      	push	{r4, r5, lr}
  tmpreg = AFIO->MAPR;

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80043ba:	f400 1340 	and.w	r3, r0, #3145728	; 0x300000
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 80043be:	0404      	lsls	r4, r0, #16
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 80043c0:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 80043c2:	4914      	ldr	r1, [pc, #80]	(8004414 <GPIO_PinRemapConfig+0x5c>)

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 80043c4:	0c24      	lsrs	r4, r4, #16

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80043c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 80043ca:	f8d1 c004 	ldr.w	ip, [r1, #4]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80043ce:	d106      	bne.n	80043de <GPIO_PinRemapConfig+0x26>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80043d0:	684b      	ldr	r3, [r1, #4]
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80043d2:	f02c 6270 	bic.w	r2, ip, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80043d6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80043da:	604b      	str	r3, [r1, #4]
 80043dc:	e010      	b.n	8004400 <GPIO_PinRemapConfig+0x48>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80043de:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80043e2:	d005      	beq.n	80043f0 <GPIO_PinRemapConfig+0x38>
  {
    tmp1 = ((u32)0x03) << tmpmask;
    tmpreg &= ~tmp1;
 80043e4:	f400 2270 	and.w	r2, r0, #983040	; 0xf0000
 80043e8:	0c12      	lsrs	r2, r2, #16
 80043ea:	2303      	movs	r3, #3
 80043ec:	4093      	lsls	r3, r2
 80043ee:	e003      	b.n	80043f8 <GPIO_PinRemapConfig+0x40>
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80043f0:	0d43      	lsrs	r3, r0, #21
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	fa14 f303 	lsls.w	r3, r4, r3
 80043f8:	ea2c 0303 	bic.w	r3, ip, r3
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80043fc:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 8004400:	b125      	cbz	r5, 800440c <GPIO_PinRemapConfig+0x54>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8004402:	0d43      	lsrs	r3, r0, #21
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	fa14 f303 	lsls.w	r3, r4, r3
 800440a:	431a      	orrs	r2, r3
  }

  AFIO->MAPR = tmpreg;
 800440c:	4b01      	ldr	r3, [pc, #4]	(8004414 <GPIO_PinRemapConfig+0x5c>)
 800440e:	605a      	str	r2, [r3, #4]
}
 8004410:	bd30      	pop	{r4, r5, pc}
 8004412:	46c0      	nop			(mov r8, r8)
 8004414:	40010000 	.word	0x40010000

08004418 <GPIO_EXTILineConfig>:
*                   This parameter can be GPIO_PinSourcex where x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
{
 8004418:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 800441a:	f001 0403 	and.w	r4, r1, #3	; 0x3
 800441e:	00a4      	lsls	r4, r4, #2

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8004420:	230f      	movs	r3, #15
 8004422:	40a3      	lsls	r3, r4
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 8004424:	40a0      	lsls	r0, r4
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8004426:	f8df c020 	ldr.w	ip, [pc, #32]	; 8004448 <GPIO_EXTILineConfig+0x30>
 800442a:	0889      	lsrs	r1, r1, #2
 800442c:	3102      	adds	r1, #2
 800442e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 8004432:	ea22 0203 	bic.w	r2, r2, r3
 8004436:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 800443a:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
 800443e:	4318      	orrs	r0, r3
 8004440:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
}
 8004444:	bd10      	pop	{r4, pc}
 8004446:	46c0      	nop			(mov r8, r8)
 8004448:	40010000 	.word	0x40010000

0800444c <GPIO_AFIODeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 800444c:	b500      	push	{lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 800444e:	2001      	movs	r0, #1
 8004450:	2101      	movs	r1, #1
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 8004452:	b081      	sub	sp, #4
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8004454:	f000 fbf6 	bl	8004c44 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8004458:	2001      	movs	r0, #1
 800445a:	2100      	movs	r1, #0
 800445c:	f000 fbf2 	bl	8004c44 <RCC_APB2PeriphResetCmd>
}
 8004460:	b001      	add	sp, #4
 8004462:	bd00      	pop	{pc}

08004464 <GPIO_DeInit>:
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8004464:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8004466:	4b27      	ldr	r3, [pc, #156]	(8004504 <GPIO_DeInit+0xa0>)
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8004468:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 800446a:	4298      	cmp	r0, r3
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800446c:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 800446e:	d02b      	beq.n	80044c8 <GPIO_DeInit+0x64>
 8004470:	d80c      	bhi.n	800448c <GPIO_DeInit+0x28>
 8004472:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004476:	4298      	cmp	r0, r3
 8004478:	d01a      	beq.n	80044b0 <GPIO_DeInit+0x4c>
 800447a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800447e:	4298      	cmp	r0, r3
 8004480:	d01c      	beq.n	80044bc <GPIO_DeInit+0x58>
 8004482:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004486:	4298      	cmp	r0, r3
 8004488:	d13a      	bne.n	8004500 <GPIO_DeInit+0x9c>
 800448a:	e00b      	b.n	80044a4 <GPIO_DeInit+0x40>
 800448c:	4b1e      	ldr	r3, [pc, #120]	(8004508 <GPIO_DeInit+0xa4>)
 800448e:	4298      	cmp	r0, r3
 8004490:	d026      	beq.n	80044e0 <GPIO_DeInit+0x7c>
 8004492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004496:	4298      	cmp	r0, r3
 8004498:	d028      	beq.n	80044ec <GPIO_DeInit+0x88>
 800449a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800449e:	4298      	cmp	r0, r3
 80044a0:	d12e      	bne.n	8004500 <GPIO_DeInit+0x9c>
 80044a2:	e017      	b.n	80044d4 <GPIO_DeInit+0x70>
  {
    case GPIOA_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80044a4:	2004      	movs	r0, #4
 80044a6:	2101      	movs	r1, #1
 80044a8:	f000 fbcc 	bl	8004c44 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 80044ac:	2004      	movs	r0, #4
 80044ae:	e024      	b.n	80044fa <GPIO_DeInit+0x96>
      break;

    case GPIOB_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80044b0:	2008      	movs	r0, #8
 80044b2:	2101      	movs	r1, #1
 80044b4:	f000 fbc6 	bl	8004c44 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 80044b8:	2008      	movs	r0, #8
 80044ba:	e01e      	b.n	80044fa <GPIO_DeInit+0x96>
      break;

    case GPIOC_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80044bc:	2010      	movs	r0, #16
 80044be:	2101      	movs	r1, #1
 80044c0:	f000 fbc0 	bl	8004c44 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 80044c4:	2010      	movs	r0, #16
 80044c6:	e018      	b.n	80044fa <GPIO_DeInit+0x96>
      break;

    case GPIOD_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 80044c8:	2020      	movs	r0, #32
 80044ca:	2101      	movs	r1, #1
 80044cc:	f000 fbba 	bl	8004c44 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 80044d0:	2020      	movs	r0, #32
 80044d2:	e012      	b.n	80044fa <GPIO_DeInit+0x96>
      break;
      
    case GPIOE_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 80044d4:	2040      	movs	r0, #64
 80044d6:	2101      	movs	r1, #1
 80044d8:	f000 fbb4 	bl	8004c44 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 80044dc:	2040      	movs	r0, #64
 80044de:	e00c      	b.n	80044fa <GPIO_DeInit+0x96>
      break; 

    case GPIOF_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 80044e0:	2080      	movs	r0, #128
 80044e2:	2101      	movs	r1, #1
 80044e4:	f000 fbae 	bl	8004c44 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 80044e8:	2080      	movs	r0, #128
 80044ea:	e006      	b.n	80044fa <GPIO_DeInit+0x96>
      break;

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 80044ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80044f0:	2101      	movs	r1, #1
 80044f2:	f000 fba7 	bl	8004c44 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 80044f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80044fa:	2100      	movs	r1, #0
 80044fc:	f000 fba2 	bl	8004c44 <RCC_APB2PeriphResetCmd>
      break;                       

    default:
      break;
  }
}
 8004500:	b003      	add	sp, #12
 8004502:	bd00      	pop	{pc}
 8004504:	40011400 	.word	0x40011400
 8004508:	40011c00 	.word	0x40011c00

0800450c <NVIC_DeInit>:
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 800450c:	4b0b      	ldr	r3, [pc, #44]	(800453c <NVIC_DeInit+0x30>)
 800450e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  NVIC->ICER[1] = 0x0FFFFFFF;
 8004512:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 8004516:	f8c3 1080 	str.w	r1, [r3, #128]
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 800451a:	4618      	mov	r0, r3
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
 800451c:	f8c3 2084 	str.w	r2, [r3, #132]
  NVIC->ICPR[0] = 0xFFFFFFFF;
 8004520:	f8c3 1180 	str.w	r1, [r3, #384]
  NVIC->ICPR[1] = 0x0FFFFFFF;
 8004524:	f8c3 2184 	str.w	r2, [r3, #388]
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 8004528:	2100      	movs	r1, #0
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
 800452a:	2200      	movs	r2, #0
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 800452c:	f102 03c0 	add.w	r3, r2, #192	; 0xc0
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 8004530:	3201      	adds	r2, #1
 8004532:	2a0f      	cmp	r2, #15
  {
     NVIC->IPR[index] = 0x00000000;
 8004534:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 8004538:	d1f8      	bne.n	800452c <NVIC_DeInit+0x20>
  {
     NVIC->IPR[index] = 0x00000000;
  } 
}
 800453a:	4770      	bx	lr
 800453c:	e000e100 	.word	0xe000e100

08004540 <NVIC_SCBDeInit>:
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 8004540:	4a09      	ldr	r2, [pc, #36]	(8004568 <NVIC_SCBDeInit+0x28>)
 8004542:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
  SCB->VTOR = 0x00000000;
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 8004546:	4909      	ldr	r1, [pc, #36]	(800456c <NVIC_SCBDeInit+0x2c>)
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 8004548:	6053      	str	r3, [r2, #4]
  SCB->VTOR = 0x00000000;
 800454a:	2300      	movs	r3, #0
 800454c:	6093      	str	r3, [r2, #8]
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 800454e:	60d1      	str	r1, [r2, #12]
  SCB->SCR = 0x00000000;
 8004550:	6113      	str	r3, [r2, #16]
  SCB->CCR = 0x00000000;
 8004552:	6153      	str	r3, [r2, #20]
  for(index = 0; index < 0x03; index++)
  {
     SCB->SHPR[index] = 0;
 8004554:	6193      	str	r3, [r2, #24]
 8004556:	61d3      	str	r3, [r2, #28]
 8004558:	6213      	str	r3, [r2, #32]
  }
  SCB->SHCSR = 0x00000000;
 800455a:	6253      	str	r3, [r2, #36]
  SCB->CFSR = 0xFFFFFFFF;
 800455c:	3b01      	subs	r3, #1
 800455e:	6293      	str	r3, [r2, #40]
  SCB->HFSR = 0xFFFFFFFF;
 8004560:	62d3      	str	r3, [r2, #44]
  SCB->DFSR = 0xFFFFFFFF;
 8004562:	6313      	str	r3, [r2, #48]
}
 8004564:	4770      	bx	lr
 8004566:	46c0      	nop			(mov r8, r8)
 8004568:	e000ed00 	.word	0xe000ed00
 800456c:	05fa0000 	.word	0x05fa0000

08004570 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8004570:	f040 60be 	orr.w	r0, r0, #99614720	; 0x5f00000
 8004574:	4b02      	ldr	r3, [pc, #8]	(8004580 <NVIC_PriorityGroupConfig+0x10>)
 8004576:	f440 2020 	orr.w	r0, r0, #655360	; 0xa0000
 800457a:	60d8      	str	r0, [r3, #12]
}
 800457c:	4770      	bx	lr
 800457e:	46c0      	nop			(mov r8, r8)
 8004580:	e000ed00 	.word	0xe000ed00

08004584 <NVIC_Init>:
*                    specified NVIC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8004584:	b530      	push	{r4, r5, lr}
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8004586:	78c3      	ldrb	r3, [r0, #3]
 8004588:	7805      	ldrb	r5, [r0, #0]
 800458a:	b35b      	cbz	r3, 80045e4 <NVIC_Init+0x60>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 800458c:	4b1a      	ldr	r3, [pc, #104]	(80045f8 <NVIC_Init+0x74>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800458e:	7841      	ldrb	r1, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8004590:	68da      	ldr	r2, [r3, #12]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8004592:	4c1a      	ldr	r4, [pc, #104]	(80045fc <NVIC_Init+0x78>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8004594:	ea6f 0202 	mvn.w	r2, r2
 8004598:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800459c:	0a12      	lsrs	r2, r2, #8
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800459e:	f1c2 0304 	rsb	r3, r2, #4	; 0x4
 80045a2:	4099      	lsls	r1, r3
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80045a4:	230f      	movs	r3, #15
 80045a6:	40d3      	lsrs	r3, r2
 80045a8:	7882      	ldrb	r2, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80045aa:	f005 0003 	and.w	r0, r5, #3	; 0x3
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80045ae:	4013      	ands	r3, r2
 80045b0:	430b      	orrs	r3, r1

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80045b2:	00c0      	lsls	r0, r0, #3
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 80045b4:	011b      	lsls	r3, r3, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80045b6:	22ff      	movs	r2, #255
 80045b8:	4082      	lsls	r2, r0
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80045ba:	4083      	lsls	r3, r0
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 80045bc:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 80045c0:	f10c 0cc0 	add.w	ip, ip, #192	; 0xc0
 80045c4:	f854 102c 	ldr.w	r1, [r4, ip, lsl #2]
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
    tmppriority &= tmpmask;  
    tmpreg |= tmppriority;
 80045c8:	4013      	ands	r3, r2
    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 80045ca:	ea21 0102 	bic.w	r1, r1, r2
    tmppriority &= tmpmask;  
    tmpreg |= tmppriority;
 80045ce:	430b      	orrs	r3, r1

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 80045d0:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 80045d4:	f005 021f 	and.w	r2, r5, #31	; 0x1f
 80045d8:	2301      	movs	r3, #1
 80045da:	4093      	lsls	r3, r2
 80045dc:	0969      	lsrs	r1, r5, #5
 80045de:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
 80045e2:	e008      	b.n	80045f6 <NVIC_Init+0x72>
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 80045e4:	f005 021f 	and.w	r2, r5, #31	; 0x1f
 80045e8:	2301      	movs	r3, #1
 80045ea:	4093      	lsls	r3, r2
 80045ec:	0969      	lsrs	r1, r5, #5
 80045ee:	4a03      	ldr	r2, [pc, #12]	(80045fc <NVIC_Init+0x78>)
 80045f0:	3120      	adds	r1, #32
 80045f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
}
 80045f6:	bd30      	pop	{r4, r5, pc}
 80045f8:	e000ed00 	.word	0xe000ed00
 80045fc:	e000e100 	.word	0xe000e100

08004600 <NVIC_StructInit>:
* Return         : None
*******************************************************************************/
void NVIC_StructInit(NVIC_InitTypeDef* NVIC_InitStruct)
{
  /* NVIC_InitStruct members default value */
  NVIC_InitStruct->NVIC_IRQChannel = 0x00;
 8004600:	2300      	movs	r3, #0
 8004602:	7003      	strb	r3, [r0, #0]
  NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority = 0x00;
 8004604:	7043      	strb	r3, [r0, #1]
  NVIC_InitStruct->NVIC_IRQChannelSubPriority = 0x00;
 8004606:	7083      	strb	r3, [r0, #2]
  NVIC_InitStruct->NVIC_IRQChannelCmd = DISABLE;
 8004608:	70c3      	strb	r3, [r0, #3]
}
 800460a:	4770      	bx	lr

0800460c <NVIC_GetCurrentPendingIRQChannel>:
* Output         : None
* Return         : Pending IRQ Channel Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentPendingIRQChannel(void)
{
  return ((u16)((SCB->ICSR & (u32)0x003FF000) >> 0x0C));
 800460c:	4b03      	ldr	r3, [pc, #12]	(800461c <NVIC_GetCurrentPendingIRQChannel+0x10>)
 800460e:	4804      	ldr	r0, [pc, #16]	(8004620 <NVIC_GetCurrentPendingIRQChannel+0x14>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	ea03 0000 	and.w	r0, r3, r0
 8004616:	0b00      	lsrs	r0, r0, #12
}
 8004618:	4770      	bx	lr
 800461a:	46c0      	nop			(mov r8, r8)
 800461c:	e000ed00 	.word	0xe000ed00
 8004620:	003ff000 	.word	0x003ff000

08004624 <NVIC_GetIRQChannelPendingBitStatus>:
  u32 tmp = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 8004624:	f000 031f 	and.w	r3, r0, #31	; 0x1f
 8004628:	2201      	movs	r2, #1
 800462a:	409a      	lsls	r2, r3

  if (((NVIC->ISPR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp)
 800462c:	0940      	lsrs	r0, r0, #5
 800462e:	4b05      	ldr	r3, [pc, #20]	(8004644 <NVIC_GetIRQChannelPendingBitStatus+0x20>)
 8004630:	3040      	adds	r0, #64
 8004632:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004636:	4010      	ands	r0, r2
 8004638:	4290      	cmp	r0, r2
 800463a:	bf14      	ite	ne
 800463c:	2000      	movne	r0, #0
 800463e:	2001      	moveq	r0, #1
  else
  {
    pendingirqstatus = RESET;
  }
  return pendingirqstatus;
}
 8004640:	4770      	bx	lr
 8004642:	46c0      	nop			(mov r8, r8)
 8004644:	e000e100 	.word	0xe000e100

08004648 <NVIC_SetIRQChannelPendingBit>:
void NVIC_SetIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  *(vu32*) 0xE000EF00 = (u32)NVIC_IRQChannel;
 8004648:	4b01      	ldr	r3, [pc, #4]	(8004650 <NVIC_SetIRQChannelPendingBit+0x8>)
 800464a:	6018      	str	r0, [r3, #0]
}
 800464c:	4770      	bx	lr
 800464e:	46c0      	nop			(mov r8, r8)
 8004650:	e000ef00 	.word	0xe000ef00

08004654 <NVIC_ClearIRQChannelPendingBit>:
void NVIC_ClearIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  NVIC->ICPR[(NVIC_IRQChannel >> 0x05)] = (u32)0x01 << (NVIC_IRQChannel & (u32)0x1F);
 8004654:	0941      	lsrs	r1, r0, #5
 8004656:	2301      	movs	r3, #1
 8004658:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 800465c:	4083      	lsls	r3, r0
 800465e:	4a02      	ldr	r2, [pc, #8]	(8004668 <NVIC_ClearIRQChannelPendingBit+0x14>)
 8004660:	3160      	adds	r1, #96
 8004662:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8004666:	4770      	bx	lr
 8004668:	e000e100 	.word	0xe000e100

0800466c <NVIC_GetCurrentActiveHandler>:
* Output         : None
* Return         : Active Handler Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentActiveHandler(void)
{
  return ((u16)(SCB->ICSR & (u32)0x3FF));
 800466c:	4b02      	ldr	r3, [pc, #8]	(8004678 <NVIC_GetCurrentActiveHandler+0xc>)
 800466e:	6858      	ldr	r0, [r3, #4]
 8004670:	0580      	lsls	r0, r0, #22
 8004672:	0d80      	lsrs	r0, r0, #22
}
 8004674:	4770      	bx	lr
 8004676:	46c0      	nop			(mov r8, r8)
 8004678:	e000ed00 	.word	0xe000ed00

0800467c <NVIC_GetIRQChannelActiveBitStatus>:
  u32 tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 800467c:	f000 031f 	and.w	r3, r0, #31	; 0x1f
 8004680:	2201      	movs	r2, #1
 8004682:	409a      	lsls	r2, r3

  if (((NVIC->IABR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp )
 8004684:	0940      	lsrs	r0, r0, #5
 8004686:	4b05      	ldr	r3, [pc, #20]	(800469c <NVIC_GetIRQChannelActiveBitStatus+0x20>)
 8004688:	3080      	adds	r0, #128
 800468a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800468e:	4010      	ands	r0, r2
 8004690:	4290      	cmp	r0, r2
 8004692:	bf14      	ite	ne
 8004694:	2000      	movne	r0, #0
 8004696:	2001      	moveq	r0, #1
  else
  {
    activeirqstatus = RESET;
  }
  return activeirqstatus;
}
 8004698:	4770      	bx	lr
 800469a:	46c0      	nop			(mov r8, r8)
 800469c:	e000e100 	.word	0xe000e100

080046a0 <NVIC_GetCPUID>:
* Output         : None
* Return         : CPU ID.
*******************************************************************************/
u32 NVIC_GetCPUID(void)
{
  return (SCB->CPUID);
 80046a0:	4b01      	ldr	r3, [pc, #4]	(80046a8 <NVIC_GetCPUID+0x8>)
 80046a2:	6818      	ldr	r0, [r3, #0]
}
 80046a4:	4770      	bx	lr
 80046a6:	46c0      	nop			(mov r8, r8)
 80046a8:	e000ed00 	.word	0xe000ed00

080046ac <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (u32)0x1FFFFF80);
 80046ac:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80046b0:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80046b4:	4b01      	ldr	r3, [pc, #4]	(80046bc <NVIC_SetVectorTable+0x10>)
 80046b6:	4301      	orrs	r1, r0
 80046b8:	6099      	str	r1, [r3, #8]
}
 80046ba:	4770      	bx	lr
 80046bc:	e000ed00 	.word	0xe000ed00

080046c0 <NVIC_GenerateSystemReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateSystemReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x04;
 80046c0:	4a01      	ldr	r2, [pc, #4]	(80046c8 <NVIC_GenerateSystemReset+0x8>)
 80046c2:	4b02      	ldr	r3, [pc, #8]	(80046cc <NVIC_GenerateSystemReset+0xc>)
 80046c4:	60da      	str	r2, [r3, #12]
}
 80046c6:	4770      	bx	lr
 80046c8:	05fa0004 	.word	0x05fa0004
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <NVIC_GenerateCoreReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateCoreReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x01;
 80046d0:	4a01      	ldr	r2, [pc, #4]	(80046d8 <NVIC_GenerateCoreReset+0x8>)
 80046d2:	4b02      	ldr	r3, [pc, #8]	(80046dc <NVIC_GenerateCoreReset+0xc>)
 80046d4:	60da      	str	r2, [r3, #12]
}
 80046d6:	4770      	bx	lr
 80046d8:	05fa0001 	.word	0x05fa0001
 80046dc:	e000ed00 	.word	0xe000ed00

080046e0 <NVIC_SystemLPConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80046e0:	b121      	cbz	r1, 80046ec <NVIC_SystemLPConfig+0xc>
  {
    SCB->SCR |= LowPowerMode;
 80046e2:	4a05      	ldr	r2, [pc, #20]	(80046f8 <NVIC_SystemLPConfig+0x18>)
 80046e4:	6913      	ldr	r3, [r2, #16]
 80046e6:	ea40 0303 	orr.w	r3, r0, r3
 80046ea:	e003      	b.n	80046f4 <NVIC_SystemLPConfig+0x14>
  }
  else
  {
    SCB->SCR &= (u32)(~(u32)LowPowerMode);
 80046ec:	4a02      	ldr	r2, [pc, #8]	(80046f8 <NVIC_SystemLPConfig+0x18>)
 80046ee:	6913      	ldr	r3, [r2, #16]
 80046f0:	ea23 0300 	bic.w	r3, r3, r0
 80046f4:	6113      	str	r3, [r2, #16]
  }
}
 80046f6:	4770      	bx	lr
 80046f8:	e000ed00 	.word	0xe000ed00

080046fc <NVIC_SystemHandlerConfig>:

  /* Check the parameters */
  assert_param(IS_CONFIG_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  tmpreg =  (u32)0x01 << (SystemHandler & (u32)0x1F);
 80046fc:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8004700:	2301      	movs	r3, #1
 8004702:	fa13 f000 	lsls.w	r0, r3, r0

  if (NewState != DISABLE)
 8004706:	b121      	cbz	r1, 8004712 <NVIC_SystemHandlerConfig+0x16>
  {
    SCB->SHCSR |= tmpreg;
 8004708:	4a05      	ldr	r2, [pc, #20]	(8004720 <NVIC_SystemHandlerConfig+0x24>)
 800470a:	6a53      	ldr	r3, [r2, #36]
 800470c:	ea40 0303 	orr.w	r3, r0, r3
 8004710:	e003      	b.n	800471a <NVIC_SystemHandlerConfig+0x1e>
  }
  else
  {
    SCB->SHCSR &= ~tmpreg;
 8004712:	4a03      	ldr	r2, [pc, #12]	(8004720 <NVIC_SystemHandlerConfig+0x24>)
 8004714:	6a53      	ldr	r3, [r2, #36]
 8004716:	ea23 0300 	bic.w	r3, r3, r0
 800471a:	6253      	str	r3, [r2, #36]
  }
}
 800471c:	4770      	bx	lr
 800471e:	46c0      	nop			(mov r8, r8)
 8004720:	e000ed00 	.word	0xe000ed00

08004724 <NVIC_SystemHandlerPriorityConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemHandlerPriorityConfig(u32 SystemHandler, u8 SystemHandlerPreemptionPriority,
                                      u8 SystemHandlerSubPriority)
{
 8004724:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8004726:	4c14      	ldr	r4, [pc, #80]	(8004778 <NVIC_SystemHandlerPriorityConfig+0x54>)
 8004728:	68e3      	ldr	r3, [r4, #12]
 800472a:	ea6f 0303 	mvn.w	r3, r3
 800472e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004732:	0a1b      	lsrs	r3, r3, #8
  tmp1 = (0x4 - tmppriority);
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
 8004734:	f1c3 0c04 	rsb	ip, r3, #4	; 0x4
 8004738:	fa01 f10c 	lsl.w	r1, r1, ip
  tmppriority |=  SystemHandlerSubPriority & tmp2;
 800473c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004740:	fa2c f303 	lsr.w	r3, ip, r3
 8004744:	401a      	ands	r2, r3
 8004746:	430a      	orrs	r2, r1

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
 8004748:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
 800474c:	0940      	lsrs	r0, r0, #5
 800474e:	f000 0018 	and.w	r0, r0, #24	; 0x18
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
 8004752:	fa0c fc00 	lsl.w	ip, ip, r0
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
 8004756:	0112      	lsls	r2, r2, #4
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
  SCB->SHPR[tmp1] |= tmppriority;
 8004758:	4082      	lsls	r2, r0
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
 800475a:	0989      	lsrs	r1, r1, #6
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
 800475c:	3106      	adds	r1, #6
 800475e:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 8004762:	ea23 030c 	bic.w	r3, r3, ip
 8004766:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
  SCB->SHPR[tmp1] |= tmppriority;
 800476a:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 800476e:	431a      	orrs	r2, r3
 8004770:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
}
 8004774:	bd10      	pop	{r4, pc}
 8004776:	46c0      	nop			(mov r8, r8)
 8004778:	e000ed00 	.word	0xe000ed00

0800477c <NVIC_GetSystemHandlerPendingBitStatus>:
  u32 tmp = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_GET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0A);
 800477c:	0a80      	lsrs	r0, r0, #10
  tmppos &= (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;
 800477e:	f000 000f 	and.w	r0, r0, #15	; 0xf
 8004782:	2301      	movs	r3, #1
 8004784:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 8004786:	4a04      	ldr	r2, [pc, #16]	(8004798 <NVIC_GetSystemHandlerPendingBitStatus+0x1c>)
 8004788:	6a50      	ldr	r0, [r2, #36]
 800478a:	ea03 0000 	and.w	r0, r3, r0
 800478e:	4298      	cmp	r0, r3
 8004790:	bf14      	ite	ne
 8004792:	2000      	movne	r0, #0
 8004794:	2001      	moveq	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004796:	4770      	bx	lr
 8004798:	e000ed00 	.word	0xe000ed00

0800479c <NVIC_SetSystemHandlerPendingBit>:
  assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Set the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << tmp);
 800479c:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 80047a0:	2301      	movs	r3, #1
 80047a2:	4083      	lsls	r3, r0
 80047a4:	4a02      	ldr	r2, [pc, #8]	(80047b0 <NVIC_SetSystemHandlerPendingBit+0x14>)
 80047a6:	6851      	ldr	r1, [r2, #4]
 80047a8:	430b      	orrs	r3, r1
 80047aa:	6053      	str	r3, [r2, #4]
}
 80047ac:	4770      	bx	lr
 80047ae:	46c0      	nop			(mov r8, r8)
 80047b0:	e000ed00 	.word	0xe000ed00

080047b4 <NVIC_ClearSystemHandlerPendingBit>:
  assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Clear the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
 80047b4:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 80047b8:	3801      	subs	r0, #1
 80047ba:	2301      	movs	r3, #1
 80047bc:	4083      	lsls	r3, r0
 80047be:	4a02      	ldr	r2, [pc, #8]	(80047c8 <NVIC_ClearSystemHandlerPendingBit+0x14>)
 80047c0:	6851      	ldr	r1, [r2, #4]
 80047c2:	430b      	orrs	r3, r1
 80047c4:	6053      	str	r3, [r2, #4]
}
 80047c6:	4770      	bx	lr
 80047c8:	e000ed00 	.word	0xe000ed00

080047cc <NVIC_GetSystemHandlerActiveBitStatus>:
  /* Check the parameters */
  assert_param(IS_GET_ACTIVE_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;
 80047cc:	0b80      	lsrs	r0, r0, #14
 80047ce:	f000 000f 	and.w	r0, r0, #15	; 0xf
 80047d2:	2301      	movs	r3, #1
 80047d4:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 80047d6:	4a04      	ldr	r2, [pc, #16]	(80047e8 <NVIC_GetSystemHandlerActiveBitStatus+0x1c>)
 80047d8:	6a50      	ldr	r0, [r2, #36]
 80047da:	ea03 0000 	and.w	r0, r3, r0
 80047de:	4298      	cmp	r0, r3
 80047e0:	bf14      	ite	ne
 80047e2:	2000      	movne	r0, #0
 80047e4:	2001      	moveq	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80047e6:	4770      	bx	lr
 80047e8:	e000ed00 	.word	0xe000ed00

080047ec <NVIC_GetFaultHandlerSources>:
  u32 tmpreg = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
 80047ec:	0c83      	lsrs	r3, r0, #18
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;

  if (tmpreg == 0x00)
 80047ee:	f013 0303 	ands.w	r3, r3, #3	; 0x3
 80047f2:	d102      	bne.n	80047fa <NVIC_GetFaultHandlerSources+0xe>
  {
    faultsources = SCB->HFSR;
 80047f4:	4b0d      	ldr	r3, [pc, #52]	(800482c <NVIC_GetFaultHandlerSources+0x40>)
 80047f6:	6ad8      	ldr	r0, [r3, #44]
 80047f8:	e017      	b.n	800482a <NVIC_GetFaultHandlerSources+0x3e>
  }
  else if (tmpreg == 0x01)
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d113      	bne.n	8004826 <NVIC_GetFaultHandlerSources+0x3a>
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 80047fe:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004802:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8004806:	33fe      	adds	r3, #254

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
 8004808:	0d02      	lsrs	r2, r0, #20
  {
    faultsources = SCB->HFSR;
  }
  else if (tmpreg == 0x01)
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 800480a:	3301      	adds	r3, #1

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
 800480c:	f002 0203 	and.w	r2, r2, #3	; 0x3
  {
    faultsources = SCB->HFSR;
  }
  else if (tmpreg == 0x01)
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 8004810:	6a99      	ldr	r1, [r3, #40]
 8004812:	00d3      	lsls	r3, r2, #3
 8004814:	fa31 f003 	lsrs.w	r0, r1, r3
    if (tmppos != 0x02)
 8004818:	2a02      	cmp	r2, #2
    {
      faultsources &= (u32)0x0F;
 800481a:	bf14      	ite	ne
 800481c:	f000 000f 	andne.w	r0, r0, #15	; 0xf
    }
    else
    {
      faultsources &= (u32)0xFF;
 8004820:	f000 00ff 	andeq.w	r0, r0, #255	; 0xff
 8004824:	e001      	b.n	800482a <NVIC_GetFaultHandlerSources+0x3e>
    }
  }
  else
  {
    faultsources = SCB->DFSR;
 8004826:	4b01      	ldr	r3, [pc, #4]	(800482c <NVIC_GetFaultHandlerSources+0x40>)
 8004828:	6b18      	ldr	r0, [r3, #48]
  }
  return faultsources;
}
 800482a:	4770      	bx	lr
 800482c:	e000ed00 	.word	0xe000ed00

08004830 <NVIC_GetFaultAddress>:
  /* Check the parameters */
  assert_param(IS_FAULT_ADDRESS_SYSTEM_HANDLER(SystemHandler));
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;

  if (tmp == 0x00)
 8004830:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
  {
    faultaddress = SCB->MMFAR;
 8004834:	bf0b      	itete	eq
 8004836:	4b02      	ldreq	r3, [pc, #8]	(8004840 <NVIC_GetFaultAddress+0x10>)
  }
  else
  {
    faultaddress = SCB->BFAR;
 8004838:	4b01      	ldrne	r3, [pc, #4]	(8004840 <NVIC_GetFaultAddress+0x10>)
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;

  if (tmp == 0x00)
  {
    faultaddress = SCB->MMFAR;
 800483a:	6b58      	ldreq	r0, [r3, #52]
  }
  else
  {
    faultaddress = SCB->BFAR;
 800483c:	6b98      	ldrne	r0, [r3, #56]
  }
  return faultaddress;
}
 800483e:	4770      	bx	lr
 8004840:	e000ed00 	.word	0xe000ed00

08004844 <NVIC_GetBASEPRI>:
* Input          : None
* Output         : None
* Return         : BASEPRI register value
*******************************************************************************/
u32 NVIC_GetBASEPRI(void)
{
 8004844:	b500      	push	{lr}
 8004846:	b081      	sub	sp, #4
  return (__GetBASEPRI());
 8004848:	f001 fb88 	bl	8005f5c <__GetBASEPRI>
}
 800484c:	b001      	add	sp, #4
 800484e:	bd00      	pop	{pc}

08004850 <NVIC_BASEPRICONFIG>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
 8004850:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
 8004852:	0100      	lsls	r0, r0, #4
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
 8004854:	b081      	sub	sp, #4
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
 8004856:	f001 fb7e 	bl	8005f56 <__BASEPRICONFIG>
}
 800485a:	b001      	add	sp, #4
 800485c:	bd00      	pop	{pc}
 800485e:	46c0      	nop			(mov r8, r8)

08004860 <NVIC_RESETFAULTMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETFAULTMASK(void)
{
 8004860:	b500      	push	{lr}
 8004862:	b081      	sub	sp, #4
  __RESETFAULTMASK();
 8004864:	f001 fb75 	bl	8005f52 <__RESETFAULTMASK>
}
 8004868:	b001      	add	sp, #4
 800486a:	bd00      	pop	{pc}

0800486c <NVIC_SETFAULTMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETFAULTMASK(void)
{
 800486c:	b500      	push	{lr}
 800486e:	b081      	sub	sp, #4
  __SETFAULTMASK();
 8004870:	f001 fb6d 	bl	8005f4e <__SETFAULTMASK>
}
 8004874:	b001      	add	sp, #4
 8004876:	bd00      	pop	{pc}

08004878 <NVIC_RESETPRIMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETPRIMASK(void)
{
 8004878:	b500      	push	{lr}
 800487a:	b081      	sub	sp, #4
  __RESETPRIMASK();
 800487c:	f001 fb65 	bl	8005f4a <__RESETPRIMASK>
}
 8004880:	b001      	add	sp, #4
 8004882:	bd00      	pop	{pc}

08004884 <NVIC_SETPRIMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETPRIMASK(void)
{
 8004884:	b500      	push	{lr}
 8004886:	b081      	sub	sp, #4
  __SETPRIMASK();
 8004888:	f001 fb5d 	bl	8005f46 <__SETPRIMASK>
}
 800488c:	b001      	add	sp, #4
 800488e:	bd00      	pop	{pc}

08004890 <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_DBP_BB = (u32)NewState;
 8004890:	4b01      	ldr	r3, [pc, #4]	(8004898 <PWR_BackupAccessCmd+0x8>)
 8004892:	6018      	str	r0, [r3, #0]
}
 8004894:	4770      	bx	lr
 8004896:	46c0      	nop			(mov r8, r8)
 8004898:	420e0020 	.word	0x420e0020

0800489c <PWR_PVDCmd>:
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PVDE_BB = (u32)NewState;
 800489c:	4b01      	ldr	r3, [pc, #4]	(80048a4 <PWR_PVDCmd+0x8>)
 800489e:	6018      	str	r0, [r3, #0]
}
 80048a0:	4770      	bx	lr
 80048a2:	46c0      	nop			(mov r8, r8)
 80048a4:	420e0010 	.word	0x420e0010

080048a8 <PWR_PVDLevelConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));

  tmpreg = PWR->CR;
 80048a8:	4a03      	ldr	r2, [pc, #12]	(80048b8 <PWR_PVDLevelConfig+0x10>)
 80048aa:	6813      	ldr	r3, [r2, #0]

  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_Mask;
 80048ac:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 80048b0:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 80048b2:	6010      	str	r0, [r2, #0]
}
 80048b4:	4770      	bx	lr
 80048b6:	46c0      	nop			(mov r8, r8)
 80048b8:	40007000 	.word	0x40007000

080048bc <PWR_WakeUpPinCmd>:
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_EWUP_BB = (u32)NewState;
 80048bc:	4b01      	ldr	r3, [pc, #4]	(80048c4 <PWR_WakeUpPinCmd+0x8>)
 80048be:	6018      	str	r0, [r3, #0]
}
 80048c0:	4770      	bx	lr
 80048c2:	46c0      	nop			(mov r8, r8)
 80048c4:	420e00a0 	.word	0x420e00a0

080048c8 <PWR_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (u32)RESET)
 80048c8:	4b03      	ldr	r3, [pc, #12]	(80048d8 <PWR_GetFlagStatus+0x10>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4218      	tst	r0, r3
 80048ce:	bf0c      	ite	eq
 80048d0:	2000      	moveq	r0, #0
 80048d2:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 80048d4:	4770      	bx	lr
 80048d6:	46c0      	nop			(mov r8, r8)
 80048d8:	40007000 	.word	0x40007000

080048dc <PWR_ClearFlag>:
void PWR_ClearFlag(u32 PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 80048dc:	4a02      	ldr	r2, [pc, #8]	(80048e8 <PWR_ClearFlag+0xc>)
 80048de:	6813      	ldr	r3, [r2, #0]
 80048e0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 80048e4:	6013      	str	r3, [r2, #0]
}
 80048e6:	4770      	bx	lr
 80048e8:	40007000 	.word	0x40007000

080048ec <PWR_EnterSTANDBYMode>:
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 80048ec:	4a0b      	ldr	r2, [pc, #44]	(800491c <PWR_EnterSTANDBYMode+0x30>)
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
 80048ee:	b500      	push	{lr}
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 80048f0:	6813      	ldr	r3, [r2, #0]
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
 80048f2:	b081      	sub	sp, #4
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 80048f4:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 80048f8:	6013      	str	r3, [r2, #0]

  /* Select STANDBY mode */
  PWR->CR |= CR_PDDS_Set;
 80048fa:	6813      	ldr	r3, [r2, #0]
 80048fc:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8004900:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8004902:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
 8004906:	f502 42fa 	add.w	r2, r2, #32000	; 0x7d00
 800490a:	3210      	adds	r2, #16
 800490c:	6813      	ldr	r3, [r2, #0]
 800490e:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 8004912:	6013      	str	r3, [r2, #0]

  /* Request Wait For Interrupt */
  __WFI();
 8004914:	f001 faf2 	bl	8005efc <__WFI>
}
 8004918:	b001      	add	sp, #4
 800491a:	bd00      	pop	{pc}
 800491c:	40007000 	.word	0x40007000

08004920 <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004920:	4a0c      	ldr	r2, [pc, #48]	(8004954 <PWR_EnterSTOPMode+0x34>)
*                       - PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTOPMode(u32 PWR_Regulator, u8 PWR_STOPEntry)
{
 8004922:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004924:	6813      	ldr	r3, [r2, #0]
*                       - PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTOPMode(u32 PWR_Regulator, u8 PWR_STOPEntry)
{
 8004926:	b081      	sub	sp, #4
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_Mask;
 8004928:	f023 0303 	bic.w	r3, r3, #3	; 0x3

  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800492c:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 800492e:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8004930:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
 8004934:	f502 42fa 	add.w	r2, r2, #32000	; 0x7d00
 8004938:	3210      	adds	r2, #16
 800493a:	6813      	ldr	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800493c:	2901      	cmp	r1, #1

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 800493e:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 8004942:	6013      	str	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8004944:	d102      	bne.n	800494c <PWR_EnterSTOPMode+0x2c>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8004946:	f001 fad9 	bl	8005efc <__WFI>
 800494a:	e001      	b.n	8004950 <PWR_EnterSTOPMode+0x30>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 800494c:	f001 fad8 	bl	8005f00 <__WFE>
  }
}
 8004950:	b001      	add	sp, #4
 8004952:	bd00      	pop	{pc}
 8004954:	40007000 	.word	0x40007000

08004958 <PWR_DeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_DeInit(void)
{
 8004958:	b510      	push	{r4, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 800495a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 800495e:	4620      	mov	r0, r4
 8004960:	2101      	movs	r1, #1
 8004962:	f000 f97d 	bl	8004c60 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8004966:	4620      	mov	r0, r4
 8004968:	2100      	movs	r1, #0
 800496a:	f000 f979 	bl	8004c60 <RCC_APB1PeriphResetCmd>
}
 800496e:	bd10      	pop	{r4, pc}

08004970 <RCC_DeInit>:
* Return         : None
*******************************************************************************/
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 8004970:	4a0d      	ldr	r2, [pc, #52]	(80049a8 <RCC_DeInit+0x38>)
 8004972:	6813      	ldr	r3, [r2, #0]
 8004974:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8004978:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
  RCC->CFGR &= (u32)0xF8FF0000;
 800497a:	6851      	ldr	r1, [r2, #4]
 800497c:	4b0b      	ldr	r3, [pc, #44]	(80049ac <RCC_DeInit+0x3c>)
 800497e:	ea01 0303 	and.w	r3, r1, r3
 8004982:	6053      	str	r3, [r2, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
 8004984:	6813      	ldr	r3, [r2, #0]
 8004986:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800498a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800498e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
 8004990:	6813      	ldr	r3, [r2, #0]
 8004992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004996:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 8004998:	6853      	ldr	r3, [r2, #4]
 800499a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800499e:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80049a0:	2300      	movs	r3, #0
 80049a2:	6093      	str	r3, [r2, #8]
}
 80049a4:	4770      	bx	lr
 80049a6:	46c0      	nop			(mov r8, r8)
 80049a8:	40021000 	.word	0x40021000
 80049ac:	f8ff0000 	.word	0xf8ff0000

080049b0 <RCC_HSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80049b0:	4a0b      	ldr	r2, [pc, #44]	(80049e0 <RCC_HSEConfig+0x30>)

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80049b2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80049b6:	6813      	ldr	r3, [r2, #0]
 80049b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049bc:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80049be:	6813      	ldr	r3, [r2, #0]
 80049c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049c4:	6013      	str	r3, [r2, #0]

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80049c6:	d003      	beq.n	80049d0 <RCC_HSEConfig+0x20>
 80049c8:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80049cc:	d107      	bne.n	80049de <RCC_HSEConfig+0x2e>
 80049ce:	e002      	b.n	80049d6 <RCC_HSEConfig+0x26>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 80049d0:	6813      	ldr	r3, [r2, #0]
 80049d2:	4303      	orrs	r3, r0
 80049d4:	e002      	b.n	80049dc <RCC_HSEConfig+0x2c>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80049d6:	6813      	ldr	r3, [r2, #0]
 80049d8:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80049dc:	6013      	str	r3, [r2, #0]
      break;            
      
    default:
      break;      
  }
}
 80049de:	4770      	bx	lr
 80049e0:	40021000 	.word	0x40021000

080049e4 <RCC_WaitForHSEStartUp>:
* Return         : An ErrorStatus enumuration value:
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80049e4:	b082      	sub	sp, #8
  vu32 StartUpCounter = 0;
 80049e6:	2300      	movs	r3, #0
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80049e8:	4909      	ldr	r1, [pc, #36]	(8004a10 <RCC_WaitForHSEStartUp+0x2c>)
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  vu32 StartUpCounter = 0;
 80049ea:	9301      	str	r3, [sp, #4]
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80049ec:	680a      	ldr	r2, [r1, #0]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 80049ee:	9b01      	ldr	r3, [sp, #4]
 80049f0:	3301      	adds	r3, #1
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 80049f2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 80049f6:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 80049f8:	d103      	bne.n	8004a02 <RCC_WaitForHSEStartUp+0x1e>
 80049fa:	9b01      	ldr	r3, [sp, #4]
 80049fc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004a00:	d1f4      	bne.n	80049ec <RCC_WaitForHSEStartUp+0x8>
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8004a02:	4b03      	ldr	r3, [pc, #12]	(8004a10 <RCC_WaitForHSEStartUp+0x2c>)
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	0c40      	lsrs	r0, r0, #17
 8004a08:	f000 0001 	and.w	r0, r0, #1	; 0x1
  {
    status = ERROR;
  }  

  return (status);
}
 8004a0c:	b002      	add	sp, #8
 8004a0e:	4770      	bx	lr
 8004a10:	40021000 	.word	0x40021000

08004a14 <RCC_AdjustHSICalibrationValue>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8004a14:	4a03      	ldr	r2, [pc, #12]	(8004a24 <RCC_AdjustHSICalibrationValue+0x10>)
 8004a16:	6813      	ldr	r3, [r2, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8004a18:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (u32)HSICalibrationValue << 3;
 8004a1c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8004a20:	6013      	str	r3, [r2, #0]
}
 8004a22:	4770      	bx	lr
 8004a24:	40021000 	.word	0x40021000

08004a28 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_HSION_BB = (u32)NewState;
 8004a28:	4b01      	ldr	r3, [pc, #4]	(8004a30 <RCC_HSICmd+0x8>)
 8004a2a:	6018      	str	r0, [r3, #0]
}
 8004a2c:	4770      	bx	lr
 8004a2e:	46c0      	nop			(mov r8, r8)
 8004a30:	42420000 	.word	0x42420000

08004a34 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8004a34:	4a03      	ldr	r2, [pc, #12]	(8004a44 <RCC_PLLConfig+0x10>)
 8004a36:	6853      	ldr	r3, [r2, #4]

  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;

  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8004a38:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004a3c:	4318      	orrs	r0, r3
 8004a3e:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004a40:	6050      	str	r0, [r2, #4]
}
 8004a42:	4770      	bx	lr
 8004a44:	40021000 	.word	0x40021000

08004a48 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
 8004a48:	4b01      	ldr	r3, [pc, #4]	(8004a50 <RCC_PLLCmd+0x8>)
 8004a4a:	6018      	str	r0, [r3, #0]
}
 8004a4c:	4770      	bx	lr
 8004a4e:	46c0      	nop			(mov r8, r8)
 8004a50:	42420060 	.word	0x42420060

08004a54 <RCC_SYSCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8004a54:	4a03      	ldr	r2, [pc, #12]	(8004a64 <RCC_SYSCLKConfig+0x10>)
 8004a56:	6853      	ldr	r3, [r2, #4]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8004a58:	f023 0303 	bic.w	r3, r3, #3	; 0x3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8004a5c:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004a5e:	6050      	str	r0, [r2, #4]
}
 8004a60:	4770      	bx	lr
 8004a62:	46c0      	nop			(mov r8, r8)
 8004a64:	40021000 	.word	0x40021000

08004a68 <RCC_GetSYSCLKSource>:
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
 8004a68:	4b02      	ldr	r3, [pc, #8]	(8004a74 <RCC_GetSYSCLKSource+0xc>)
 8004a6a:	6858      	ldr	r0, [r3, #4]
 8004a6c:	f000 000c 	and.w	r0, r0, #12	; 0xc
}
 8004a70:	4770      	bx	lr
 8004a72:	46c0      	nop			(mov r8, r8)
 8004a74:	40021000 	.word	0x40021000

08004a78 <RCC_HCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8004a78:	4a03      	ldr	r2, [pc, #12]	(8004a88 <RCC_HCLKConfig+0x10>)
 8004a7a:	6853      	ldr	r3, [r2, #4]

  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8004a7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8004a80:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004a82:	6050      	str	r0, [r2, #4]
}
 8004a84:	4770      	bx	lr
 8004a86:	46c0      	nop			(mov r8, r8)
 8004a88:	40021000 	.word	0x40021000

08004a8c <RCC_PCLK1Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004a8c:	4a03      	ldr	r2, [pc, #12]	(8004a9c <RCC_PCLK1Config+0x10>)
 8004a8e:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8004a90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8004a94:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004a96:	6050      	str	r0, [r2, #4]
}
 8004a98:	4770      	bx	lr
 8004a9a:	46c0      	nop			(mov r8, r8)
 8004a9c:	40021000 	.word	0x40021000

08004aa0 <RCC_PCLK2Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004aa0:	4a03      	ldr	r2, [pc, #12]	(8004ab0 <RCC_PCLK2Config+0x10>)
 8004aa2:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8004aa4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8004aa8:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004aac:	6053      	str	r3, [r2, #4]
}
 8004aae:	4770      	bx	lr
 8004ab0:	40021000 	.word	0x40021000

08004ab4 <RCC_ITConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004ab4:	b121      	cbz	r1, 8004ac0 <RCC_ITConfig+0xc>
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004ab6:	4a05      	ldr	r2, [pc, #20]	(8004acc <RCC_ITConfig+0x18>)
 8004ab8:	7813      	ldrb	r3, [r2, #0]
 8004aba:	ea40 0303 	orr.w	r3, r0, r3
 8004abe:	e003      	b.n	8004ac8 <RCC_ITConfig+0x14>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to disable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS &= (u8)~RCC_IT;
 8004ac0:	4a02      	ldr	r2, [pc, #8]	(8004acc <RCC_ITConfig+0x18>)
 8004ac2:	7813      	ldrb	r3, [r2, #0]
 8004ac4:	ea23 0300 	bic.w	r3, r3, r0
 8004ac8:	7013      	strb	r3, [r2, #0]
  }
}
 8004aca:	4770      	bx	lr
 8004acc:	40021009 	.word	0x40021009

08004ad0 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(u32 RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(vu32 *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8004ad0:	4b01      	ldr	r3, [pc, #4]	(8004ad8 <RCC_USBCLKConfig+0x8>)
 8004ad2:	6018      	str	r0, [r3, #0]
}
 8004ad4:	4770      	bx	lr
 8004ad6:	46c0      	nop			(mov r8, r8)
 8004ad8:	424200d8 	.word	0x424200d8

08004adc <RCC_ADCCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));

  tmpreg = RCC->CFGR;
 8004adc:	4a03      	ldr	r2, [pc, #12]	(8004aec <RCC_ADCCLKConfig+0x10>)
 8004ade:	6853      	ldr	r3, [r2, #4]

  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8004ae0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000

  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8004ae4:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004ae6:	6050      	str	r0, [r2, #4]
}
 8004ae8:	4770      	bx	lr
 8004aea:	46c0      	nop			(mov r8, r8)
 8004aec:	40021000 	.word	0x40021000

08004af0 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004af0:	4a06      	ldr	r2, [pc, #24]	(8004b0c <RCC_LSEConfig+0x1c>)
 8004af2:	2300      	movs	r3, #0

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8004af4:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004af6:	7013      	strb	r3, [r2, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004af8:	7013      	strb	r3, [r2, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
 8004afa:	bf08      	it	eq
 8004afc:	7010      	strbeq	r0, [r2, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8004afe:	d003      	beq.n	8004b08 <RCC_LSEConfig+0x18>
 8004b00:	2804      	cmp	r0, #4
 8004b02:	d101      	bne.n	8004b08 <RCC_LSEConfig+0x18>
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8004b04:	2305      	movs	r3, #5
 8004b06:	7013      	strb	r3, [r2, #0]
      break;            
      
    default:
      break;      
  }
}
 8004b08:	4770      	bx	lr
 8004b0a:	46c0      	nop			(mov r8, r8)
 8004b0c:	40021020 	.word	0x40021020

08004b10 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_LSION_BB = (u32)NewState;
 8004b10:	4b01      	ldr	r3, [pc, #4]	(8004b18 <RCC_LSICmd+0x8>)
 8004b12:	6018      	str	r0, [r3, #0]
}
 8004b14:	4770      	bx	lr
 8004b16:	46c0      	nop			(mov r8, r8)
 8004b18:	42420480 	.word	0x42420480

08004b1c <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8004b1c:	4a02      	ldr	r2, [pc, #8]	(8004b28 <RCC_RTCCLKConfig+0xc>)
 8004b1e:	6a13      	ldr	r3, [r2, #32]
 8004b20:	4318      	orrs	r0, r3
 8004b22:	6210      	str	r0, [r2, #32]
}
 8004b24:	4770      	bx	lr
 8004b26:	46c0      	nop			(mov r8, r8)
 8004b28:	40021000 	.word	0x40021000

08004b2c <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_RTCEN_BB = (u32)NewState;
 8004b2c:	4b01      	ldr	r3, [pc, #4]	(8004b34 <RCC_RTCCLKCmd+0x8>)
 8004b2e:	6018      	str	r0, [r3, #0]
}
 8004b30:	4770      	bx	lr
 8004b32:	46c0      	nop			(mov r8, r8)
 8004b34:	4242043c 	.word	0x4242043c

08004b38 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8004b38:	4929      	ldr	r1, [pc, #164]	(8004be0 <RCC_GetClocksFreq+0xa8>)
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8004b3a:	4684      	mov	ip, r0
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8004b3c:	684b      	ldr	r3, [r1, #4]

  switch (tmp)
 8004b3e:	f003 030c 	and.w	r3, r3, #12	; 0xc
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d021      	beq.n	8004b8a <RCC_GetClocksFreq+0x52>
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d11f      	bne.n	8004b8a <RCC_GetClocksFreq+0x52>
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8004b4a:	684b      	ldr	r3, [r1, #4]
      pllmull = ( pllmull >> 18) + 2;
 8004b4c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004b50:	0c9b      	lsrs	r3, r3, #18
 8004b52:	1c9a      	adds	r2, r3, #2

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8004b54:	684b      	ldr	r3, [r1, #4]

      if (pllsource == 0x00)
 8004b56:	f413 3f80 	tst.w	r3, #65536	; 0x10000
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
 8004b5a:	bf08      	it	eq
 8004b5c:	ebc2 1342 	rsbeq	r3, r2, r2, lsl #5
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllmull = ( pllmull >> 18) + 2;

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;

      if (pllsource == 0x00)
 8004b60:	d006      	beq.n	8004b70 <RCC_GetClocksFreq+0x38>
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
      }
      else
      {/* HSE selected as PLL clock entry */

        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (u32)RESET)
 8004b62:	684b      	ldr	r3, [r1, #4]
 8004b64:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b68:	ea4f 1342 	mov.w	r3, r2, lsl #5
 8004b6c:	d006      	beq.n	8004b7c <RCC_GetClocksFreq+0x44>
        {/* HSE oscillator clock divided by 2 */

          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8004b74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	e007      	b.n	8004b8c <RCC_GetClocksFreq+0x54>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 8004b7c:	1a9b      	subs	r3, r3, r2
 8004b7e:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8004b82:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004b86:	025b      	lsls	r3, r3, #9
 8004b88:	e000      	b.n	8004b8c <RCC_GetClocksFreq+0x54>
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 8004b8a:	4b16      	ldr	r3, [pc, #88]	(8004be4 <RCC_GetClocksFreq+0xac>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8004b8c:	4814      	ldr	r0, [pc, #80]	(8004be0 <RCC_GetClocksFreq+0xa8>)
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 8004b8e:	f8cc 3000 	str.w	r3, [ip]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8004b92:	6843      	ldr	r3, [r0, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004b94:	4a14      	ldr	r2, [pc, #80]	(8004be8 <RCC_GetClocksFreq+0xb0>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8004b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004b9a:	091b      	lsrs	r3, r3, #4
 8004b9c:	5cd3      	ldrb	r3, [r2, r3]
 8004b9e:	f8dc 1000 	ldr.w	r1, [ip]
 8004ba2:	40d9      	lsrs	r1, r3
 8004ba4:	f8cc 1004 	str.w	r1, [ip, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8004ba8:	6843      	ldr	r3, [r0, #4]
 8004baa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  tmp = tmp >> 8;
  presc = APBAHBPrescTable[tmp];

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004bae:	0a1b      	lsrs	r3, r3, #8
 8004bb0:	5cd3      	ldrb	r3, [r2, r3]
 8004bb2:	fa31 f303 	lsrs.w	r3, r1, r3
 8004bb6:	f8cc 3008 	str.w	r3, [ip, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8004bba:	6843      	ldr	r3, [r0, #4]
 8004bbc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
  tmp = tmp >> 11;
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004bc0:	0adb      	lsrs	r3, r3, #11
 8004bc2:	5cd3      	ldrb	r3, [r2, r3]
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8004bc4:	4a09      	ldr	r2, [pc, #36]	(8004bec <RCC_GetClocksFreq+0xb4>)
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
  tmp = tmp >> 11;
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004bc6:	40d9      	lsrs	r1, r3
 8004bc8:	f8cc 100c 	str.w	r1, [ip, #12]

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8004bcc:	6843      	ldr	r3, [r0, #4]
 8004bce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8004bd2:	0b9b      	lsrs	r3, r3, #14
 8004bd4:	5cd3      	ldrb	r3, [r2, r3]
 8004bd6:	fbb1 f1f3 	udiv	r1, r1, r3
 8004bda:	f8cc 1010 	str.w	r1, [ip, #16]
}
 8004bde:	4770      	bx	lr
 8004be0:	40021000 	.word	0x40021000
 8004be4:	007a1200 	.word	0x007a1200
 8004be8:	08005fc0 	.word	0x08005fc0
 8004bec:	08005fd0 	.word	0x08005fd0

08004bf0 <RCC_AHBPeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004bf0:	b121      	cbz	r1, 8004bfc <RCC_AHBPeriphClockCmd+0xc>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8004bf2:	4a05      	ldr	r2, [pc, #20]	(8004c08 <RCC_AHBPeriphClockCmd+0x18>)
 8004bf4:	6953      	ldr	r3, [r2, #20]
 8004bf6:	ea40 0303 	orr.w	r3, r0, r3
 8004bfa:	e003      	b.n	8004c04 <RCC_AHBPeriphClockCmd+0x14>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8004bfc:	4a02      	ldr	r2, [pc, #8]	(8004c08 <RCC_AHBPeriphClockCmd+0x18>)
 8004bfe:	6953      	ldr	r3, [r2, #20]
 8004c00:	ea23 0300 	bic.w	r3, r3, r0
 8004c04:	6153      	str	r3, [r2, #20]
  }
}
 8004c06:	4770      	bx	lr
 8004c08:	40021000 	.word	0x40021000

08004c0c <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004c0c:	b121      	cbz	r1, 8004c18 <RCC_APB2PeriphClockCmd+0xc>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004c0e:	4a05      	ldr	r2, [pc, #20]	(8004c24 <RCC_APB2PeriphClockCmd+0x18>)
 8004c10:	6993      	ldr	r3, [r2, #24]
 8004c12:	ea40 0303 	orr.w	r3, r0, r3
 8004c16:	e003      	b.n	8004c20 <RCC_APB2PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8004c18:	4a02      	ldr	r2, [pc, #8]	(8004c24 <RCC_APB2PeriphClockCmd+0x18>)
 8004c1a:	6993      	ldr	r3, [r2, #24]
 8004c1c:	ea23 0300 	bic.w	r3, r3, r0
 8004c20:	6193      	str	r3, [r2, #24]
  }
}
 8004c22:	4770      	bx	lr
 8004c24:	40021000 	.word	0x40021000

08004c28 <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004c28:	b121      	cbz	r1, 8004c34 <RCC_APB1PeriphClockCmd+0xc>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8004c2a:	4a05      	ldr	r2, [pc, #20]	(8004c40 <RCC_APB1PeriphClockCmd+0x18>)
 8004c2c:	69d3      	ldr	r3, [r2, #28]
 8004c2e:	ea40 0303 	orr.w	r3, r0, r3
 8004c32:	e003      	b.n	8004c3c <RCC_APB1PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8004c34:	4a02      	ldr	r2, [pc, #8]	(8004c40 <RCC_APB1PeriphClockCmd+0x18>)
 8004c36:	69d3      	ldr	r3, [r2, #28]
 8004c38:	ea23 0300 	bic.w	r3, r3, r0
 8004c3c:	61d3      	str	r3, [r2, #28]
  }
}
 8004c3e:	4770      	bx	lr
 8004c40:	40021000 	.word	0x40021000

08004c44 <RCC_APB2PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004c44:	b121      	cbz	r1, 8004c50 <RCC_APB2PeriphResetCmd+0xc>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8004c46:	4a05      	ldr	r2, [pc, #20]	(8004c5c <RCC_APB2PeriphResetCmd+0x18>)
 8004c48:	68d3      	ldr	r3, [r2, #12]
 8004c4a:	ea40 0303 	orr.w	r3, r0, r3
 8004c4e:	e003      	b.n	8004c58 <RCC_APB2PeriphResetCmd+0x14>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8004c50:	4a02      	ldr	r2, [pc, #8]	(8004c5c <RCC_APB2PeriphResetCmd+0x18>)
 8004c52:	68d3      	ldr	r3, [r2, #12]
 8004c54:	ea23 0300 	bic.w	r3, r3, r0
 8004c58:	60d3      	str	r3, [r2, #12]
  }
}
 8004c5a:	4770      	bx	lr
 8004c5c:	40021000 	.word	0x40021000

08004c60 <RCC_APB1PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004c60:	b121      	cbz	r1, 8004c6c <RCC_APB1PeriphResetCmd+0xc>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8004c62:	4a05      	ldr	r2, [pc, #20]	(8004c78 <RCC_APB1PeriphResetCmd+0x18>)
 8004c64:	6913      	ldr	r3, [r2, #16]
 8004c66:	ea40 0303 	orr.w	r3, r0, r3
 8004c6a:	e003      	b.n	8004c74 <RCC_APB1PeriphResetCmd+0x14>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8004c6c:	4a02      	ldr	r2, [pc, #8]	(8004c78 <RCC_APB1PeriphResetCmd+0x18>)
 8004c6e:	6913      	ldr	r3, [r2, #16]
 8004c70:	ea23 0300 	bic.w	r3, r3, r0
 8004c74:	6113      	str	r3, [r2, #16]
  }
}
 8004c76:	4770      	bx	lr
 8004c78:	40021000 	.word	0x40021000

08004c7c <RCC_BackupResetCmd>:
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_BDRST_BB = (u32)NewState;
 8004c7c:	4b01      	ldr	r3, [pc, #4]	(8004c84 <RCC_BackupResetCmd+0x8>)
 8004c7e:	6018      	str	r0, [r3, #0]
}
 8004c80:	4770      	bx	lr
 8004c82:	46c0      	nop			(mov r8, r8)
 8004c84:	42420440 	.word	0x42420440

08004c88 <RCC_ClockSecuritySystemCmd>:
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_CSSON_BB = (u32)NewState;
 8004c88:	4b01      	ldr	r3, [pc, #4]	(8004c90 <RCC_ClockSecuritySystemCmd+0x8>)
 8004c8a:	6018      	str	r0, [r3, #0]
}
 8004c8c:	4770      	bx	lr
 8004c8e:	46c0      	nop			(mov r8, r8)
 8004c90:	4242004c 	.word	0x4242004c

08004c94 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO[2:0] bits to select the MCO source */
  *(vu8 *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8004c94:	4b01      	ldr	r3, [pc, #4]	(8004c9c <RCC_MCOConfig+0x8>)
 8004c96:	7018      	strb	r0, [r3, #0]
}
 8004c98:	4770      	bx	lr
 8004c9a:	46c0      	nop			(mov r8, r8)
 8004c9c:	40021007 	.word	0x40021007

08004ca0 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8004ca0:	0943      	lsrs	r3, r0, #5

  if (tmp == 1)               /* The flag to check is in CR register */
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d108      	bne.n	8004cb8 <RCC_GetFlagStatus+0x18>
  {
    statusreg = RCC->CR;
 8004ca6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004caa:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004cae:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8004cb2:	3307      	adds	r3, #7
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	e00c      	b.n	8004cd2 <RCC_GetFlagStatus+0x32>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d108      	bne.n	8004cce <RCC_GetFlagStatus+0x2e>
  {
    statusreg = RCC->BDCR;
 8004cbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004cc0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004cc4:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8004cc8:	3306      	adds	r3, #6
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	e001      	b.n	8004cd2 <RCC_GetFlagStatus+0x32>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8004cce:	4b04      	ldr	r3, [pc, #16]	(8004ce0 <RCC_GetFlagStatus+0x40>)
 8004cd0:	6a5b      	ldr	r3, [r3, #36]
 8004cd2:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8004cd6:	fa33 f000 	lsrs.w	r0, r3, r0
 8004cda:	f000 0001 	and.w	r0, r0, #1	; 0x1
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8004cde:	4770      	bx	lr
 8004ce0:	40021000 	.word	0x40021000

08004ce4 <RCC_ClearFlag>:
* Return         : None
*******************************************************************************/
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8004ce4:	4a02      	ldr	r2, [pc, #8]	(8004cf0 <RCC_ClearFlag+0xc>)
 8004ce6:	6a53      	ldr	r3, [r2, #36]
 8004ce8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cec:	6253      	str	r3, [r2, #36]
}
 8004cee:	4770      	bx	lr
 8004cf0:	40021000 	.word	0x40021000

08004cf4 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (u32)RESET)
 8004cf4:	4b03      	ldr	r3, [pc, #12]	(8004d04 <RCC_GetITStatus+0x10>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	4218      	tst	r0, r3
 8004cfa:	bf0c      	ite	eq
 8004cfc:	2000      	moveq	r0, #0
 8004cfe:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 8004d00:	4770      	bx	lr
 8004d02:	46c0      	nop			(mov r8, r8)
 8004d04:	40021000 	.word	0x40021000

08004d08 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(vu8 *) CIR_BYTE3_ADDRESS = RCC_IT;
 8004d08:	4b01      	ldr	r3, [pc, #4]	(8004d10 <RCC_ClearITPendingBit+0x8>)
 8004d0a:	7018      	strb	r0, [r3, #0]
}
 8004d0c:	4770      	bx	lr
 8004d0e:	46c0      	nop			(mov r8, r8)
 8004d10:	4002100a 	.word	0x4002100a

08004d14 <SysTick_CLKSourceConfig>:
void SysTick_CLKSourceConfig(u32 SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));

  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8004d14:	2804      	cmp	r0, #4
 8004d16:	d103      	bne.n	8004d20 <SysTick_CLKSourceConfig+0xc>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8004d18:	4a04      	ldr	r2, [pc, #16]	(8004d2c <SysTick_CLKSourceConfig+0x18>)
 8004d1a:	6813      	ldr	r3, [r2, #0]
 8004d1c:	4303      	orrs	r3, r0
 8004d1e:	e003      	b.n	8004d28 <SysTick_CLKSourceConfig+0x14>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8004d20:	4a02      	ldr	r2, [pc, #8]	(8004d2c <SysTick_CLKSourceConfig+0x18>)
 8004d22:	6813      	ldr	r3, [r2, #0]
 8004d24:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 8004d28:	6013      	str	r3, [r2, #0]
  }
}
 8004d2a:	4770      	bx	lr
 8004d2c:	e000e010 	.word	0xe000e010

08004d30 <SysTick_SetReload>:
void SysTick_SetReload(u32 Reload)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_RELOAD(Reload));

  SysTick->LOAD = Reload;
 8004d30:	4b01      	ldr	r3, [pc, #4]	(8004d38 <SysTick_SetReload+0x8>)
 8004d32:	6058      	str	r0, [r3, #4]
}
 8004d34:	4770      	bx	lr
 8004d36:	46c0      	nop			(mov r8, r8)
 8004d38:	e000e010 	.word	0xe000e010

08004d3c <SysTick_CounterCmd>:
void SysTick_CounterCmd(u32 SysTick_Counter)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_COUNTER(SysTick_Counter));

  if (SysTick_Counter == SysTick_Counter_Enable)
 8004d3c:	2801      	cmp	r0, #1
 8004d3e:	d103      	bne.n	8004d48 <SysTick_CounterCmd+0xc>
  {
    SysTick->CTRL |= SysTick_Counter_Enable;
 8004d40:	4a08      	ldr	r2, [pc, #32]	(8004d64 <SysTick_CounterCmd+0x28>)
 8004d42:	6813      	ldr	r3, [r2, #0]
 8004d44:	4303      	orrs	r3, r0
 8004d46:	e006      	b.n	8004d56 <SysTick_CounterCmd+0x1a>
  }
  else if (SysTick_Counter == SysTick_Counter_Disable) 
 8004d48:	f110 0f02 	cmn.w	r0, #2	; 0x2
 8004d4c:	d105      	bne.n	8004d5a <SysTick_CounterCmd+0x1e>
  {
    SysTick->CTRL &= SysTick_Counter_Disable;
 8004d4e:	4a05      	ldr	r2, [pc, #20]	(8004d64 <SysTick_CounterCmd+0x28>)
 8004d50:	6813      	ldr	r3, [r2, #0]
 8004d52:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	e002      	b.n	8004d60 <SysTick_CounterCmd+0x24>
  }
  else /* SysTick_Counter == SysTick_Counter_Clear */
  {
    SysTick->VAL = SysTick_Counter_Clear;
 8004d5a:	4b02      	ldr	r3, [pc, #8]	(8004d64 <SysTick_CounterCmd+0x28>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	609a      	str	r2, [r3, #8]
  }    
}
 8004d60:	4770      	bx	lr
 8004d62:	46c0      	nop			(mov r8, r8)
 8004d64:	e000e010 	.word	0xe000e010

08004d68 <SysTick_ITConfig>:
void SysTick_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004d68:	b120      	cbz	r0, 8004d74 <SysTick_ITConfig+0xc>
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 8004d6a:	4a05      	ldr	r2, [pc, #20]	(8004d80 <SysTick_ITConfig+0x18>)
 8004d6c:	6813      	ldr	r3, [r2, #0]
 8004d6e:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8004d72:	e003      	b.n	8004d7c <SysTick_ITConfig+0x14>
  }
  else
  {
    SysTick->CTRL &= CTRL_TICKINT_Reset;
 8004d74:	4a02      	ldr	r2, [pc, #8]	(8004d80 <SysTick_ITConfig+0x18>)
 8004d76:	6813      	ldr	r3, [r2, #0]
 8004d78:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 8004d7c:	6013      	str	r3, [r2, #0]
  }
}
 8004d7e:	4770      	bx	lr
 8004d80:	e000e010 	.word	0xe000e010

08004d84 <SysTick_GetCounter>:
* Output         : None
* Return         : SysTick current value
*******************************************************************************/
u32 SysTick_GetCounter(void)
{
  return(SysTick->VAL);
 8004d84:	4b01      	ldr	r3, [pc, #4]	(8004d8c <SysTick_GetCounter+0x8>)
 8004d86:	6898      	ldr	r0, [r3, #8]
}
 8004d88:	4770      	bx	lr
 8004d8a:	46c0      	nop			(mov r8, r8)
 8004d8c:	e000e010 	.word	0xe000e010

08004d90 <SysTick_GetFlagStatus>:
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;

  if (tmp == 2) /* The flag to check is in CTRL register */
 8004d90:	08c3      	lsrs	r3, r0, #3
 8004d92:	2b02      	cmp	r3, #2
*                       - SysTick_FLAG_NOREF
* Output         : None
* Return         : None
*******************************************************************************/
FlagStatus SysTick_GetFlagStatus(u8 SysTick_FLAG)
{
 8004d94:	4602      	mov	r2, r0
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;

  if (tmp == 2) /* The flag to check is in CTRL register */
 8004d96:	d106      	bne.n	8004da6 <SysTick_GetFlagStatus+0x16>
  {
    statusreg = SysTick->CTRL;
 8004d98:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004d9c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8004da0:	330e      	adds	r3, #14
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	e001      	b.n	8004daa <SysTick_GetFlagStatus+0x1a>
  }
  else          /* The flag to check is in CALIB register */
  {
    statusreg = SysTick->CALIB;
 8004da6:	4b03      	ldr	r3, [pc, #12]	(8004db4 <SysTick_GetFlagStatus+0x24>)
 8004da8:	68d8      	ldr	r0, [r3, #12]
 8004daa:	40d0      	lsrs	r0, r2
 8004dac:	f000 0001 	and.w	r0, r0, #1	; 0x1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004db0:	4770      	bx	lr
 8004db2:	46c0      	nop			(mov r8, r8)
 8004db4:	e000e010 	.word	0xe000e010

08004db8 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
 8004db8:	8803      	ldrh	r3, [r0, #0]
*                   the specified TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8004dba:	b082      	sub	sp, #8
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
 8004dbc:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 8004dc0:	8003      	strh	r3, [r0, #0]
  TIMx->CR1 |= (u32)TIM_TimeBaseInitStruct->TIM_ClockDivision |
 8004dc2:	8803      	ldrh	r3, [r0, #0]
 8004dc4:	88ca      	ldrh	r2, [r1, #6]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	884a      	ldrh	r2, [r1, #2]
*                   the specified TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8004dcc:	9001      	str	r0, [sp, #4]
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
  TIMx->CR1 |= (u32)TIM_TimeBaseInitStruct->TIM_ClockDivision |
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	8003      	strh	r3, [r0, #0]
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8004dd4:	888b      	ldrh	r3, [r1, #4]
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
    
  if (((*(u32*)&TIMx) == TIM1_BASE) || ((*(u32*)&TIMx) == TIM8_BASE))  
 8004dd6:	4a0b      	ldr	r2, [pc, #44]	(8004e04 <TIM_TimeBaseInit+0x4c>)
  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
  TIMx->CR1 |= (u32)TIM_TimeBaseInitStruct->TIM_ClockDivision |
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8004dd8:	8583      	strh	r3, [r0, #44]

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8004dda:	880b      	ldrh	r3, [r1, #0]
*                   the specified TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8004ddc:	468c      	mov	ip, r1
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8004dde:	8503      	strh	r3, [r0, #40]

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 8004de0:	f04f 0301 	mov.w	r3, #1	; 0x1
 8004de4:	8283      	strh	r3, [r0, #20]
    
  if (((*(u32*)&TIMx) == TIM1_BASE) || ((*(u32*)&TIMx) == TIM8_BASE))  
 8004de6:	4b08      	ldr	r3, [pc, #32]	(8004e08 <TIM_TimeBaseInit+0x50>)
 8004de8:	4298      	cmp	r0, r3
 8004dea:	bf14      	ite	ne
 8004dec:	2300      	movne	r3, #0
 8004dee:	2301      	moveq	r3, #1
 8004df0:	4290      	cmp	r0, r2
 8004df2:	bf08      	it	eq
 8004df4:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
 8004df8:	b113      	cbz	r3, 8004e00 <TIM_TimeBaseInit+0x48>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8004dfa:	f89c 3008 	ldrb.w	r3, [ip, #8]
 8004dfe:	8603      	strh	r3, [r0, #48]
  }        
}
 8004e00:	b002      	add	sp, #8
 8004e02:	4770      	bx	lr
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40013400 	.word	0x40013400

08004e0c <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8004e0c:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004e0e:	468c      	mov	ip, r1
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 8004e10:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 8004e14:	041b      	lsls	r3, r3, #16
 8004e16:	0c1b      	lsrs	r3, r3, #16
 8004e18:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1a:	8c01      	ldrh	r1, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e1c:	8883      	ldrh	r3, [r0, #4]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004e1e:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e20:	b29d      	uxth	r5, r3
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e22:	8b03      	ldrh	r3, [r0, #24]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8004e24:	f8bc 2008 	ldrh.w	r2, [ip, #8]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e28:	b29e      	uxth	r6, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8004e2a:	f8bc 3002 	ldrh.w	r3, [ip, #2]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 8004e2e:	f021 0102 	bic.w	r1, r1, #2	; 0x2

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8004e32:	4313      	orrs	r3, r2
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 8004e34:	0409      	lsls	r1, r1, #16

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8004e36:	b29b      	uxth	r3, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
 8004e38:	0c09      	lsrs	r1, r1, #16

  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8004e3a:	ea43 0401 	orr.w	r4, r3, r1
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8004e3e:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8004e42:	f8bc 7000 	ldrh.w	r7, [ip]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8004e46:	8683      	strh	r3, [r0, #52]
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8004e48:	4b1a      	ldr	r3, [pc, #104]	(8004eb4 <TIM_OC1Init+0xa8>)
 8004e4a:	4a1b      	ldr	r2, [pc, #108]	(8004eb8 <TIM_OC1Init+0xac>)
 8004e4c:	4298      	cmp	r0, r3
 8004e4e:	bf14      	ite	ne
 8004e50:	2300      	movne	r3, #0
 8004e52:	2301      	moveq	r3, #1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004e54:	b083      	sub	sp, #12
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8004e56:	4290      	cmp	r0, r2
 8004e58:	bf08      	it	eq
 8004e5a:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004e5e:	9001      	str	r0, [sp, #4]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8004e60:	b1eb      	cbz	r3, 8004e9e <TIM_OC1Init+0x92>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
 8004e62:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 8004e66:	f5a2 5230 	sub.w	r2, r2, #11264	; 0x2c00

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8004e6a:	f8bc 300a 	ldrh.w	r3, [ip, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
 8004e6e:	3a09      	subs	r2, #9
 8004e70:	ea04 0202 	and.w	r2, r4, r2

    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8004e74:	431a      	orrs	r2, r3

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
 8004e76:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8004e7a:	ea02 0303 	and.w	r3, r2, r3
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8004e7e:	f8bc 2004 	ldrh.w	r2, [ip, #4]

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
 8004e82:	f647 41ff 	movw	r1, #31999	; 0x7cff

    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8004e86:	ea43 0402 	orr.w	r4, r3, r2
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8004e8a:	f8bc 300e 	ldrh.w	r3, [ip, #14]
 8004e8e:	f8bc 200c 	ldrh.w	r2, [ip, #12]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
 8004e92:	ea05 0101 	and.w	r1, r5, r1

    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8004e96:	4313      	orrs	r3, r2
 8004e98:	b29b      	uxth	r3, r3

    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8004e9a:	ea43 0501 	orr.w	r5, r3, r1
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
 8004e9e:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8004ea2:	ea06 0303 	and.w	r3, r6, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8004ea6:	433b      	orrs	r3, r7

    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea8:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eaa:	8303      	strh	r3, [r0, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eac:	8404      	strh	r4, [r0, #32]
}
 8004eae:	b003      	add	sp, #12
 8004eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb2:	46c0      	nop			(mov r8, r8)
 8004eb4:	40013400 	.word	0x40013400
 8004eb8:	40012c00 	.word	0x40012c00

08004ebc <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8004ebc:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8004ec0:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 8004ec4:	041b      	lsls	r3, r3, #16
 8004ec6:	0c1b      	lsrs	r3, r3, #16
 8004ec8:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8004eca:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ecc:	8882      	ldrh	r2, [r0, #4]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 8004ece:	f023 0320 	bic.w	r3, r3, #32	; 0x20
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed2:	b295      	uxth	r5, r2
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ed4:	8b02      	ldrh	r2, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 8004ed6:	041b      	lsls	r3, r3, #16

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ed8:	b296      	uxth	r6, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8004eda:	890a      	ldrh	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
 8004edc:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8004ede:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 8004ee2:	884a      	ldrh	r2, [r1, #2]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8004ee4:	b29b      	uxth	r3, r3
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
 8004ee6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004eea:	b29c      	uxth	r4, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8004eec:	88cb      	ldrh	r3, [r1, #6]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8004eee:	880f      	ldrh	r7, [r1, #0]
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8004ef0:	8703      	strh	r3, [r0, #56]
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8004ef2:	4b1e      	ldr	r3, [pc, #120]	(8004f6c <TIM_OC2Init+0xb0>)
 8004ef4:	4a1e      	ldr	r2, [pc, #120]	(8004f70 <TIM_OC2Init+0xb4>)
 8004ef6:	4298      	cmp	r0, r3
 8004ef8:	bf14      	ite	ne
 8004efa:	2300      	movne	r3, #0
 8004efc:	2301      	moveq	r3, #1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004efe:	b083      	sub	sp, #12
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8004f00:	4290      	cmp	r0, r2
 8004f02:	bf08      	it	eq
 8004f04:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004f08:	9001      	str	r0, [sp, #4]
 8004f0a:	468c      	mov	ip, r1
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8004f0c:	b30b      	cbz	r3, 8004f52 <TIM_OC2Init+0x96>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
 8004f0e:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 8004f12:	f5a2 5232 	sub.w	r2, r2, #11392	; 0x2c80

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8004f16:	f8bc 300a 	ldrh.w	r3, [ip, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
 8004f1a:	3a01      	subs	r2, #1
 8004f1c:	ea04 0202 	and.w	r2, r4, r2

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8004f20:	ea42 1203 	orr.w	r2, r2, r3, lsl #4

    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
 8004f24:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8004f28:	ea02 0303 	and.w	r3, r2, r3
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8004f2c:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8004f30:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004f34:	b29c      	uxth	r4, r3
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8004f36:	f8bc 200c 	ldrh.w	r2, [ip, #12]
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 4);

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;
 8004f3a:	f247 33ff 	movw	r3, #29695	; 0x73ff
 8004f3e:	ea05 0303 	and.w	r3, r5, r3

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8004f42:	ea43 0382 	orr.w	r3, r3, r2, lsl #2

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8004f46:	f8bc 200e 	ldrh.w	r2, [ip, #14]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8004f4a:	b29b      	uxth	r3, r3

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8004f4c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8004f50:	b29d      	uxth	r5, r3
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
 8004f52:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8004f56:	ea06 0303 	and.w	r3, r6, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8004f5a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8004f5e:	b29b      	uxth	r3, r3
    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f60:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f62:	8303      	strh	r3, [r0, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f64:	8404      	strh	r4, [r0, #32]
}
 8004f66:	b003      	add	sp, #12
 8004f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f6a:	46c0      	nop			(mov r8, r8)
 8004f6c:	40013400 	.word	0x40013400
 8004f70:	40012c00 	.word	0x40012c00

08004f74 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 8004f74:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004f76:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 8004f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f7c:	041b      	lsls	r3, r3, #16
 8004f7e:	0c1b      	lsrs	r3, r3, #16
 8004f80:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f82:	8c03      	ldrh	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f84:	8882      	ldrh	r2, [r0, #4]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 8004f86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f8a:	b295      	uxth	r5, r2
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f8c:	8b82      	ldrh	r2, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 8004f8e:	041b      	lsls	r3, r3, #16

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f90:	b296      	uxth	r6, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8004f92:	890a      	ldrh	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
 8004f94:	0c1b      	lsrs	r3, r3, #16

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8004f96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 8004f9a:	884a      	ldrh	r2, [r1, #2]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8004f9c:	b29b      	uxth	r3, r3
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
 8004f9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004fa2:	b29c      	uxth	r4, r3
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8004fa4:	88cb      	ldrh	r3, [r1, #6]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8004fa6:	880f      	ldrh	r7, [r1, #0]
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8004fa8:	8783      	strh	r3, [r0, #60]
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8004faa:	4b1d      	ldr	r3, [pc, #116]	(8005020 <TIM_OC3Init+0xac>)
 8004fac:	4a1d      	ldr	r2, [pc, #116]	(8005024 <TIM_OC3Init+0xb0>)
 8004fae:	4298      	cmp	r0, r3
 8004fb0:	bf14      	ite	ne
 8004fb2:	2300      	movne	r3, #0
 8004fb4:	2301      	moveq	r3, #1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004fb6:	b083      	sub	sp, #12
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8004fb8:	4290      	cmp	r0, r2
 8004fba:	bf08      	it	eq
 8004fbc:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8004fc0:	9001      	str	r0, [sp, #4]
 8004fc2:	468c      	mov	ip, r1
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8004fc4:	b30b      	cbz	r3, 800500a <TIM_OC3Init+0x96>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
 8004fc6:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 8004fca:	f5a2 5250 	sub.w	r2, r2, #13312	; 0x3400

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8004fce:	f8bc 300a 	ldrh.w	r3, [ip, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
 8004fd2:	3a01      	subs	r2, #1
 8004fd4:	ea04 0202 	and.w	r2, r4, r2

    /* Set the Output N Polarity */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8004fd8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
 8004fdc:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8004fe0:	ea02 0303 	and.w	r3, r2, r3
    
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8004fe4:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8004fe8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004fec:	b29c      	uxth	r4, r3
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8004fee:	f8bc 200c 	ldrh.w	r2, [ip, #12]
    /* Set the Output N State */
    tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);

    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
 8004ff2:	f644 73ff 	movw	r3, #20479	; 0x4fff
 8004ff6:	ea05 0303 	and.w	r3, r5, r3

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8004ffa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8004ffe:	f8bc 200e 	ldrh.w	r2, [ip, #14]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8005002:	b29b      	uxth	r3, r3

    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005004:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005008:	b29d      	uxth	r5, r3
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC13M_Mask;
 800500a:	f64f 738f 	movw	r3, #65423	; 0xff8f
 800500e:	ea06 0303 	and.w	r3, r6, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005012:	433b      	orrs	r3, r7
    /* Set the Output N Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005014:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005016:	8383      	strh	r3, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005018:	8404      	strh	r4, [r0, #32]
}
 800501a:	b003      	add	sp, #12
 800501c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800501e:	46c0      	nop			(mov r8, r8)
 8005020:	40013400 	.word	0x40013400
 8005024:	40012c00 	.word	0x40012c00

08005028 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 8005028:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800502a:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 800502c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005030:	041b      	lsls	r3, r3, #16
 8005032:	0c1b      	lsrs	r3, r3, #16
 8005034:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005036:	8c03      	ldrh	r3, [r0, #32]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005038:	b085      	sub	sp, #20

  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503a:	b29b      	uxth	r3, r3
 800503c:	9302      	str	r3, [sp, #8]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800503e:	8883      	ldrh	r3, [r0, #4]

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005040:	884a      	ldrh	r2, [r1, #2]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005042:	fa1f fc83 	uxth.w	ip, r3
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005046:	8b83      	ldrh	r3, [r0, #28]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005048:	880e      	ldrh	r6, [r1, #0]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800504a:	b29d      	uxth	r5, r3
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800504c:	88cb      	ldrh	r3, [r1, #6]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800504e:	890f      	ldrh	r7, [r1, #8]
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005050:	f8a0 3040 	strh.w	r3, [r0, #64]
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005054:	4b17      	ldr	r3, [pc, #92]	(80050b4 <TIM_OC4Init+0x8c>)

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005056:	9201      	str	r2, [sp, #4]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 8005058:	4a17      	ldr	r2, [pc, #92]	(80050b8 <TIM_OC4Init+0x90>)
 800505a:	4298      	cmp	r0, r3
 800505c:	bf14      	ite	ne
 800505e:	2300      	movne	r3, #0
 8005060:	2301      	moveq	r3, #1
 8005062:	4290      	cmp	r0, r2
 8005064:	bf08      	it	eq
 8005066:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800506a:	9003      	str	r0, [sp, #12]
 800506c:	460c      	mov	r4, r1
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
 800506e:	b13b      	cbz	r3, 8005080 <TIM_OC4Init+0x58>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
 8005070:	ea4f 438c 	mov.w	r3, ip, lsl #18

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005074:	89a2      	ldrh	r2, [r4, #12]
  if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));

    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
 8005076:	0c9b      	lsrs	r3, r3, #18

    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005078:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800507c:	fa1f fc83 	uxth.w	ip, r3
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= CCMR_OC24M_Mask;
 8005080:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8005084:	ea05 0303 	and.w	r3, r5, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005088:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 800508c:	b29b      	uxth	r3, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 800508e:	9a02      	ldr	r2, [sp, #8]
    /* Set the Output Idle state */
    tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005090:	f8a0 c004 	strh.w	ip, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8005094:	8383      	strh	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
 8005096:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800509a:	ea02 0303 	and.w	r3, r2, r3

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800509e:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 80050a2:	9a01      	ldr	r2, [sp, #4]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;

  /* Set the Output Compare Polarity */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80050a4:	b29b      	uxth	r3, r3
  
  /* Set the Output State */
  tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
 80050a6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80050aa:	b29b      	uxth	r3, r3
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ac:	8403      	strh	r3, [r0, #32]
}
 80050ae:	b005      	add	sp, #20
 80050b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050b2:	46c0      	nop			(mov r8, r8)
 80050b4:	40013400 	.word	0x40013400
 80050b8:	40012c00 	.word	0x40012c00

080050bc <TIM_ICInit>:
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80050bc:	880b      	ldrh	r3, [r1, #0]
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80050be:	b530      	push	{r4, r5, lr}
 80050c0:	4604      	mov	r4, r0
 80050c2:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80050c4:	bb43      	cbnz	r3, 8005118 <TIM_ICInit+0x5c>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 80050c6:	8c23      	ldrh	r3, [r4, #32]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80050c8:	8849      	ldrh	r1, [r1, #2]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 80050ca:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 80050ce:	041b      	lsls	r3, r3, #16
 80050d0:	0c1b      	lsrs	r3, r3, #16
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80050d2:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80050d6:	8928      	ldrh	r0, [r5, #8]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 80050d8:	8423      	strh	r3, [r4, #32]

  tmpccmr1 = TIMx->CCMR1;
 80050da:	8b23      	ldrh	r3, [r4, #24]
  tmpccer = TIMx->CCER;
 80050dc:	8c22      	ldrh	r2, [r4, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80050de:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	0c1b      	lsrs	r3, r3, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 80050e6:	f022 0202 	bic.w	r2, r2, #2	; 0x2
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80050ea:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 80050ee:	0412      	lsls	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80050f0:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 80050f2:	0c12      	lsrs	r2, r2, #16
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 80050f4:	f041 0101 	orr.w	r1, r1, #1	; 0x1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80050f8:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 80050fc:	430a      	orrs	r2, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050fe:	8323      	strh	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005100:	8422      	strh	r2, [r4, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 8005102:	8b23      	ldrh	r3, [r4, #24]
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005104:	88ea      	ldrh	r2, [r5, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 8005106:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 800510a:	041b      	lsls	r3, r3, #16
 800510c:	0c1b      	lsrs	r3, r3, #16
 800510e:	8323      	strh	r3, [r4, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8005110:	8b23      	ldrh	r3, [r4, #24]
 8005112:	b29b      	uxth	r3, r3
 8005114:	4313      	orrs	r3, r2
 8005116:	e02e      	b.n	8005176 <TIM_ICInit+0xba>
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8005118:	2b04      	cmp	r3, #4
 800511a:	d12e      	bne.n	800517a <TIM_ICInit+0xbe>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 800511c:	8c23      	ldrh	r3, [r4, #32]
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800511e:	f8b1 c002 	ldrh.w	ip, [r1, #2]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8005122:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 8005126:	041b      	lsls	r3, r3, #16
 8005128:	0c1b      	lsrs	r3, r3, #16
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800512a:	8888      	ldrh	r0, [r1, #4]
 800512c:	8909      	ldrh	r1, [r1, #8]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 800512e:	8423      	strh	r3, [r4, #32]

  tmpccmr1 = TIMx->CCMR1;
 8005130:	8b23      	ldrh	r3, [r4, #24]
  tmpccer = TIMx->CCER;
 8005132:	8c22      	ldrh	r2, [r4, #32]
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 8005134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005138:	051b      	lsls	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 800513a:	f022 0220 	bic.w	r2, r2, #32	; 0x20
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 800513e:	0d1b      	lsrs	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8005140:	0412      	lsls	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 8005142:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8005146:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 8005148:	b29b      	uxth	r3, r3
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 800514a:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 800514e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8005152:	b292      	uxth	r2, r2
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 8005154:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8005156:	f042 0210 	orr.w	r2, r2, #16	; 0x10

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800515a:	8323      	strh	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800515c:	8422      	strh	r2, [r4, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 800515e:	8b23      	ldrh	r3, [r4, #24]
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005160:	88ea      	ldrh	r2, [r5, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 8005162:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005166:	041b      	lsls	r3, r3, #16
 8005168:	0c1b      	lsrs	r3, r3, #16
 800516a:	8323      	strh	r3, [r4, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
 800516c:	8b23      	ldrh	r3, [r4, #24]
 800516e:	b29b      	uxth	r3, r3
 8005170:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005174:	b29b      	uxth	r3, r3
 8005176:	8323      	strh	r3, [r4, #24]
 8005178:	e055      	b.n	8005226 <TIM_ICInit+0x16a>
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800517a:	2b08      	cmp	r3, #8
 800517c:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 8005180:	8888      	ldrh	r0, [r1, #4]
 8005182:	8909      	ldrh	r1, [r1, #8]
 8005184:	d125      	bne.n	80051d2 <TIM_ICInit+0x116>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
 8005186:	8c23      	ldrh	r3, [r4, #32]
 8005188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800518c:	041b      	lsls	r3, r3, #16
 800518e:	0c1b      	lsrs	r3, r3, #16
 8005190:	8423      	strh	r3, [r4, #32]

  tmpccmr2 = TIMx->CCMR2;
 8005192:	8ba3      	ldrh	r3, [r4, #28]
  tmpccer = TIMx->CCER;
 8005194:	8c22      	ldrh	r2, [r4, #32]
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005196:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 800519a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 800519e:	041b      	lsls	r3, r3, #16

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 80051a0:	0412      	lsls	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80051a2:	0c1b      	lsrs	r3, r3, #16

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 80051a4:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80051a6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 80051aa:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80051ae:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 80051b0:	b292      	uxth	r2, r2
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80051b2:	4303      	orrs	r3, r0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= tmp | CCER_CC3E_Set;
 80051b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80051b8:	83a3      	strh	r3, [r4, #28]
  TIMx->CCER = tmpccer;
 80051ba:	8422      	strh	r2, [r4, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
 80051bc:	8ba3      	ldrh	r3, [r4, #28]
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80051be:	88ea      	ldrh	r2, [r5, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
 80051c0:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 80051c4:	041b      	lsls	r3, r3, #16
 80051c6:	0c1b      	lsrs	r3, r3, #16
 80051c8:	83a3      	strh	r3, [r4, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80051ca:	8ba3      	ldrh	r3, [r4, #28]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	4313      	orrs	r3, r2
 80051d0:	e028      	b.n	8005224 <TIM_ICInit+0x168>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
 80051d2:	8c23      	ldrh	r3, [r4, #32]
 80051d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051d8:	041b      	lsls	r3, r3, #16
 80051da:	0c1b      	lsrs	r3, r3, #16
 80051dc:	8423      	strh	r3, [r4, #32]

  tmpccmr2 = TIMx->CCMR2;
 80051de:	8ba3      	ldrh	r3, [r4, #28]
  tmpccer = TIMx->CCER;
 80051e0:	8c22      	ldrh	r2, [r4, #32]
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 80051e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e6:	051b      	lsls	r3, r3, #20

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 80051e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 80051ec:	0d1b      	lsrs	r3, r3, #20

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 80051ee:	0412      	lsls	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 80051f0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 80051f4:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 80051f6:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 80051f8:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 80051fc:	ea43 3301 	orr.w	r3, r3, r1, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 8005200:	b292      	uxth	r2, r2
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
 8005202:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= tmp | CCER_CC4E_Set;
 8005204:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005208:	83a3      	strh	r3, [r4, #28]
  TIMx->CCER = tmpccer ;
 800520a:	8422      	strh	r2, [r4, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
 800520c:	8ba3      	ldrh	r3, [r4, #28]
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800520e:	88ea      	ldrh	r2, [r5, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
 8005210:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005214:	041b      	lsls	r3, r3, #16
 8005216:	0c1b      	lsrs	r3, r3, #16
 8005218:	83a3      	strh	r3, [r4, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (u16)(TIM_ICPSC << 8);
 800521a:	8ba3      	ldrh	r3, [r4, #28]
 800521c:	b29b      	uxth	r3, r3
 800521e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005222:	b29b      	uxth	r3, r3
 8005224:	83a3      	strh	r3, [r4, #28]
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8005226:	bd30      	pop	{r4, r5, pc}

08005228 <TIM_PWMIConfig>:
*                    TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005228:	468c      	mov	ip, r1
 800522a:	b5f0      	push	{r4, r5, r6, r7, lr}
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800522c:	f8bc 3000 	ldrh.w	r3, [ip]

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8005230:	884c      	ldrh	r4, [r1, #2]
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }

  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8005232:	8889      	ldrh	r1, [r1, #4]

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8005234:	2c00      	cmp	r4, #0
 8005236:	bf0c      	ite	eq
 8005238:	2702      	moveq	r7, #2
 800523a:	2700      	movne	r7, #0
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }

  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 800523c:	2901      	cmp	r1, #1
 800523e:	bf0c      	ite	eq
 8005240:	2602      	moveq	r6, #2
 8005242:	2601      	movne	r6, #1
 8005244:	f8bc 5008 	ldrh.w	r5, [ip, #8]
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005248:	2b00      	cmp	r3, #0
 800524a:	d14b      	bne.n	80052e4 <TIM_PWMIConfig+0xbc>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 800524c:	8c03      	ldrh	r3, [r0, #32]
 800524e:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 8005252:	041b      	lsls	r3, r3, #16
 8005254:	0c1b      	lsrs	r3, r3, #16
 8005256:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 8005258:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 800525a:	8c02      	ldrh	r2, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 800525c:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	0c1b      	lsrs	r3, r3, #16
 8005264:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 8005268:	f022 0202 	bic.w	r2, r2, #2	; 0x2
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 800526c:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 800526e:	0412      	lsls	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005270:	430b      	orrs	r3, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
 8005272:	0c12      	lsrs	r2, r2, #16
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8005274:	f044 0101 	orr.w	r1, r4, #1	; 0x1
 8005278:	430a      	orrs	r2, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800527a:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800527c:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 800527e:	8b03      	ldrh	r3, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005280:	f8bc 1006 	ldrh.w	r1, [ip, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 8005284:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 8005288:	041b      	lsls	r3, r3, #16
 800528a:	0c1b      	lsrs	r3, r3, #16
 800528c:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800528e:	8b03      	ldrh	r3, [r0, #24]
 8005290:	b29b      	uxth	r3, r3
 8005292:	430b      	orrs	r3, r1
 8005294:	8303      	strh	r3, [r0, #24]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 8005296:	8c03      	ldrh	r3, [r0, #32]
 8005298:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 800529c:	041b      	lsls	r3, r3, #16
 800529e:	0c1b      	lsrs	r3, r3, #16
 80052a0:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 80052a2:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 80052a4:	8c02      	ldrh	r2, [r0, #32]
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 80052a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052aa:	051b      	lsls	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80052ac:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 80052b0:	0d1b      	lsrs	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80052b2:	0412      	lsls	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 80052b4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80052b8:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 80052ba:	b29b      	uxth	r3, r3
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80052bc:	f042 0210 	orr.w	r2, r2, #16	; 0x10
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 80052c0:	ea43 2306 	orr.w	r3, r3, r6, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80052c4:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052c8:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80052ca:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 80052cc:	8b03      	ldrh	r3, [r0, #24]
 80052ce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80052d2:	041b      	lsls	r3, r3, #16
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
 80052d8:	8b03      	ldrh	r3, [r0, #24]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	e04c      	b.n	800537e <TIM_PWMIConfig+0x156>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 80052e4:	8c03      	ldrh	r3, [r0, #32]
 80052e6:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 80052ea:	041b      	lsls	r3, r3, #16
 80052ec:	0c1b      	lsrs	r3, r3, #16
 80052ee:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 80052f0:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 80052f2:	8c02      	ldrh	r2, [r0, #32]
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 80052f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f8:	051b      	lsls	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80052fa:	f022 0220 	bic.w	r2, r2, #32	; 0x20
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 80052fe:	0d1b      	lsrs	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8005300:	0412      	lsls	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 8005302:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8005306:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 8005308:	b29b      	uxth	r3, r3
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 800530a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 800530e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8005312:	b292      	uxth	r2, r2
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 8005314:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 8005316:	f042 0210 	orr.w	r2, r2, #16	; 0x10

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800531a:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800531c:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 800531e:	8b03      	ldrh	r3, [r0, #24]
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005320:	f8bc 1006 	ldrh.w	r1, [ip, #6]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 8005324:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005328:	041b      	lsls	r3, r3, #16
 800532a:	0c1b      	lsrs	r3, r3, #16
 800532c:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
 800532e:	8b03      	ldrh	r3, [r0, #24]
 8005330:	b29b      	uxth	r3, r3
 8005332:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005336:	b29b      	uxth	r3, r3
 8005338:	8303      	strh	r3, [r0, #24]
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 800533a:	8c03      	ldrh	r3, [r0, #32]
 800533c:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 8005340:	041b      	lsls	r3, r3, #16
 8005342:	0c1b      	lsrs	r3, r3, #16
 8005344:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 8005346:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 8005348:	8c02      	ldrh	r2, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 800534a:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800534e:	041b      	lsls	r3, r3, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8005350:	f022 0203 	bic.w	r2, r2, #3	; 0x3
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005354:	0c1b      	lsrs	r3, r3, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8005356:	0412      	lsls	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005358:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 800535c:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 800535e:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8005360:	f042 0201 	orr.w	r2, r2, #1	; 0x1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005364:	4333      	orrs	r3, r6

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8005366:	433a      	orrs	r2, r7

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005368:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800536a:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 800536c:	8b03      	ldrh	r3, [r0, #24]
 800536e:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 8005372:	041b      	lsls	r3, r3, #16
 8005374:	0c1b      	lsrs	r3, r3, #16
 8005376:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8005378:	8b03      	ldrh	r3, [r0, #24]
 800537a:	b29b      	uxth	r3, r3
 800537c:	430b      	orrs	r3, r1
 800537e:	8303      	strh	r3, [r0, #24]
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);

    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8005380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005382:	46c0      	nop			(mov r8, r8)

08005384 <TIM_BDTRConfig>:
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  TIMx->BDTR = (u32)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8005384:	880a      	ldrh	r2, [r1, #0]
 8005386:	884b      	ldrh	r3, [r1, #2]
 8005388:	4313      	orrs	r3, r2
 800538a:	888a      	ldrh	r2, [r1, #4]
 800538c:	4313      	orrs	r3, r2
 800538e:	88ca      	ldrh	r2, [r1, #6]
 8005390:	4313      	orrs	r3, r2
 8005392:	890a      	ldrh	r2, [r1, #8]
 8005394:	4313      	orrs	r3, r2
 8005396:	894a      	ldrh	r2, [r1, #10]
 8005398:	4313      	orrs	r3, r2
 800539a:	898a      	ldrh	r2, [r1, #12]
 800539c:	4313      	orrs	r3, r2
 800539e:	b29b      	uxth	r3, r3
 80053a0:	f8a0 3044 	strh.w	r3, [r0, #68]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;

}
 80053a4:	4770      	bx	lr
 80053a6:	46c0      	nop			(mov r8, r8)

080053a8 <TIM_TimeBaseStructInit>:
* Return         : None
*******************************************************************************/
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 80053a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053ac:	8083      	strh	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80053ae:	f04f 0300 	mov.w	r3, #0	; 0x0
 80053b2:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80053b4:	80c3      	strh	r3, [r0, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80053b6:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80053b8:	2300      	movs	r3, #0
 80053ba:	7203      	strb	r3, [r0, #8]
}
 80053bc:	4770      	bx	lr
 80053be:	46c0      	nop			(mov r8, r8)

080053c0 <TIM_OCStructInit>:
* Return         : None
*******************************************************************************/
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80053c0:	f04f 0300 	mov.w	r3, #0	; 0x0
 80053c4:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80053c6:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80053c8:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 80053ca:	80c3      	strh	r3, [r0, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80053cc:	8103      	strh	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80053ce:	8143      	strh	r3, [r0, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80053d0:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80053d2:	81c3      	strh	r3, [r0, #14]
}
 80053d4:	4770      	bx	lr
 80053d6:	46c0      	nop			(mov r8, r8)

080053d8 <TIM_ICStructInit>:
* Return         : None
*******************************************************************************/
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80053d8:	f04f 0300 	mov.w	r3, #0	; 0x0
 80053dc:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 80053de:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80053e0:	f04f 0301 	mov.w	r3, #1	; 0x1
 80053e4:	8083      	strh	r3, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80053e6:	f04f 0300 	mov.w	r3, #0	; 0x0
 80053ea:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 80053ec:	8103      	strh	r3, [r0, #8]
}
 80053ee:	4770      	bx	lr

080053f0 <TIM_BDTRStructInit>:
* Return         : None
*******************************************************************************/
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 80053f0:	f04f 0300 	mov.w	r3, #0	; 0x0
 80053f4:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 80053f6:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 80053f8:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 80053fa:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 80053fc:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 80053fe:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8005400:	8183      	strh	r3, [r0, #12]
}
 8005402:	4770      	bx	lr

08005404 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005404:	b121      	cbz	r1, 8005410 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
 8005406:	8803      	ldrh	r3, [r0, #0]
 8005408:	b29b      	uxth	r3, r3
 800540a:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 800540e:	e004      	b.n	800541a <TIM_Cmd+0x16>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= CR1_CEN_Reset;
 8005410:	8803      	ldrh	r3, [r0, #0]
 8005412:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 8005416:	059b      	lsls	r3, r3, #22
 8005418:	0d9b      	lsrs	r3, r3, #22
 800541a:	8003      	strh	r3, [r0, #0]
  }
}
 800541c:	4770      	bx	lr
 800541e:	46c0      	nop			(mov r8, r8)

08005420 <TIM_CtrlPWMOutputs>:
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005420:	b129      	cbz	r1, 800542e <TIM_CtrlPWMOutputs+0xe>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
 8005422:	f8b0 3044 	ldrh.w	r3, [r0, #68]
 8005426:	b29b      	uxth	r3, r3
 8005428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542c:	e003      	b.n	8005436 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= BDTR_MOE_Reset;
 800542e:	f8b0 3044 	ldrh.w	r3, [r0, #68]
 8005432:	045b      	lsls	r3, r3, #17
 8005434:	0c5b      	lsrs	r3, r3, #17
 8005436:	f8a0 3044 	strh.w	r3, [r0, #68]
  }  
}
 800543a:	4770      	bx	lr

0800543c <TIM_ITConfig>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT((TIMx), (TIM_IT)));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800543c:	b122      	cbz	r2, 8005448 <TIM_ITConfig+0xc>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800543e:	8983      	ldrh	r3, [r0, #12]
 8005440:	b29b      	uxth	r3, r3
 8005442:	ea41 0303 	orr.w	r3, r1, r3
 8005446:	e003      	b.n	8005450 <TIM_ITConfig+0x14>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (u16)~TIM_IT;
 8005448:	8983      	ldrh	r3, [r0, #12]
 800544a:	b29b      	uxth	r3, r3
 800544c:	ea23 0301 	bic.w	r3, r3, r1
 8005450:	8183      	strh	r3, [r0, #12]
  }
}
 8005452:	4770      	bx	lr

08005454 <TIM_GenerateEvent>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  assert_param(IS_TIM_PERIPH_EVENT((TIMx), (TIM_EventSource)));

  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8005454:	8281      	strh	r1, [r0, #20]
}
 8005456:	4770      	bx	lr

08005458 <TIM_DMAConfig>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8005458:	430a      	orrs	r2, r1
 800545a:	f8a0 2048 	strh.w	r2, [r0, #72]
}
 800545e:	4770      	bx	lr

08005460 <TIM_DMACmd>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_TIM_PERIPH_DMA(TIMx, TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005460:	b122      	cbz	r2, 800546c <TIM_DMACmd+0xc>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8005462:	8983      	ldrh	r3, [r0, #12]
 8005464:	b29b      	uxth	r3, r3
 8005466:	ea41 0303 	orr.w	r3, r1, r3
 800546a:	e003      	b.n	8005474 <TIM_DMACmd+0x14>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (u16)~TIM_DMASource;
 800546c:	8983      	ldrh	r3, [r0, #12]
 800546e:	b29b      	uxth	r3, r3
 8005470:	ea23 0301 	bic.w	r3, r3, r1
 8005474:	8183      	strh	r3, [r0, #12]
  }
}
 8005476:	4770      	bx	lr

08005478 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  SMCR_SMS_Mask;
 8005478:	8903      	ldrh	r3, [r0, #8]
 800547a:	f023 0307 	bic.w	r3, r3, #7	; 0x7
 800547e:	041b      	lsls	r3, r3, #16
 8005480:	0c1b      	lsrs	r3, r3, #16
 8005482:	8103      	strh	r3, [r0, #8]
}
 8005484:	4770      	bx	lr
 8005486:	46c0      	nop			(mov r8, r8)

08005488 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005488:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	041b      	lsls	r3, r3, #16
 8005490:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8005492:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005494:	8101      	strh	r1, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8005496:	8903      	ldrh	r3, [r0, #8]
 8005498:	b29b      	uxth	r3, r3
 800549a:	f043 0307 	orr.w	r3, r3, #7	; 0x7
 800549e:	8103      	strh	r3, [r0, #8]
}
 80054a0:	4770      	bx	lr
 80054a2:	46c0      	nop			(mov r8, r8)

080054a4 <TIM_TIxExternalClockConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, u16 TIM_TIxExternalCLKSource,
                                u16 TIM_ICPolarity, u16 ICFilter)
{
 80054a4:	b510      	push	{r4, lr}
 80054a6:	460c      	mov	r4, r1
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80054a8:	2c60      	cmp	r4, #96
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, u16 TIM_TIxExternalCLKSource,
                                u16 TIM_ICPolarity, u16 ICFilter)
{
 80054aa:	4611      	mov	r1, r2
 80054ac:	469c      	mov	ip, r3
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80054ae:	d11a      	bne.n	80054e6 <TIM_TIxExternalClockConfig+0x42>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
 80054b0:	8c03      	ldrh	r3, [r0, #32]
 80054b2:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 80054b6:	041b      	lsls	r3, r3, #16
 80054b8:	0c1b      	lsrs	r3, r3, #16
 80054ba:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 80054bc:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 80054be:	8c02      	ldrh	r2, [r0, #32]
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 80054c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80054c4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 80054c8:	051b      	lsls	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80054ca:	0412      	lsls	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
 80054cc:	0d1b      	lsrs	r3, r3, #20
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80054ce:	0c12      	lsrs	r2, r2, #16
  tmpccer = TIMx->CCER;
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
 80054d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80054d4:	f042 0210 	orr.w	r2, r2, #16	; 0x10
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 80054d8:	ea43 330c 	orr.w	r3, r3, ip, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80054dc:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  tmp = (u16)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (u16)(TIM_ICFilter << 12);
  tmpccmr1 |= (u16)(TIM_ICSelection << 8);
 80054e0:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  tmp | CCER_CC2E_Set;
 80054e2:	b292      	uxth	r2, r2
 80054e4:	e017      	b.n	8005516 <TIM_TIxExternalClockConfig+0x72>
                       u16 TIM_ICFilter)
{
  u16 tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
 80054e6:	8c03      	ldrh	r3, [r0, #32]
 80054e8:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 80054ec:	041b      	lsls	r3, r3, #16
 80054ee:	0c1b      	lsrs	r3, r3, #16
 80054f0:	8403      	strh	r3, [r0, #32]

  tmpccmr1 = TIMx->CCMR1;
 80054f2:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
 80054f4:	8c02      	ldrh	r2, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 80054f6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80054fa:	041b      	lsls	r3, r3, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 80054fc:	f022 0203 	bic.w	r2, r2, #3	; 0x3
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005500:	0c1b      	lsrs	r3, r3, #16

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8005502:	0412      	lsls	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005504:	f043 0301 	orr.w	r3, r3, #1	; 0x1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8005508:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 800550a:	ea43 130c 	orr.w	r3, r3, ip, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 800550e:	f042 0201 	orr.w	r2, r2, #1	; 0x1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
 8005512:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
 8005514:	430a      	orrs	r2, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005516:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005518:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800551a:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 800551c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005520:	041b      	lsls	r3, r3, #16
 8005522:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8005524:	ea44 0303 	orr.w	r3, r4, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005528:	8103      	strh	r3, [r0, #8]

  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800552a:	8903      	ldrh	r3, [r0, #8]
 800552c:	b29b      	uxth	r3, r3
 800552e:	f043 0307 	orr.w	r3, r3, #7	; 0x7
 8005532:	8103      	strh	r3, [r0, #8]
}
 8005534:	bd10      	pop	{r4, pc}
 8005536:	46c0      	nop			(mov r8, r8)

08005538 <TIM_ETRClockMode1Config>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8005538:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= TIM_ExtTRGPrescaler | TIM_ExtTRGPolarity | (u16)(ExtTRGFilter << 8);
 800553c:	fa5f fc8c 	uxtb.w	ip, ip
 8005540:	ea41 010c 	orr.w	r1, r1, ip
 8005544:	430a      	orrs	r2, r1
 8005546:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800554a:	b292      	uxth	r2, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800554c:	8102      	strh	r2, [r0, #8]

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800554e:	8903      	ldrh	r3, [r0, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= SMCR_SMS_Mask;
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8005550:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005554:	041b      	lsls	r3, r3, #16
 8005556:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= SMCR_TS_Mask;
  tmpsmcr |= TIM_TS_ETRF;
 8005558:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800555c:	8103      	strh	r3, [r0, #8]
}
 800555e:	4770      	bx	lr

08005560 <TIM_ETRClockMode2Config>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8005560:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= TIM_ExtTRGPrescaler | TIM_ExtTRGPolarity | (u16)(ExtTRGFilter << 8);
 8005564:	fa5f fc8c 	uxtb.w	ip, ip
 8005568:	ea41 010c 	orr.w	r1, r1, ip
 800556c:	430a      	orrs	r2, r1
 800556e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005572:	b292      	uxth	r2, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005574:	8102      	strh	r2, [r0, #8]

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);

  /* Enable the External clock mode2 */
  TIMx->SMCR |= SMCR_ECE_Set;
 8005576:	8903      	ldrh	r3, [r0, #8]
 8005578:	b29b      	uxth	r3, r3
 800557a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800557e:	8103      	strh	r3, [r0, #8]
}
 8005580:	4770      	bx	lr
 8005582:	46c0      	nop			(mov r8, r8)

08005584 <TIM_ETRConfig>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8005584:	f8b0 c008 	ldrh.w	ip, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= TIM_ExtTRGPrescaler | TIM_ExtTRGPolarity | (u16)(ExtTRGFilter << 8);
 8005588:	fa5f fc8c 	uxtb.w	ip, ip
 800558c:	ea41 010c 	orr.w	r1, r1, ip
 8005590:	430a      	orrs	r2, r1
 8005592:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005596:	b292      	uxth	r2, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005598:	8102      	strh	r2, [r0, #8]
}
 800559a:	4770      	bx	lr

0800559c <TIM_PrescalerConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));

  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800559c:	8501      	strh	r1, [r0, #40]

  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800559e:	8282      	strh	r2, [r0, #20]
}
 80055a0:	4770      	bx	lr
 80055a2:	46c0      	nop			(mov r8, r8)

080055a4 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 80055a4:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= CR1_CounterMode_Mask;
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	059b      	lsls	r3, r3, #22
 80055ac:	0d9b      	lsrs	r3, r3, #22

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80055ae:	4319      	orrs	r1, r3

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80055b0:	8001      	strh	r1, [r0, #0]
}
 80055b2:	4770      	bx	lr

080055b4 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b4:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
 80055b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ba:	041b      	lsls	r3, r3, #16
 80055bc:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80055be:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055c0:	8101      	strh	r1, [r0, #8]
}
 80055c2:	4770      	bx	lr

080055c4 <TIM_EncoderInterfaceConfig>:
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055c4:	f8b0 c008 	ldrh.w	ip, [r0, #8]
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, u16 TIM_EncoderMode,
                                u16 TIM_IC1Polarity, u16 TIM_IC2Polarity)
{
 80055c8:	b530      	push	{r4, r5, lr}

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80055ca:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055cc:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 80055ce:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 80055d2:	f025 0522 	bic.w	r5, r5, #34	; 0x22
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 80055d6:	f024 0403 	bic.w	r4, r4, #3	; 0x3
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 80055da:	042d      	lsls	r5, r5, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 80055dc:	f02c 0c07 	bic.w	ip, ip, #7	; 0x7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 80055e0:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 80055e2:	0c2d      	lsrs	r5, r5, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 80055e4:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
 80055e8:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 80055ea:	432a      	orrs	r2, r5

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
 80055ec:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
 80055f0:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 80055f4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;
 80055f8:	ea41 010c 	orr.w	r1, r1, ip

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
 80055fc:	f044 0401 	orr.w	r4, r4, #1	; 0x1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
 8005600:	b292      	uxth	r2, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005602:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8005604:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005606:	8402      	strh	r2, [r0, #32]
}
 8005608:	bd30      	pop	{r4, r5, pc}
 800560a:	46c0      	nop			(mov r8, r8)

0800560c <TIM_ForcedOC1Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr1 = TIMx->CCMR1;
 800560c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= CCMR_OC13M_Mask;
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	041b      	lsls	r3, r3, #16
 8005614:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8005616:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005618:	8301      	strh	r1, [r0, #24]
}
 800561a:	4770      	bx	lr

0800561c <TIM_ForcedOC2Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr1 = TIMx->CCMR1;
 800561c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= CCMR_OC24M_Mask;
 800561e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005622:	041b      	lsls	r3, r3, #16
 8005624:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (u16)(TIM_ForcedAction << 8);
 8005626:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800562a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800562c:	8303      	strh	r3, [r0, #24]
}
 800562e:	4770      	bx	lr

08005630 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8005630:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= CCMR_OC13M_Mask;
 8005632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005636:	041b      	lsls	r3, r3, #16
 8005638:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800563a:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800563c:	8381      	strh	r1, [r0, #28]
}
 800563e:	4770      	bx	lr

08005640 <TIM_ForcedOC4Config>:
  u16 tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8005640:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= CCMR_OC24M_Mask;
 8005642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005646:	041b      	lsls	r3, r3, #16
 8005648:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (u16)(TIM_ForcedAction << 8);
 800564a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800564e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005650:	8383      	strh	r3, [r0, #28]
}
 8005652:	4770      	bx	lr

08005654 <TIM_ARRPreloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005654:	b121      	cbz	r1, 8005660 <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
 8005656:	8803      	ldrh	r3, [r0, #0]
 8005658:	b29b      	uxth	r3, r3
 800565a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800565e:	e004      	b.n	800566a <TIM_ARRPreloadConfig+0x16>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= CR1_ARPE_Reset;
 8005660:	8803      	ldrh	r3, [r0, #0]
 8005662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005666:	059b      	lsls	r3, r3, #22
 8005668:	0d9b      	lsrs	r3, r3, #22
 800566a:	8003      	strh	r3, [r0, #0]
  }
}
 800566c:	4770      	bx	lr
 800566e:	46c0      	nop			(mov r8, r8)

08005670 <TIM_SelectCOM>:
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005670:	b121      	cbz	r1, 800567c <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
 8005672:	8883      	ldrh	r3, [r0, #4]
 8005674:	b29b      	uxth	r3, r3
 8005676:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 800567a:	e004      	b.n	8005686 <TIM_SelectCOM+0x16>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= CR2_CCUS_Reset;
 800567c:	8883      	ldrh	r3, [r0, #4]
 800567e:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 8005682:	041b      	lsls	r3, r3, #16
 8005684:	0c1b      	lsrs	r3, r3, #16
 8005686:	8083      	strh	r3, [r0, #4]
  }
}
 8005688:	4770      	bx	lr
 800568a:	46c0      	nop			(mov r8, r8)

0800568c <TIM_SelectCCDMA>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800568c:	b121      	cbz	r1, 8005698 <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
 800568e:	8883      	ldrh	r3, [r0, #4]
 8005690:	b29b      	uxth	r3, r3
 8005692:	f043 0308 	orr.w	r3, r3, #8	; 0x8
 8005696:	e004      	b.n	80056a2 <TIM_SelectCCDMA+0x16>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= CR2_CCDS_Reset;
 8005698:	8883      	ldrh	r3, [r0, #4]
 800569a:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 800569e:	041b      	lsls	r3, r3, #16
 80056a0:	0c1b      	lsrs	r3, r3, #16
 80056a2:	8083      	strh	r3, [r0, #4]
  }
}
 80056a4:	4770      	bx	lr
 80056a6:	46c0      	nop			(mov r8, r8)

080056a8 <TIM_CCPreloadControl>:
{ 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80056a8:	b121      	cbz	r1, 80056b4 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
 80056aa:	8883      	ldrh	r3, [r0, #4]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 80056b2:	e004      	b.n	80056be <TIM_CCPreloadControl+0x16>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= CR2_CCPC_Reset;
 80056b4:	8883      	ldrh	r3, [r0, #4]
 80056b6:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 80056ba:	041b      	lsls	r3, r3, #16
 80056bc:	0c1b      	lsrs	r3, r3, #16
 80056be:	8083      	strh	r3, [r0, #4]
  }
}
 80056c0:	4770      	bx	lr
 80056c2:	46c0      	nop			(mov r8, r8)

080056c4 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80056c4:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= CCMR_OC13PE_Reset;
 80056c6:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 80056ca:	041b      	lsls	r3, r3, #16
 80056cc:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80056ce:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80056d0:	8301      	strh	r1, [r0, #24]
}
 80056d2:	4770      	bx	lr

080056d4 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80056d4:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= CCMR_OC24PE_Reset;
 80056d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056da:	041b      	lsls	r3, r3, #16
 80056dc:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (u16)(TIM_OCPreload << 8);
 80056de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80056e2:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80056e4:	8303      	strh	r3, [r0, #24]
}
 80056e6:	4770      	bx	lr

080056e8 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80056e8:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= CCMR_OC13PE_Reset;
 80056ea:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 80056ee:	041b      	lsls	r3, r3, #16
 80056f0:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80056f2:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80056f4:	8381      	strh	r1, [r0, #28]
}
 80056f6:	4770      	bx	lr

080056f8 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80056f8:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= CCMR_OC24PE_Reset;
 80056fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056fe:	041b      	lsls	r3, r3, #16
 8005700:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (u16)(TIM_OCPreload << 8);
 8005702:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005706:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005708:	8383      	strh	r3, [r0, #28]
}
 800570a:	4770      	bx	lr

0800570c <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800570c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= CCMR_OC13FE_Reset;
 800570e:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 8005712:	041b      	lsls	r3, r3, #16
 8005714:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8005716:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8005718:	8301      	strh	r1, [r0, #24]
}
 800571a:	4770      	bx	lr

0800571c <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800571c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= CCMR_OC24FE_Reset;
 800571e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005722:	041b      	lsls	r3, r3, #16
 8005724:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (u16)(TIM_OCFast << 8);
 8005726:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800572a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800572c:	8303      	strh	r3, [r0, #24]
}
 800572e:	4770      	bx	lr

08005730 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8005730:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= CCMR_OC13FE_Reset;
 8005732:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 8005736:	041b      	lsls	r3, r3, #16
 8005738:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 800573a:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800573c:	8381      	strh	r1, [r0, #28]
}
 800573e:	4770      	bx	lr

08005740 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8005740:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= CCMR_OC24FE_Reset;
 8005742:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005746:	041b      	lsls	r3, r3, #16
 8005748:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (u16)(TIM_OCFast << 8);
 800574a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800574e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8005750:	8383      	strh	r3, [r0, #28]
}
 8005752:	4770      	bx	lr

08005754 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8005754:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= CCMR_OC13CE_Reset;
 8005756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800575a:	041b      	lsls	r3, r3, #16
 800575c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800575e:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005760:	8301      	strh	r1, [r0, #24]
}
 8005762:	4770      	bx	lr

08005764 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8005764:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= CCMR_OC24CE_Reset;
 8005766:	045b      	lsls	r3, r3, #17
 8005768:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (u16)(TIM_OCClear << 8);
 800576a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800576e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005770:	8303      	strh	r3, [r0, #24]
}
 8005772:	4770      	bx	lr

08005774 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8005774:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= CCMR_OC13CE_Reset;
 8005776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800577a:	041b      	lsls	r3, r3, #16
 800577c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800577e:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005780:	8381      	strh	r1, [r0, #28]
}
 8005782:	4770      	bx	lr

08005784 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8005784:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= CCMR_OC24CE_Reset;
 8005786:	045b      	lsls	r3, r3, #17
 8005788:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (u16)(TIM_OCClear << 8);
 800578a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800578e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005790:	8383      	strh	r3, [r0, #28]
}
 8005792:	4770      	bx	lr

08005794 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8005794:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= CCER_CC1P_Reset;
 8005796:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 800579a:	041b      	lsls	r3, r3, #16
 800579c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 800579e:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80057a0:	8401      	strh	r1, [r0, #32]
}
 80057a2:	4770      	bx	lr

080057a4 <TIM_OC1NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 80057a4:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= CCER_CC1NP_Reset;
 80057a6:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 80057aa:	041b      	lsls	r3, r3, #16
 80057ac:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 80057ae:	4319      	orrs	r1, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80057b0:	8401      	strh	r1, [r0, #32]
}
 80057b2:	4770      	bx	lr

080057b4 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80057b4:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= CCER_CC2P_Reset;
 80057b6:	f023 0320 	bic.w	r3, r3, #32	; 0x20
 80057ba:	041b      	lsls	r3, r3, #16
 80057bc:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 4);
 80057be:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80057c2:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80057c4:	8403      	strh	r3, [r0, #32]
}
 80057c6:	4770      	bx	lr

080057c8 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 80057c8:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= CCER_CC2NP_Reset;
 80057ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ce:	041b      	lsls	r3, r3, #16
 80057d0:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCNPolarity << 4);
 80057d2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80057d6:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80057d8:	8403      	strh	r3, [r0, #32]
}
 80057da:	4770      	bx	lr

080057dc <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80057dc:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= CCER_CC3P_Reset;
 80057de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 8);
 80057e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80057ea:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80057ec:	8403      	strh	r3, [r0, #32]
}
 80057ee:	4770      	bx	lr

080057f0 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80057f0:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= CCER_CC3NP_Reset;
 80057f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057f6:	041b      	lsls	r3, r3, #16
 80057f8:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCNPolarity << 8);
 80057fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80057fe:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005800:	8403      	strh	r3, [r0, #32]
}
 8005802:	4770      	bx	lr

08005804 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8005804:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= CCER_CC4P_Reset;
 8005806:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800580a:	041b      	lsls	r3, r3, #16
 800580c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (u16)(TIM_OCPolarity << 12);
 800580e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8005812:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005814:	8403      	strh	r3, [r0, #32]
}
 8005816:	4770      	bx	lr

08005818 <TIM_CCxCmd>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  /* Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 8005818:	2301      	movs	r3, #1
 800581a:	408b      	lsls	r3, r1

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCx << TIM_Channel);
 800581c:	408a      	lsls	r2, r1
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  /* Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 800581e:	f8b0 c020 	ldrh.w	ip, [r0, #32]
 8005822:	fa1f fc8c 	uxth.w	ip, ip
 8005826:	ea2c 0c03 	bic.w	ip, ip, r3
 800582a:	f8a0 c020 	strh.w	ip, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCx << TIM_Channel);
 800582e:	8c03      	ldrh	r3, [r0, #32]
 8005830:	431a      	orrs	r2, r3
 8005832:	b292      	uxth	r2, r2
 8005834:	8402      	strh	r2, [r0, #32]
}
 8005836:	4770      	bx	lr

08005838 <TIM_CCxNCmd>:
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCNE_Set << TIM_Channel)));
 8005838:	2304      	movs	r3, #4
 800583a:	408b      	lsls	r3, r1

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCxN << TIM_Channel);
 800583c:	408a      	lsls	r2, r1
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCNE_Set << TIM_Channel)));
 800583e:	f8b0 c020 	ldrh.w	ip, [r0, #32]
 8005842:	fa1f fc8c 	uxth.w	ip, ip
 8005846:	ea2c 0c03 	bic.w	ip, ip, r3
 800584a:	f8a0 c020 	strh.w	ip, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (u16)(TIM_CCxN << TIM_Channel);
 800584e:	8c03      	ldrh	r3, [r0, #32]
 8005850:	431a      	orrs	r2, r3
 8005852:	b292      	uxth	r2, r2
 8005854:	8402      	strh	r2, [r0, #32]
}
 8005856:	4770      	bx	lr

08005858 <TIM_SelectOCxM>:
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 8005858:	2301      	movs	r3, #1
 800585a:	408b      	lsls	r3, r1
*                       - TIM_ForcedAction_InActive
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_SelectOCxM(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_OCMode)
{
 800585c:	4694      	mov	ip, r2
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 800585e:	8c02      	ldrh	r2, [r0, #32]
*                       - TIM_ForcedAction_InActive
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_SelectOCxM(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_OCMode)
{
 8005860:	b082      	sub	sp, #8
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 8005862:	b292      	uxth	r2, r2
 8005864:	ea22 0203 	bic.w	r2, r2, r3

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8005868:	2908      	cmp	r1, #8
 800586a:	bf14      	ite	ne
 800586c:	2300      	movne	r3, #0
 800586e:	2301      	moveq	r3, #1
 8005870:	2900      	cmp	r1, #0
 8005872:	bf08      	it	eq
 8005874:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
*                       - TIM_ForcedAction_InActive
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_SelectOCxM(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_OCMode)
{
 8005878:	9001      	str	r0, [sp, #4]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
 800587a:	8402      	strh	r2, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800587c:	b16b      	cbz	r3, 800589a <TIM_SelectOCxM+0x42>
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) &= CCMR_OC13M_Mask;
 800587e:	f110 0218 	adds.w	r2, r0, #24	; 0x18
 8005882:	0849      	lsrs	r1, r1, #1
 8005884:	5850      	ldr	r0, [r2, r1]
 8005886:	f64f 738f 	movw	r3, #65423	; 0xff8f
 800588a:	ea00 0303 	and.w	r3, r0, r3
 800588e:	5053      	str	r3, [r2, r1]
   
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) |= TIM_OCMode;
 8005890:	5853      	ldr	r3, [r2, r1]
 8005892:	ea43 030c 	orr.w	r3, r3, ip
 8005896:	5053      	str	r3, [r2, r1]
 8005898:	e010      	b.n	80058bc <TIM_SelectOCxM+0x64>

  }
  else
  {
    /* Reset the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) &= CCMR_OC24M_Mask;
 800589a:	9801      	ldr	r0, [sp, #4]
 800589c:	1f0a      	subs	r2, r1, #4
 800589e:	b292      	uxth	r2, r2
 80058a0:	3018      	adds	r0, #24
 80058a2:	0852      	lsrs	r2, r2, #1
 80058a4:	5881      	ldr	r1, [r0, r2]
 80058a6:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80058aa:	ea01 0303 	and.w	r3, r1, r3
 80058ae:	5083      	str	r3, [r0, r2]
    
    /* Configure the OCxM bits in the CCMRx register */
    *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) |= (u16)(TIM_OCMode << 8);
 80058b0:	5881      	ldr	r1, [r0, r2]
 80058b2:	ea4f 230c 	mov.w	r3, ip, lsl #8
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	4319      	orrs	r1, r3
 80058ba:	5081      	str	r1, [r0, r2]
  }
}
 80058bc:	b002      	add	sp, #8
 80058be:	4770      	bx	lr

080058c0 <TIM_UpdateDisableConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80058c0:	b121      	cbz	r1, 80058cc <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
 80058c2:	8803      	ldrh	r3, [r0, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 80058ca:	e004      	b.n	80058d6 <TIM_UpdateDisableConfig+0x16>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= CR1_UDIS_Reset;
 80058cc:	8803      	ldrh	r3, [r0, #0]
 80058ce:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 80058d2:	059b      	lsls	r3, r3, #22
 80058d4:	0d9b      	lsrs	r3, r3, #22
 80058d6:	8003      	strh	r3, [r0, #0]
  }
}
 80058d8:	4770      	bx	lr
 80058da:	46c0      	nop			(mov r8, r8)

080058dc <TIM_UpdateRequestConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 80058dc:	b121      	cbz	r1, 80058e8 <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
 80058de:	8803      	ldrh	r3, [r0, #0]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 80058e6:	e004      	b.n	80058f2 <TIM_UpdateRequestConfig+0x16>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= CR1_URS_Reset;
 80058e8:	8803      	ldrh	r3, [r0, #0]
 80058ea:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 80058ee:	059b      	lsls	r3, r3, #22
 80058f0:	0d9b      	lsrs	r3, r3, #22
 80058f2:	8003      	strh	r3, [r0, #0]
  }
}
 80058f4:	4770      	bx	lr
 80058f6:	46c0      	nop			(mov r8, r8)

080058f8 <TIM_SelectHallSensor>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80058f8:	b121      	cbz	r1, 8005904 <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
 80058fa:	8883      	ldrh	r3, [r0, #4]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005902:	e004      	b.n	800590e <TIM_SelectHallSensor+0x16>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= CR2_TI1S_Reset;
 8005904:	8883      	ldrh	r3, [r0, #4]
 8005906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800590a:	041b      	lsls	r3, r3, #16
 800590c:	0c1b      	lsrs	r3, r3, #16
 800590e:	8083      	strh	r3, [r0, #4]
  }
}
 8005910:	4770      	bx	lr
 8005912:	46c0      	nop			(mov r8, r8)

08005914 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= CR1_OPM_Reset;
 8005914:	8803      	ldrh	r3, [r0, #0]
 8005916:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 800591a:	059b      	lsls	r3, r3, #22
 800591c:	0d9b      	lsrs	r3, r3, #22
 800591e:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8005920:	8803      	ldrh	r3, [r0, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	4319      	orrs	r1, r3
 8005926:	8001      	strh	r1, [r0, #0]
}
 8005928:	4770      	bx	lr
 800592a:	46c0      	nop			(mov r8, r8)

0800592c <TIM_SelectOutputTrigger>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  assert_param(IS_TIM_PERIPH_TRGO(TIMx, TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= CR2_MMS_Mask;
 800592c:	8883      	ldrh	r3, [r0, #4]
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	041b      	lsls	r3, r3, #16
 8005934:	0c1b      	lsrs	r3, r3, #16
 8005936:	8083      	strh	r3, [r0, #4]

  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8005938:	8883      	ldrh	r3, [r0, #4]
 800593a:	b29b      	uxth	r3, r3
 800593c:	4319      	orrs	r1, r3
 800593e:	8081      	strh	r1, [r0, #4]
}
 8005940:	4770      	bx	lr
 8005942:	46c0      	nop			(mov r8, r8)

08005944 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= SMCR_SMS_Mask;
 8005944:	8903      	ldrh	r3, [r0, #8]
 8005946:	f023 0307 	bic.w	r3, r3, #7	; 0x7
 800594a:	041b      	lsls	r3, r3, #16
 800594c:	0c1b      	lsrs	r3, r3, #16
 800594e:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8005950:	8903      	ldrh	r3, [r0, #8]
 8005952:	b29b      	uxth	r3, r3
 8005954:	4319      	orrs	r1, r3
 8005956:	8101      	strh	r1, [r0, #8]
}
 8005958:	4770      	bx	lr
 800595a:	46c0      	nop			(mov r8, r8)

0800595c <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= SMCR_MSM_Reset;
 800595c:	8903      	ldrh	r3, [r0, #8]
 800595e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005962:	041b      	lsls	r3, r3, #16
 8005964:	0c1b      	lsrs	r3, r3, #16
 8005966:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8005968:	8903      	ldrh	r3, [r0, #8]
 800596a:	b29b      	uxth	r3, r3
 800596c:	4319      	orrs	r1, r3
 800596e:	8101      	strh	r1, [r0, #8]
}
 8005970:	4770      	bx	lr
 8005972:	46c0      	nop			(mov r8, r8)

08005974 <TIM_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8005974:	8481      	strh	r1, [r0, #36]
}
 8005976:	4770      	bx	lr

08005978 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8005978:	8581      	strh	r1, [r0, #44]
}
 800597a:	4770      	bx	lr

0800597c <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800597c:	8681      	strh	r1, [r0, #52]
}
 800597e:	4770      	bx	lr

08005980 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8005980:	8701      	strh	r1, [r0, #56]
}
 8005982:	4770      	bx	lr

08005984 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8005984:	8781      	strh	r1, [r0, #60]
}
 8005986:	4770      	bx	lr

08005988 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8005988:	f8a0 1040 	strh.w	r1, [r0, #64]
}
 800598c:	4770      	bx	lr
 800598e:	46c0      	nop			(mov r8, r8)

08005990 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
 8005990:	8b03      	ldrh	r3, [r0, #24]
 8005992:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 8005996:	041b      	lsls	r3, r3, #16
 8005998:	0c1b      	lsrs	r3, r3, #16
 800599a:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800599c:	8b03      	ldrh	r3, [r0, #24]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	4319      	orrs	r1, r3
 80059a2:	8301      	strh	r1, [r0, #24]
}
 80059a4:	4770      	bx	lr
 80059a6:	46c0      	nop			(mov r8, r8)

080059a8 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
 80059a8:	8b03      	ldrh	r3, [r0, #24]
 80059aa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	0c1b      	lsrs	r3, r3, #16
 80059b2:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
 80059b4:	8b03      	ldrh	r3, [r0, #24]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80059bc:	b29b      	uxth	r3, r3
 80059be:	8303      	strh	r3, [r0, #24]
}
 80059c0:	4770      	bx	lr
 80059c2:	46c0      	nop			(mov r8, r8)

080059c4 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
 80059c4:	8b83      	ldrh	r3, [r0, #28]
 80059c6:	f023 030c 	bic.w	r3, r3, #12	; 0xc
 80059ca:	041b      	lsls	r3, r3, #16
 80059cc:	0c1b      	lsrs	r3, r3, #16
 80059ce:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80059d0:	8b83      	ldrh	r3, [r0, #28]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	4319      	orrs	r1, r3
 80059d6:	8381      	strh	r1, [r0, #28]
}
 80059d8:	4770      	bx	lr
 80059da:	46c0      	nop			(mov r8, r8)

080059dc <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
 80059dc:	8b83      	ldrh	r3, [r0, #28]
 80059de:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80059e2:	041b      	lsls	r3, r3, #16
 80059e4:	0c1b      	lsrs	r3, r3, #16
 80059e6:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (u16)(TIM_ICPSC << 8);
 80059e8:	8b83      	ldrh	r3, [r0, #28]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	8383      	strh	r3, [r0, #28]
}
 80059f4:	4770      	bx	lr
 80059f6:	46c0      	nop			(mov r8, r8)

080059f8 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= CR1_CKD_Mask;
 80059f8:	8803      	ldrh	r3, [r0, #0]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 80059fe:	8803      	ldrh	r3, [r0, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	4319      	orrs	r1, r3
 8005a04:	8001      	strh	r1, [r0, #0]
}
 8005a06:	4770      	bx	lr

08005a08 <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8005a08:	8e80      	ldrh	r0, [r0, #52]
 8005a0a:	b280      	uxth	r0, r0
}
 8005a0c:	4770      	bx	lr
 8005a0e:	46c0      	nop			(mov r8, r8)

08005a10 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8005a10:	8f00      	ldrh	r0, [r0, #56]
 8005a12:	b280      	uxth	r0, r0
}
 8005a14:	4770      	bx	lr
 8005a16:	46c0      	nop			(mov r8, r8)

08005a18 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8005a18:	8f80      	ldrh	r0, [r0, #60]
 8005a1a:	b280      	uxth	r0, r0
}
 8005a1c:	4770      	bx	lr
 8005a1e:	46c0      	nop			(mov r8, r8)

08005a20 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8005a20:	f8b0 0040 	ldrh.w	r0, [r0, #64]
 8005a24:	b280      	uxth	r0, r0
}
 8005a26:	4770      	bx	lr

08005a28 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8005a28:	8c80      	ldrh	r0, [r0, #36]
 8005a2a:	b280      	uxth	r0, r0
}
 8005a2c:	4770      	bx	lr
 8005a2e:	46c0      	nop			(mov r8, r8)

08005a30 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8005a30:	8d00      	ldrh	r0, [r0, #40]
 8005a32:	b280      	uxth	r0, r0
}
 8005a34:	4770      	bx	lr
 8005a36:	46c0      	nop			(mov r8, r8)

08005a38 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  assert_param(IS_TIM_PERIPH_FLAG(TIMx, TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (u16)RESET)
 8005a38:	8a03      	ldrh	r3, [r0, #16]
 8005a3a:	4219      	tst	r1, r3
 8005a3c:	bf0c      	ite	eq
 8005a3e:	2000      	moveq	r0, #0
 8005a40:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005a42:	4770      	bx	lr

08005a44 <TIM_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIMx, TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (u16)~TIM_FLAG;
 8005a44:	ea6f 0101 	mvn.w	r1, r1
 8005a48:	b289      	uxth	r1, r1
 8005a4a:	8201      	strh	r1, [r0, #16]
}
 8005a4c:	4770      	bx	lr
 8005a4e:	46c0      	nop			(mov r8, r8)

08005a50 <TIM_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8005a50:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8005a52:	8982      	ldrh	r2, [r0, #12]

  if ((itstatus != (u16)RESET) && (itenable != (u16)RESET))
 8005a54:	4219      	tst	r1, r3
 8005a56:	bf0c      	ite	eq
 8005a58:	2000      	moveq	r0, #0
 8005a5a:	2001      	movne	r0, #1
 8005a5c:	4211      	tst	r1, r2
 8005a5e:	bf0c      	ite	eq
 8005a60:	2000      	moveq	r0, #0
 8005a62:	f000 0001 	andne.w	r0, r0, #1	; 0x1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005a66:	4770      	bx	lr

08005a68 <TIM_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));

  /* Clear the IT pending Bit */
  TIMx->SR = (u16)~TIM_IT;
 8005a68:	ea6f 0101 	mvn.w	r1, r1
 8005a6c:	b289      	uxth	r1, r1
 8005a6e:	8201      	strh	r1, [r0, #16]
}
 8005a70:	4770      	bx	lr
 8005a72:	46c0      	nop			(mov r8, r8)

08005a74 <TIM_DeInit>:
* Input          : - TIMx: where x can be 1 to 8 to select the TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8005a74:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
 8005a76:	4b2f      	ldr	r3, [pc, #188]	(8005b34 <TIM_DeInit+0xc0>)
* Input          : - TIMx: where x can be 1 to 8 to select the TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8005a78:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
 8005a7a:	4298      	cmp	r0, r3
* Input          : - TIMx: where x can be 1 to 8 to select the TIM peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8005a7c:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  switch (*(u32*)&TIMx)
 8005a7e:	d037      	beq.n	8005af0 <TIM_DeInit+0x7c>
 8005a80:	d80b      	bhi.n	8005a9a <TIM_DeInit+0x26>
 8005a82:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005a86:	4298      	cmp	r0, r3
 8005a88:	d026      	beq.n	8005ad8 <TIM_DeInit+0x64>
 8005a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a8e:	4298      	cmp	r0, r3
 8005a90:	d028      	beq.n	8005ae4 <TIM_DeInit+0x70>
 8005a92:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005a96:	d14a      	bne.n	8005b2e <TIM_DeInit+0xba>
 8005a98:	e018      	b.n	8005acc <TIM_DeInit+0x58>
 8005a9a:	4b27      	ldr	r3, [pc, #156]	(8005b38 <TIM_DeInit+0xc4>)
 8005a9c:	4298      	cmp	r0, r3
 8005a9e:	d033      	beq.n	8005b08 <TIM_DeInit+0x94>
 8005aa0:	d804      	bhi.n	8005aac <TIM_DeInit+0x38>
 8005aa2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005aa6:	4298      	cmp	r0, r3
 8005aa8:	d141      	bne.n	8005b2e <TIM_DeInit+0xba>
 8005aaa:	e027      	b.n	8005afc <TIM_DeInit+0x88>
 8005aac:	4b23      	ldr	r3, [pc, #140]	(8005b3c <TIM_DeInit+0xc8>)
 8005aae:	4298      	cmp	r0, r3
 8005ab0:	d004      	beq.n	8005abc <TIM_DeInit+0x48>
 8005ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab6:	4298      	cmp	r0, r3
 8005ab8:	d139      	bne.n	8005b2e <TIM_DeInit+0xba>
 8005aba:	e02e      	b.n	8005b1a <TIM_DeInit+0xa6>
  {
    case TIM1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8005abc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	f7ff f8bf 	bl	8004c44 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8005ac6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005aca:	e02d      	b.n	8005b28 <TIM_DeInit+0xb4>
      break; 
      
    case TIM2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8005acc:	2001      	movs	r0, #1
 8005ace:	2101      	movs	r1, #1
 8005ad0:	f7ff f8c6 	bl	8004c60 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8005ad4:	2001      	movs	r0, #1
 8005ad6:	e01c      	b.n	8005b12 <TIM_DeInit+0x9e>
      break;
 
    case TIM3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8005ad8:	2002      	movs	r0, #2
 8005ada:	2101      	movs	r1, #1
 8005adc:	f7ff f8c0 	bl	8004c60 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8005ae0:	2002      	movs	r0, #2
 8005ae2:	e016      	b.n	8005b12 <TIM_DeInit+0x9e>
      break;
 
    case TIM4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8005ae4:	2004      	movs	r0, #4
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	f7ff f8ba 	bl	8004c60 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8005aec:	2004      	movs	r0, #4
 8005aee:	e010      	b.n	8005b12 <TIM_DeInit+0x9e>
      break;
      
    case TIM5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8005af0:	2008      	movs	r0, #8
 8005af2:	2101      	movs	r1, #1
 8005af4:	f7ff f8b4 	bl	8004c60 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8005af8:	2008      	movs	r0, #8
 8005afa:	e00a      	b.n	8005b12 <TIM_DeInit+0x9e>
      break;
      
    case TIM6_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8005afc:	2010      	movs	r0, #16
 8005afe:	2101      	movs	r1, #1
 8005b00:	f7ff f8ae 	bl	8004c60 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8005b04:	2010      	movs	r0, #16
 8005b06:	e004      	b.n	8005b12 <TIM_DeInit+0x9e>
      break;
      
    case TIM7_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8005b08:	2020      	movs	r0, #32
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	f7ff f8a8 	bl	8004c60 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8005b10:	2020      	movs	r0, #32
 8005b12:	2100      	movs	r1, #0
 8005b14:	f7ff f8a4 	bl	8004c60 <RCC_APB1PeriphResetCmd>
 8005b18:	e009      	b.n	8005b2e <TIM_DeInit+0xba>
      break;
      
    case TIM8_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8005b1a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005b1e:	2101      	movs	r1, #1
 8005b20:	f7ff f890 	bl	8004c44 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8005b24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005b28:	2100      	movs	r1, #0
 8005b2a:	f7ff f88b 	bl	8004c44 <RCC_APB2PeriphResetCmd>
      break; 
      
    default:
      break;
  }
}
 8005b2e:	b003      	add	sp, #12
 8005b30:	bd00      	pop	{pc}
 8005b32:	46c0      	nop			(mov r8, r8)
 8005b34:	40000c00 	.word	0x40000c00
 8005b38:	40001400 	.word	0x40001400
 8005b3c:	40012c00 	.word	0x40012c00

08005b40 <USART_StructInit>:
* Return         : None
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8005b40:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005b44:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8005b46:	f04f 0300 	mov.w	r3, #0	; 0x0
 8005b4a:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8005b4c:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8005b4e:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8005b50:	f04f 030c 	mov.w	r3, #12	; 0xc
 8005b54:	8143      	strh	r3, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8005b56:	f04f 0300 	mov.w	r3, #0	; 0x0
 8005b5a:	8183      	strh	r3, [r0, #12]
}
 8005b5c:	4770      	bx	lr
 8005b5e:	46c0      	nop			(mov r8, r8)

08005b60 <USART_ClockInit>:
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005b60:	f8b1 c000 	ldrh.w	ip, [r1]
 8005b64:	884b      	ldrh	r3, [r1, #2]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005b66:	8a02      	ldrh	r2, [r0, #16]
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005b68:	ea43 030c 	orr.w	r3, r3, ip
 8005b6c:	f8b1 c004 	ldrh.w	ip, [r1, #4]
 8005b70:	88c9      	ldrh	r1, [r1, #6]
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8005b72:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005b76:	ea43 030c 	orr.w	r3, r3, ip
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8005b7a:	0412      	lsls	r2, r2, #16
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005b7c:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8005b7e:	0c12      	lsrs	r2, r2, #16
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	4313      	orrs	r3, r2
 8005b84:	8203      	strh	r3, [r0, #16]
}
 8005b86:	4770      	bx	lr

08005b88 <USART_ClockStructInit>:
* Return         : None
*******************************************************************************/
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8005b88:	f04f 0300 	mov.w	r3, #0	; 0x0
 8005b8c:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8005b8e:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8005b90:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8005b92:	80c3      	strh	r3, [r0, #6]
}
 8005b94:	4770      	bx	lr
 8005b96:	46c0      	nop			(mov r8, r8)

08005b98 <USART_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005b98:	b121      	cbz	r1, 8005ba4 <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8005b9a:	8983      	ldrh	r3, [r0, #12]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ba2:	e004      	b.n	8005bae <USART_Cmd+0x16>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8005ba4:	8983      	ldrh	r3, [r0, #12]
 8005ba6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005baa:	041b      	lsls	r3, r3, #16
 8005bac:	0c1b      	lsrs	r3, r3, #16
 8005bae:	8183      	strh	r3, [r0, #12]
  }
}
 8005bb0:	4770      	bx	lr
 8005bb2:	46c0      	nop			(mov r8, r8)

08005bb4 <USART_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  usartxbase = (*(u32*)&(USARTx));

  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8005bb4:	b2cb      	uxtb	r3, r1
 8005bb6:	ea4f 1c53 	mov.w	ip, r3, lsr #5

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 8005bba:	f001 011f 	and.w	r1, r1, #31	; 0x1f
 8005bbe:	2301      	movs	r3, #1
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
 8005bc0:	b082      	sub	sp, #8
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 8005bc2:	fa13 f101 	lsls.w	r1, r3, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8005bc6:	f1bc 0f01 	cmp.w	ip, #1	; 0x1
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
 8005bca:	9001      	str	r0, [sp, #4]
  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8005bcc:	d101      	bne.n	8005bd2 <USART_ITConfig+0x1e>
  {
    usartxbase += 0x0C;
 8005bce:	300c      	adds	r0, #12
 8005bd0:	e005      	b.n	8005bde <USART_ITConfig+0x2a>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8005bd2:	f1bc 0f02 	cmp.w	ip, #2	; 0x2
 8005bd6:	d101      	bne.n	8005bdc <USART_ITConfig+0x28>
  {
    usartxbase += 0x10;
 8005bd8:	3010      	adds	r0, #16
 8005bda:	e000      	b.n	8005bde <USART_ITConfig+0x2a>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8005bdc:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 8005bde:	b112      	cbz	r2, 8005be6 <USART_ITConfig+0x32>
  {
    *(vu32*)usartxbase  |= itmask;
 8005be0:	6803      	ldr	r3, [r0, #0]
 8005be2:	430b      	orrs	r3, r1
 8005be4:	e002      	b.n	8005bec <USART_ITConfig+0x38>
  }
  else
  {
    *(vu32*)usartxbase &= ~itmask;
 8005be6:	6803      	ldr	r3, [r0, #0]
 8005be8:	ea23 0301 	bic.w	r3, r3, r1
 8005bec:	6003      	str	r3, [r0, #0]
  }
}
 8005bee:	b002      	add	sp, #8
 8005bf0:	4770      	bx	lr
 8005bf2:	46c0      	nop			(mov r8, r8)

08005bf4 <USART_DMACmd>:
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8005bf4:	b122      	cbz	r2, 8005c00 <USART_DMACmd+0xc>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8005bf6:	8a83      	ldrh	r3, [r0, #20]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	ea41 0303 	orr.w	r3, r1, r3
 8005bfe:	e003      	b.n	8005c08 <USART_DMACmd+0x14>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (u16)~USART_DMAReq;
 8005c00:	8a83      	ldrh	r3, [r0, #20]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	ea23 0301 	bic.w	r3, r3, r1
 8005c08:	8283      	strh	r3, [r0, #20]
  }
}
 8005c0a:	4770      	bx	lr

08005c0c <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 8005c0c:	8a03      	ldrh	r3, [r0, #16]
 8005c0e:	f023 030f 	bic.w	r3, r3, #15	; 0xf
 8005c12:	041b      	lsls	r3, r3, #16
 8005c14:	0c1b      	lsrs	r3, r3, #16
 8005c16:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8005c18:	8a03      	ldrh	r3, [r0, #16]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	8203      	strh	r3, [r0, #16]
}
 8005c20:	4770      	bx	lr
 8005c22:	46c0      	nop			(mov r8, r8)

08005c24 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 8005c24:	8983      	ldrh	r3, [r0, #12]
 8005c26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c2a:	041b      	lsls	r3, r3, #16
 8005c2c:	0c1b      	lsrs	r3, r3, #16
 8005c2e:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8005c30:	8983      	ldrh	r3, [r0, #12]
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	4319      	orrs	r1, r3
 8005c36:	8181      	strh	r1, [r0, #12]
}
 8005c38:	4770      	bx	lr
 8005c3a:	46c0      	nop			(mov r8, r8)

08005c3c <USART_ReceiverWakeUpCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8005c3c:	b121      	cbz	r1, 8005c48 <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8005c3e:	8983      	ldrh	r3, [r0, #12]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8005c46:	e004      	b.n	8005c52 <USART_ReceiverWakeUpCmd+0x16>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 8005c48:	8983      	ldrh	r3, [r0, #12]
 8005c4a:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 8005c4e:	041b      	lsls	r3, r3, #16
 8005c50:	0c1b      	lsrs	r3, r3, #16
 8005c52:	8183      	strh	r3, [r0, #12]
  }
}
 8005c54:	4770      	bx	lr
 8005c56:	46c0      	nop			(mov r8, r8)

08005c58 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 8005c58:	8a03      	ldrh	r3, [r0, #16]
 8005c5a:	f023 0320 	bic.w	r3, r3, #32	; 0x20
 8005c5e:	041b      	lsls	r3, r3, #16
 8005c60:	0c1b      	lsrs	r3, r3, #16
 8005c62:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8005c64:	8a03      	ldrh	r3, [r0, #16]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	4319      	orrs	r1, r3
 8005c6a:	8201      	strh	r1, [r0, #16]
}
 8005c6c:	4770      	bx	lr
 8005c6e:	46c0      	nop			(mov r8, r8)

08005c70 <USART_LINCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005c70:	b121      	cbz	r1, 8005c7c <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8005c72:	8a03      	ldrh	r3, [r0, #16]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c7a:	e004      	b.n	8005c86 <USART_LINCmd+0x16>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 8005c7c:	8a03      	ldrh	r3, [r0, #16]
 8005c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	0c1b      	lsrs	r3, r3, #16
 8005c86:	8203      	strh	r3, [r0, #16]
  }
}
 8005c88:	4770      	bx	lr
 8005c8a:	46c0      	nop			(mov r8, r8)

08005c8c <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (u16)0x01FF);
 8005c8c:	05c9      	lsls	r1, r1, #23
 8005c8e:	0dc9      	lsrs	r1, r1, #23
 8005c90:	8081      	strh	r1, [r0, #4]
}
 8005c92:	4770      	bx	lr

08005c94 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (u16)(USARTx->DR & (u16)0x01FF);
 8005c94:	8880      	ldrh	r0, [r0, #4]
 8005c96:	05c0      	lsls	r0, r0, #23
 8005c98:	0dc0      	lsrs	r0, r0, #23
}
 8005c9a:	4770      	bx	lr

08005c9c <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 8005c9c:	8983      	ldrh	r3, [r0, #12]
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8005ca4:	8183      	strh	r3, [r0, #12]
}
 8005ca6:	4770      	bx	lr

08005ca8 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 8005ca8:	8b03      	ldrh	r3, [r0, #24]
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (u16)((u16)USART_GuardTime << 0x08);
 8005cae:	8b03      	ldrh	r3, [r0, #24]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005cb6:	8303      	strh	r3, [r0, #24]
}
 8005cb8:	4770      	bx	lr
 8005cba:	46c0      	nop			(mov r8, r8)

08005cbc <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 8005cbc:	8b03      	ldrh	r3, [r0, #24]
 8005cbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005cc2:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8005cc4:	8b03      	ldrh	r3, [r0, #24]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	8303      	strh	r3, [r0, #24]
}
 8005ccc:	4770      	bx	lr
 8005cce:	46c0      	nop			(mov r8, r8)

08005cd0 <USART_SmartCardCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005cd0:	b121      	cbz	r1, 8005cdc <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 8005cd2:	8a83      	ldrh	r3, [r0, #20]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 8005cda:	e004      	b.n	8005ce6 <USART_SmartCardCmd+0x16>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 8005cdc:	8a83      	ldrh	r3, [r0, #20]
 8005cde:	f023 0320 	bic.w	r3, r3, #32	; 0x20
 8005ce2:	041b      	lsls	r3, r3, #16
 8005ce4:	0c1b      	lsrs	r3, r3, #16
 8005ce6:	8283      	strh	r3, [r0, #20]
  }
}
 8005ce8:	4770      	bx	lr
 8005cea:	46c0      	nop			(mov r8, r8)

08005cec <USART_SmartCardNACKCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005cec:	b121      	cbz	r1, 8005cf8 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8005cee:	8a83      	ldrh	r3, [r0, #20]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8005cf6:	e004      	b.n	8005d02 <USART_SmartCardNACKCmd+0x16>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 8005cf8:	8a83      	ldrh	r3, [r0, #20]
 8005cfa:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 8005cfe:	041b      	lsls	r3, r3, #16
 8005d00:	0c1b      	lsrs	r3, r3, #16
 8005d02:	8283      	strh	r3, [r0, #20]
  }
}
 8005d04:	4770      	bx	lr
 8005d06:	46c0      	nop			(mov r8, r8)

08005d08 <USART_HalfDuplexCmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005d08:	b121      	cbz	r1, 8005d14 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 8005d0a:	8a83      	ldrh	r3, [r0, #20]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f043 0308 	orr.w	r3, r3, #8	; 0x8
 8005d12:	e004      	b.n	8005d1e <USART_HalfDuplexCmd+0x16>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 8005d14:	8a83      	ldrh	r3, [r0, #20]
 8005d16:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 8005d1a:	041b      	lsls	r3, r3, #16
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	8283      	strh	r3, [r0, #20]
  }
}
 8005d20:	4770      	bx	lr
 8005d22:	46c0      	nop			(mov r8, r8)

08005d24 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 8005d24:	8a83      	ldrh	r3, [r0, #20]
 8005d26:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 8005d2a:	041b      	lsls	r3, r3, #16
 8005d2c:	0c1b      	lsrs	r3, r3, #16
 8005d2e:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8005d30:	8a83      	ldrh	r3, [r0, #20]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	4319      	orrs	r1, r3
 8005d36:	8281      	strh	r1, [r0, #20]
}
 8005d38:	4770      	bx	lr
 8005d3a:	46c0      	nop			(mov r8, r8)

08005d3c <USART_IrDACmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8005d3c:	b121      	cbz	r1, 8005d48 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8005d3e:	8a83      	ldrh	r3, [r0, #20]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8005d46:	e004      	b.n	8005d52 <USART_IrDACmd+0x16>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 8005d48:	8a83      	ldrh	r3, [r0, #20]
 8005d4a:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 8005d4e:	041b      	lsls	r3, r3, #16
 8005d50:	0c1b      	lsrs	r3, r3, #16
 8005d52:	8283      	strh	r3, [r0, #20]
  }
}
 8005d54:	4770      	bx	lr
 8005d56:	46c0      	nop			(mov r8, r8)

08005d58 <USART_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   

  if ((USARTx->SR & USART_FLAG) != (u16)RESET)
 8005d58:	8803      	ldrh	r3, [r0, #0]
 8005d5a:	4219      	tst	r1, r3
 8005d5c:	bf0c      	ite	eq
 8005d5e:	2000      	moveq	r0, #0
 8005d60:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005d62:	4770      	bx	lr

08005d64 <USART_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   
   
  USARTx->SR = (u16)~USART_FLAG;
 8005d64:	ea6f 0101 	mvn.w	r1, r1
 8005d68:	b289      	uxth	r1, r1
 8005d6a:	8001      	strh	r1, [r0, #0]
}
 8005d6c:	4770      	bx	lr
 8005d6e:	46c0      	nop			(mov r8, r8)

08005d70 <USART_GetITStatus>:
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */  
  
  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8005d70:	b2cb      	uxtb	r3, r1
 8005d72:	ea4f 1c53 	mov.w	ip, r3, lsr #5

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 8005d76:	f001 021f 	and.w	r2, r1, #31	; 0x1f
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	fa13 f202 	lsls.w	r2, r3, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8005d80:	f1bc 0f01 	cmp.w	ip, #1	; 0x1
  {
    itmask &= USARTx->CR1;
 8005d84:	bf08      	it	eq
 8005d86:	8983      	ldrheq	r3, [r0, #12]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8005d88:	d004      	beq.n	8005d94 <USART_GetITStatus+0x24>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8005d8a:	f1bc 0f02 	cmp.w	ip, #2	; 0x2
  {
    itmask &= USARTx->CR2;
 8005d8e:	bf0c      	ite	eq
 8005d90:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8005d92:	8a83      	ldrhne	r3, [r0, #20]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	ea02 0c03 	and.w	ip, r2, r3
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
 8005d9a:	0a0b      	lsrs	r3, r1, #8
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	409a      	lsls	r2, r3
  bitpos &= USARTx->SR;
 8005da0:	8803      	ldrh	r3, [r0, #0]
 8005da2:	b29b      	uxth	r3, r3

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
 8005da4:	421a      	tst	r2, r3
 8005da6:	bf0c      	ite	eq
 8005da8:	2000      	moveq	r0, #0
 8005daa:	2001      	movne	r0, #1
 8005dac:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
 8005db0:	bf0c      	ite	eq
 8005db2:	2000      	moveq	r0, #0
 8005db4:	f000 0001 	andne.w	r0, r0, #1	; 0x1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 8005db8:	4770      	bx	lr
 8005dba:	46c0      	nop			(mov r8, r8)

08005dbc <USART_ClearITPendingBit>:
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */
  
  bitpos = USART_IT >> 0x08;

  itmask = (u16)((u16)0x01 << bitpos);
  USARTx->SR = (u16)~itmask;
 8005dbc:	0a09      	lsrs	r1, r1, #8
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	408b      	lsls	r3, r1
 8005dc2:	ea6f 0303 	mvn.w	r3, r3
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	8003      	strh	r3, [r0, #0]
}
 8005dca:	4770      	bx	lr

08005dcc <USART_Init>:
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005dcc:	8a03      	ldrh	r3, [r0, #16]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005dce:	88ca      	ldrh	r2, [r1, #6]
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8005dd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005dd4:	041b      	lsls	r3, r3, #16
 8005dd6:	0c1b      	lsrs	r3, r3, #16
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8005ddc:	8982      	ldrh	r2, [r0, #12]
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005dde:	b570      	push	{r4, r5, r6, lr}
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 8005de0:	890b      	ldrh	r3, [r1, #8]
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005de2:	460e      	mov	r6, r1
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 8005de4:	8889      	ldrh	r1, [r1, #4]
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005de6:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 8005dea:	430b      	orrs	r3, r1
 8005dec:	8971      	ldrh	r1, [r6, #10]
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005dee:	f022 020c 	bic.w	r2, r2, #12	; 0xc
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 8005df2:	430b      	orrs	r3, r1
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005df4:	0412      	lsls	r2, r2, #16
 8005df6:	0c12      	lsrs	r2, r2, #16
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8005dfe:	8a83      	ldrh	r3, [r0, #20]
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 8005e00:	89b2      	ldrh	r2, [r6, #12]
  USARTx->CR1 = (u16)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8005e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e06:	041b      	lsls	r3, r3, #16
 8005e08:	0c1b      	lsrs	r3, r3, #16
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005e0a:	b088      	sub	sp, #32
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 8005e0c:	4313      	orrs	r3, r2
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005e0e:	4605      	mov	r5, r0
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 8005e10:	8283      	strh	r3, [r0, #20]
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005e12:	9001      	str	r0, [sp, #4]
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  /* The hardware flow control is available only for USART1, USART2 and USART3 */          
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);
 8005e14:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8005e16:	a803      	add	r0, sp, #12
 8005e18:	f7fe fe8e 	bl	8004b38 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8005e1c:	4b10      	ldr	r3, [pc, #64]	(8005e60 <USART_Init+0x94>)
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
  tmpreg = (integerdivider / 0x64) << 0x04;
 8005e1e:	4811      	ldr	r0, [pc, #68]	(8005e64 <USART_Init+0x98>)
  USARTx->CR3 = (u16)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
 8005e20:	429d      	cmp	r5, r3
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8005e22:	bf0c      	ite	eq
 8005e24:	9b06      	ldreq	r3, [sp, #24]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8005e26:	9b05      	ldrne	r3, [sp, #20]
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
 8005e28:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005e2c:	6833      	ldr	r3, [r6, #0]
 8005e2e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	fbb1 f1f3 	udiv	r1, r1, r3
  tmpreg = (integerdivider / 0x64) << 0x04;
 8005e38:	fba1 2300 	umull	r2, r3, r1, r0

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
 8005e3c:	2264      	movs	r2, #100
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
  tmpreg = (integerdivider / 0x64) << 0x04;
 8005e3e:	ea4f 1c53 	mov.w	ip, r3, lsr #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
 8005e42:	fb0c 1212 	mls	r2, ip, r2, r1
 8005e46:	0112      	lsls	r2, r2, #4
 8005e48:	3232      	adds	r2, #50
 8005e4a:	fba2 2300 	umull	r2, r3, r2, r0
 8005e4e:	095b      	lsrs	r3, r3, #5
 8005e50:	f003 030f 	and.w	r3, r3, #15	; 0xf

  /* Write to USART BRR */
  USARTx->BRR = (u16)tmpreg;
 8005e54:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	812b      	strh	r3, [r5, #8]
}
 8005e5c:	b008      	add	sp, #32
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
 8005e60:	40013800 	.word	0x40013800
 8005e64:	51eb851f 	.word	0x51eb851f

08005e68 <USART_DeInit>:
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8005e68:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 8005e6a:	4b22      	ldr	r3, [pc, #136]	(8005ef4 <USART_DeInit+0x8c>)
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8005e6c:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 8005e6e:	4298      	cmp	r0, r3
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 8005e70:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 8005e72:	d02b      	beq.n	8005ecc <USART_DeInit+0x64>
 8005e74:	d808      	bhi.n	8005e88 <USART_DeInit+0x20>
 8005e76:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005e7a:	4298      	cmp	r0, r3
 8005e7c:	d016      	beq.n	8005eac <USART_DeInit+0x44>
 8005e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e82:	4298      	cmp	r0, r3
 8005e84:	d134      	bne.n	8005ef0 <USART_DeInit+0x88>
 8005e86:	e019      	b.n	8005ebc <USART_DeInit+0x54>
 8005e88:	4b1b      	ldr	r3, [pc, #108]	(8005ef8 <USART_DeInit+0x90>)
 8005e8a:	4298      	cmp	r0, r3
 8005e8c:	d026      	beq.n	8005edc <USART_DeInit+0x74>
 8005e8e:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8005e92:	4298      	cmp	r0, r3
 8005e94:	d12c      	bne.n	8005ef0 <USART_DeInit+0x88>
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8005e96:	2101      	movs	r1, #1
 8005e98:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005e9c:	f7fe fed2 	bl	8004c44 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8005ea0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	f7fe fecd 	bl	8004c44 <RCC_APB2PeriphResetCmd>
 8005eaa:	e021      	b.n	8005ef0 <USART_DeInit+0x88>
      break;

    case USART2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8005eac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	f7fe fed5 	bl	8004c60 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8005eb6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005eba:	e016      	b.n	8005eea <USART_DeInit+0x82>
      break;

    case USART3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8005ebc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	f7fe fecd 	bl	8004c60 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8005ec6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005eca:	e00e      	b.n	8005eea <USART_DeInit+0x82>
      break;
    
    case UART4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8005ecc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	f7fe fec5 	bl	8004c60 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8005ed6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005eda:	e006      	b.n	8005eea <USART_DeInit+0x82>
      break;
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8005edc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	f7fe febd 	bl	8004c60 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8005ee6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005eea:	2100      	movs	r1, #0
 8005eec:	f7fe feb8 	bl	8004c60 <RCC_APB1PeriphResetCmd>
      break;            

    default:
      break;
  }
}
 8005ef0:	b003      	add	sp, #12
 8005ef2:	bd00      	pop	{pc}
 8005ef4:	40004c00 	.word	0x40004c00
 8005ef8:	40005000 	.word	0x40005000

08005efc <__WFI>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFI: 
 
    WFI
 8005efc:	bf30      	wfi
    BX r14
 8005efe:	4770      	bx	lr

08005f00 <__WFE>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFE:

    WFE
 8005f00:	bf20      	wfe
    BX r14
 8005f02:	4770      	bx	lr

08005f04 <__SEV>:
; Return         : None
;******************************************************************************/
.thumb_func
__SEV:

    SEV
 8005f04:	bf40      	sev
    BX r14
 8005f06:	4770      	bx	lr

08005f08 <__ISB>:
; Return         : None
;******************************************************************************/
.thumb_func
__ISB:

    ISB
 8005f08:	f3bf 8f6f 	isb	sy
    BX r14
 8005f0c:	4770      	bx	lr

08005f0e <__DSB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DSB:

    DSB
 8005f0e:	f3bf 8f4f 	dsb	sy
    BX r14
 8005f12:	4770      	bx	lr

08005f14 <__DMB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DMB:

    DMB
 8005f14:	f3bf 8f5f 	dmb	sy
    BX r14
 8005f18:	4770      	bx	lr

08005f1a <__SVC>:
; Return         : None
;******************************************************************************/
.thumb_func
__SVC:

    SVC 0x01
 8005f1a:	df01      	svc	1
    BX r14
 8005f1c:	4770      	bx	lr

08005f1e <__MRS_CONTROL>:
; Return         : - r4 : Cortex-M3 CONTROL register value.
;******************************************************************************/
.thumb_func
__MRS_CONTROL:

  MRS  r0,control
 8005f1e:	f3ef 8014 	mrs	r0, CONTROL
  BX r14
 8005f22:	4770      	bx	lr

08005f24 <__MSR_CONTROL>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_CONTROL:

  MSR control, r0
 8005f24:	f380 8814 	msr	CONTROL, r0
  ISB
 8005f28:	f3bf 8f6f 	isb	sy
  BX r14
 8005f2c:	4770      	bx	lr

08005f2e <__MRS_PSP>:
; Return         : - r0 : Process Stack value.
;******************************************************************************/
.thumb_func
__MRS_PSP:

  MRS r0, psp
 8005f2e:	f3ef 8009 	mrs	r0, PSP
  BX r14
 8005f32:	4770      	bx	lr

08005f34 <__MSR_PSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_PSP:
 
    MSR psp,  r0      /* set Process Stack value*/
 8005f34:	f380 8809 	msr	PSP, r0
    BX r14
 8005f38:	4770      	bx	lr

08005f3a <__MRS_MSP>:
; Return         : - r0 : Main Stack value.
;******************************************************************************/
.thumb_func
__MRS_MSP:

  MRS r0, msp
 8005f3a:	f3ef 8008 	mrs	r0, MSP
  BX r14
 8005f3e:	4770      	bx	lr

08005f40 <__MSR_MSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_MSP: 
 
    MSR msp, r0  /*; set Main Stack value*/
 8005f40:	f380 8808 	msr	MSP, r0
    BX r14
 8005f44:	4770      	bx	lr

08005f46 <__SETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETPRIMASK:

  CPSID i
 8005f46:	b672      	cpsid	i
  BX r14
 8005f48:	4770      	bx	lr

08005f4a <__RESETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETPRIMASK:

  CPSIE i
 8005f4a:	b662      	cpsie	i
  BX r14
 8005f4c:	4770      	bx	lr

08005f4e <__SETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETFAULTMASK:

  CPSID f
 8005f4e:	b671      	cpsid	f
  BX r14
 8005f50:	4770      	bx	lr

08005f52 <__RESETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETFAULTMASK:

  CPSIE f
 8005f52:	b661      	cpsie	f
  BX r14
 8005f54:	4770      	bx	lr

08005f56 <__BASEPRICONFIG>:
; Return         : None
;******************************************************************************/
.thumb_func
__BASEPRICONFIG:

  MSR basepri, r0
 8005f56:	f380 8811 	msr	BASEPRI, r0
  BX r14
 8005f5a:	4770      	bx	lr

08005f5c <__GetBASEPRI>:
; Return         : - r0 : Base Priority value 
;******************************************************************************/
.thumb_func
__GetBASEPRI:

  MRS r0, basepri_max
 8005f5c:	f3ef 8012 	mrs	r0, BASEPRI_MASK
  BX r14
 8005f60:	4770      	bx	lr

08005f62 <__REV_HalfWord>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_HalfWord: 
 
  REV16 r0, r0
 8005f62:	ba40      	rev16	r0, r0
  BX r14
 8005f64:	4770      	bx	lr

08005f66 <__REV_Word>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_Word: 
 
  REV r0, r0
 8005f66:	ba00      	rev	r0, r0
  BX r14
 8005f68:	4770      	bx	lr
	...

08005f6c <Reset_Handler>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void Reset_Handler(void)
{
 8005f6c:	f02d 0107 	bic.w	r1, sp, #7	; 0x7
 8005f70:	4668      	mov	r0, sp
 8005f72:	468d      	mov	sp, r1
 8005f74:	b501      	push	{r0, lr}
 8005f76:	2200      	movs	r2, #0

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8005f78:	490c      	ldr	r1, [pc, #48]	(8005fac <Reset_Handler+0x40>)
 8005f7a:	f8df c034 	ldr.w	ip, [pc, #52]	; 8005fb0 <Reset_Handler+0x44>
    {
        *(pulDest++) = *(pulSrc++);
 8005f7e:	480d      	ldr	r0, [pc, #52]	(8005fb4 <Reset_Handler+0x48>)
 8005f80:	e002      	b.n	8005f88 <Reset_Handler+0x1c>
 8005f82:	5883      	ldr	r3, [r0, r2]
 8005f84:	508b      	str	r3, [r1, r2]
 8005f86:	3204      	adds	r2, #4

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8005f88:	eb01 0302 	add.w	r3, r1, r2
 8005f8c:	4563      	cmp	r3, ip
 8005f8e:	d3f8      	bcc.n	8005f82 <Reset_Handler+0x16>
 8005f90:	4b09      	ldr	r3, [pc, #36]	(8005fb8 <Reset_Handler+0x4c>)
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 8005f92:	490a      	ldr	r1, [pc, #40]	(8005fbc <Reset_Handler+0x50>)
    {
        *(pulDest++) = 0;
 8005f94:	2200      	movs	r2, #0
 8005f96:	e001      	b.n	8005f9c <Reset_Handler+0x30>
 8005f98:	f843 2b04 	str.w	r2, [r3], #4
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 8005f9c:	428b      	cmp	r3, r1
 8005f9e:	d3fb      	bcc.n	8005f98 <Reset_Handler+0x2c>
    }

    //
    // Call the application's entry point.
    //
    main();
 8005fa0:	f7fd fb96 	bl	80036d0 <main>
}
 8005fa4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8005fa8:	4685      	mov	sp, r0
 8005faa:	4770      	bx	lr
 8005fac:	20000000 	.word	0x20000000
 8005fb0:	20000014 	.word	0x20000014
 8005fb4:	08006198 	.word	0x08006198
 8005fb8:	20000014 	.word	0x20000014
 8005fbc:	20000218 	.word	0x20000218

08005fc0 <APBAHBPrescTable>:
 8005fc0:	00000000 	.word	0x00000000
 8005fc4:	04030201 	.word	0x04030201
 8005fc8:	04030201 	.word	0x04030201
 8005fcc:	09080706 	.word	0x09080706

08005fd0 <ADCPrescTable>:
 8005fd0:	08060402 	.word	0x08060402
 8005fd4:	4d4d4f43 	.word	0x4d4d4f43
 8005fd8:	4658545f 	.word	0x4658545f
 8005fdc:	3a4c4941 	.word	0x3a4c4941
 8005fe0:	69614620 	.word	0x69614620
 8005fe4:	2064656c 	.word	0x2064656c
 8005fe8:	6e617274 	.word	0x6e617274
 8005fec:	74696d73 	.word	0x74696d73
 8005ff0:	736e6920 	.word	0x736e6920
 8005ff4:	63757274 	.word	0x63757274
 8005ff8:	6e6f6974 	.word	0x6e6f6974
 8005ffc:	63617020 	.word	0x63617020
 8006000:	2174656b 	.word	0x2174656b
 8006004:	4f43000a 	.word	0x4f43000a
 8006008:	545f4d4d 	.word	0x545f4d4d
 800600c:	52524558 	.word	0x52524558
 8006010:	203a524f 	.word	0x203a524f
 8006014:	6f636e49 	.word	0x6f636e49
 8006018:	63657272 	.word	0x63657272
 800601c:	6e692074 	.word	0x6e692074
 8006020:	75727473 	.word	0x75727473
 8006024:	6f697463 	.word	0x6f697463
 8006028:	6170206e 	.word	0x6170206e
 800602c:	74656b63 	.word	0x74656b63
 8006030:	43000a21 	.word	0x43000a21
 8006034:	5f4d4d4f 	.word	0x5f4d4d4f
 8006038:	41465852 	.word	0x41465852
 800603c:	203a4c49 	.word	0x203a4c49
 8006040:	6c696146 	.word	0x6c696146
 8006044:	67206465 	.word	0x67206465
 8006048:	73207465 	.word	0x73207465
 800604c:	75746174 	.word	0x75746174
 8006050:	61702073 	.word	0x61702073
 8006054:	74656b63 	.word	0x74656b63
 8006058:	6f726620 	.word	0x6f726620
 800605c:	6564206d 	.word	0x6564206d
 8006060:	65636976 	.word	0x65636976
 8006064:	43000a21 	.word	0x43000a21
 8006068:	5f4d4d4f 	.word	0x5f4d4d4f
 800606c:	41575852 	.word	0x41575852
 8006070:	4e495449 	.word	0x4e495449
 8006074:	4e203a47 	.word	0x4e203a47
 8006078:	7220776f 	.word	0x7220776f
 800607c:	65696365 	.word	0x65696365
 8006080:	676e6976 	.word	0x676e6976
 8006084:	61747320 	.word	0x61747320
 8006088:	20737574 	.word	0x20737574
 800608c:	6b636170 	.word	0x6b636170
 8006090:	0a217465 	.word	0x0a217465
 8006094:	4d4f4300 	.word	0x4d4f4300
 8006098:	58525f4d 	.word	0x58525f4d
 800609c:	454d4954 	.word	0x454d4954
 80060a0:	3a54554f 	.word	0x3a54554f
 80060a4:	65685420 	.word	0x65685420
 80060a8:	69206572 	.word	0x69206572
 80060ac:	6f6e2073 	.word	0x6f6e2073
 80060b0:	61747320 	.word	0x61747320
 80060b4:	20737574 	.word	0x20737574
 80060b8:	6b636170 	.word	0x6b636170
 80060bc:	0a217465 	.word	0x0a217465
 80060c0:	4d4f4300 	.word	0x4d4f4300
 80060c4:	58525f4d 	.word	0x58525f4d
 80060c8:	52524f43 	.word	0x52524f43
 80060cc:	3a545055 	.word	0x3a545055
 80060d0:	636e4920 	.word	0x636e4920
 80060d4:	6572726f 	.word	0x6572726f
 80060d8:	73207463 	.word	0x73207463
 80060dc:	75746174 	.word	0x75746174
 80060e0:	61702073 	.word	0x61702073
 80060e4:	74656b63 	.word	0x74656b63
 80060e8:	54000a21 	.word	0x54000a21
 80060ec:	20736968 	.word	0x20736968
 80060f0:	75207369 	.word	0x75207369
 80060f4:	6f6e6b6e 	.word	0x6f6e6b6e
 80060f8:	65206e77 	.word	0x65206e77
 80060fc:	726f7272 	.word	0x726f7272
 8006100:	646f6320 	.word	0x646f6320
 8006104:	000a2165 	.word	0x000a2165
 8006108:	75706e49 	.word	0x75706e49
 800610c:	6f762074 	.word	0x6f762074
 8006110:	6761746c 	.word	0x6761746c
 8006114:	72652065 	.word	0x72652065
 8006118:	21726f72 	.word	0x21726f72
 800611c:	6e41000a 	.word	0x6e41000a
 8006120:	20656c67 	.word	0x20656c67
 8006124:	696d696c 	.word	0x696d696c
 8006128:	72652074 	.word	0x72652074
 800612c:	21726f72 	.word	0x21726f72
 8006130:	764f000a 	.word	0x764f000a
 8006134:	65687265 	.word	0x65687265
 8006138:	65207461 	.word	0x65207461
 800613c:	726f7272 	.word	0x726f7272
 8006140:	4f000a21 	.word	0x4f000a21
 8006144:	6f207475 	.word	0x6f207475
 8006148:	61722066 	.word	0x61722066
 800614c:	2065676e 	.word	0x2065676e
 8006150:	6f727265 	.word	0x6f727265
 8006154:	000a2172 	.word	0x000a2172
 8006158:	63656843 	.word	0x63656843
 800615c:	6d75736b 	.word	0x6d75736b
 8006160:	72726520 	.word	0x72726520
 8006164:	0a21726f 	.word	0x0a21726f
 8006168:	65764f00 	.word	0x65764f00
 800616c:	616f6c72 	.word	0x616f6c72
 8006170:	72652064 	.word	0x72652064
 8006174:	21726f72 	.word	0x21726f72
 8006178:	6e49000a 	.word	0x6e49000a
 800617c:	75727473 	.word	0x75727473
 8006180:	6f697463 	.word	0x6f697463
 8006184:	6f63206e 	.word	0x6f63206e
 8006188:	65206564 	.word	0x65206564
 800618c:	726f7272 	.word	0x726f7272
 8006190:	20000a21 	.word	0x20000a21
 8006194:	00002020 	.word	0x00002020

Disassembly of section .data:

20000000 <Baudrate_DXL>:
20000000:	000f4240 	.word	0x000f4240

20000004 <Baudrate_PC>:
20000004:	0000e100 	.word	0x0000e100

20000008 <CCR1_Val>:
20000008:	0064      	.short	0x0064

2000000a <GoalPos>:
2000000a:	0000      	.short	0x0000
2000000c:	03ff      	.short	0x03ff

2000000e <id>:
2000000e:	0001      	.short	0x0001

20000010 <gbCommStatus>:
20000010:	00000001 	.word	0x00000001

Disassembly of section .bss:

20000014 <_sbss>:
20000014:	00000000 	.word	0x00000000

20000018 <INDEX>:
	...

20000019 <gbpRxInterruptBuffer>:
	...

20000119 <gbRxBufferWritePointer>:
	...

2000011a <gbRxBufferReadPointer>:
	...

2000011c <gwTimingDelay>:
2000011c:	00000000 	.word	0x00000000

20000120 <gw1msCounter>:
20000120:	00000000 	.word	0x00000000

20000124 <Position>:
	...

20000126 <wPresentPos>:
	...

20000128 <Voltage>:
	...

20000129 <bMoving>:
	...

2000012a <CommStatus>:
	...

2000012c <gbInstructionPacket>:
	...

200001cc <gbStatusPacket>:
	...

20000212 <gbRxPacketLength>:
	...

20000213 <gbRxGetLength>:
	...

20000214 <giBusUsing>:
20000214:	00000000 	.word	0x00000000

Disassembly of section ._usrstack:

20000218 <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	5728203a 	undefined
   8:	52416e69 	subpl	r6, r1, #1680	; 0x690
   c:	614d204d 	cmpvs	sp, sp, asr #32
  10:	20686372 	rsbcs	r6, r8, r2, ror r3
  14:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  18:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  1c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  20:	43434700 	movtmi	r4, #14080	; 0x3700
  24:	5728203a 	undefined
  28:	52416e69 	subpl	r6, r1, #1680	; 0x690
  2c:	614d204d 	cmpvs	sp, sp, asr #32
  30:	20686372 	rsbcs	r6, r8, r2, ror r3
  34:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  38:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  3c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  40:	43434700 	movtmi	r4, #14080	; 0x3700
  44:	5728203a 	undefined
  48:	52416e69 	subpl	r6, r1, #1680	; 0x690
  4c:	614d204d 	cmpvs	sp, sp, asr #32
  50:	20686372 	rsbcs	r6, r8, r2, ror r3
  54:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  58:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  5c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  60:	43434700 	movtmi	r4, #14080	; 0x3700
  64:	5728203a 	undefined
  68:	52416e69 	subpl	r6, r1, #1680	; 0x690
  6c:	614d204d 	cmpvs	sp, sp, asr #32
  70:	20686372 	rsbcs	r6, r8, r2, ror r3
  74:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  78:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  7c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  80:	43434700 	movtmi	r4, #14080	; 0x3700
  84:	5728203a 	undefined
  88:	52416e69 	subpl	r6, r1, #1680	; 0x690
  8c:	614d204d 	cmpvs	sp, sp, asr #32
  90:	20686372 	rsbcs	r6, r8, r2, ror r3
  94:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  98:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  9c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  a0:	43434700 	movtmi	r4, #14080	; 0x3700
  a4:	5728203a 	undefined
  a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  ac:	614d204d 	cmpvs	sp, sp, asr #32
  b0:	20686372 	rsbcs	r6, r8, r2, ror r3
  b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  bc:	00302e33 	eorseq	r2, r0, r3, lsr lr
  c0:	43434700 	movtmi	r4, #14080	; 0x3700
  c4:	5728203a 	undefined
  c8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  cc:	614d204d 	cmpvs	sp, sp, asr #32
  d0:	20686372 	rsbcs	r6, r8, r2, ror r3
  d4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  d8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  dc:	00302e33 	eorseq	r2, r0, r3, lsr lr
  e0:	43434700 	movtmi	r4, #14080	; 0x3700
  e4:	5728203a 	undefined
  e8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  ec:	614d204d 	cmpvs	sp, sp, asr #32
  f0:	20686372 	rsbcs	r6, r8, r2, ror r3
  f4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  f8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  fc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 100:	43434700 	movtmi	r4, #14080	; 0x3700
 104:	5728203a 	undefined
 108:	52416e69 	subpl	r6, r1, #1680	; 0x690
 10c:	614d204d 	cmpvs	sp, sp, asr #32
 110:	20686372 	rsbcs	r6, r8, r2, ror r3
 114:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 118:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 11c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 120:	43434700 	movtmi	r4, #14080	; 0x3700
 124:	5728203a 	undefined
 128:	52416e69 	subpl	r6, r1, #1680	; 0x690
 12c:	614d204d 	cmpvs	sp, sp, asr #32
 130:	20686372 	rsbcs	r6, r8, r2, ror r3
 134:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 138:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 13c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 140:	43434700 	movtmi	r4, #14080	; 0x3700
 144:	5728203a 	undefined
 148:	52416e69 	subpl	r6, r1, #1680	; 0x690
 14c:	614d204d 	cmpvs	sp, sp, asr #32
 150:	20686372 	rsbcs	r6, r8, r2, ror r3
 154:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 158:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 15c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 160:	43434700 	movtmi	r4, #14080	; 0x3700
 164:	5728203a 	undefined
 168:	52416e69 	subpl	r6, r1, #1680	; 0x690
 16c:	614d204d 	cmpvs	sp, sp, asr #32
 170:	20686372 	rsbcs	r6, r8, r2, ror r3
 174:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 178:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 17c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 180:	43434700 	movtmi	r4, #14080	; 0x3700
 184:	5728203a 	undefined
 188:	52416e69 	subpl	r6, r1, #1680	; 0x690
 18c:	614d204d 	cmpvs	sp, sp, asr #32
 190:	20686372 	rsbcs	r6, r8, r2, ror r3
 194:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 198:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 19c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1a0:	43434700 	movtmi	r4, #14080	; 0x3700
 1a4:	5728203a 	undefined
 1a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 1ac:	614d204d 	cmpvs	sp, sp, asr #32
 1b0:	20686372 	rsbcs	r6, r8, r2, ror r3
 1b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 1b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 1bc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1c0:	43434700 	movtmi	r4, #14080	; 0x3700
 1c4:	5728203a 	undefined
 1c8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 1cc:	614d204d 	cmpvs	sp, sp, asr #32
 1d0:	20686372 	rsbcs	r6, r8, r2, ror r3
 1d4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 1d8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 1dc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1e0:	43434700 	movtmi	r4, #14080	; 0x3700
 1e4:	5728203a 	undefined
 1e8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 1ec:	614d204d 	cmpvs	sp, sp, asr #32
 1f0:	20686372 	rsbcs	r6, r8, r2, ror r3
 1f4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 1f8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 1fc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 200:	43434700 	movtmi	r4, #14080	; 0x3700
 204:	5728203a 	undefined
 208:	52416e69 	subpl	r6, r1, #1680	; 0x690
 20c:	614d204d 	cmpvs	sp, sp, asr #32
 210:	20686372 	rsbcs	r6, r8, r2, ror r3
 214:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 218:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 21c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 220:	43434700 	movtmi	r4, #14080	; 0x3700
 224:	5728203a 	undefined
 228:	52416e69 	subpl	r6, r1, #1680	; 0x690
 22c:	614d204d 	cmpvs	sp, sp, asr #32
 230:	20686372 	rsbcs	r6, r8, r2, ror r3
 234:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 238:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 23c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 240:	43434700 	movtmi	r4, #14080	; 0x3700
 244:	5728203a 	undefined
 248:	52416e69 	subpl	r6, r1, #1680	; 0x690
 24c:	614d204d 	cmpvs	sp, sp, asr #32
 250:	20686372 	rsbcs	r6, r8, r2, ror r3
 254:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 258:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 25c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 260:	43434700 	movtmi	r4, #14080	; 0x3700
 264:	5728203a 	undefined
 268:	52416e69 	subpl	r6, r1, #1680	; 0x690
 26c:	614d204d 	cmpvs	sp, sp, asr #32
 270:	20686372 	rsbcs	r6, r8, r2, ror r3
 274:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 278:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 27c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 280:	43434700 	movtmi	r4, #14080	; 0x3700
 284:	5728203a 	undefined
 288:	52416e69 	subpl	r6, r1, #1680	; 0x690
 28c:	614d204d 	cmpvs	sp, sp, asr #32
 290:	20686372 	rsbcs	r6, r8, r2, ror r3
 294:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 298:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 29c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 2a0:	43434700 	movtmi	r4, #14080	; 0x3700
 2a4:	5728203a 	undefined
 2a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 2ac:	614d204d 	cmpvs	sp, sp, asr #32
 2b0:	20686372 	rsbcs	r6, r8, r2, ror r3
 2b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 2b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 2bc:	00302e33 	eorseq	r2, r0, r3, lsr lr

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
	...
  14:	0000000c 	andeq	r0, r0, ip
  18:	00000000 	andeq	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	004d0002 	subeq	r0, sp, r2
  30:	00040000 	andeq	r0, r4, r0
	...
  3c:	00000104 	andeq	r0, r0, r4, lsl #2
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	00d10002 	sbcseq	r0, r1, r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
  5c:	00000664 	andeq	r0, r0, r4, ror #12
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0c920002 	ldceq	0, cr0, [r2], {2}
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	08003798 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, ip, sp}
  7c:	0000012c 	andeq	r0, r0, ip, lsr #2
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	120f0002 	andne	r0, pc, #2	; 0x2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	080038c4 	stmdaeq	r0, {r2, r6, r7, fp, ip, sp}
  9c:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	137b0002 	cmnne	fp, #2	; 0x2
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	08003950 	stmdaeq	r0, {r4, r6, r8, fp, ip, sp}
  bc:	0000040c 	andeq	r0, r0, ip, lsl #8
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	19080002 	stmdbne	r8, {r1}
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	08003d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, ip, sp}
  dc:	00000528 	andeq	r0, r0, r8, lsr #10
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	20420002 	subcs	r0, r2, r2
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	08004284 	stmdaeq	r0, {r2, r7, r9, lr}
  fc:	00000288 	andeq	r0, r0, r8, lsl #5
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	268a0002 	strcs	r0, [sl], r2
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	0800450c 	stmdaeq	r0, {r2, r3, r8, sl, lr}
 11c:	00000384 	andeq	r0, r0, r4, lsl #7
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	2f710002 	svccs	0x00710002
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	08004890 	stmdaeq	r0, {r4, r7, fp, lr}
 13c:	000000e0 	andeq	r0, r0, r0, ror #1
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	31b80002 	undefined instruction 0x31b80002
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	08004970 	stmdaeq	r0, {r4, r5, r6, r8, fp, lr}
 15c:	000003a4 	andeq	r0, r0, r4, lsr #7
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	3a750002 	bcc	1d4017c <__Stack_Size+0x1d3fd7c>
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	08004d14 	stmdaeq	r0, {r2, r4, r8, sl, fp, lr}
 17c:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	3c640002 	stclcc	0, cr0, [r4], #-8
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	08004db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, lr}
 19c:	00000d88 	andeq	r0, r0, r8, lsl #27
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	5dad0002 	stcpl	0, cr0, [sp, #8]!
 1b0:	00040000 	andeq	r0, r4, r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	08005b40 	stmdaeq	r0, {r6, r8, r9, fp, ip, lr}
 1bc:	000003bc 	strheq	r0, [r0], -ip
	...
 1c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1cc:	66fd0002 	ldrbtvs	r0, [sp], r2
 1d0:	00040000 	andeq	r0, r4, r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	08005efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, lr}
 1dc:	0000006e 	andeq	r0, r0, lr, rrx
	...
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ec:	678e0002 	strvs	r0, [lr, r2]
 1f0:	00040000 	andeq	r0, r4, r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	08005f6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}
 1fc:	00000054 	andeq	r0, r0, r4, asr r0
	...
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	68940002 	ldmvs	r4, {r1}
 210:	00040000 	andeq	r0, r4, r0
	...
 21c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	69590002 	ldmdbvs	r9, {r1}^
 230:	00040000 	andeq	r0, r4, r0
	...
 23c:	00000030 	andeq	r0, r0, r0, lsr r0
	...
 248:	0000001c 	andeq	r0, r0, ip, lsl r0
 24c:	7bcd0002 	blvc	ff34025c <SCS_BASE+0x1f33225c>
 250:	00040000 	andeq	r0, r4, r0
	...
 25c:	000000c8 	andeq	r0, r0, r8, asr #1
	...
 268:	0000001c 	andeq	r0, r0, ip, lsl r0
 26c:	7d130002 	ldcvc	0, cr0, [r3, #-8]
 270:	00040000 	andeq	r0, r4, r0
	...
 27c:	000000d0 	ldrdeq	r0, [r0], -r0
	...
 288:	0000001c 	andeq	r0, r0, ip, lsl r0
 28c:	7e260002 	cdpvc	0, 2, cr0, cr6, cr2, {0}
 290:	00040000 	andeq	r0, r4, r0
	...
 29c:	0000009c 	muleq	r0, ip, r0
	...
 2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ac:	87cb0002 	strbhi	r0, [fp, r2]
 2b0:	00040000 	andeq	r0, r4, r0
	...
 2bc:	0000010c 	andeq	r0, r0, ip, lsl #2
	...
 2c8:	00000024 	andeq	r0, r0, r4, lsr #32
 2cc:	917d0002 	cmnls	sp, r2
 2d0:	00040000 	andeq	r0, r4, r0
	...
 2dc:	0000000c 	andeq	r0, r0, ip
 2e0:	00000000 	andeq	r0, r0, r0
 2e4:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_pubnames:

00000000 <.debug_pubnames>:
       0:	000002e9 	andeq	r0, r0, r9, ror #5
       4:	00d10002 	sbcseq	r0, r1, r2
       8:	0bc10000 	bleq	ff040010 <SCS_BASE+0x1f032010>
       c:	06c50000 	strbeq	r0, [r5], r0
      10:	6c430000 	marvs	acc0, r0, r3
      14:	42726165 	rsbsmi	r6, r2, #1073741849	; 0x40000019
      18:	65666675 	strbvs	r6, [r6, #-1653]!
      1c:	36353272 	undefined
      20:	0006d900 	andeq	sp, r6, r0, lsl #18
      24:	65684300 	strbvs	r4, [r8, #-768]!
      28:	654e6b63 	strbvs	r6, [lr, #-2915]
      2c:	72724177 	rsbsvc	r4, r2, #-1073741795	; 0xc000001d
      30:	00657669 	rsbeq	r7, r5, r9, ror #12
      34:	000006f1 	strdeq	r0, [r0], -r1
      38:	42447852 	submi	r7, r4, #5373952	; 0x520000
      3c:	5f657479 	svcpl	0x00657479
      40:	004c5844 	subeq	r5, ip, r4, asr #16
      44:	0000071c 	andeq	r0, r0, ip, lsl r7
      48:	53495f5f 	movtpl	r5, #40799	; 0x9f5f
      4c:	45445f52 	strbmi	r5, [r4, #-3922]
      50:	0059414c 	subseq	r4, r9, ip, asr #2
      54:	00000730 	andeq	r0, r0, r0, lsr r7
      58:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
      5c:	73694474 	cmnvc	r9, #1946157056	; 0x74000000
      60:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
      64:	07570074 	undefined
      68:	68430000 	stmdavs	r3, {}^
      6c:	546b6365 	strbtpl	r6, [fp], #-869
      70:	4f656d69 	svcmi	0x00656d69
      74:	6f007475 	svcvs	0x00007475
      78:	6d000007 	stcvs	0, cr0, [r0, #-28]
      7c:	616c6544 	cmnvs	ip, r4, asr #10
      80:	079a0079 	undefined
      84:	79530000 	ldmdbvc	r3, {}^
      88:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
      8c:	6f435f6b 	svcvs	0x00435f6b
      90:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
      94:	74617275 	strbtvc	r7, [r1], #-629
      98:	006e6f69 	rsbeq	r6, lr, r9, ror #30
      9c:	000007b0 	strheq	r0, [r0], -r0
      a0:	30447852 	subcc	r7, r4, r2, asr r8
      a4:	65746e49 	ldrbvs	r6, [r4, #-3657]!
      a8:	70757272 	rsbsvc	r7, r5, r2, ror r2
      ac:	07c60074 	undefined
      b0:	69540000 	ldmdbvs	r4, {}^
      b4:	4972656d 	ldmdbmi	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
      b8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      bc:	74707572 	ldrbtvc	r7, [r0], #-1394
      c0:	736d315f 	cmnvc	sp, #-1073741801	; 0xc0000017
      c4:	0007dc00 	andeq	sp, r7, r0, lsl #24
      c8:	6d695400 	cfstrdvs	mvd5, [r9]
      cc:	435f7265 	cmpmi	pc, #1342177286	; 0x50000006
      d0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      d4:	61727567 	cmnvs	r2, r7, ror #10
      d8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
      dc:	00081500 	andeq	r1, r8, r0, lsl #10
      e0:	44785400 	ldrbtmi	r5, [r8], #-1024
      e4:	65747942 	ldrbvs	r7, [r4, #-2370]!
      e8:	0043505f 	subeq	r5, r3, pc, asr r0
      ec:	00000840 	andeq	r0, r0, r0, asr #16
      f0:	42447854 	submi	r7, r4, #5505024	; 0x540000
      f4:	31657479 	smccc	22345
      f8:	087b0036 	ldmdaeq	fp!, {r1, r2, r4, r5}^
      fc:	78540000 	ldmdavc	r4, {}^
     100:	726f5744 	rsbvc	r5, pc, #17825792	; 0x1100000
     104:	00363164 	eorseq	r3, r6, r4, ror #2
     108:	000008a6 	andeq	r0, r0, r6, lsr #17
     10c:	53447854 	movtpl	r7, #18516	; 0x4854
     110:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     114:	08d70067 	ldmeq	r7, {r0, r1, r2, r5, r6}^
     118:	72500000 	subsvc	r0, r0, #0	; 0x0
     11c:	43746e69 	cmnmi	r4, #1680	; 0x690
     120:	536d6d6f 	cmnpl	sp, #7104	; 0x1bc0
     124:	75746174 	ldrbvc	r6, [r4, #-372]!
     128:	09090073 	stmdbeq	r9, {r0, r1, r4, r5, r6}
     12c:	72500000 	subsvc	r0, r0, #0	; 0x0
     130:	45746e69 	ldrbmi	r6, [r4, #-3689]!
     134:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     138:	65646f43 	strbvs	r6, [r4, #-3907]!
     13c:	00091f00 	andeq	r1, r9, r0, lsl #30
     140:	44785400 	ldrbtmi	r5, [r8], #-1024
     144:	65747942 	ldrbvs	r7, [r4, #-2370]!
     148:	4c58445f 	cfldrdmi	mvd4, [r8], {95}
     14c:	00094a00 	andeq	r4, r9, r0, lsl #20
     150:	73694400 	cmnvc	r9, #0	; 0x0
     154:	656c6261 	strbvs	r6, [ip, #-609]!
     158:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     15c:	60003154 	andvs	r3, r0, r4, asr r1
     160:	55000009 	strpl	r0, [r0, #-9]
     164:	54524153 	ldrbpl	r4, [r2], #-339
     168:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     16c:	75676966 	strbvc	r6, [r7, #-2406]!
     170:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     174:	aa006e6f 	bge	1bb38 <__Stack_Size+0x1b738>
     178:	55000009 	strpl	r0, [r0, #-9]
     17c:	54524153 	ldrbpl	r4, [r2], #-339
     180:	6f435f31 	svcvs	0x00435f31
     184:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     188:	74617275 	strbtvc	r7, [r1], #-629
     18c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     190:	000009d5 	ldrdeq	r0, [r0], -r5
     194:	4f495047 	svcmi	0x00495047
     198:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     19c:	75676966 	strbvc	r6, [r7, #-2406]!
     1a0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     1a4:	ff006e6f 	undefined instruction 0xff006e6f
     1a8:	4e000009 	cdpmi	0, 0, cr0, cr0, cr9, {0}
     1ac:	5f434956 	svcpl	0x00434956
     1b0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     1b4:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     1b8:	6f697461 	svcvs	0x00697461
     1bc:	0a27006e 	beq	9c037c <__Stack_Size+0x9bff7c>
     1c0:	43520000 	cmpmi	r2, #0	; 0x0
     1c4:	6f435f43 	svcvs	0x00435f43
     1c8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     1cc:	74617275 	strbtvc	r7, [r1], #-629
     1d0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     1d4:	00000a4c 	andeq	r0, r0, ip, asr #20
     1d8:	6e69616d 	powvsez	f6, f1, #5.0
     1dc:	000a7500 	andeq	r7, sl, r0, lsl #10
     1e0:	70626700 	rsbvc	r6, r2, r0, lsl #14
     1e4:	6e497852 	mcrvs	8, 2, r7, cr9, cr2, {2}
     1e8:	72726574 	rsbsvc	r6, r2, #486539264	; 0x1d000000
     1ec:	42747075 	rsbsmi	r7, r4, #117	; 0x75
     1f0:	65666675 	strbvs	r6, [r6, #-1653]!
     1f4:	0a8c0072 	beq	fe3003c4 <SCS_BASE+0x1e2f23c4>
     1f8:	62670000 	rsbvs	r0, r7, #0	; 0x0
     1fc:	75427852 	strbvc	r7, [r2, #-2130]
     200:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     204:	74697257 	strbtvc	r7, [r9], #-599
     208:	696f5065 	stmdbvs	pc!, {r0, r2, r5, r6, ip, lr}^
     20c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     210:	000aa300 	andeq	sl, sl, r0, lsl #6
     214:	52626700 	rsbpl	r6, r2, #0	; 0x0
     218:	66754278 	undefined
     21c:	52726566 	rsbspl	r6, r2, #427819008	; 0x19800000
     220:	50646165 	rsbpl	r6, r4, r5, ror #2
     224:	746e696f 	strbtvc	r6, [lr], #-2415
     228:	b5007265 	strlt	r7, [r0, #-613]
     22c:	6700000a 	strvs	r0, [r0, -sl]
     230:	6d695477 	cfstrdvs	mvd5, [r9, #-476]!
     234:	44676e69 	strbtmi	r6, [r7], #-3689
     238:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     23c:	000ac700 	andeq	ip, sl, r0, lsl #14
     240:	31776700 	cmncc	r7, r0, lsl #14
     244:	6f43736d 	svcvs	0x0043736d
     248:	65746e75 	ldrbvs	r6, [r4, #-3701]!
     24c:	0ad90072 	beq	ff64041c <SCS_BASE+0x1f63241c>
     250:	61420000 	cmpvs	r2, r0
     254:	61726475 	cmnvs	r2, r5, ror r4
     258:	445f6574 	ldrbmi	r6, [pc], #1396	; 260 <_Minimum_Stack_Size+0x160>
     25c:	eb004c58 	bl	133c4 <__Stack_Size+0x12fc4>
     260:	4200000a 	andmi	r0, r0, #10	; 0xa
     264:	72647561 	rsbvc	r7, r4, #406847488	; 0x18400000
     268:	5f657461 	svcpl	0x00657461
     26c:	fd004350 	stc2	3, cr4, [r0, #-320]
     270:	4300000a 	movwmi	r0, #10	; 0xa
     274:	5f315243 	svcpl	0x00315243
     278:	006c6156 	rsbeq	r6, ip, r6, asr r1
     27c:	00000b0f 	andeq	r0, r0, pc, lsl #22
     280:	74706163 	ldrbtvc	r6, [r0], #-355
     284:	00657275 	rsbeq	r7, r5, r5, ror r2
     288:	00000b31 	andeq	r0, r0, r1, lsr fp
     28c:	6c616f47 	stclvs	15, cr6, [r1], #-284
     290:	00736f50 	rsbseq	r6, r3, r0, asr pc
     294:	00000b43 	andeq	r0, r0, r3, asr #22
     298:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     29c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     2a0:	000b5500 	andeq	r5, fp, r0, lsl #10
     2a4:	72507700 	subsvc	r7, r0, #0	; 0x0
     2a8:	6e657365 	cdpvs	3, 6, cr7, cr5, cr5, {3}
     2ac:	736f5074 	cmnvc	pc, #116	; 0x74
     2b0:	000b6700 	andeq	r6, fp, r0, lsl #14
     2b4:	444e4900 	strbmi	r4, [lr], #-2304
     2b8:	79005845 	stmdbvc	r0, {r0, r2, r6, fp, ip, lr}
     2bc:	5600000b 	strpl	r0, [r0], -fp
     2c0:	61746c6f 	cmnvs	r4, pc, ror #24
     2c4:	8b006567 	blhi	19868 <__Stack_Size+0x19468>
     2c8:	6900000b 	stmdbvs	r0, {r0, r1, r3}
     2cc:	0b9c0064 	bleq	fe700464 <SCS_BASE+0x1e6f2464>
     2d0:	4d620000 	stclmi	0, cr0, [r2]
     2d4:	6e69766f 	cdpvs	6, 6, cr7, cr9, cr15, {3}
     2d8:	0bae0067 	bleq	feb8047c <SCS_BASE+0x1eb7247c>
     2dc:	6f430000 	svcvs	0x00430000
     2e0:	74536d6d 	ldrbvc	r6, [r3], #-3437
     2e4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     2e8:	00000000 	andeq	r0, r0, r0
     2ec:	00063800 	andeq	r3, r6, r0, lsl #16
     2f0:	92000200 	andls	r0, r0, #0	; 0x0
     2f4:	7d00000c 	stcvc	0, cr0, [r0, #-48]
     2f8:	25000005 	strcs	r0, [r0, #-5]
     2fc:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     300:	7845494d 	stmdavc	r5, {r0, r2, r3, r6, r8, fp, lr}^
     304:	74706563 	ldrbtvc	r6, [r0], #-1379
     308:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     30c:	00000038 	andeq	r0, r0, r8, lsr r0
     310:	64726148 	ldrbtvs	r6, [r2], #-328
     314:	6c756146 	ldfvse	f6, [r5], #-280
     318:	63784574 	cmnvs	r8, #486539264	; 0x1d000000
     31c:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
     320:	4b006e6f 	blmi	1bce4 <__Stack_Size+0x1b8e4>
     324:	4d000000 	stcmi	0, cr0, [r0]
     328:	614d6d65 	cmpvs	sp, r5, ror #26
     32c:	6567616e 	strbvs	r6, [r7, #-366]!
     330:	65637845 	strbvs	r7, [r3, #-2117]!
     334:	6f697470 	svcvs	0x00697470
     338:	005e006e 	subseq	r0, lr, lr, rrx
     33c:	75420000 	strbvc	r0, [r2]
     340:	75614673 	strbvc	r4, [r1, #-1651]!
     344:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
     348:	74706563 	ldrbtvc	r6, [r0], #-1379
     34c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     350:	00000071 	andeq	r0, r0, r1, ror r0
     354:	67617355 	undefined
     358:	75614665 	strbvc	r4, [r1, #-1637]!
     35c:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
     360:	74706563 	ldrbtvc	r6, [r0], #-1379
     364:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     368:	00000084 	andeq	r0, r0, r4, lsl #1
     36c:	75626544 	strbvc	r6, [r2, #-1348]!
     370:	6e6f4d67 	cdpvs	13, 6, cr4, cr15, cr7, {3}
     374:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
     378:	00009700 	andeq	r9, r0, r0, lsl #14
     37c:	43565300 	cmpmi	r6, #0	; 0x0
     380:	646e6148 	strbtvs	r6, [lr], #-328
     384:	0072656c 	rsbseq	r6, r2, ip, ror #10
     388:	000000aa 	andeq	r0, r0, sl, lsr #1
     38c:	646e6550 	strbtvs	r6, [lr], #-1360
     390:	00435653 	subeq	r5, r3, r3, asr r6
     394:	000000bd 	strheq	r0, [r0], -sp
     398:	47445757 	smlsldmi	r5, r4, r7, r7
     39c:	5152495f 	cmppl	r2, pc, asr r9
     3a0:	646e6148 	strbtvs	r6, [lr], #-328
     3a4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     3a8:	000000d0 	ldrdeq	r0, [r0], -r0
     3ac:	5f445650 	svcpl	0x00445650
     3b0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     3b4:	6c646e61 	stclvs	14, cr6, [r4], #-388
     3b8:	e3007265 	movw	r7, #613	; 0x265
     3bc:	54000000 	strpl	r0, [r0]
     3c0:	45504d41 	ldrbmi	r4, [r0, #-3393]
     3c4:	52495f52 	subpl	r5, r9, #328	; 0x148
     3c8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     3cc:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     3d0:	0000f600 	andeq	pc, r0, r0, lsl #12
     3d4:	43545200 	cmpmi	r4, #0	; 0x0
     3d8:	5152495f 	cmppl	r2, pc, asr r9
     3dc:	646e6148 	strbtvs	r6, [lr], #-328
     3e0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     3e4:	00000109 	andeq	r0, r0, r9, lsl #2
     3e8:	53414c46 	movtpl	r4, #7238	; 0x1c46
     3ec:	52495f48 	subpl	r5, r9, #288	; 0x120
     3f0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     3f4:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     3f8:	00011c00 	andeq	r1, r1, r0, lsl #24
     3fc:	43435200 	movtmi	r5, #12800	; 0x3200
     400:	5152495f 	cmppl	r2, pc, asr r9
     404:	646e6148 	strbtvs	r6, [lr], #-328
     408:	0072656c 	rsbseq	r6, r2, ip, ror #10
     40c:	0000012f 	andeq	r0, r0, pc, lsr #2
     410:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     414:	52495f30 	subpl	r5, r9, #192	; 0xc0
     418:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     41c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     420:	00014200 	andeq	r4, r1, r0, lsl #4
     424:	54584500 	ldrbpl	r4, [r8], #-1280
     428:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^
     42c:	61485152 	cmpvs	r8, r2, asr r1
     430:	656c646e 	strbvs	r6, [ip, #-1134]!
     434:	01550072 	cmpeq	r5, r2, ror r0
     438:	58450000 	stmdapl	r5, {}^
     43c:	5f324954 	svcpl	0x00324954
     440:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     444:	6c646e61 	stclvs	14, cr6, [r4], #-388
     448:	68007265 	stmdavs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     44c:	45000001 	strmi	r0, [r0, #-1]
     450:	33495458 	movtcc	r5, #37976	; 0x9458
     454:	5152495f 	cmppl	r2, pc, asr r9
     458:	646e6148 	strbtvs	r6, [lr], #-328
     45c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     460:	0000017b 	andeq	r0, r0, fp, ror r1
     464:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     468:	52495f34 	subpl	r5, r9, #208	; 0xd0
     46c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     470:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     474:	00018f00 	andeq	r8, r1, r0, lsl #30
     478:	414d4400 	cmpmi	sp, r0, lsl #8
     47c:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     480:	656e6e61 	strbvs	r6, [lr, #-3681]!
     484:	495f316c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, ip, sp}^
     488:	61485152 	cmpvs	r8, r2, asr r1
     48c:	656c646e 	strbvs	r6, [ip, #-1134]!
     490:	01a30072 	undefined instruction 0x01a30072
     494:	4d440000 	stclmi	0, cr0, [r4]
     498:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     49c:	6e6e6168 	powvsez	f6, f6, #0.0
     4a0:	5f326c65 	svcpl	0x00326c65
     4a4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     4a8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     4ac:	b7007265 	strlt	r7, [r0, -r5, ror #4]
     4b0:	44000001 	strmi	r0, [r0], #-1
     4b4:	5f31414d 	svcpl	0x0031414d
     4b8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     4bc:	336c656e 	cmncc	ip, #461373440	; 0x1b800000
     4c0:	5152495f 	cmppl	r2, pc, asr r9
     4c4:	646e6148 	strbtvs	r6, [lr], #-328
     4c8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     4cc:	000001cb 	andeq	r0, r0, fp, asr #3
     4d0:	31414d44 	cmpcc	r1, r4, asr #26
     4d4:	6168435f 	cmnvs	r8, pc, asr r3
     4d8:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     4dc:	52495f34 	subpl	r5, r9, #208	; 0xd0
     4e0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     4e4:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     4e8:	0001df00 	andeq	sp, r1, r0, lsl #30
     4ec:	414d4400 	cmpmi	sp, r0, lsl #8
     4f0:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     4f4:	656e6e61 	strbvs	r6, [lr, #-3681]!
     4f8:	495f356c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, sl, ip, sp}^
     4fc:	61485152 	cmpvs	r8, r2, asr r1
     500:	656c646e 	strbvs	r6, [ip, #-1134]!
     504:	01f30072 	mvnseq	r0, r2, ror r0
     508:	4d440000 	stclmi	0, cr0, [r4]
     50c:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     510:	6e6e6168 	powvsez	f6, f6, #0.0
     514:	5f366c65 	svcpl	0x00366c65
     518:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     51c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     520:	07007265 	streq	r7, [r0, -r5, ror #4]
     524:	44000002 	strmi	r0, [r0], #-2
     528:	5f31414d 	svcpl	0x0031414d
     52c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     530:	376c656e 	strbcc	r6, [ip, -lr, ror #10]!
     534:	5152495f 	cmppl	r2, pc, asr r9
     538:	646e6148 	strbtvs	r6, [lr], #-328
     53c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     540:	0000021b 	andeq	r0, r0, fp, lsl r2
     544:	31434441 	cmpcc	r3, r1, asr #8
     548:	495f325f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, ip, sp}^
     54c:	61485152 	cmpvs	r8, r2, asr r1
     550:	656c646e 	strbvs	r6, [ip, #-1134]!
     554:	022f0072 	eoreq	r0, pc, #114	; 0x72
     558:	53550000 	cmppl	r5, #0	; 0x0
     55c:	50485f42 	subpl	r5, r8, r2, asr #30
     560:	4e41435f 	mcrmi	3, 2, r4, cr1, cr15, {2}
     564:	5f58545f 	svcpl	0x0058545f
     568:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     56c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     570:	43007265 	movwmi	r7, #613	; 0x265
     574:	55000002 	strpl	r0, [r0, #-2]
     578:	4c5f4253 	lfmmi	f4, 2, [pc], {83}
     57c:	41435f50 	cmpmi	r3, r0, asr pc
     580:	58525f4e 	ldmdapl	r2, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     584:	52495f30 	subpl	r5, r9, #192	; 0xc0
     588:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     58c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     590:	00025700 	andeq	r5, r2, r0, lsl #14
     594:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     598:	3158525f 	cmpcc	r8, pc, asr r2
     59c:	5152495f 	cmppl	r2, pc, asr r9
     5a0:	646e6148 	strbtvs	r6, [lr], #-328
     5a4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     5a8:	0000026b 	andeq	r0, r0, fp, ror #4
     5ac:	5f4e4143 	svcpl	0x004e4143
     5b0:	5f454353 	svcpl	0x00454353
     5b4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     5b8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     5bc:	7f007265 	svcvc	0x00007265
     5c0:	45000002 	strmi	r0, [r0, #-2]
     5c4:	39495458 	stmdbcc	r9, {r3, r4, r6, sl, ip, lr}^
     5c8:	495f355f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}^
     5cc:	61485152 	cmpvs	r8, r2, asr r1
     5d0:	656c646e 	strbvs	r6, [ip, #-1134]!
     5d4:	02930072 	addseq	r0, r3, #114	; 0x72
     5d8:	49540000 	ldmdbmi	r4, {}^
     5dc:	425f314d 	subsmi	r3, pc, #1073741843	; 0x40000013
     5e0:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^
     5e4:	61485152 	cmpvs	r8, r2, asr r1
     5e8:	656c646e 	strbvs	r6, [ip, #-1134]!
     5ec:	02a70072 	adceq	r0, r7, #114	; 0x72
     5f0:	49540000 	ldmdbmi	r4, {}^
     5f4:	555f314d 	ldrbpl	r3, [pc, #-333]	; 4af <__Stack_Size+0xaf>
     5f8:	52495f50 	subpl	r5, r9, #320	; 0x140
     5fc:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     600:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     604:	0002bb00 	andeq	fp, r2, r0, lsl #22
     608:	4d495400 	cfstrdmi	mvd5, [r9]
     60c:	52545f31 	subspl	r5, r4, #196	; 0xc4
     610:	4f435f47 	svcmi	0x00435f47
     614:	52495f4d 	subpl	r5, r9, #308	; 0x134
     618:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     61c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     620:	0002cf00 	andeq	ip, r2, r0, lsl #30
     624:	4d495400 	cfstrdmi	mvd5, [r9]
     628:	43435f31 	movtmi	r5, #16177	; 0x3f31
     62c:	5152495f 	cmppl	r2, pc, asr r9
     630:	646e6148 	strbtvs	r6, [lr], #-328
     634:	0072656c 	rsbseq	r6, r2, ip, ror #10
     638:	000002e3 	andeq	r0, r0, r3, ror #5
     63c:	334d4954 	movtcc	r4, #55636	; 0xd954
     640:	5152495f 	cmppl	r2, pc, asr r9
     644:	646e6148 	strbtvs	r6, [lr], #-328
     648:	0072656c 	rsbseq	r6, r2, ip, ror #10
     64c:	000002f7 	strdeq	r0, [r0], -r7
     650:	344d4954 	strbcc	r4, [sp], #-2388
     654:	5152495f 	cmppl	r2, pc, asr r9
     658:	646e6148 	strbtvs	r6, [lr], #-328
     65c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     660:	0000030b 	andeq	r0, r0, fp, lsl #6
     664:	31433249 	cmpcc	r3, r9, asr #4
     668:	5f56455f 	svcpl	0x0056455f
     66c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     670:	6c646e61 	stclvs	14, cr6, [r4], #-388
     674:	1f007265 	svcne	0x00007265
     678:	49000003 	stmdbmi	r0, {r0, r1}
     67c:	5f314332 	svcpl	0x00314332
     680:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^
     684:	61485152 	cmpvs	r8, r2, asr r1
     688:	656c646e 	strbvs	r6, [ip, #-1134]!
     68c:	03330072 	teqeq	r3, #114	; 0x72
     690:	32490000 	subcc	r0, r9, #0	; 0x0
     694:	455f3243 	ldrbmi	r3, [pc, #-579]	; 459 <__Stack_Size+0x59>
     698:	52495f56 	subpl	r5, r9, #344	; 0x158
     69c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     6a0:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     6a4:	00034700 	andeq	r4, r3, r0, lsl #14
     6a8:	43324900 	teqmi	r2, #0	; 0x0
     6ac:	52455f32 	subpl	r5, r5, #200	; 0xc8
     6b0:	5152495f 	cmppl	r2, pc, asr r9
     6b4:	646e6148 	strbtvs	r6, [lr], #-328
     6b8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     6bc:	0000035b 	andeq	r0, r0, fp, asr r3
     6c0:	31495053 	qdaddcc	r5, r3, r9
     6c4:	5152495f 	cmppl	r2, pc, asr r9
     6c8:	646e6148 	strbtvs	r6, [lr], #-328
     6cc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     6d0:	0000036f 	andeq	r0, r0, pc, ror #6
     6d4:	32495053 	subcc	r5, r9, #83	; 0x53
     6d8:	5152495f 	cmppl	r2, pc, asr r9
     6dc:	646e6148 	strbtvs	r6, [lr], #-328
     6e0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     6e4:	00000383 	andeq	r0, r0, r3, lsl #7
     6e8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     6ec:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^
     6f0:	61485152 	cmpvs	r8, r2, asr r1
     6f4:	656c646e 	strbvs	r6, [ip, #-1134]!
     6f8:	03970072 	orrseq	r0, r7, #114	; 0x72
     6fc:	53550000 	cmppl	r5, #0	; 0x0
     700:	33545241 	cmpcc	r4, #268435460	; 0x10000004
     704:	5152495f 	cmppl	r2, pc, asr r9
     708:	646e6148 	strbtvs	r6, [lr], #-328
     70c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     710:	000003ab 	andeq	r0, r0, fp, lsr #7
     714:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     718:	315f3531 	cmpcc	pc, r1, lsr r5
     71c:	52495f30 	subpl	r5, r9, #192	; 0xc0
     720:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     724:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     728:	0003bf00 	andeq	fp, r3, r0, lsl #30
     72c:	43545200 	cmpmi	r4, #0	; 0x0
     730:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
     734:	52495f6d 	subpl	r5, r9, #436	; 0x1b4
     738:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     73c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     740:	0003d300 	andeq	sp, r3, r0, lsl #6
     744:	42535500 	subsmi	r5, r3, #0	; 0x0
     748:	656b6157 	strbvs	r6, [fp, #-343]!
     74c:	495f7055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, sp, lr}^
     750:	61485152 	cmpvs	r8, r2, asr r1
     754:	656c646e 	strbvs	r6, [ip, #-1134]!
     758:	03e70072 	mvneq	r0, #114	; 0x72
     75c:	49540000 	ldmdbmi	r4, {}^
     760:	425f384d 	subsmi	r3, pc, #5046272	; 0x4d0000
     764:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^
     768:	61485152 	cmpvs	r8, r2, asr r1
     76c:	656c646e 	strbvs	r6, [ip, #-1134]!
     770:	03fb0072 	mvnseq	r0, #114	; 0x72
     774:	49540000 	ldmdbmi	r4, {}^
     778:	555f384d 	ldrbpl	r3, [pc, #-2125]	; ffffff33 <SCS_BASE+0x1fff1f33>
     77c:	52495f50 	subpl	r5, r9, #320	; 0x140
     780:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     784:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     788:	00040f00 	andeq	r0, r4, r0, lsl #30
     78c:	4d495400 	cfstrdmi	mvd5, [r9]
     790:	52545f38 	subspl	r5, r4, #224	; 0xe0
     794:	4f435f47 	svcmi	0x00435f47
     798:	52495f4d 	subpl	r5, r9, #308	; 0x134
     79c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     7a0:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     7a4:	00042300 	andeq	r2, r4, r0, lsl #6
     7a8:	4d495400 	cfstrdmi	mvd5, [r9]
     7ac:	43435f38 	movtmi	r5, #16184	; 0x3f38
     7b0:	5152495f 	cmppl	r2, pc, asr r9
     7b4:	646e6148 	strbtvs	r6, [lr], #-328
     7b8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     7bc:	00000437 	andeq	r0, r0, r7, lsr r4
     7c0:	33434441 	movtcc	r4, #13377	; 0x3441
     7c4:	5152495f 	cmppl	r2, pc, asr r9
     7c8:	646e6148 	strbtvs	r6, [lr], #-328
     7cc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     7d0:	0000044b 	andeq	r0, r0, fp, asr #8
     7d4:	434d5346 	movtmi	r5, #54086	; 0xd346
     7d8:	5152495f 	cmppl	r2, pc, asr r9
     7dc:	646e6148 	strbtvs	r6, [lr], #-328
     7e0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     7e4:	0000045f 	andeq	r0, r0, pc, asr r4
     7e8:	4f494453 	svcmi	0x00494453
     7ec:	5152495f 	cmppl	r2, pc, asr r9
     7f0:	646e6148 	strbtvs	r6, [lr], #-328
     7f4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     7f8:	00000473 	andeq	r0, r0, r3, ror r4
     7fc:	354d4954 	strbcc	r4, [sp, #-2388]
     800:	5152495f 	cmppl	r2, pc, asr r9
     804:	646e6148 	strbtvs	r6, [lr], #-328
     808:	0072656c 	rsbseq	r6, r2, ip, ror #10
     80c:	00000487 	andeq	r0, r0, r7, lsl #9
     810:	33495053 	movtcc	r5, #36947	; 0x9053
     814:	5152495f 	cmppl	r2, pc, asr r9
     818:	646e6148 	strbtvs	r6, [lr], #-328
     81c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     820:	0000049b 	muleq	r0, fp, r4
     824:	54524155 	ldrbpl	r4, [r2], #-341
     828:	52495f34 	subpl	r5, r9, #208	; 0xd0
     82c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     830:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     834:	0004af00 	andeq	sl, r4, r0, lsl #30
     838:	52415500 	subpl	r5, r1, #0	; 0x0
     83c:	495f3554 	ldmdbmi	pc, {r2, r4, r6, r8, sl, ip, sp}^
     840:	61485152 	cmpvs	r8, r2, asr r1
     844:	656c646e 	strbvs	r6, [ip, #-1134]!
     848:	04c30072 	strbeq	r0, [r3], #114
     84c:	49540000 	ldmdbmi	r4, {}^
     850:	495f364d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, sl, ip, sp}^
     854:	61485152 	cmpvs	r8, r2, asr r1
     858:	656c646e 	strbvs	r6, [ip, #-1134]!
     85c:	04d70072 	ldrbeq	r0, [r7], #114
     860:	49540000 	ldmdbmi	r4, {}^
     864:	495f374d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, sl, ip, sp}^
     868:	61485152 	cmpvs	r8, r2, asr r1
     86c:	656c646e 	strbvs	r6, [ip, #-1134]!
     870:	04eb0072 	strbteq	r0, [fp], #114
     874:	4d440000 	stclmi	0, cr0, [r4]
     878:	435f3241 	cmpmi	pc, #268435460	; 0x10000004
     87c:	6e6e6168 	powvsez	f6, f6, #0.0
     880:	5f316c65 	svcpl	0x00316c65
     884:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     888:	6c646e61 	stclvs	14, cr6, [r4], #-388
     88c:	ff007265 	undefined instruction 0xff007265
     890:	44000004 	strmi	r0, [r0], #-4
     894:	5f32414d 	svcpl	0x0032414d
     898:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     89c:	326c656e 	rsbcc	r6, ip, #461373440	; 0x1b800000
     8a0:	5152495f 	cmppl	r2, pc, asr r9
     8a4:	646e6148 	strbtvs	r6, [lr], #-328
     8a8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     8ac:	00000513 	andeq	r0, r0, r3, lsl r5
     8b0:	32414d44 	subcc	r4, r1, #4352	; 0x1100
     8b4:	6168435f 	cmnvs	r8, pc, asr r3
     8b8:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     8bc:	52495f33 	subpl	r5, r9, #204	; 0xcc
     8c0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     8c4:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     8c8:	00052700 	andeq	r2, r5, r0, lsl #14
     8cc:	414d4400 	cmpmi	sp, r0, lsl #8
     8d0:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     8d4:	656e6e61 	strbvs	r6, [lr, #-3681]!
     8d8:	355f346c 	ldrbcc	r3, [pc, #-1132]	; 474 <__Stack_Size+0x74>
     8dc:	5152495f 	cmppl	r2, pc, asr r9
     8e0:	646e6148 	strbtvs	r6, [lr], #-328
     8e4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     8e8:	0000053b 	andeq	r0, r0, fp, lsr r5
     8ec:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     8f0:	495f3154 	ldmdbmi	pc, {r2, r4, r6, r8, ip, sp}^
     8f4:	61485152 	cmpvs	r8, r2, asr r1
     8f8:	656c646e 	strbvs	r6, [ip, #-1134]!
     8fc:	05510072 	ldrbeq	r0, [r1, #-114]
     900:	49540000 	ldmdbmi	r4, {}^
     904:	495f324d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, ip, sp}^
     908:	61485152 	cmpvs	r8, r2, asr r1
     90c:	656c646e 	strbvs	r6, [ip, #-1134]!
     910:	05670072 	strbeq	r0, [r7, #-114]!
     914:	79530000 	ldmdbvc	r3, {}^
     918:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     91c:	6e61486b 	cdpvs	8, 6, cr4, cr1, cr11, {3}
     920:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     924:	00000000 	andeq	r0, r0, r0
     928:	00008d00 	andeq	r8, r0, r0, lsl #26
     92c:	0f000200 	svceq	0x00000200
     930:	6c000012 	stcvs	0, cr0, [r0], {18}
     934:	25000001 	strcs	r0, [r0, #-1]
     938:	64000000 	strvs	r0, [r0]
     93c:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
     940:	745f6c61 	ldrbvc	r6, [pc], #3169	; 948 <__Stack_Size+0x548>
     944:	6f656d69 	svcvs	0x00656d69
     948:	45007475 	strmi	r7, [r0, #-1141]
     94c:	64000000 	strvs	r0, [r0]
     950:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
     954:	735f6c61 	cmpvc	pc, #24832	; 0x6100
     958:	745f7465 	ldrbvc	r7, [pc], #1125	; 960 <__Stack_Size+0x560>
     95c:	6f656d69 	svcvs	0x00656d69
     960:	6e007475 	mcrvs	4, 0, r7, cr0, cr5, {3}
     964:	64000000 	strvs	r0, [r0]
     968:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
     96c:	725f6c61 	subsvc	r6, pc, #24832	; 0x6100
     970:	00c20078 	sbceq	r0, r2, r8, ror r0
     974:	78640000 	stmdavc	r4!, {}^
     978:	61685f6c 	cmnvs	r8, ip, ror #30
     97c:	78745f6c 	ldmdavc	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     980:	00010900 	andeq	r0, r1, r0, lsl #18
     984:	6c786400 	cfldrdvs	mvd6, [r8]
     988:	6c61685f 	stclvs	8, cr6, [r1], #-380
     98c:	656c635f 	strbvs	r6, [ip, #-863]!
     990:	1e007261 	cdpne	2, 0, cr7, cr0, cr1, {3}
     994:	64000001 	strvs	r0, [r0], #-1
     998:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
     99c:	635f6c61 	cmpvs	pc, #24832	; 0x6100
     9a0:	65736f6c 	ldrbvs	r6, [r3, #-3948]!
     9a4:	00013300 	andeq	r3, r1, r0, lsl #6
     9a8:	6c786400 	cfldrdvs	mvd6, [r8]
     9ac:	6c61685f 	stclvs	8, cr6, [r1], #-380
     9b0:	65706f5f 	ldrbvs	r6, [r0, #-3935]!
     9b4:	0000006e 	andeq	r0, r0, lr, rrx
     9b8:	024b0000 	subeq	r0, fp, #0	; 0x0
     9bc:	00020000 	andeq	r0, r2, r0
     9c0:	0000137b 	andeq	r1, r0, fp, ror r3
     9c4:	0000058d 	andeq	r0, r0, sp, lsl #11
     9c8:	000000c3 	andeq	r0, r0, r3, asr #1
     9cc:	5f6c7864 	svcpl	0x006c7864
     9d0:	5f746567 	svcpl	0x00746567
     9d4:	75736572 	ldrbvc	r6, [r3, #-1394]!
     9d8:	da00746c 	ble	1db90 <__Stack_Size+0x1d790>
     9dc:	64000000 	strvs	r0, [r0]
     9e0:	735f6c78 	cmpvc	pc, #30720	; 0x7800
     9e4:	745f7465 	ldrbvc	r7, [pc], #1125	; 9ec <__Stack_Size+0x5ec>
     9e8:	63617078 	cmnvs	r1, #120	; 0x78
     9ec:	5f74656b 	svcpl	0x0074656b
     9f0:	fe006469 	cdp2	4, 0, cr6, cr0, cr9, {3}
     9f4:	64000000 	strvs	r0, [r0]
     9f8:	735f6c78 	cmpvc	pc, #30720	; 0x7800
     9fc:	745f7465 	ldrbvc	r7, [pc], #1125	; a04 <__Stack_Size+0x604>
     a00:	63617078 	cmnvs	r1, #120	; 0x78
     a04:	5f74656b 	svcpl	0x0074656b
     a08:	74736e69 	ldrbtvc	r6, [r3], #-3689
     a0c:	74637572 	strbtvc	r7, [r3], #-1394
     a10:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     a14:	00000123 	andeq	r0, r0, r3, lsr #2
     a18:	5f6c7864 	svcpl	0x006c7864
     a1c:	5f746573 	svcpl	0x00746573
     a20:	61707874 	cmnvs	r0, r4, ror r8
     a24:	74656b63 	strbtvc	r6, [r5], #-2915
     a28:	7261705f 	rsbvc	r7, r1, #95	; 0x5f
     a2c:	74656d61 	strbtvc	r6, [r5], #-3425
     a30:	55007265 	strpl	r7, [r0, #-613]
     a34:	64000001 	strvs	r0, [r0], #-1
     a38:	735f6c78 	cmpvc	pc, #30720	; 0x7800
     a3c:	745f7465 	ldrbvc	r7, [pc], #1125	; a44 <__Stack_Size+0x644>
     a40:	63617078 	cmnvs	r1, #120	; 0x78
     a44:	5f74656b 	svcpl	0x0074656b
     a48:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
     a4c:	7a006874 	bvc	1ac24 <__Stack_Size+0x1a824>
     a50:	64000001 	strvs	r0, [r0], #-1
     a54:	675f6c78 	undefined
     a58:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
     a5c:	63617078 	cmnvs	r1, #120	; 0x78
     a60:	5f74656b 	svcpl	0x0074656b
     a64:	6f727265 	svcvs	0x00727265
     a68:	01a60072 	undefined instruction 0x01a60072
     a6c:	78640000 	stmdavc	r4!, {}^
     a70:	65675f6c 	strbvs	r5, [r7, #-3948]!
     a74:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     a78:	6b636170 	blvs	18d9040 <__Stack_Size+0x18d8c40>
     a7c:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}
     a80:	74676e65 	strbtvc	r6, [r7], #-3685
     a84:	01be0068 	undefined instruction 0x01be0068
     a88:	78640000 	stmdavc	r4!, {}^
     a8c:	65675f6c 	strbvs	r5, [r7, #-3948]!
     a90:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     a94:	6b636170 	blvs	18d905c <__Stack_Size+0x18d8c5c>
     a98:	705f7465 	subsvc	r7, pc, r5, ror #8
     a9c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!
     aa0:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
     aa4:	0001eb00 	andeq	lr, r1, r0, lsl #22
     aa8:	6c786400 	cfldrdvs	mvd6, [r8]
     aac:	6b616d5f 	blvs	185c030 <__Stack_Size+0x185bc30>
     ab0:	726f7765 	rsbvc	r7, pc, #26476544	; 0x1940000
     ab4:	02140064 	andseq	r0, r4, #100	; 0x64
     ab8:	78640000 	stmdavc	r4!, {}^
     abc:	65675f6c 	strbvs	r5, [r7, #-3948]!
     ac0:	6f6c5f74 	svcvs	0x006c5f74
     ac4:	74796277 	ldrbtvc	r6, [r9], #-631
     ac8:	02360065 	eorseq	r0, r6, #101	; 0x65
     acc:	78640000 	stmdavc	r4!, {}^
     ad0:	65675f6c 	strbvs	r5, [r7, #-3948]!
     ad4:	69685f74 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     ad8:	79626867 	stmdbvc	r2!, {r0, r1, r2, r5, r6, fp, sp, lr}^
     adc:	5c006574 	cfstr32pl	mvfx6, [r0], {116}
     ae0:	64000002 	strvs	r0, [r0], #-2
     ae4:	725f6c78 	subsvc	r6, pc, #30720	; 0x7800
     ae8:	61705f78 	cmnvs	r0, r8, ror pc
     aec:	74656b63 	strbtvc	r6, [r5], #-2915
     af0:	0002b100 	andeq	fp, r2, r0, lsl #2
     af4:	6c786400 	cfldrdvs	mvd6, [r8]
     af8:	5f78745f 	svcpl	0x0078745f
     afc:	6b636170 	blvs	18d90c4 <__Stack_Size+0x18d8cc4>
     b00:	ff007465 	undefined instruction 0xff007465
     b04:	64000002 	strvs	r0, [r0], #-2
     b08:	745f6c78 	ldrbvc	r6, [pc], #3192	; b10 <__Stack_Size+0x710>
     b0c:	5f787278 	svcpl	0x00787278
     b10:	6b636170 	blvs	18d90d8 <__Stack_Size+0x18d8cd8>
     b14:	14007465 	strne	r7, [r0], #-1125
     b18:	64000003 	strvs	r0, [r0], #-3
     b1c:	775f6c78 	undefined
     b20:	65746972 	ldrbvs	r6, [r4, #-2418]!
     b24:	726f775f 	rsbvc	r7, pc, #24903680	; 0x17c0000
     b28:	03830064 	orreq	r0, r3, #100	; 0x64
     b2c:	78640000 	stmdavc	r4!, {}^
     b30:	65725f6c 	ldrbvs	r5, [r2, #-3948]!
     b34:	775f6461 	ldrbvc	r6, [pc, -r1, ror #8]
     b38:	0064726f 	rsbeq	r7, r4, pc, ror #4
     b3c:	000003ef 	andeq	r0, r0, pc, ror #7
     b40:	5f6c7864 	svcpl	0x006c7864
     b44:	74697277 	strbtvc	r7, [r9], #-631
     b48:	79625f65 	stmdbvc	r2!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     b4c:	39006574 	stmdbcc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     b50:	64000004 	strvs	r0, [r0], #-4
     b54:	725f6c78 	subsvc	r6, pc, #30720	; 0x7800
     b58:	5f646165 	svcpl	0x00646165
     b5c:	65747962 	ldrbvs	r7, [r4, #-2402]!
     b60:	00047700 	andeq	r7, r4, r0, lsl #14
     b64:	6c786400 	cfldrdvs	mvd6, [r8]
     b68:	6e69705f 	mcrvs	0, 3, r7, cr9, cr15, {2}
     b6c:	04a10067 	strteq	r0, [r1], #103
     b70:	78640000 	stmdavc	r4!, {}^
     b74:	65745f6c 	ldrbvs	r5, [r4, #-3948]!
     b78:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
     b7c:	00657461 	rsbeq	r7, r5, r1, ror #8
     b80:	000004b6 	strheq	r0, [r0], -r6
     b84:	5f6c7864 	svcpl	0x006c7864
     b88:	74696e69 	strbtvc	r6, [r9], #-3689
     b8c:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     b90:	1000657a 	andne	r6, r0, sl, ror r5
     b94:	67000005 	strvs	r0, [r0, -r5]
     b98:	736e4962 	cmnvc	lr, #1605632	; 0x188000
     b9c:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
     ba0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     ba4:	6b636150 	blvs	18d90ec <__Stack_Size+0x18d8cec>
     ba8:	32007465 	andcc	r7, r0, #1694498816	; 0x65000000
     bac:	67000005 	strvs	r0, [r0, -r5]
     bb0:	61745362 	cmnvs	r4, r2, ror #6
     bb4:	50737574 	rsbspl	r7, r3, r4, ror r5
     bb8:	656b6361 	strbvs	r6, [fp, #-865]!
     bbc:	05440074 	strbeq	r0, [r4, #-116]
     bc0:	62670000 	rsbvs	r0, r7, #0	; 0x0
     bc4:	61507852 	cmpvs	r0, r2, asr r8
     bc8:	74656b63 	strbtvc	r6, [r5], #-2915
     bcc:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     bd0:	56006874 	undefined
     bd4:	67000005 	strvs	r0, [r0, -r5]
     bd8:	47785262 	ldrbmi	r5, [r8, -r2, ror #4]!
     bdc:	654c7465 	strbvs	r7, [ip, #-1125]
     be0:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     be4:	00056800 	andeq	r6, r5, r0, lsl #16
     be8:	43626700 	cmnmi	r2, #0	; 0x0
     bec:	536d6d6f 	cmnpl	sp, #7104	; 0x1bc0
     bf0:	75746174 	ldrbvc	r6, [r4, #-372]!
     bf4:	057a0073 	ldrbeq	r0, [sl, #-115]!
     bf8:	69670000 	stmdbvs	r7!, {}^
     bfc:	55737542 	ldrbpl	r7, [r3, #-1346]!
     c00:	676e6973 	undefined
     c04:	00000000 	andeq	r0, r0, r0
     c08:	00026a00 	andeq	r6, r2, r0, lsl #20
     c0c:	08000200 	stmdaeq	r0, {r9}
     c10:	3a000019 	bcc	c7c <__Stack_Size+0x87c>
     c14:	37000007 	strcc	r0, [r0, -r7]
     c18:	46000002 	strmi	r0, [r0], -r2
     c1c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     c20:	7465535f 	strbtvc	r5, [r5], #-863
     c24:	6574614c 	ldrbvs	r6, [r4, #-332]!
     c28:	0079636e 	rsbseq	r6, r9, lr, ror #6
     c2c:	0000025e 	andeq	r0, r0, lr, asr r2
     c30:	53414c46 	movtpl	r4, #7238	; 0x1c46
     c34:	61485f48 	cmpvs	r8, r8, asr #30
     c38:	7943666c 	stmdbvc	r3, {r2, r3, r5, r6, r9, sl, sp, lr}^
     c3c:	41656c63 	cmnmi	r5, r3, ror #24
     c40:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
     c44:	646d4373 	strbtvs	r4, [sp], #-883
     c48:	00028500 	andeq	r8, r2, r0, lsl #10
     c4c:	414c4600 	cmpmi	ip, r0, lsl #12
     c50:	505f4853 	subspl	r4, pc, r3, asr r8
     c54:	65666572 	strbvs	r6, [r6, #-1394]!
     c58:	42686374 	rsbmi	r6, r8, #-805306367	; 0xd0000001
     c5c:	65666675 	strbvs	r6, [r6, #-1653]!
     c60:	646d4372 	strbtvs	r4, [sp], #-882
     c64:	0002ac00 	andeq	sl, r2, r0, lsl #24
     c68:	414c4600 	cmpmi	ip, r0, lsl #12
     c6c:	555f4853 	ldrbpl	r4, [pc, #-2131]	; 421 <__Stack_Size+0x21>
     c70:	636f6c6e 	cmnvs	pc, #28160	; 0x6e00
     c74:	02bf006b 	adcseq	r0, pc, #107	; 0x6b
     c78:	4c460000 	marmi	acc0, r0, r6
     c7c:	5f485341 	svcpl	0x00485341
     c80:	6b636f4c 	blvs	18dc9b8 <__Stack_Size+0x18dc5b8>
     c84:	0002d200 	andeq	sp, r2, r0, lsl #4
     c88:	414c4600 	cmpmi	ip, r0, lsl #12
     c8c:	475f4853 	undefined
     c90:	73557465 	cmpvc	r5, #1694498816	; 0x65000000
     c94:	704f7265 	subvc	r7, pc, r5, ror #4
     c98:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     c9c:	65747942 	ldrbvs	r7, [r4, #-2370]!
     ca0:	0002ea00 	andeq	lr, r2, r0, lsl #20
     ca4:	414c4600 	cmpmi	ip, r0, lsl #12
     ca8:	475f4853 	undefined
     cac:	72577465 	subsvc	r7, r7, #1694498816	; 0x65000000
     cb0:	50657469 	rsbpl	r7, r5, r9, ror #8
     cb4:	65746f72 	ldrbvs	r6, [r4, #-3954]!
     cb8:	6f697463 	svcvs	0x00697463
     cbc:	74704f6e 	ldrbtvc	r4, [r0], #-3950
     cc0:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
     cc4:	00657479 	rsbeq	r7, r5, r9, ror r4
     cc8:	00000302 	andeq	r0, r0, r2, lsl #6
     ccc:	53414c46 	movtpl	r4, #7238	; 0x1c46
     cd0:	65475f48 	strbvs	r5, [r7, #-3912]
     cd4:	61655274 	smcvs	21796
     cd8:	74754f64 	ldrbtvc	r4, [r5], #-3940
     cdc:	746f7250 	strbtvc	r7, [pc], #592	; ce4 <__Stack_Size+0x8e4>
     ce0:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     ce4:	74536e6f 	ldrbvc	r6, [r3], #-3695
     ce8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     cec:	00032b00 	andeq	r2, r3, r0, lsl #22
     cf0:	414c4600 	cmpmi	ip, r0, lsl #12
     cf4:	475f4853 	undefined
     cf8:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
     cfc:	74656665 	strbtvc	r6, [r5], #-1637
     d00:	75426863 	strbvc	r6, [r2, #-2147]
     d04:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     d08:	74617453 	strbtvc	r7, [r1], #-1107
     d0c:	54007375 	strpl	r7, [r0], #-885
     d10:	46000003 	strmi	r0, [r0], -r3
     d14:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     d18:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
     d1c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     d20:	03890067 	orreq	r0, r9, #103	; 0x67
     d24:	4c460000 	marmi	acc0, r0, r6
     d28:	5f485341 	svcpl	0x00485341
     d2c:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     d30:	5367616c 	cmnpl	r7, #27	; 0x1b
     d34:	75746174 	ldrbvc	r6, [r4, #-372]!
     d38:	03c60073 	biceq	r0, r6, #115	; 0x73
     d3c:	4c460000 	marmi	acc0, r0, r6
     d40:	5f485341 	svcpl	0x00485341
     d44:	61656c43 	cmnvs	r5, r3, asr #24
     d48:	616c4672 	smcvs	50274
     d4c:	03ed0067 	mvneq	r0, #103	; 0x67
     d50:	4c460000 	marmi	acc0, r0, r6
     d54:	5f485341 	svcpl	0x00485341
     d58:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     d5c:	75746174 	ldrbvc	r6, [r4, #-372]!
     d60:	040a0073 	streq	r0, [sl], #-115
     d64:	4c460000 	marmi	acc0, r0, r6
     d68:	5f485341 	svcpl	0x00485341
     d6c:	74696157 	strbtvc	r6, [r9], #-343
     d70:	4c726f46 	ldclmi	15, cr6, [r2], #-280
     d74:	4f747361 	svcmi	0x00747361
     d78:	61726570 	cmnvs	r2, r0, ror r5
     d7c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     d80:	00049d00 	andeq	r9, r4, r0, lsl #26
     d84:	414c4600 	cmpmi	ip, r0, lsl #12
     d88:	555f4853 	ldrbpl	r4, [pc, #-2131]	; 53d <__Stack_Size+0x13d>
     d8c:	4f726573 	svcmi	0x00726573
     d90:	6f697470 	svcvs	0x00697470
     d94:	7479426e 	ldrbtvc	r4, [r9], #-622
     d98:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
     d9c:	00676966 	rsbeq	r6, r7, r6, ror #18
     da0:	000004fc 	strdeq	r0, [r0], -ip
     da4:	53414c46 	movtpl	r4, #7238	; 0x1c46
     da8:	65525f48 	ldrbvs	r5, [r2, #-3912]
     dac:	754f6461 	strbvc	r6, [pc, #-1121]	; 953 <__Stack_Size+0x553>
     db0:	6f725074 	svcvs	0x00725074
     db4:	74636574 	strbtvc	r6, [r3], #-1396
     db8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     dbc:	0000053b 	andeq	r0, r0, fp, lsr r5
     dc0:	53414c46 	movtpl	r4, #7238	; 0x1c46
     dc4:	6e455f48 	cdpvs	15, 4, cr5, cr5, cr8, {2}
     dc8:	656c6261 	strbvs	r6, [ip, #-609]!
     dcc:	74697257 	strbtvc	r7, [r9], #-599
     dd0:	6f725065 	svcvs	0x00725065
     dd4:	74636574 	strbtvc	r6, [r3], #-1396
     dd8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     ddc:	000005ba 	strheq	r0, [r0], -sl
     de0:	53414c46 	movtpl	r4, #7238	; 0x1c46
     de4:	72505f48 	subsvc	r5, r0, #288	; 0x120
     de8:	6172676f 	cmnvs	r2, pc, ror #14
     dec:	74704f6d 	ldrbtvc	r4, [r0], #-3949
     df0:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
     df4:	44657479 	strbtmi	r7, [r5], #-1145
     df8:	00617461 	rsbeq	r7, r1, r1, ror #8
     dfc:	00000609 	andeq	r0, r0, r9, lsl #12
     e00:	53414c46 	movtpl	r4, #7238	; 0x1c46
     e04:	72505f48 	subsvc	r5, r0, #288	; 0x120
     e08:	6172676f 	cmnvs	r2, pc, ror #14
     e0c:	6c61486d 	stclvs	8, cr4, [r1], #-436
     e10:	726f5766 	rsbvc	r5, pc, #26738688	; 0x1980000
     e14:	06580064 	ldrbeq	r0, [r8], -r4, rrx
     e18:	4c460000 	marmi	acc0, r0, r6
     e1c:	5f485341 	svcpl	0x00485341
     e20:	676f7250 	undefined
     e24:	576d6172 	undefined
     e28:	0064726f 	rsbeq	r7, r4, pc, ror #4
     e2c:	000006a7 	andeq	r0, r0, r7, lsr #13
     e30:	53414c46 	movtpl	r4, #7238	; 0x1c46
     e34:	72455f48 	subvc	r5, r5, #288	; 0x120
     e38:	4f657361 	svcmi	0x00657361
     e3c:	6f697470 	svcvs	0x00697470
     e40:	7479426e 	ldrbtvc	r4, [r9], #-622
     e44:	d4007365 	strle	r7, [r0], #-869
     e48:	46000006 	strmi	r0, [r0], -r6
     e4c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     e50:	6172455f 	cmnvs	r2, pc, asr r5
     e54:	6c416573 	cfstr64vs	mvdx6, [r1], {115}
     e58:	6761506c 	strbvs	r5, [r1, -ip, rrx]!
     e5c:	01007365 	tsteq	r0, r5, ror #6
     e60:	46000007 	strmi	r0, [r0], -r7
     e64:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     e68:	6172455f 	cmnvs	r2, pc, asr r5
     e6c:	61506573 	cmpvs	r0, r3, ror r5
     e70:	00006567 	andeq	r6, r0, r7, ror #10
     e74:	77000000 	strvc	r0, [r0, -r0]
     e78:	02000001 	andeq	r0, r0, #1	; 0x1
     e7c:	00204200 	eoreq	r4, r0, r0, lsl #4
     e80:	00064800 	andeq	r4, r6, r0, lsl #16
     e84:	00022b00 	andeq	r2, r2, r0, lsl #22
     e88:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     e8c:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     e90:	bb007469 	bllt	1e03c <__Stack_Size+0x1dc3c>
     e94:	47000002 	strmi	r0, [r0, -r2]
     e98:	5f4f4950 	svcpl	0x004f4950
     e9c:	75727453 	ldrbvc	r7, [r2, #-1107]!
     ea0:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
     ea4:	e0007469 	and	r7, r0, r9, ror #8
     ea8:	47000002 	strmi	r0, [r0, -r2]
     eac:	5f4f4950 	svcpl	0x004f4950
     eb0:	64616552 	strbtvs	r6, [r1], #-1362
     eb4:	75706e49 	ldrbvc	r6, [r0, #-3657]!
     eb8:	74614474 	strbtvc	r4, [r1], #-1140
     ebc:	74694261 	strbtvc	r4, [r9], #-609
     ec0:	00032300 	andeq	r2, r3, r0, lsl #6
     ec4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     ec8:	65525f4f 	ldrbvs	r5, [r2, #-3919]
     ecc:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
     ed0:	44747570 	ldrbtmi	r7, [r4], #-1392
     ed4:	00617461 	rsbeq	r7, r1, r1, ror #8
     ed8:	00000350 	andeq	r0, r0, r0, asr r3
     edc:	4f495047 	svcmi	0x00495047
     ee0:	6165525f 	cmnvs	r5, pc, asr r2
     ee4:	74754f64 	ldrbtvc	r4, [r5], #-3940
     ee8:	44747570 	ldrbtmi	r7, [r4], #-1392
     eec:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
     ef0:	97007469 	strls	r7, [r0, -r9, ror #8]
     ef4:	47000003 	strmi	r0, [r0, -r3]
     ef8:	5f4f4950 	svcpl	0x004f4950
     efc:	64616552 	strbtvs	r6, [r1], #-1362
     f00:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     f04:	61447475 	cmpvs	r4, r5, ror r4
     f08:	c4006174 	strgt	r6, [r0], #-372
     f0c:	47000003 	strmi	r0, [r0, -r3]
     f10:	5f4f4950 	svcpl	0x004f4950
     f14:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
     f18:	00737469 	rsbseq	r7, r3, r9, ror #8
     f1c:	000003f9 	strdeq	r0, [r0], -r9
     f20:	4f495047 	svcmi	0x00495047
     f24:	7365525f 	cmnvc	r5, #-268435451	; 0xf0000005
     f28:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
     f2c:	2e007374 	mcrcs	3, 0, r7, cr0, cr4, {3}
     f30:	47000004 	strmi	r0, [r0, -r4]
     f34:	5f4f4950 	svcpl	0x004f4950
     f38:	74697257 	strbtvc	r7, [r9], #-599
     f3c:	74694265 	strbtvc	r4, [r9], #-613
     f40:	00047100 	andeq	r7, r4, r0, lsl #2
     f44:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     f48:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
     f4c:	00657469 	rsbeq	r7, r5, r9, ror #8
     f50:	000004a6 	andeq	r0, r0, r6, lsr #9
     f54:	4f495047 	svcmi	0x00495047
     f58:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     f5c:	6b636f4c 	blvs	18dcc94 <__Stack_Size+0x18dc894>
     f60:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     f64:	e9006769 	stmdb	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
     f68:	47000004 	strmi	r0, [r0, -r4]
     f6c:	5f4f4950 	svcpl	0x004f4950
     f70:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     f74:	74754f74 	ldrbtvc	r4, [r5], #-3956
     f78:	43747570 	cmnmi	r4, #469762048	; 0x1c000000
     f7c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     f80:	05300067 	ldreq	r0, [r0, #-103]!
     f84:	50470000 	subpl	r0, r7, r0
     f88:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; 47 <_Minimum_Stack_Size-0xb9>
     f8c:	746e6576 	strbtvc	r6, [lr], #-1398
     f90:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     f94:	6d437475 	cfstrdvs	mvd7, [r3, #-468]
     f98:	05570064 	ldrbeq	r0, [r7, #-100]
     f9c:	50470000 	subpl	r0, r7, r0
     fa0:	505f4f49 	subspl	r4, pc, r9, asr #30
     fa4:	65526e69 	ldrbvs	r6, [r2, #-3689]
     fa8:	4370616d 	cmnmi	r0, #1073741851	; 0x4000001b
     fac:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     fb0:	05c60067 	strbeq	r0, [r6, #103]
     fb4:	50470000 	subpl	r0, r7, r0
     fb8:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; 77 <_Minimum_Stack_Size-0x89>
     fbc:	4c495458 	cfstrdmi	mvd5, [r9], {88}
     fc0:	43656e69 	cmnmi	r5, #1680	; 0x690
     fc4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     fc8:	060d0067 	streq	r0, [sp], -r7, rrx
     fcc:	50470000 	subpl	r0, r7, r0
     fd0:	415f4f49 	cmpmi	pc, r9, asr #30
     fd4:	444f4946 	strbmi	r4, [pc], #2374	; fdc <__Stack_Size+0xbdc>
     fd8:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     fdc:	06220074 	undefined
     fe0:	50470000 	subpl	r0, r7, r0
     fe4:	445f4f49 	ldrbmi	r4, [pc], #3913	; fec <__Stack_Size+0xbec>
     fe8:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     fec:	00000074 	andeq	r0, r0, r4, ror r0
     ff0:	035c0000 	cmpeq	ip, #0	; 0x0
     ff4:	00020000 	andeq	r0, r2, r0
     ff8:	0000268a 	andeq	r2, r0, sl, lsl #13
     ffc:	000008e7 	andeq	r0, r0, r7, ror #17
    1000:	00000310 	andeq	r0, r0, r0, lsl r3
    1004:	4349564e 	movtmi	r5, #38478	; 0x964e
    1008:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    100c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1010:	00000335 	andeq	r0, r0, r5, lsr r3
    1014:	4349564e 	movtmi	r5, #38478	; 0x964e
    1018:	4243535f 	submi	r5, r3, #2080374785	; 0x7c000001
    101c:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1020:	58007469 	stmdapl	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1024:	4e000003 	cdpmi	0, 0, cr0, cr0, cr3, {0}
    1028:	5f434956 	svcpl	0x00434956
    102c:	6f697250 	svcvs	0x00697250
    1030:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1034:	756f7247 	strbvc	r7, [pc, #-583]!	; df5 <__Stack_Size+0x9f5>
    1038:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    103c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1040:	0000037f 	andeq	r0, r0, pc, ror r3
    1044:	4349564e 	movtmi	r5, #38478	; 0x964e
    1048:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    104c:	03f10074 	mvnseq	r0, #116	; 0x74
    1050:	564e0000 	strbpl	r0, [lr], -r0
    1054:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1058:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    105c:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    1060:	04160074 	ldreq	r0, [r6], #-116
    1064:	564e0000 	strbpl	r0, [lr], -r0
    1068:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    106c:	75437465 	strbvc	r7, [r3, #-1125]
    1070:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1074:	6e655074 	mcrvs	0, 3, r5, cr5, cr4, {3}
    1078:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    107c:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    1080:	6e6e6168 	powvsez	f6, f6, #0.0
    1084:	2e006c65 	cdpcs	12, 0, cr6, cr0, cr5, {3}
    1088:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
    108c:	5f434956 	svcpl	0x00434956
    1090:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    1094:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1098:	656e6e61 	strbvs	r6, [lr, #-3681]!
    109c:	6e65506c 	cdpvs	0, 6, cr5, cr5, cr12, {3}
    10a0:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    10a4:	53746942 	cmnpl	r4, #1081344	; 0x108000
    10a8:	75746174 	ldrbvc	r6, [r4, #-372]!
    10ac:	04750073 	ldrbteq	r0, [r5], #-115
    10b0:	564e0000 	strbpl	r0, [lr], -r0
    10b4:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    10b8:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    10bc:	61684351 	cmnvs	r8, r1, asr r3
    10c0:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    10c4:	646e6550 	strbtvs	r6, [lr], #-1360
    10c8:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    10cc:	9c007469 	cfstrsls	mvf7, [r0], {105}
    10d0:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
    10d4:	5f434956 	svcpl	0x00434956
    10d8:	61656c43 	cmnvs	r5, r3, asr #24
    10dc:	51524972 	cmppl	r2, r2, ror r9
    10e0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    10e4:	506c656e 	rsbpl	r6, ip, lr, ror #10
    10e8:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    10ec:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    10f0:	04c50074 	strbeq	r0, [r5], #116
    10f4:	564e0000 	strbpl	r0, [lr], -r0
    10f8:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    10fc:	75437465 	strbvc	r7, [r3, #-1125]
    1100:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1104:	74634174 	strbtvc	r4, [r3], #-372
    1108:	48657669 	stmdami	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    110c:	6c646e61 	stclvs	14, cr6, [r4], #-388
    1110:	dd007265 	sfmle	f7, 4, [r0, #-404]
    1114:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
    1118:	5f434956 	svcpl	0x00434956
    111c:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    1120:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1124:	656e6e61 	strbvs	r6, [lr, #-3681]!
    1128:	7463416c 	strbtvc	r4, [r3], #-364
    112c:	42657669 	rsbmi	r7, r5, #110100480	; 0x6900000
    1130:	74537469 	ldrbvc	r7, [r3], #-1129
    1134:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1138:	00052400 	andeq	r2, r5, r0, lsl #8
    113c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1140:	65475f43 	strbvs	r5, [r7, #-3907]
    1144:	55504374 	ldrbpl	r4, [r0, #-884]
    1148:	3c004449 	cfstrscc	mvf4, [r0], {73}
    114c:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    1150:	5f434956 	svcpl	0x00434956
    1154:	56746553 	undefined
    1158:	6f746365 	svcvs	0x00746365
    115c:	62615472 	rsbvs	r5, r1, #1912602624	; 0x72000000
    1160:	7300656c 	movwvc	r6, #1388	; 0x56c
    1164:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    1168:	5f434956 	svcpl	0x00434956
    116c:	656e6547 	strbvs	r6, [lr, #-1351]!
    1170:	65746172 	ldrbvs	r6, [r4, #-370]!
    1174:	74737953 	ldrbtvc	r7, [r3], #-2387
    1178:	65526d65 	ldrbvs	r6, [r2, #-3429]
    117c:	00746573 	rsbseq	r6, r4, r3, ror r5
    1180:	00000587 	andeq	r0, r0, r7, lsl #11
    1184:	4349564e 	movtmi	r5, #38478	; 0x964e
    1188:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
    118c:	74617265 	strbtvc	r7, [r1], #-613
    1190:	726f4365 	rsbvc	r4, pc, #-1811939327	; 0x94000001
    1194:	73655265 	cmnvc	r5, #1342177286	; 0x50000006
    1198:	9b007465 	blls	1e334 <__Stack_Size+0x1df34>
    119c:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    11a0:	5f434956 	svcpl	0x00434956
    11a4:	74737953 	ldrbtvc	r7, [r3], #-2387
    11a8:	504c6d65 	subpl	r6, ip, r5, ror #26
    11ac:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    11b0:	d0006769 	andle	r6, r0, r9, ror #14
    11b4:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    11b8:	5f434956 	svcpl	0x00434956
    11bc:	74737953 	ldrbtvc	r7, [r3], #-2387
    11c0:	61486d65 	cmpvs	r8, r5, ror #26
    11c4:	656c646e 	strbvs	r6, [ip, #-1134]!
    11c8:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    11cc:	00676966 	rsbeq	r6, r7, r6, ror #18
    11d0:	00000615 	andeq	r0, r0, r5, lsl r6
    11d4:	4349564e 	movtmi	r5, #38478	; 0x964e
    11d8:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    11dc:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    11e0:	6c646e61 	stclvs	14, cr6, [r4], #-388
    11e4:	72507265 	subsvc	r7, r0, #1342177286	; 0x50000006
    11e8:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    11ec:	6f437974 	svcvs	0x00437974
    11f0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    11f4:	00069800 	andeq	r9, r6, r0, lsl #16
    11f8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    11fc:	65475f43 	strbvs	r5, [r7, #-3907]
    1200:	73795374 	cmnvc	r9, #-805306367	; 0xd0000001
    1204:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1208:	6c646e61 	stclvs	14, cr6, [r4], #-388
    120c:	65507265 	ldrbvs	r7, [r0, #-613]
    1210:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1214:	74694267 	strbtvc	r4, [r9], #-615
    1218:	74617453 	strbtvc	r7, [r1], #-1107
    121c:	ed007375 	stc	3, cr7, [r0, #-468]
    1220:	4e000006 	cdpmi	0, 0, cr0, cr0, cr6, {0}
    1224:	5f434956 	svcpl	0x00434956
    1228:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
    122c:	65747379 	ldrbvs	r7, [r4, #-889]!
    1230:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1234:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    1238:	646e6550 	strbtvs	r6, [lr], #-1360
    123c:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1240:	22007469 	andcs	r7, r0, #1761607680	; 0x69000000
    1244:	4e000007 	cdpmi	0, 0, cr0, cr0, cr7, {0}
    1248:	5f434956 	svcpl	0x00434956
    124c:	61656c43 	cmnvs	r5, r3, asr #24
    1250:	73795372 	cmnvc	r9, #-939524095	; 0xc8000001
    1254:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1258:	6c646e61 	stclvs	14, cr6, [r4], #-388
    125c:	65507265 	ldrbvs	r7, [r0, #-613]
    1260:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1264:	74694267 	strbtvc	r4, [r9], #-615
    1268:	00075700 	andeq	r5, r7, r0, lsl #14
    126c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1270:	65475f43 	strbvs	r5, [r7, #-3907]
    1274:	73795374 	cmnvc	r9, #-805306367	; 0xd0000001
    1278:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    127c:	6c646e61 	stclvs	14, cr6, [r4], #-388
    1280:	63417265 	movtvs	r7, #4709	; 0x1265
    1284:	65766974 	ldrbvs	r6, [r6, #-2420]!
    1288:	53746942 	cmnpl	r4, #1081344	; 0x108000
    128c:	75746174 	ldrbvc	r6, [r4, #-372]!
    1290:	07aa0073 	undefined
    1294:	564e0000 	strbpl	r0, [lr], -r0
    1298:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    129c:	61467465 	cmpvs	r6, r5, ror #8
    12a0:	48746c75 	ldmdami	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    12a4:	6c646e61 	stclvs	14, cr6, [r4], #-388
    12a8:	6f537265 	svcvs	0x00537265
    12ac:	65637275 	strbvs	r7, [r3, #-629]!
    12b0:	08070073 	stmdaeq	r7, {r0, r1, r4, r5, r6}
    12b4:	564e0000 	strbpl	r0, [lr], -r0
    12b8:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    12bc:	61467465 	cmpvs	r6, r5, ror #8
    12c0:	41746c75 	cmnmi	r4, r5, ror ip
    12c4:	65726464 	ldrbvs	r6, [r2, #-1124]!
    12c8:	50007373 	andpl	r7, r0, r3, ror r3
    12cc:	4e000008 	cdpmi	0, 0, cr0, cr0, cr8, {0}
    12d0:	5f434956 	svcpl	0x00434956
    12d4:	42746547 	rsbsmi	r6, r4, #297795584	; 0x11c00000
    12d8:	50455341 	subpl	r5, r5, r1, asr #6
    12dc:	69004952 	stmdbvs	r0, {r1, r4, r6, r8, fp, lr}
    12e0:	4e000008 	cdpmi	0, 0, cr0, cr0, cr8, {0}
    12e4:	5f434956 	svcpl	0x00434956
    12e8:	45534142 	ldrbmi	r4, [r3, #-322]
    12ec:	43495250 	movtmi	r5, #37456	; 0x9250
    12f0:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    12f4:	08920047 	ldmeq	r2, {r0, r1, r2, r6}
    12f8:	564e0000 	strbpl	r0, [lr], -r0
    12fc:	525f4349 	subspl	r4, pc, #603979777	; 0x24000001
    1300:	54455345 	strbpl	r5, [r5], #-837
    1304:	4c554146 	ldfmie	f4, [r5], {70}
    1308:	53414d54 	movtpl	r4, #7508	; 0x1d54
    130c:	08a7004b 	stmiaeq	r7!, {r0, r1, r3, r6}
    1310:	564e0000 	strbpl	r0, [lr], -r0
    1314:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1318:	41465445 	cmpmi	r6, r5, asr #8
    131c:	4d544c55 	ldclmi	12, cr4, [r4, #-340]
    1320:	004b5341 	subeq	r5, fp, r1, asr #6
    1324:	000008bc 	strheq	r0, [r0], -ip
    1328:	4349564e 	movtmi	r5, #38478	; 0x964e
    132c:	5345525f 	movtpl	r5, #21087	; 0x525f
    1330:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    1334:	53414d49 	movtpl	r4, #7497	; 0x1d49
    1338:	08d1004b 	ldmeq	r1, {r0, r1, r3, r6}^
    133c:	564e0000 	strbpl	r0, [lr], -r0
    1340:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1344:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    1348:	53414d49 	movtpl	r4, #7497	; 0x1d49
    134c:	0000004b 	andeq	r0, r0, fp, asr #32
    1350:	00c70000 	sbceq	r0, r7, r0
    1354:	00020000 	andeq	r0, r2, r0
    1358:	00002f71 	andeq	r2, r0, r1, ror pc
    135c:	00000247 	andeq	r0, r0, r7, asr #4
    1360:	000000d3 	ldrdeq	r0, [r0], -r3
    1364:	5f525750 	svcpl	0x00525750
    1368:	6b636142 	blvs	18d9878 <__Stack_Size+0x18d9478>
    136c:	63417075 	movtvs	r7, #4213	; 0x1075
    1370:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    1374:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1378:	000000f8 	strdeq	r0, [r0], -r8
    137c:	5f525750 	svcpl	0x00525750
    1380:	43445650 	movtmi	r5, #18000	; 0x4650
    1384:	1d00646d 	cfstrsne	mvf6, [r0, #-436]
    1388:	50000001 	andpl	r0, r0, r1
    138c:	505f5257 	subspl	r5, pc, r7, asr r2
    1390:	654c4456 	strbvs	r4, [ip, #-1110]
    1394:	436c6576 	cmnmi	ip, #494927872	; 0x1d800000
    1398:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    139c:	01530067 	cmpeq	r3, r7, rrx
    13a0:	57500000 	ldrbpl	r0, [r0, -r0]
    13a4:	61575f52 	cmpvs	r7, r2, asr pc
    13a8:	7055656b 	subsvc	r6, r5, fp, ror #10
    13ac:	436e6950 	cmnmi	lr, #1310720	; 0x140000
    13b0:	7800646d 	stmdavc	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    13b4:	50000001 	andpl	r0, r0, r1
    13b8:	475f5257 	undefined
    13bc:	6c467465 	cfstrdvs	mvd7, [r6], {101}
    13c0:	74536761 	ldrbvc	r6, [r3], #-1889
    13c4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    13c8:	0001ae00 	andeq	sl, r1, r0, lsl #28
    13cc:	52575000 	subspl	r5, r7, #0	; 0x0
    13d0:	656c435f 	strbvs	r4, [ip, #-863]!
    13d4:	6c467261 	sfmvs	f7, 2, [r6], {97}
    13d8:	d5006761 	strle	r6, [r0, #-1889]
    13dc:	50000001 	andpl	r0, r0, r1
    13e0:	455f5257 	ldrbmi	r5, [pc, #-599]	; 1191 <__Stack_Size+0xd91>
    13e4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    13e8:	4e415453 	mcrmi	4, 2, r5, cr1, cr3, {2}
    13ec:	4d594244 	lfmmi	f4, 2, [r9, #-272]
    13f0:	0065646f 	rsbeq	r6, r5, pc, ror #8
    13f4:	000001ea 	andeq	r0, r0, sl, ror #3
    13f8:	5f525750 	svcpl	0x00525750
    13fc:	65746e45 	ldrbvs	r6, [r4, #-3653]!
    1400:	4f545372 	svcmi	0x00545372
    1404:	646f4d50 	strbtvs	r4, [pc], #3408	; 140c <__Stack_Size+0x100c>
    1408:	02310065 	eorseq	r0, r1, #101	; 0x65
    140c:	57500000 	ldrbpl	r0, [r0, -r0]
    1410:	65445f52 	strbvs	r5, [r4, #-3922]
    1414:	74696e49 	strbtvc	r6, [r9], #-3657
    1418:	00000000 	andeq	r0, r0, r0
    141c:	0002c000 	andeq	ip, r2, r0
    1420:	b8000200 	stmdalt	r0, {r9}
    1424:	bd000031 	stclt	0, cr0, [r0, #-196]
    1428:	14000008 	strne	r0, [r0], #-8
    142c:	52000002 	andpl	r0, r0, #2	; 0x2
    1430:	445f4343 	ldrbmi	r4, [pc], #835	; 1438 <__Stack_Size+0x1038>
    1434:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1438:	02270074 	eoreq	r0, r7, #116	; 0x74
    143c:	43520000 	cmpmi	r2, #0	; 0x0
    1440:	53485f43 	movtpl	r5, #36675	; 0x8f43
    1444:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
    1448:	00676966 	rsbeq	r6, r7, r6, ror #18
    144c:	0000024c 	andeq	r0, r0, ip, asr #4
    1450:	5f434352 	svcpl	0x00434352
    1454:	74696157 	strbtvc	r6, [r9], #-343
    1458:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    145c:	74534553 	ldrbvc	r4, [r3], #-1363
    1460:	55747261 	ldrbpl	r7, [r4, #-609]!
    1464:	02f10070 	rscseq	r0, r1, #112	; 0x70
    1468:	43520000 	cmpmi	r2, #0	; 0x0
    146c:	64415f43 	strbvs	r5, [r1], #-3907
    1470:	7473756a 	ldrbtvc	r7, [r3], #-1386
    1474:	43495348 	movtmi	r5, #37704	; 0x9348
    1478:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
    147c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1480:	61566e6f 	cmpvs	r6, pc, ror #28
    1484:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1488:	00000323 	andeq	r0, r0, r3, lsr #6
    148c:	5f434352 	svcpl	0x00434352
    1490:	43495348 	movtmi	r5, #37704	; 0x9348
    1494:	4a00646d 	bmi	1a650 <__Stack_Size+0x1a250>
    1498:	52000003 	andpl	r0, r0, #3	; 0x3
    149c:	505f4343 	subspl	r4, pc, r3, asr #6
    14a0:	6f434c4c 	svcvs	0x00434c4c
    14a4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    14a8:	00039100 	andeq	r9, r3, r0, lsl #2
    14ac:	43435200 	movtmi	r5, #12800	; 0x3200
    14b0:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    14b4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    14b8:	000003b8 	strheq	r0, [r0], -r8
    14bc:	5f434352 	svcpl	0x00434352
    14c0:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    14c4:	6f434b4c 	svcvs	0x00434b4c
    14c8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    14cc:	0003f100 	andeq	pc, r3, r0, lsl #2
    14d0:	43435200 	movtmi	r5, #12800	; 0x3200
    14d4:	7465475f 	strbtvc	r4, [r5], #-1887
    14d8:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    14dc:	6f534b4c 	svcvs	0x00534b4c
    14e0:	65637275 	strbvs	r7, [r3, #-629]!
    14e4:	00040900 	andeq	r0, r4, r0, lsl #18
    14e8:	43435200 	movtmi	r5, #12800	; 0x3200
    14ec:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
    14f0:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    14f4:	00676966 	rsbeq	r6, r7, r6, ror #18
    14f8:	00000442 	andeq	r0, r0, r2, asr #8
    14fc:	5f434352 	svcpl	0x00434352
    1500:	4b4c4350 	blmi	1312248 <__Stack_Size+0x1311e48>
    1504:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
    1508:	00676966 	rsbeq	r6, r7, r6, ror #18
    150c:	0000047b 	andeq	r0, r0, fp, ror r4
    1510:	5f434352 	svcpl	0x00434352
    1514:	4b4c4350 	blmi	131225c <__Stack_Size+0x1311e5c>
    1518:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    151c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1520:	000004b0 	strheq	r0, [r0], -r0
    1524:	5f434352 	svcpl	0x00434352
    1528:	6f435449 	svcvs	0x00435449
    152c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1530:	0004e500 	andeq	lr, r4, r0, lsl #10
    1534:	43435200 	movtmi	r5, #12800	; 0x3200
    1538:	4253555f 	subsmi	r5, r3, #398458880	; 0x17c00000
    153c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1540:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1544:	050c0067 	streq	r0, [ip, #-103]
    1548:	43520000 	cmpmi	r2, #0	; 0x0
    154c:	44415f43 	strbmi	r5, [r1], #-3907
    1550:	4b4c4343 	blmi	1312264 <__Stack_Size+0x1311e64>
    1554:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1558:	45006769 	strmi	r6, [r0, #-1897]
    155c:	52000005 	andpl	r0, r0, #5	; 0x5
    1560:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3
    1564:	6f434553 	svcvs	0x00434553
    1568:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    156c:	00056c00 	andeq	r6, r5, r0, lsl #24
    1570:	43435200 	movtmi	r5, #12800	; 0x3200
    1574:	49534c5f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    1578:	00646d43 	rsbeq	r6, r4, r3, asr #26
    157c:	00000593 	muleq	r0, r3, r5
    1580:	5f434352 	svcpl	0x00434352
    1584:	43435452 	movtmi	r5, #13394	; 0x3452
    1588:	6f434b4c 	svcvs	0x00434b4c
    158c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1590:	0005bc00 	andeq	fp, r5, r0, lsl #24
    1594:	43435200 	movtmi	r5, #12800	; 0x3200
    1598:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    159c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    15a0:	e300646d 	movw	r6, #1133	; 0x46d
    15a4:	52000005 	andpl	r0, r0, #5	; 0x5
    15a8:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    15ac:	6c437465 	cfstrdvs	mvd7, [r3], {101}
    15b0:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    15b4:	71657246 	cmnvc	r5, r6, asr #4
    15b8:	00064a00 	andeq	r4, r6, r0, lsl #20
    15bc:	43435200 	movtmi	r5, #12800	; 0x3200
    15c0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    15c4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    15c8:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    15cc:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    15d0:	7f00646d 	svcvc	0x0000646d
    15d4:	52000006 	andpl	r0, r0, #6	; 0x6
    15d8:	415f4343 	cmpmi	pc, r3, asr #6
    15dc:	50324250 	eorspl	r4, r2, r0, asr r2
    15e0:	70697265 	rsbvc	r7, r9, r5, ror #4
    15e4:	6f6c4368 	svcvs	0x006c4368
    15e8:	6d436b63 	vstrvs	d22, [r3, #-396]
    15ec:	06b40064 	ldrteq	r0, [r4], r4, rrx
    15f0:	43520000 	cmpmi	r2, #0	; 0x0
    15f4:	50415f43 	subpl	r5, r1, r3, asr #30
    15f8:	65503142 	ldrbvs	r3, [r0, #-322]
    15fc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1600:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1604:	646d436b 	strbtvs	r4, [sp], #-875
    1608:	0006e900 	andeq	lr, r6, r0, lsl #18
    160c:	43435200 	movtmi	r5, #12800	; 0x3200
    1610:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1614:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1618:	52687069 	rsbpl	r7, r8, #105	; 0x69
    161c:	74657365 	strbtvc	r7, [r5], #-869
    1620:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1624:	0000071e 	andeq	r0, r0, lr, lsl r7
    1628:	5f434352 	svcpl	0x00434352
    162c:	31425041 	cmpcc	r2, r1, asr #32
    1630:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1634:	65526870 	ldrbvs	r6, [r2, #-2160]
    1638:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    163c:	5300646d 	movwpl	r6, #1133	; 0x46d
    1640:	52000007 	andpl	r0, r0, #7	; 0x7
    1644:	425f4343 	subsmi	r4, pc, #201326593	; 0xc000001
    1648:	756b6361 	strbvc	r6, [fp, #-865]!
    164c:	73655270 	cmnvc	r5, #7	; 0x7
    1650:	6d437465 	cfstrdvs	mvd7, [r3, #-404]
    1654:	077a0064 	ldrbeq	r0, [sl, -r4, rrx]!
    1658:	43520000 	cmpmi	r2, #0	; 0x0
    165c:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1660:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    1664:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
    1668:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
    166c:	65747379 	ldrbvs	r7, [r4, #-889]!
    1670:	646d436d 	strbtvs	r4, [sp], #-877
    1674:	0007a100 	andeq	sl, r7, r0, lsl #2
    1678:	43435200 	movtmi	r5, #12800	; 0x3200
    167c:	4f434d5f 	svcmi	0x00434d5f
    1680:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1684:	c8006769 	stmdagt	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    1688:	52000007 	andpl	r0, r0, #7	; 0x7
    168c:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1690:	6c467465 	cfstrdvs	mvd7, [r6], {101}
    1694:	74536761 	ldrbvc	r6, [r3], #-1889
    1698:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    169c:	0007fc00 	andeq	pc, r7, r0, lsl #24
    16a0:	43435200 	movtmi	r5, #12800	; 0x3200
    16a4:	656c435f 	strbvs	r4, [ip, #-863]!
    16a8:	6c467261 	sfmvs	f7, 2, [r6], {97}
    16ac:	10006761 	andne	r6, r0, r1, ror #14
    16b0:	52000008 	andpl	r0, r0, #8	; 0x8
    16b4:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    16b8:	54497465 	strbpl	r7, [r9], #-1125
    16bc:	74617453 	strbtvc	r7, [r1], #-1107
    16c0:	49007375 	stmdbmi	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    16c4:	52000008 	andpl	r0, r0, #8	; 0x8
    16c8:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    16cc:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    16d0:	65505449 	ldrbvs	r5, [r0, #-1097]
    16d4:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    16d8:	74694267 	strbtvc	r4, [r9], #-615
    16dc:	00000000 	andeq	r0, r0, r0
    16e0:	00009d00 	andeq	r9, r0, r0, lsl #26
    16e4:	75000200 	strvc	r0, [r0, #-512]
    16e8:	ef00003a 	svc	0x0000003a
    16ec:	f7000001 	undefined instruction 0xf7000001
    16f0:	53000000 	movwpl	r0, #0	; 0x0
    16f4:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    16f8:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    16fc:	6f534b4c 	svcvs	0x00534b4c
    1700:	65637275 	strbvs	r7, [r3, #-629]!
    1704:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1708:	1c006769 	stcne	7, cr6, [r0], {105}
    170c:	53000001 	movwpl	r0, #1	; 0x1
    1710:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1714:	535f6b63 	cmppl	pc, #101376	; 0x18c00
    1718:	65527465 	ldrbvs	r7, [r2, #-1125]
    171c:	64616f6c 	strbtvs	r6, [r1], #-3948
    1720:	00014100 	andeq	r4, r1, r0, lsl #2
    1724:	73795300 	cmnvc	r9, #0	; 0x0
    1728:	6b636954 	blvs	18dbc80 <__Stack_Size+0x18db880>
    172c:	756f435f 	strbvc	r4, [pc, #-863]!	; 13d5 <__Stack_Size+0xfd5>
    1730:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1734:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1738:	00000166 	andeq	r0, r0, r6, ror #2
    173c:	54737953 	ldrbtpl	r7, [r3], #-2387
    1740:	5f6b6369 	svcpl	0x006b6369
    1744:	6f435449 	svcvs	0x00435449
    1748:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    174c:	00018b00 	andeq	r8, r1, r0, lsl #22
    1750:	73795300 	cmnvc	r9, #0	; 0x0
    1754:	6b636954 	blvs	18dbcac <__Stack_Size+0x18db8ac>
    1758:	7465475f 	strbtvc	r4, [r5], #-1887
    175c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1760:	00726574 	rsbseq	r6, r2, r4, ror r5
    1764:	000001a2 	andeq	r0, r0, r2, lsr #3
    1768:	54737953 	ldrbtpl	r7, [r3], #-2387
    176c:	5f6b6369 	svcpl	0x006b6369
    1770:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1774:	5367616c 	cmnpl	r7, #27	; 0x1b
    1778:	75746174 	ldrbvc	r6, [r4, #-372]!
    177c:	00000073 	andeq	r0, r0, r3, ror r0
    1780:	07ac0000 	streq	r0, [ip, r0]!
    1784:	00020000 	andeq	r0, r2, r0
    1788:	00003c64 	andeq	r3, r0, r4, ror #24
    178c:	00002149 	andeq	r2, r0, r9, asr #2
    1790:	00000778 	andeq	r0, r0, r8, ror r7
    1794:	5f4d4954 	svcpl	0x004d4954
    1798:	656d6954 	strbvs	r6, [sp, #-2388]!
    179c:	65736142 	ldrbvs	r6, [r3, #-322]!
    17a0:	74696e49 	strbtvc	r6, [r9], #-3657
    17a4:	0007b600 	andeq	fp, r7, r0, lsl #12
    17a8:	4d495400 	cfstrdmi	mvd5, [r9]
    17ac:	31434f5f 	cmpcc	r3, pc, asr pc
    17b0:	74696e49 	strbtvc	r6, [r9], #-3657
    17b4:	00082100 	andeq	r2, r8, r0, lsl #2
    17b8:	4d495400 	cfstrdmi	mvd5, [r9]
    17bc:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    17c0:	74696e49 	strbtvc	r6, [r9], #-3657
    17c4:	00088c00 	andeq	r8, r8, r0, lsl #24
    17c8:	4d495400 	cfstrdmi	mvd5, [r9]
    17cc:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    17d0:	74696e49 	strbtvc	r6, [r9], #-3657
    17d4:	0008f700 	andeq	pc, r8, r0, lsl #14
    17d8:	4d495400 	cfstrdmi	mvd5, [r9]
    17dc:	34434f5f 	strbcc	r4, [r3], #-3935
    17e0:	74696e49 	strbtvc	r6, [r9], #-3657
    17e4:	00096200 	andeq	r6, r9, r0, lsl #4
    17e8:	4d495400 	cfstrdmi	mvd5, [r9]
    17ec:	4943495f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    17f0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    17f4:	00000b2e 	andeq	r0, r0, lr, lsr #22
    17f8:	5f4d4954 	svcpl	0x004d4954
    17fc:	494d5750 	stmdbmi	sp, {r4, r6, r8, r9, sl, ip, lr}^
    1800:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1804:	17006769 	strne	r6, [r0, -r9, ror #14]
    1808:	5400000d 	strpl	r0, [r0], #-13
    180c:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    1810:	43525444 	cmpmi	r2, #1140850688	; 0x44000000
    1814:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1818:	0d520067 	ldcleq	0, cr0, [r2, #-412]
    181c:	49540000 	ldmdbmi	r4, {}^
    1820:	69545f4d 	ldmdbvs	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1824:	6142656d 	cmpvs	r2, sp, ror #10
    1828:	74536573 	ldrbvc	r6, [r3], #-1395
    182c:	74637572 	strbtvc	r7, [r3], #-1394
    1830:	74696e49 	strbtvc	r6, [r9], #-3657
    1834:	000d7900 	andeq	r7, sp, r0, lsl #18
    1838:	4d495400 	cfstrdmi	mvd5, [r9]
    183c:	53434f5f 	movtpl	r4, #16223	; 0x3f5f
    1840:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    1844:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    1848:	0da00074 	stceq	0, cr0, [r0, #464]!
    184c:	49540000 	ldmdbmi	r4, {}^
    1850:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    1854:	75727453 	ldrbvc	r7, [r2, #-1107]!
    1858:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    185c:	c7007469 	strgt	r7, [r0, -r9, ror #8]
    1860:	5400000d 	strpl	r0, [r0], #-13
    1864:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    1868:	53525444 	cmppl	r2, #1140850688	; 0x44000000
    186c:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    1870:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    1874:	0dee0074 	stcleq	0, cr0, [lr, #464]!
    1878:	49540000 	ldmdbmi	r4, {}^
    187c:	6d435f4d 	stclvs	15, cr5, [r3, #-308]
    1880:	0e230064 	cdpeq	0, 2, cr0, cr3, cr4, {3}
    1884:	49540000 	ldmdbmi	r4, {}^
    1888:	74435f4d 	strbvc	r5, [r3], #-3917
    188c:	57506c72 	undefined
    1890:	74754f4d 	ldrbtvc	r4, [r5], #-3917
    1894:	73747570 	cmnvc	r4, #469762048	; 0x1c000000
    1898:	000e5800 	andeq	r5, lr, r0, lsl #16
    189c:	4d495400 	cfstrdmi	mvd5, [r9]
    18a0:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    18a4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    18a8:	0e9b0067 	cdpeq	0, 9, cr0, cr11, cr7, {3}
    18ac:	49540000 	ldmdbmi	r4, {}^
    18b0:	65475f4d 	strbvs	r5, [r7, #-3917]
    18b4:	6172656e 	cmnvs	r2, lr, ror #10
    18b8:	76456574 	undefined
    18bc:	00746e65 	rsbseq	r6, r4, r5, ror #28
    18c0:	00000ed0 	ldrdeq	r0, [r0], -r0
    18c4:	5f4d4954 	svcpl	0x004d4954
    18c8:	43414d44 	movtmi	r4, #7492	; 0x1d44
    18cc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    18d0:	0f150067 	svceq	0x00150067
    18d4:	49540000 	ldmdbmi	r4, {}^
    18d8:	4d445f4d 	stclmi	15, cr5, [r4, #-308]
    18dc:	646d4341 	strbtvs	r4, [sp], #-833
    18e0:	000f5800 	andeq	r5, pc, r0, lsl #16
    18e4:	4d495400 	cfstrdmi	mvd5, [r9]
    18e8:	746e495f 	strbtvc	r4, [lr], #-2399
    18ec:	616e7265 	cmnvs	lr, r5, ror #4
    18f0:	6f6c436c 	svcvs	0x006c436c
    18f4:	6f436b63 	svcvs	0x00436b63
    18f8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    18fc:	000f7f00 	andeq	r7, pc, r0, lsl #30
    1900:	4d495400 	cfstrdmi	mvd5, [r9]
    1904:	5254495f 	subspl	r4, r4, #1556480	; 0x17c000
    1908:	74784578 	ldrbtvc	r4, [r8], #-1400
    190c:	616e7265 	cmnvs	lr, r5, ror #4
    1910:	6f6c436c 	svcvs	0x006c436c
    1914:	6f436b63 	svcvs	0x00436b63
    1918:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    191c:	000fe400 	andeq	lr, pc, r0, lsl #8
    1920:	4d495400 	cfstrdmi	mvd5, [r9]
    1924:	7849545f 	stmdavc	r9, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    1928:	65747845 	ldrbvs	r7, [r4, #-2117]!
    192c:	6c616e72 	stclvs	14, cr6, [r1], #-456
    1930:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1934:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    1938:	00676966 	rsbeq	r6, r7, r6, ror #18
    193c:	000010f8 	strdeq	r1, [r0], -r8
    1940:	5f4d4954 	svcpl	0x004d4954
    1944:	43525445 	cmpmi	r2, #1157627904	; 0x45000000
    1948:	6b636f6c 	blvs	18dd700 <__Stack_Size+0x18dd300>
    194c:	65646f4d 	strbvs	r6, [r4, #-3917]!
    1950:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
    1954:	00676966 	rsbeq	r6, r7, r6, ror #18
    1958:	00001193 	muleq	r0, r3, r1
    195c:	5f4d4954 	svcpl	0x004d4954
    1960:	43525445 	cmpmi	r2, #1157627904	; 0x45000000
    1964:	6b636f6c 	blvs	18dd71c <__Stack_Size+0x18dd31c>
    1968:	65646f4d 	strbvs	r6, [r4, #-3917]!
    196c:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    1970:	00676966 	rsbeq	r6, r7, r6, ror #18
    1974:	00001220 	andeq	r1, r0, r0, lsr #4
    1978:	5f4d4954 	svcpl	0x004d4954
    197c:	43525445 	cmpmi	r2, #1157627904	; 0x45000000
    1980:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1984:	125b0067 	subsne	r0, fp, #103	; 0x67
    1988:	49540000 	ldmdbmi	r4, {}^
    198c:	72505f4d 	subsvc	r5, r0, #308	; 0x134
    1990:	61637365 	cmnvs	r3, r5, ror #6
    1994:	4372656c 	cmnmi	r2, #452984832	; 0x1b000000
    1998:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    199c:	129e0067 	addsne	r0, lr, #103	; 0x67
    19a0:	49540000 	ldmdbmi	r4, {}^
    19a4:	6f435f4d 	svcvs	0x00435f4d
    19a8:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    19ac:	646f4d72 	strbtvs	r4, [pc], #3442	; 19b4 <__Stack_Size+0x15b4>
    19b0:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    19b4:	00676966 	rsbeq	r6, r7, r6, ror #18
    19b8:	000012e5 	andeq	r1, r0, r5, ror #5
    19bc:	5f4d4954 	svcpl	0x004d4954
    19c0:	656c6553 	strbvs	r6, [ip, #-1363]!
    19c4:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    19c8:	54747570 	ldrbtpl	r7, [r4], #-1392
    19cc:	67676972 	undefined
    19d0:	12007265 	andne	r7, r0, #1342177286	; 0x50000006
    19d4:	54000013 	strpl	r0, [r0], #-19
    19d8:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; c97 <__Stack_Size+0x897>
    19dc:	646f636e 	strbtvs	r6, [pc], #878	; 19e4 <__Stack_Size+0x15e4>
    19e0:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
    19e4:	66726574 	undefined
    19e8:	43656361 	cmnmi	r5, #-2080374783	; 0x84000001
    19ec:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    19f0:	13950067 	orrsne	r0, r5, #103	; 0x67
    19f4:	49540000 	ldmdbmi	r4, {}^
    19f8:	6f465f4d 	svcvs	0x00465f4d
    19fc:	64656372 	strbtvs	r6, [r5], #-882
    1a00:	4331434f 	teqmi	r1, #1006632961	; 0x3c000001
    1a04:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a08:	13dc0067 	bicsne	r0, ip, #103	; 0x67
    1a0c:	49540000 	ldmdbmi	r4, {}^
    1a10:	6f465f4d 	svcvs	0x00465f4d
    1a14:	64656372 	strbtvs	r6, [r5], #-882
    1a18:	4332434f 	teqmi	r2, #1006632961	; 0x3c000001
    1a1c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a20:	14210067 	strtne	r0, [r1], #-103
    1a24:	49540000 	ldmdbmi	r4, {}^
    1a28:	6f465f4d 	svcvs	0x00465f4d
    1a2c:	64656372 	strbtvs	r6, [r5], #-882
    1a30:	4333434f 	teqmi	r3, #1006632961	; 0x3c000001
    1a34:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a38:	14680067 	strbtne	r0, [r8], #-103
    1a3c:	49540000 	ldmdbmi	r4, {}^
    1a40:	6f465f4d 	svcvs	0x00465f4d
    1a44:	64656372 	strbtvs	r6, [r5], #-882
    1a48:	4334434f 	teqmi	r4, #1006632961	; 0x3c000001
    1a4c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a50:	14ad0067 	strtne	r0, [sp], #103
    1a54:	49540000 	ldmdbmi	r4, {}^
    1a58:	52415f4d 	subpl	r5, r1, #308	; 0x134
    1a5c:	65725052 	ldrbvs	r5, [r2, #-82]!
    1a60:	64616f6c 	strbtvs	r6, [r1], #-3948
    1a64:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1a68:	e2006769 	and	r6, r0, #27525120	; 0x1a40000
    1a6c:	54000014 	strpl	r0, [r0], #-20
    1a70:	535f4d49 	cmppl	pc, #4672	; 0x1240
    1a74:	63656c65 	cmnvs	r5, #25856	; 0x6500
    1a78:	4d4f4374 	stclmi	3, cr4, [pc, #-464]
    1a7c:	00151700 	andseq	r1, r5, r0, lsl #14
    1a80:	4d495400 	cfstrdmi	mvd5, [r9]
    1a84:	6c65535f 	stclvs	3, cr5, [r5], #-380
    1a88:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    1a8c:	414d4443 	cmpmi	sp, r3, asr #8
    1a90:	00154c00 	andseq	r4, r5, r0, lsl #24
    1a94:	4d495400 	cfstrdmi	mvd5, [r9]
    1a98:	5043435f 	subpl	r4, r3, pc, asr r3
    1a9c:	6f6c6572 	svcvs	0x006c6572
    1aa0:	6f436461 	svcvs	0x00436461
    1aa4:	6f72746e 	svcvs	0x0072746e
    1aa8:	1581006c 	strne	r0, [r1, #108]
    1aac:	49540000 	ldmdbmi	r4, {}^
    1ab0:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1ab4:	65725031 	ldrbvs	r5, [r2, #-49]!
    1ab8:	64616f6c 	strbtvs	r6, [r1], #-3948
    1abc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1ac0:	c8006769 	stmdagt	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
    1ac4:	54000015 	strpl	r0, [r0], #-21
    1ac8:	4f5f4d49 	svcmi	0x005f4d49
    1acc:	72503243 	subsvc	r3, r0, #805306372	; 0x30000004
    1ad0:	616f6c65 	cmnvs	pc, r5, ror #24
    1ad4:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    1ad8:	00676966 	rsbeq	r6, r7, r6, ror #18
    1adc:	0000160d 	andeq	r1, r0, sp, lsl #12
    1ae0:	5f4d4954 	svcpl	0x004d4954
    1ae4:	5033434f 	eorspl	r4, r3, pc, asr #6
    1ae8:	6f6c6572 	svcvs	0x006c6572
    1aec:	6f436461 	svcvs	0x00436461
    1af0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1af4:	00165400 	andseq	r5, r6, r0, lsl #8
    1af8:	4d495400 	cfstrdmi	mvd5, [r9]
    1afc:	34434f5f 	strbcc	r4, [r3], #-3935
    1b00:	6c657250 	sfmvs	f7, 2, [r5], #-320
    1b04:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    1b08:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1b0c:	16990067 	ldrne	r0, [r9], r7, rrx
    1b10:	49540000 	ldmdbmi	r4, {}^
    1b14:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1b18:	73614631 	cmnvc	r1, #51380224	; 0x3100000
    1b1c:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1b20:	00676966 	rsbeq	r6, r7, r6, ror #18
    1b24:	000016e0 	andeq	r1, r0, r0, ror #13
    1b28:	5f4d4954 	svcpl	0x004d4954
    1b2c:	4632434f 	ldrtmi	r4, [r2], -pc, asr #6
    1b30:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    1b34:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1b38:	17250067 	strne	r0, [r5, -r7, rrx]!
    1b3c:	49540000 	ldmdbmi	r4, {}^
    1b40:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1b44:	73614633 	cmnvc	r1, #53477376	; 0x3300000
    1b48:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1b4c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1b50:	0000176c 	andeq	r1, r0, ip, ror #14
    1b54:	5f4d4954 	svcpl	0x004d4954
    1b58:	4634434f 	ldrtmi	r4, [r4], -pc, asr #6
    1b5c:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    1b60:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1b64:	17b10067 	ldrne	r0, [r1, r7, rrx]!
    1b68:	49540000 	ldmdbmi	r4, {}^
    1b6c:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    1b70:	4f726165 	svcmi	0x00726165
    1b74:	65523143 	ldrbvs	r3, [r2, #-323]
    1b78:	17f80066 	ldrbne	r0, [r8, r6, rrx]!
    1b7c:	49540000 	ldmdbmi	r4, {}^
    1b80:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    1b84:	4f726165 	svcmi	0x00726165
    1b88:	65523243 	ldrbvs	r3, [r2, #-579]
    1b8c:	183d0066 	ldmdane	sp!, {r1, r2, r5, r6}
    1b90:	49540000 	ldmdbmi	r4, {}^
    1b94:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    1b98:	4f726165 	svcmi	0x00726165
    1b9c:	65523343 	ldrbvs	r3, [r2, #-835]
    1ba0:	18840066 	stmne	r4, {r1, r2, r5, r6}
    1ba4:	49540000 	ldmdbmi	r4, {}^
    1ba8:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    1bac:	4f726165 	svcmi	0x00726165
    1bb0:	65523443 	ldrbvs	r3, [r2, #-1091]
    1bb4:	18c90066 	stmiane	r9, {r1, r2, r5, r6}^
    1bb8:	49540000 	ldmdbmi	r4, {}^
    1bbc:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1bc0:	6c6f5031 	stclvs	0, cr5, [pc], #-196
    1bc4:	74697261 	strbtvc	r7, [r9], #-609
    1bc8:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    1bcc:	00676966 	rsbeq	r6, r7, r6, ror #18
    1bd0:	00001910 	andeq	r1, r0, r0, lsl r9
    1bd4:	5f4d4954 	svcpl	0x004d4954
    1bd8:	4e31434f 	cdpmi	3, 3, cr4, cr1, cr15, {2}
    1bdc:	616c6f50 	cmnvs	ip, r0, asr pc
    1be0:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1be4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1be8:	57006769 	strpl	r6, [r0, -r9, ror #14]
    1bec:	54000019 	strpl	r0, [r0], #-25
    1bf0:	4f5f4d49 	svcmi	0x005f4d49
    1bf4:	6f503243 	svcvs	0x00503243
    1bf8:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    1bfc:	6f437974 	svcvs	0x00437974
    1c00:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1c04:	00199c00 	andseq	r9, r9, r0, lsl #24
    1c08:	4d495400 	cfstrdmi	mvd5, [r9]
    1c0c:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    1c10:	6c6f504e 	stclvs	0, cr5, [pc], #-312
    1c14:	74697261 	strbtvc	r7, [r9], #-609
    1c18:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    1c1c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1c20:	000019e1 	andeq	r1, r0, r1, ror #19
    1c24:	5f4d4954 	svcpl	0x004d4954
    1c28:	5033434f 	eorspl	r4, r3, pc, asr #6
    1c2c:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    1c30:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    1c34:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1c38:	1a260067 	bne	981ddc <__Stack_Size+0x9819dc>
    1c3c:	49540000 	ldmdbmi	r4, {}^
    1c40:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1c44:	6f504e33 	svcvs	0x00504e33
    1c48:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    1c4c:	6f437974 	svcvs	0x00437974
    1c50:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1c54:	001a6b00 	andseq	r6, sl, r0, lsl #22
    1c58:	4d495400 	cfstrdmi	mvd5, [r9]
    1c5c:	34434f5f 	strbcc	r4, [r3], #-3935
    1c60:	616c6f50 	cmnvs	ip, r0, asr pc
    1c64:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1c68:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1c6c:	b0006769 	andlt	r6, r0, r9, ror #14
    1c70:	5400001a 	strpl	r0, [r0], #-26
    1c74:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    1c78:	6d437843 	stclvs	8, cr7, [r3, #-268]
    1c7c:	1af50064 	bne	ffd41e14 <SCS_BASE+0x1fd33e14>
    1c80:	49540000 	ldmdbmi	r4, {}^
    1c84:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    1c88:	6d434e78 	stclvs	14, cr4, [r3, #-480]
    1c8c:	1b3a0064 	blne	e81e24 <__Stack_Size+0xe81a24>
    1c90:	49540000 	ldmdbmi	r4, {}^
    1c94:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    1c98:	7463656c 	strbtvc	r6, [r3], #-1388
    1c9c:	4d78434f 	ldclmi	3, cr4, [r8, #-316]!
    1ca0:	001b8500 	andseq	r8, fp, r0, lsl #10
    1ca4:	4d495400 	cfstrdmi	mvd5, [r9]
    1ca8:	6470555f 	ldrbtvs	r5, [r0], #-1375
    1cac:	44657461 	strbtmi	r7, [r5], #-1121
    1cb0:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    1cb4:	6f43656c 	svcvs	0x0043656c
    1cb8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1cbc:	001bba00 	andseq	fp, fp, r0, lsl #20
    1cc0:	4d495400 	cfstrdmi	mvd5, [r9]
    1cc4:	6470555f 	ldrbtvs	r5, [r0], #-1375
    1cc8:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
    1ccc:	65757165 	ldrbvs	r7, [r5, #-357]!
    1cd0:	6f437473 	svcvs	0x00437473
    1cd4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1cd8:	001bef00 	andseq	lr, fp, r0, lsl #30
    1cdc:	4d495400 	cfstrdmi	mvd5, [r9]
    1ce0:	6c65535f 	stclvs	3, cr5, [r5], #-380
    1ce4:	48746365 	ldmdami	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1ce8:	536c6c61 	cmnpl	ip, #24832	; 0x6100
    1cec:	6f736e65 	svcvs	0x00736e65
    1cf0:	1c240072 	stcne	0, cr0, [r4], #-456
    1cf4:	49540000 	ldmdbmi	r4, {}^
    1cf8:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    1cfc:	7463656c 	strbtvc	r6, [r3], #-1388
    1d00:	50656e4f 	rsbpl	r6, r5, pc, asr #28
    1d04:	65736c75 	ldrbvs	r6, [r3, #-3189]!
    1d08:	65646f4d 	strbvs	r6, [r4, #-3917]!
    1d0c:	001c5b00 	andseq	r5, ip, r0, lsl #22
    1d10:	4d495400 	cfstrdmi	mvd5, [r9]
    1d14:	6c65535f 	stclvs	3, cr5, [r5], #-380
    1d18:	4f746365 	svcmi	0x00746365
    1d1c:	75707475 	ldrbvc	r7, [r0, #-1141]!
    1d20:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1d24:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    1d28:	001c9200 	andseq	r9, ip, r0, lsl #4
    1d2c:	4d495400 	cfstrdmi	mvd5, [r9]
    1d30:	6c65535f 	stclvs	3, cr5, [r5], #-380
    1d34:	53746365 	cmnpl	r4, #-1811939327	; 0x94000001
    1d38:	6576616c 	ldrbvs	r6, [r6, #-364]!
    1d3c:	65646f4d 	strbvs	r6, [r4, #-3917]!
    1d40:	001cc900 	andseq	ip, ip, r0, lsl #18
    1d44:	4d495400 	cfstrdmi	mvd5, [r9]
    1d48:	6c65535f 	stclvs	3, cr5, [r5], #-380
    1d4c:	4d746365 	ldclmi	3, cr6, [r4, #-404]!
    1d50:	65747361 	ldrbvs	r7, [r4, #-865]!
    1d54:	616c5372 	smcvs	50482
    1d58:	6f4d6576 	svcvs	0x004d6576
    1d5c:	00006564 	andeq	r6, r0, r4, ror #10
    1d60:	5400001d 	strpl	r0, [r0], #-29
    1d64:	535f4d49 	cmppl	pc, #4672	; 0x1240
    1d68:	6f437465 	svcvs	0x00437465
    1d6c:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    1d70:	1d350072 	ldcne	0, cr0, [r5, #-456]!
    1d74:	49540000 	ldmdbmi	r4, {}^
    1d78:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    1d7c:	74754174 	ldrbtvc	r4, [r5], #-372
    1d80:	6c65726f 	sfmvs	f7, 2, [r5], #-444
    1d84:	0064616f 	rsbeq	r6, r4, pc, ror #2
    1d88:	00001d6a 	andeq	r1, r0, sl, ror #26
    1d8c:	5f4d4954 	svcpl	0x004d4954
    1d90:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1d94:	61706d6f 	cmnvs	r0, pc, ror #26
    1d98:	00316572 	eorseq	r6, r1, r2, ror r5
    1d9c:	00001d9f 	muleq	r0, pc, sp
    1da0:	5f4d4954 	svcpl	0x004d4954
    1da4:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1da8:	61706d6f 	cmnvs	r0, pc, ror #26
    1dac:	00326572 	eorseq	r6, r2, r2, ror r5
    1db0:	00001dd4 	ldrdeq	r1, [r0], -r4
    1db4:	5f4d4954 	svcpl	0x004d4954
    1db8:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1dbc:	61706d6f 	cmnvs	r0, pc, ror #26
    1dc0:	00336572 	eorseq	r6, r3, r2, ror r5
    1dc4:	00001e09 	andeq	r1, r0, r9, lsl #28
    1dc8:	5f4d4954 	svcpl	0x004d4954
    1dcc:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1dd0:	61706d6f 	cmnvs	r0, pc, ror #26
    1dd4:	00346572 	eorseq	r6, r4, r2, ror r5
    1dd8:	00001e3e 	andeq	r1, r0, lr, lsr lr
    1ddc:	5f4d4954 	svcpl	0x004d4954
    1de0:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1de4:	72503143 	subsvc	r3, r0, #-1073741808	; 0xc0000010
    1de8:	61637365 	cmnvs	r3, r5, ror #6
    1dec:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1df0:	00001e62 	andeq	r1, r0, r2, ror #28
    1df4:	5f4d4954 	svcpl	0x004d4954
    1df8:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1dfc:	72503243 	subsvc	r3, r0, #805306372	; 0x30000004
    1e00:	61637365 	cmnvs	r3, r5, ror #6
    1e04:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1e08:	00001e84 	andeq	r1, r0, r4, lsl #29
    1e0c:	5f4d4954 	svcpl	0x004d4954
    1e10:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1e14:	72503343 	subsvc	r3, r0, #201326593	; 0xc000001
    1e18:	61637365 	cmnvs	r3, r5, ror #6
    1e1c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1e20:	00001ea8 	andeq	r1, r0, r8, lsr #29
    1e24:	5f4d4954 	svcpl	0x004d4954
    1e28:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1e2c:	72503443 	subsvc	r3, r0, #1124073472	; 0x43000000
    1e30:	61637365 	cmnvs	r3, r5, ror #6
    1e34:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1e38:	00001eca 	andeq	r1, r0, sl, asr #29
    1e3c:	5f4d4954 	svcpl	0x004d4954
    1e40:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1e44:	6b636f6c 	blvs	18ddbfc <__Stack_Size+0x18dd7fc>
    1e48:	69766944 	ldmdbvs	r6!, {r2, r6, r8, fp, sp, lr}^
    1e4c:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
    1e50:	001f0100 	andseq	r0, pc, r0, lsl #2
    1e54:	4d495400 	cfstrdmi	mvd5, [r9]
    1e58:	7465475f 	strbtvc	r4, [r5], #-1887
    1e5c:	74706143 	ldrbtvc	r6, [r0], #-323
    1e60:	31657275 	smccc	22309
    1e64:	001f2e00 	andseq	r2, pc, r0, lsl #28
    1e68:	4d495400 	cfstrdmi	mvd5, [r9]
    1e6c:	7465475f 	strbtvc	r4, [r5], #-1887
    1e70:	74706143 	ldrbtvc	r6, [r0], #-323
    1e74:	32657275 	rsbcc	r7, r5, #1342177287	; 0x50000007
    1e78:	001f5b00 	andseq	r5, pc, r0, lsl #22
    1e7c:	4d495400 	cfstrdmi	mvd5, [r9]
    1e80:	7465475f 	strbtvc	r4, [r5], #-1887
    1e84:	74706143 	ldrbtvc	r6, [r0], #-323
    1e88:	33657275 	cmncc	r5, #1342177287	; 0x50000007
    1e8c:	001f8800 	andseq	r8, pc, r0, lsl #16
    1e90:	4d495400 	cfstrdmi	mvd5, [r9]
    1e94:	7465475f 	strbtvc	r4, [r5], #-1887
    1e98:	74706143 	ldrbtvc	r6, [r0], #-323
    1e9c:	34657275 	strbtcc	r7, [r5], #-629
    1ea0:	001fb500 	andseq	fp, pc, r0, lsl #10
    1ea4:	4d495400 	cfstrdmi	mvd5, [r9]
    1ea8:	7465475f 	strbtvc	r4, [r5], #-1887
    1eac:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1eb0:	00726574 	rsbseq	r6, r2, r4, ror r5
    1eb4:	00001fe2 	andeq	r1, r0, r2, ror #31
    1eb8:	5f4d4954 	svcpl	0x004d4954
    1ebc:	50746547 	rsbspl	r6, r4, r7, asr #10
    1ec0:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1ec4:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    1ec8:	00200f00 	eoreq	r0, r0, r0, lsl #30
    1ecc:	4d495400 	cfstrdmi	mvd5, [r9]
    1ed0:	7465475f 	strbtvc	r4, [r5], #-1887
    1ed4:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1ed8:	74617453 	strbtvc	r7, [r1], #-1107
    1edc:	56007375 	undefined
    1ee0:	54000020 	strpl	r0, [r0], #-32
    1ee4:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    1ee8:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    1eec:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1ef0:	00208d00 	eoreq	r8, r0, r0, lsl #26
    1ef4:	4d495400 	cfstrdmi	mvd5, [r9]
    1ef8:	7465475f 	strbtvc	r4, [r5], #-1887
    1efc:	74535449 	ldrbvc	r5, [r3], #-1097
    1f00:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1f04:	0020ec00 	eoreq	lr, r0, r0, lsl #24
    1f08:	4d495400 	cfstrdmi	mvd5, [r9]
    1f0c:	656c435f 	strbvs	r4, [ip, #-863]!
    1f10:	54497261 	strbpl	r7, [r9], #-609
    1f14:	646e6550 	strbtvs	r6, [lr], #-1360
    1f18:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1f1c:	23007469 	movwcs	r7, #1129	; 0x469
    1f20:	54000021 	strpl	r0, [r0], #-33
    1f24:	445f4d49 	ldrbmi	r4, [pc], #3401	; 1f2c <__Stack_Size+0x1b2c>
    1f28:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1f2c:	00000074 	andeq	r0, r0, r4, ror r0
    1f30:	025b0000 	subseq	r0, fp, #0	; 0x0
    1f34:	00020000 	andeq	r0, r2, r0
    1f38:	00005dad 	andeq	r5, r0, sp, lsr #27
    1f3c:	00000950 	andeq	r0, r0, r0, asr r9
    1f40:	000002b6 	strheq	r0, [r0], -r6
    1f44:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1f48:	74535f54 	ldrbvc	r5, [r3], #-3924
    1f4c:	74637572 	strbtvc	r7, [r3], #-1394
    1f50:	74696e49 	strbtvc	r6, [r9], #-3657
    1f54:	0002e100 	andeq	lr, r2, r0, lsl #2
    1f58:	41535500 	cmpmi	r3, r0, lsl #10
    1f5c:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1f60:	6b636f6c 	blvs	18ddd18 <__Stack_Size+0x18dd918>
    1f64:	74696e49 	strbtvc	r6, [r9], #-3657
    1f68:	00033000 	andeq	r3, r3, r0
    1f6c:	41535500 	cmpmi	r3, r0, lsl #10
    1f70:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    1f74:	6b636f6c 	blvs	18ddd2c <__Stack_Size+0x18dd92c>
    1f78:	75727453 	ldrbvc	r7, [r2, #-1107]!
    1f7c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1f80:	57007469 	strpl	r7, [r0, -r9, ror #8]
    1f84:	55000003 	strpl	r0, [r0, #-3]
    1f88:	54524153 	ldrbpl	r4, [r2], #-339
    1f8c:	646d435f 	strbtvs	r4, [sp], #-863
    1f90:	00038c00 	andeq	r8, r3, r0, lsl #24
    1f94:	41535500 	cmpmi	r3, r0, lsl #10
    1f98:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    1f9c:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    1fa0:	00676966 	rsbeq	r6, r7, r6, ror #18
    1fa4:	0000040d 	andeq	r0, r0, sp, lsl #8
    1fa8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1fac:	4d445f54 	stclmi	15, cr5, [r4, #-336]
    1fb0:	646d4341 	strbtvs	r4, [sp], #-833
    1fb4:	00045000 	andeq	r5, r4, r0
    1fb8:	41535500 	cmpmi	r3, r0, lsl #10
    1fbc:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    1fc0:	64417465 	strbvs	r7, [r1], #-1125
    1fc4:	73657264 	cmnvc	r5, #1073741830	; 0x40000006
    1fc8:	04850073 	streq	r0, [r5], #115
    1fcc:	53550000 	cmppl	r5, #0	; 0x0
    1fd0:	5f545241 	svcpl	0x00545241
    1fd4:	656b6157 	strbvs	r6, [fp, #-343]!
    1fd8:	6f437055 	svcvs	0x00437055
    1fdc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1fe0:	0004bc00 	andeq	fp, r4, r0, lsl #24
    1fe4:	41535500 	cmpmi	r3, r0, lsl #10
    1fe8:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    1fec:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1ff0:	57726576 	undefined
    1ff4:	55656b61 	strbpl	r6, [r5, #-2913]!
    1ff8:	646d4370 	strbtvs	r4, [sp], #-880
    1ffc:	0004f100 	andeq	pc, r4, r0, lsl #2
    2000:	41535500 	cmpmi	r3, r0, lsl #10
    2004:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}
    2008:	72424e49 	subvc	r4, r2, #1168	; 0x490
    200c:	446b6165 	strbtmi	r6, [fp], #-357
    2010:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
    2014:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    2018:	43687467 	cmnmi	r8, #1728053248	; 0x67000000
    201c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2020:	05280067 	streq	r0, [r8, #-103]!
    2024:	53550000 	cmppl	r5, #0	; 0x0
    2028:	5f545241 	svcpl	0x00545241
    202c:	434e494c 	movtmi	r4, #59724	; 0xe94c
    2030:	5d00646d 	cfstrspl	mvf6, [r0, #-436]
    2034:	55000005 	strpl	r0, [r0, #-5]
    2038:	54524153 	ldrbpl	r4, [r2], #-339
    203c:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
    2040:	74614464 	strbtvc	r4, [r1], #-1124
    2044:	05940061 	ldreq	r0, [r4, #97]
    2048:	53550000 	cmppl	r5, #0	; 0x0
    204c:	5f545241 	svcpl	0x00545241
    2050:	65636552 	strbvs	r6, [r3, #-1362]!
    2054:	44657669 	strbtmi	r7, [r5], #-1641
    2058:	00617461 	rsbeq	r7, r1, r1, ror #8
    205c:	000005c1 	andeq	r0, r0, r1, asr #11
    2060:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2064:	65535f54 	ldrbvs	r5, [r3, #-3924]
    2068:	7242646e 	subvc	r6, r2, #1845493760	; 0x6e000000
    206c:	006b6165 	rsbeq	r6, fp, r5, ror #2
    2070:	000005e8 	andeq	r0, r0, r8, ror #11
    2074:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2078:	65535f54 	ldrbvs	r5, [r3, #-3924]
    207c:	61754774 	cmnvs	r5, r4, ror r7
    2080:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    2084:	1d00656d 	cfstr32ne	mvfx6, [r0, #-436]
    2088:	55000006 	strpl	r0, [r0, #-6]
    208c:	54524153 	ldrbpl	r4, [r2], #-339
    2090:	7465535f 	strbtvc	r5, [r5], #-863
    2094:	73657250 	cmnvc	r5, #5	; 0x5
    2098:	656c6163 	strbvs	r6, [ip, #-355]!
    209c:	06520072 	undefined
    20a0:	53550000 	cmppl	r5, #0	; 0x0
    20a4:	5f545241 	svcpl	0x00545241
    20a8:	72616d53 	rsbvc	r6, r1, #5312	; 0x14c0
    20ac:	72614374 	rsbvc	r4, r1, #-805306367	; 0xd0000001
    20b0:	646d4364 	strbtvs	r4, [sp], #-868
    20b4:	00068700 	andeq	r8, r6, r0, lsl #14
    20b8:	41535500 	cmpmi	r3, r0, lsl #10
    20bc:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    20c0:	7472616d 	ldrbtvc	r6, [r2], #-365
    20c4:	64726143 	ldrbtvs	r6, [r2], #-323
    20c8:	4b43414e 	blmi	10d2608 <__Stack_Size+0x10d2208>
    20cc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    20d0:	000006bc 	strheq	r0, [r0], -ip
    20d4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    20d8:	61485f54 	cmpvs	r8, r4, asr pc
    20dc:	7544666c 	strbvc	r6, [r4, #-1644]
    20e0:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    20e4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    20e8:	000006f1 	strdeq	r0, [r0], -r1
    20ec:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    20f0:	72495f54 	subvc	r5, r9, #336	; 0x150
    20f4:	6f434144 	svcvs	0x00434144
    20f8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    20fc:	00072800 	andeq	r2, r7, r0, lsl #16
    2100:	41535500 	cmpmi	r3, r0, lsl #10
    2104:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    2108:	43414472 	movtmi	r4, #5234	; 0x1472
    210c:	5d00646d 	cfstrspl	mvf6, [r0, #-436]
    2110:	55000007 	strpl	r0, [r0, #-7]
    2114:	54524153 	ldrbpl	r4, [r2], #-339
    2118:	7465475f 	strbtvc	r4, [r5], #-1887
    211c:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    2120:	74617453 	strbtvc	r7, [r1], #-1107
    2124:	a4007375 	strge	r7, [r0], #-885
    2128:	55000007 	strpl	r0, [r0, #-7]
    212c:	54524153 	ldrbpl	r4, [r2], #-339
    2130:	656c435f 	strbvs	r4, [ip, #-863]!
    2134:	6c467261 	sfmvs	f7, 2, [r6], {97}
    2138:	db006761 	blle	1bec4 <__Stack_Size+0x1bac4>
    213c:	55000007 	strpl	r0, [r0, #-7]
    2140:	54524153 	ldrbpl	r4, [r2], #-339
    2144:	7465475f 	strbtvc	r4, [r5], #-1887
    2148:	74535449 	ldrbvc	r5, [r3], #-1097
    214c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2150:	00085200 	andeq	r5, r8, r0, lsl #4
    2154:	41535500 	cmpmi	r3, r0, lsl #10
    2158:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    215c:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    2160:	65505449 	ldrbvs	r5, [r0, #-1097]
    2164:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    2168:	74694267 	strbtvc	r4, [r9], #-615
    216c:	0008a100 	andeq	sl, r8, r0, lsl #2
    2170:	41535500 	cmpmi	r3, r0, lsl #10
    2174:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    2178:	0074696e 	rsbseq	r6, r4, lr, ror #18
    217c:	0000092a 	andeq	r0, r0, sl, lsr #18
    2180:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2184:	65445f54 	strbvs	r5, [r4, #-3924]
    2188:	74696e49 	strbtvc	r6, [r9], #-3657
    218c:	00000000 	andeq	r0, r0, r0
    2190:	00003100 	andeq	r3, r0, r0, lsl #2
    2194:	8e000200 	cdphi	2, 0, cr0, cr0, cr0, {0}
    2198:	06000067 	streq	r0, [r0], -r7, rrx
    219c:	52000001 	andpl	r0, r0, #1	; 0x1
    21a0:	52000000 	andpl	r0, r0, #0	; 0x0
    21a4:	74657365 	strbtvc	r7, [r5], #-869
    21a8:	6e61485f 	mcrvs	8, 3, r4, cr1, cr15, {2}
    21ac:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    21b0:	0000ee00 	andeq	lr, r0, r0, lsl #28
    21b4:	705f6700 	subsvc	r6, pc, r0, lsl #14
    21b8:	65566e66 	ldrbvs	r6, [r6, #-3686]
    21bc:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    21c0:	00000073 	andeq	r0, r0, r3, ror r0
    21c4:	00190000 	andseq	r0, r9, r0
    21c8:	00020000 	andeq	r0, r2, r0
    21cc:	00006894 	muleq	r0, r4, r8
    21d0:	000000c5 	andeq	r0, r0, r5, asr #1
    21d4:	0000009c 	muleq	r0, ip, r0
    21d8:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    21dc:	00007469 	andeq	r7, r0, r9, ror #8
    21e0:	17000000 	strne	r0, [r0, -r0]
    21e4:	02000000 	andeq	r0, r0, #0	; 0x0
    21e8:	00695900 	rsbeq	r5, r9, r0, lsl #18
    21ec:	00093a00 	andeq	r3, r9, r0, lsl #20
    21f0:	0008ff00 	andeq	pc, r8, r0, lsl #30
    21f4:	69786500 	ldmdbvs	r8!, {r8, sl, sp, lr}^
    21f8:	00000074 	andeq	r0, r0, r4, ror r0
    21fc:	00350000 	eorseq	r0, r5, r0
    2200:	00020000 	andeq	r0, r2, r0
    2204:	00007293 	muleq	r0, r3, r2
    2208:	0000093a 	andeq	r0, r0, sl, lsr r9
    220c:	00000910 	andeq	r0, r0, r0, lsl r9
    2210:	706d695f 	rsbvc	r6, sp, pc, asr r9
    2214:	5f657275 	svcpl	0x00657275
    2218:	00727470 	rsbseq	r7, r2, r0, ror r4
    221c:	00000922 	andeq	r0, r0, r2, lsr #18
    2220:	6f6c675f 	svcvs	0x006c675f
    2224:	5f6c6162 	svcpl	0x006c6162
    2228:	75706d69 	ldrbvc	r6, [r0, #-3433]!
    222c:	705f6572 	subsvc	r6, pc, r2, ror r5
    2230:	00007274 	andeq	r7, r0, r4, ror r2
    2234:	3a000000 	bcc	223c <__Stack_Size+0x1e3c>
    2238:	02000000 	andeq	r0, r0, #0	; 0x0
    223c:	007bcd00 	rsbseq	ip, fp, r0, lsl #26
    2240:	00014600 	andeq	r4, r1, r0, lsl #12
    2244:	00008000 	andeq	r8, r0, r0
    2248:	6c5f5f00 	mrrcvs	15, 0, r5, pc, cr0
    224c:	5f636269 	svcpl	0x00636269
    2250:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
    2254:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
    2258:	b2007961 	andlt	r7, r0, #1589248	; 0x184000
    225c:	5f000000 	svcpl	0x00000000
    2260:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    2264:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
    2268:	615f7469 	cmpvs	pc, r9, ror #8
    226c:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    2270:	00000000 	andeq	r0, r0, r0
    2274:	00001900 	andeq	r1, r0, r0, lsl #18
    2278:	13000200 	movwne	r0, #512	; 0x200
    227c:	1300007d 	movwne	r0, #125	; 0x7d
    2280:	88000001 	stmdahi	r0, {r0}
    2284:	6d000000 	stcvs	0, cr0, [r0]
    2288:	65736d65 	ldrbvs	r6, [r3, #-3429]!
    228c:	00000074 	andeq	r0, r0, r4, ror r0
    2290:	00260000 	eoreq	r0, r6, r0
    2294:	00020000 	andeq	r0, r2, r0
    2298:	00007e26 	andeq	r7, r0, r6, lsr #28
    229c:	000009a5 	andeq	r0, r0, r5, lsr #19
    22a0:	0000091e 	andeq	r0, r0, lr, lsl r9
    22a4:	65725f5f 	ldrbvs	r5, [r2, #-3935]!
    22a8:	74736967 	ldrbtvc	r6, [r3], #-2407
    22ac:	655f7265 	ldrbvs	r7, [pc, #-613]	; 204f <__Stack_Size+0x1c4f>
    22b0:	70746978 	rsbsvc	r6, r4, r8, ror r9
    22b4:	00636f72 	rsbeq	r6, r3, r2, ror pc
    22b8:	00000000 	andeq	r0, r0, r0
    22bc:	00000023 	andeq	r0, r0, r3, lsr #32
    22c0:	87cb0002 	strbhi	r0, [fp, r2]
    22c4:	09b20000 	ldmibeq	r2!, {}
    22c8:	08ff0000 	ldmeq	pc!, {}^
    22cc:	5f5f0000 	svcpl	0x005f0000
    22d0:	6c6c6163 	stfvse	f6, [ip], #-396
    22d4:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    22d8:	6f727074 	svcvs	0x00727074
    22dc:	00007363 	andeq	r7, r0, r3, ror #6
    22e0:	Address 0x000022e0 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000049 	andeq	r0, r0, r9, asr #32
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	tsteq	r4, r0
	...
      14:	69747263 	ldmdbvs	r4!, {r0, r1, r5, r6, r9, ip, sp, lr}^
      18:	6d73612e 	ldfvse	f6, [r3, #-184]!
      1c:	5c3a6300 	ldcpl	3, cr6, [sl]
      20:	616e6977 	smcvs	59031
      24:	5c736d72 	ldclpl	13, cr6, [r3], #-456
      28:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
      2c:	63675c64 	cmnvs	r7, #25600	; 0x6400
      30:	75622d63 	strbvc	r2, [r2, #-3427]!
      34:	5c646c69 	stclpl	12, cr6, [r4], #-420
      38:	00636367 	rsbeq	r6, r3, r7, ror #6
      3c:	20554e47 	subscs	r4, r5, r7, asr #28
      40:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      44:	2e38312e 	rsfcsep	f3, f0, #0.5
      48:	01003035 	tsteq	r0, r5, lsr r0
      4c:	00008080 	andeq	r8, r0, r0, lsl #1
      50:	12000200 	andne	r0, r0, #0	; 0x0
      54:	04000000 	streq	r0, [r0]
      58:	00004901 	andeq	r4, r0, r1, lsl #18
	...
      64:	2f2e2e00 	svccs	0x002e2e00
      68:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
      6c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
      70:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
      74:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
      78:	6c2f302e 	stcvs	0, cr3, [pc], #-184
      7c:	6c676269 	sfmvs	f6, 2, [r7], #-420
      80:	2f73736f 	svccs	0x0073736f
      84:	2f6d7261 	svccs	0x006d7261
      88:	30747263 	rsbscc	r7, r4, r3, ror #4
      8c:	6300532e 	movwvs	r5, #814	; 0x32e
      90:	69775c3a 	ldmdbvs	r7!, {r1, r3, r4, r5, sl, fp, ip, lr}^
      94:	6d72616e 	ldfvse	f6, [r2, #-440]!
      98:	75625c73 	strbvc	r5, [r2, #-3187]!
      9c:	5c646c69 	stclpl	12, cr6, [r4], #-420
      a0:	2d636367 	stclcs	3, cr6, [r3, #-412]!
      a4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
      a8:	72615c64 	rsbvc	r5, r1, #25600	; 0x6400
      ac:	61652d6d 	cmnvs	r5, sp, ror #26
      b0:	6c5c6962 	mrrcvs	9, 6, r6, ip, cr2
      b4:	6c676269 	sfmvs	f6, 2, [r7], #-420
      b8:	5c73736f 	ldclpl	3, cr7, [r3], #-444
      bc:	006d7261 	rsbeq	r7, sp, r1, ror #4
      c0:	20554e47 	subscs	r4, r5, r7, asr #28
      c4:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      c8:	2e38312e 	rsfcsep	f3, f0, #0.5
      cc:	01003035 	tsteq	r0, r5, lsr r0
      d0:	000bbd80 	andeq	fp, fp, r0, lsl #27
      d4:	26000200 	strcs	r0, [r0], -r0, lsl #4
      d8:	04000000 	streq	r0, [r0]
      dc:	00048801 	andeq	r8, r4, r1, lsl #16
      e0:	022e0100 	eoreq	r0, lr, #0	; 0x0
      e4:	008e0000 	addeq	r0, lr, r0
      e8:	31340000 	teqcc	r4, r0
      ec:	37980800 	ldrcc	r0, [r8, r0, lsl #16]
      f0:	00e30800 	rsceq	r0, r3, r0, lsl #16
      f4:	73020000 	movwvc	r0, #8192	; 0x2000
      f8:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
      fc:	00003017 	andeq	r3, r0, r7, lsl r0
     100:	05040300 	streq	r0, [r4, #-768]
     104:	00002cfb 	strdeq	r2, [r0], -fp
     108:	0f050203 	svceq	0x00050203
     10c:	03000005 	movweq	r0, #5	; 0x5
     110:	05d40601 	ldrbeq	r0, [r4, #1537]
     114:	75020000 	strvc	r0, [r2]
     118:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
     11c:	00005027 	andeq	r5, r0, r7, lsr #32
     120:	07040300 	streq	r0, [r4, -r0, lsl #6]
     124:	00002d75 	andeq	r2, r0, r5, ror sp
     128:	36317502 	ldrtcc	r7, [r1], -r2, lsl #10
     12c:	62280200 	eorvs	r0, r8, #0	; 0x0
     130:	03000000 	movweq	r0, #0	; 0x0
     134:	07120702 	ldreq	r0, [r2, -r2, lsl #14]
     138:	75020000 	strvc	r0, [r2]
     13c:	29020038 	stmdbcs	r2, {r3, r4, r5}
     140:	00000073 	andeq	r0, r0, r3, ror r0
     144:	d2080103 	andle	r0, r8, #-1073741824	; 0xc0000000
     148:	04000005 	streq	r0, [r0], #-5
     14c:	00000050 	andeq	r0, r0, r0, asr r0
     150:	00006204 	andeq	r6, r0, r4, lsl #4
     154:	02010500 	andeq	r0, r1, #0	; 0x0
     158:	00009939 	andeq	r9, r0, r9, lsr r9
     15c:	13770600 	cmnne	r7, #0	; 0x0
     160:	07000000 	streq	r0, [r0, -r0]
     164:	00544553 	subseq	r4, r4, r3, asr r5
     168:	01050001 	tsteq	r5, r1
     16c:	00ae3b02 	adceq	r3, lr, r2, lsl #22
     170:	63060000 	movwvs	r0, #24576	; 0x6000
     174:	00000003 	andeq	r0, r0, r3
     178:	0005a406 	andeq	sl, r5, r6, lsl #8
     17c:	08000100 	stmdaeq	r0, {r8}
     180:	000000dc 	ldrdeq	r0, [r0], -ip
     184:	00993b02 	addseq	r3, r9, r2, lsl #22
     188:	01050000 	tsteq	r5, r0
     18c:	00ce3e02 	sbceq	r3, lr, r2, lsl #28
     190:	11060000 	tstne	r6, r0
     194:	00000000 	andeq	r0, r0, r0
     198:	00034806 	andeq	r4, r3, r6, lsl #16
     19c:	08000100 	stmdaeq	r0, {r8}
     1a0:	000000f9 	strdeq	r0, [r0], -r9
     1a4:	00b93e02 	adcseq	r3, r9, r2, lsl #28
     1a8:	04090000 	streq	r0, [r9]
     1ac:	031c0a07 	tsteq	ip, #28672	; 0x7000
     1b0:	014f014f 	cmpeq	pc, pc, asr #2
     1b4:	430b0000 	movwmi	r0, #45056	; 0xb000
     1b8:	03004c52 	movweq	r4, #3154	; 0xc52
     1bc:	007a0150 	rsbseq	r0, sl, r0, asr r1
     1c0:	23020000 	movwcs	r0, #8192	; 0x2000
     1c4:	52430b00 	subpl	r0, r3, #0	; 0x0
     1c8:	51030048 	tstpl	r3, r8, asr #32
     1cc:	00007a01 	andeq	r7, r0, r1, lsl #20
     1d0:	04230200 	strteq	r0, [r3], #-512
     1d4:	5244490b 	subpl	r4, r4, #180224	; 0x2c000
     1d8:	01520300 	cmpeq	r2, r0, lsl #6
     1dc:	0000007a 	andeq	r0, r0, sl, ror r0
     1e0:	0b082302 	bleq	208df0 <__Stack_Size+0x2089f0>
     1e4:	0052444f 	subseq	r4, r2, pc, asr #8
     1e8:	7a015303 	bvc	54dfc <__Stack_Size+0x549fc>
     1ec:	02000000 	andeq	r0, r0, #0	; 0x0
     1f0:	2f0c0c23 	svccs	0x000c0c23
     1f4:	03000000 	movweq	r0, #0	; 0x0
     1f8:	007a0154 	rsbseq	r0, sl, r4, asr r1
     1fc:	23020000 	movwcs	r0, #8192	; 0x2000
     200:	52420b10 	subpl	r0, r2, #16384	; 0x4000
     204:	55030052 	strpl	r0, [r3, #-82]
     208:	00007a01 	andeq	r7, r0, r1, lsl #20
     20c:	14230200 	strtne	r0, [r3], #-512
     210:	00079a0c 	andeq	r9, r7, ip, lsl #20
     214:	01560300 	cmpeq	r6, r0, lsl #6
     218:	0000007a 	andeq	r0, r0, sl, ror r0
     21c:	00182302 	andseq	r2, r8, r2, lsl #6
     220:	0c03500a 	stceq	0, cr5, [r3], {10}
     224:	0003b002 	andeq	fp, r3, r2
     228:	52430b00 	subpl	r0, r3, #0	; 0x0
     22c:	0d030031 	stceq	0, cr0, [r3, #-196]
     230:	00007f02 	andeq	r7, r0, r2, lsl #30
     234:	00230200 	eoreq	r0, r3, r0, lsl #4
     238:	0004c90c 	andeq	ip, r4, ip, lsl #18
     23c:	020e0300 	andeq	r0, lr, #0	; 0x0
     240:	00000057 	andeq	r0, r0, r7, asr r0
     244:	0b022302 	bleq	88e54 <__Stack_Size+0x88a54>
     248:	00325243 	eorseq	r5, r2, r3, asr #4
     24c:	7f020f03 	svcvc	0x00020f03
     250:	02000000 	andeq	r0, r0, #0	; 0x0
     254:	d30c0423 	movwle	r0, #50211	; 0xc423
     258:	03000004 	movweq	r0, #4	; 0x4
     25c:	00570210 	subseq	r0, r7, r0, lsl r2
     260:	23020000 	movwcs	r0, #8192	; 0x2000
     264:	03aa0c06 	undefined instruction 0x03aa0c06
     268:	11030000 	tstne	r3, r0
     26c:	00007f02 	andeq	r7, r0, r2, lsl #30
     270:	08230200 	stmdaeq	r3!, {r9}
     274:	0004dd0c 	andeq	sp, r4, ip, lsl #26
     278:	02120300 	andseq	r0, r2, #0	; 0x0
     27c:	00000057 	andeq	r0, r0, r7, asr r0
     280:	0c0a2302 	stceq	3, cr2, [sl], {2}
     284:	000002c6 	andeq	r0, r0, r6, asr #5
     288:	7f021303 	svcvc	0x00021303
     28c:	02000000 	andeq	r0, r0, #0	; 0x0
     290:	e70c0c23 	str	r0, [ip, -r3, lsr #24]
     294:	03000004 	movweq	r0, #4	; 0x4
     298:	00570214 	subseq	r0, r7, r4, lsl r2
     29c:	23020000 	movwcs	r0, #8192	; 0x2000
     2a0:	52530b0e 	subspl	r0, r3, #14336	; 0x3800
     2a4:	02150300 	andseq	r0, r5, #0	; 0x0
     2a8:	0000007f 	andeq	r0, r0, pc, ror r0
     2ac:	0c102302 	ldceq	3, cr2, [r0], {2}
     2b0:	000004f1 	strdeq	r0, [r0], -r1
     2b4:	57021603 	strpl	r1, [r2, -r3, lsl #12]
     2b8:	02000000 	andeq	r0, r0, #0	; 0x0
     2bc:	450b1223 	strmi	r1, [fp, #-547]
     2c0:	03005247 	movweq	r5, #583	; 0x247
     2c4:	007f0217 	rsbseq	r0, pc, r7, lsl r2
     2c8:	23020000 	movwcs	r0, #8192	; 0x2000
     2cc:	04fb0c14 	ldrbteq	r0, [fp], #3092
     2d0:	18030000 	stmdane	r3, {}
     2d4:	00005702 	andeq	r5, r0, r2, lsl #14
     2d8:	16230200 	strtne	r0, [r3], -r0, lsl #4
     2dc:	0001f40c 	andeq	pc, r1, ip, lsl #8
     2e0:	02190300 	andseq	r0, r9, #0	; 0x0
     2e4:	0000007f 	andeq	r0, r0, pc, ror r0
     2e8:	0c182302 	ldceq	3, cr2, [r8], {2}
     2ec:	00000505 	andeq	r0, r0, r5, lsl #10
     2f0:	57021a03 	strpl	r1, [r2, -r3, lsl #20]
     2f4:	02000000 	andeq	r0, r0, #0	; 0x0
     2f8:	fa0c1a23 	blx	306b8c <__Stack_Size+0x30678c>
     2fc:	03000001 	movweq	r0, #1	; 0x1
     300:	007f021b 	rsbseq	r0, pc, fp, lsl r2
     304:	23020000 	movwcs	r0, #8192	; 0x2000
     308:	076a0c1c 	undefined
     30c:	1c030000 	stcne	0, cr0, [r3], {0}
     310:	00005702 	andeq	r5, r0, r2, lsl #14
     314:	1e230200 	cdpne	2, 2, cr0, cr3, cr0, {0}
     318:	00032e0c 	andeq	r2, r3, ip, lsl #28
     31c:	021d0300 	andseq	r0, sp, #0	; 0x0
     320:	0000007f 	andeq	r0, r0, pc, ror r0
     324:	0c202302 	stceq	3, cr2, [r0], #-8
     328:	00000519 	andeq	r0, r0, r9, lsl r5
     32c:	57021e03 	strpl	r1, [r2, -r3, lsl #28]
     330:	02000000 	andeq	r0, r0, #0	; 0x0
     334:	430b2223 	movwmi	r2, #45603	; 0xb223
     338:	0300544e 	movweq	r5, #1102	; 0x44e
     33c:	007f021f 	rsbseq	r0, pc, pc, lsl r2
     340:	23020000 	movwcs	r0, #8192	; 0x2000
     344:	05230c24 	streq	r0, [r3, #-3108]!
     348:	20030000 	andcs	r0, r3, r0
     34c:	00005702 	andeq	r5, r0, r2, lsl #14
     350:	26230200 	strtcs	r0, [r3], -r0, lsl #4
     354:	4353500b 	cmpmi	r3, #11	; 0xb
     358:	02210300 	eoreq	r0, r1, #0	; 0x0
     35c:	0000007f 	andeq	r0, r0, pc, ror r0
     360:	0c282302 	stceq	3, cr2, [r8], #-8
     364:	0000061d 	andeq	r0, r0, sp, lsl r6
     368:	57022203 	strpl	r2, [r2, -r3, lsl #4]
     36c:	02000000 	andeq	r0, r0, #0	; 0x0
     370:	410b2a23 	tstmi	fp, r3, lsr #20
     374:	03005252 	movweq	r5, #594	; 0x252
     378:	007f0223 	rsbseq	r0, pc, r3, lsr #4
     37c:	23020000 	movwcs	r0, #8192	; 0x2000
     380:	06280c2c 	strteq	r0, [r8], -ip, lsr #24
     384:	24030000 	strcs	r0, [r3]
     388:	00005702 	andeq	r5, r0, r2, lsl #14
     38c:	2e230200 	cdpcs	2, 2, cr0, cr3, cr0, {0}
     390:	5243520b 	subpl	r5, r3, #-1342177280	; 0xb0000000
     394:	02250300 	eoreq	r0, r5, #0	; 0x0
     398:	0000007f 	andeq	r0, r0, pc, ror r0
     39c:	0c302302 	ldceq	3, cr2, [r0], #-8
     3a0:	00000633 	andeq	r0, r0, r3, lsr r6
     3a4:	57022603 	strpl	r2, [r2, -r3, lsl #12]
     3a8:	02000000 	andeq	r0, r0, #0	; 0x0
     3ac:	e00c3223 	and	r3, ip, r3, lsr #4
     3b0:	03000001 	movweq	r0, #1	; 0x1
     3b4:	007f0227 	rsbseq	r0, pc, r7, lsr #4
     3b8:	23020000 	movwcs	r0, #8192	; 0x2000
     3bc:	063e0c34 	undefined
     3c0:	28030000 	stmdacs	r3, {}
     3c4:	00005702 	andeq	r5, r0, r2, lsl #14
     3c8:	36230200 	strtcc	r0, [r3], -r0, lsl #4
     3cc:	0001e50c 	andeq	lr, r1, ip, lsl #10
     3d0:	02290300 	eoreq	r0, r9, #0	; 0x0
     3d4:	0000007f 	andeq	r0, r0, pc, ror r0
     3d8:	0c382302 	ldceq	3, cr2, [r8], #-8
     3dc:	00000649 	andeq	r0, r0, r9, asr #12
     3e0:	57022a03 	strpl	r2, [r2, -r3, lsl #20]
     3e4:	02000000 	andeq	r0, r0, #0	; 0x0
     3e8:	ea0c3a23 	b	30ec7c <__Stack_Size+0x30e87c>
     3ec:	03000001 	movweq	r0, #1	; 0x1
     3f0:	007f022b 	rsbseq	r0, pc, fp, lsr #4
     3f4:	23020000 	movwcs	r0, #8192	; 0x2000
     3f8:	06540c3c 	undefined
     3fc:	2c030000 	stccs	0, cr0, [r3], {0}
     400:	00005702 	andeq	r5, r0, r2, lsl #14
     404:	3e230200 	cdpcc	2, 2, cr0, cr3, cr0, {0}
     408:	0001ef0c 	andeq	lr, r1, ip, lsl #30
     40c:	022d0300 	eoreq	r0, sp, #0	; 0x0
     410:	0000007f 	andeq	r0, r0, pc, ror r0
     414:	0c402302 	mcrreq	3, 0, r2, r0, cr2
     418:	0000065f 	andeq	r0, r0, pc, asr r6
     41c:	57022e03 	strpl	r2, [r2, -r3, lsl #28]
     420:	02000000 	andeq	r0, r0, #0	; 0x0
     424:	ba0c4223 	blt	310cb8 <__Stack_Size+0x3108b8>
     428:	03000001 	movweq	r0, #1	; 0x1
     42c:	007f022f 	rsbseq	r0, pc, pc, lsr #4
     430:	23020000 	movwcs	r0, #8192	; 0x2000
     434:	066a0c44 	strbteq	r0, [sl], -r4, asr #24
     438:	30030000 	andcc	r0, r3, r0
     43c:	00005702 	andeq	r5, r0, r2, lsl #14
     440:	46230200 	strtmi	r0, [r3], -r0, lsl #4
     444:	5243440b 	subpl	r4, r3, #184549376	; 0xb000000
     448:	02310300 	eorseq	r0, r1, #0	; 0x0
     44c:	0000007f 	andeq	r0, r0, pc, ror r0
     450:	0c482302 	mcrreq	3, 0, r2, r8, cr2
     454:	00000675 	andeq	r0, r0, r5, ror r6
     458:	57023203 	strpl	r3, [r2, -r3, lsl #4]
     45c:	02000000 	andeq	r0, r0, #0	; 0x0
     460:	3d0c4a23 	fstscc	s8, [ip, #-140]
     464:	03000005 	movweq	r0, #5	; 0x5
     468:	007f0233 	rsbseq	r0, pc, r3, lsr r2
     46c:	23020000 	movwcs	r0, #8192	; 0x2000
     470:	06800c4c 	streq	r0, [r0], ip, asr #24
     474:	34030000 	strcc	r0, [r3]
     478:	00005702 	andeq	r5, r0, r2, lsl #14
     47c:	4e230200 	cdpmi	2, 2, cr0, cr3, cr0, {0}
     480:	031c0a00 	tsteq	ip, #0	; 0x0
     484:	048a0239 	streq	r0, [sl], #569
     488:	530b0000 	movwpl	r0, #45056	; 0xb000
     48c:	3a030052 	bcc	c05dc <__Stack_Size+0xc01dc>
     490:	00007f02 	andeq	r7, r0, r2, lsl #30
     494:	00230200 	eoreq	r0, r3, r0, lsl #4
     498:	0004c90c 	andeq	ip, r4, ip, lsl #18
     49c:	023b0300 	eorseq	r0, fp, #0	; 0x0
     4a0:	00000057 	andeq	r0, r0, r7, asr r0
     4a4:	0b022302 	bleq	890b4 <__Stack_Size+0x88cb4>
     4a8:	03005244 	movweq	r5, #580	; 0x244
     4ac:	007f023c 	rsbseq	r0, pc, ip, lsr r2
     4b0:	23020000 	movwcs	r0, #8192	; 0x2000
     4b4:	04d30c04 	ldrbeq	r0, [r3], #3076
     4b8:	3d030000 	stccc	0, cr0, [r3]
     4bc:	00005702 	andeq	r5, r0, r2, lsl #14
     4c0:	06230200 	strteq	r0, [r3], -r0, lsl #4
     4c4:	5252420b 	subspl	r4, r2, #-1342177280	; 0xb0000000
     4c8:	023e0300 	eorseq	r0, lr, #0	; 0x0
     4cc:	0000007f 	andeq	r0, r0, pc, ror r0
     4d0:	0c082302 	stceq	3, cr2, [r8], {2}
     4d4:	000004dd 	ldrdeq	r0, [r0], -sp
     4d8:	57023f03 	strpl	r3, [r2, -r3, lsl #30]
     4dc:	02000000 	andeq	r0, r0, #0	; 0x0
     4e0:	430b0a23 	movwmi	r0, #47651	; 0xba23
     4e4:	03003152 	movweq	r3, #338	; 0x152
     4e8:	007f0240 	rsbseq	r0, pc, r0, asr #4
     4ec:	23020000 	movwcs	r0, #8192	; 0x2000
     4f0:	04e70c0c 	strbteq	r0, [r7], #3084
     4f4:	41030000 	tstmi	r3, r0
     4f8:	00005702 	andeq	r5, r0, r2, lsl #14
     4fc:	0e230200 	cdpeq	2, 2, cr0, cr3, cr0, {0}
     500:	3252430b 	subscc	r4, r2, #738197504	; 0x2c000000
     504:	02420300 	subeq	r0, r2, #0	; 0x0
     508:	0000007f 	andeq	r0, r0, pc, ror r0
     50c:	0c102302 	ldceq	3, cr2, [r0], {2}
     510:	000004f1 	strdeq	r0, [r0], -r1
     514:	57024303 	strpl	r4, [r2, -r3, lsl #6]
     518:	02000000 	andeq	r0, r0, #0	; 0x0
     51c:	430b1223 	movwmi	r1, #45603	; 0xb223
     520:	03003352 	movweq	r3, #850	; 0x352
     524:	007f0244 	rsbseq	r0, pc, r4, asr #4
     528:	23020000 	movwcs	r0, #8192	; 0x2000
     52c:	04fb0c14 	ldrbteq	r0, [fp], #3092
     530:	45030000 	strmi	r0, [r3]
     534:	00005702 	andeq	r5, r0, r2, lsl #14
     538:	16230200 	strtne	r0, [r3], -r0, lsl #4
     53c:	0001700c 	andeq	r7, r1, ip
     540:	02460300 	subeq	r0, r6, #0	; 0x0
     544:	0000007f 	andeq	r0, r0, pc, ror r0
     548:	0c182302 	ldceq	3, cr2, [r8], {2}
     54c:	00000505 	andeq	r0, r0, r5, lsl #10
     550:	57024703 	strpl	r4, [r2, -r3, lsl #14]
     554:	02000000 	andeq	r0, r0, #0	; 0x0
     558:	05001a23 	streq	r1, [r0, #-2595]
     55c:	a5230401 	strge	r0, [r3, #-1025]!
     560:	06000004 	streq	r0, [r0], -r4
     564:	00000200 	andeq	r0, r0, r0, lsl #4
     568:	01600601 	cmneq	r0, r1, lsl #12
     56c:	06020000 	streq	r0, [r2], -r0
     570:	000005e5 	andeq	r0, r0, r5, ror #11
     574:	9e080003 	cdpls	0, 0, cr0, cr8, cr3, {0}
     578:	04000004 	streq	r0, [r0], #-4
     57c:	00048a27 	andeq	r8, r4, r7, lsr #20
     580:	04010500 	streq	r0, [r1], #-1280
     584:	0004ea2e 	andeq	lr, r4, lr, lsr #20
     588:	04bb0600 	ldrteq	r0, [fp], #1536
     58c:	06000000 	streq	r0, [r0], -r0
     590:	00000754 	andeq	r0, r0, r4, asr r7
     594:	02630604 	rsbeq	r0, r3, #4194304	; 0x400000
     598:	06280000 	strteq	r0, [r8], -r0
     59c:	00000271 	andeq	r0, r0, r1, ror r2
     5a0:	8b0600c8 	blhi	1808c8 <__Stack_Size+0x1804c8>
     5a4:	14000002 	strne	r0, [r0], #-2
     5a8:	00000006 	andeq	r0, r0, r6
     5ac:	64061000 	strvs	r1, [r6]
     5b0:	1c000004 	stcne	0, cr0, [r0], {4}
     5b4:	00052d06 	andeq	r2, r5, r6, lsl #26
     5b8:	08001800 	stmdaeq	r0, {fp, ip}
     5bc:	00000574 	andeq	r0, r0, r4, ror r5
     5c0:	04b03604 	ldrteq	r3, [r0], #1540
     5c4:	040d0000 	streq	r0, [sp]
     5c8:	05283f04 	streq	r3, [r8, #-3844]!
     5cc:	850e0000 	strhi	r0, [lr]
     5d0:	04000000 	streq	r0, [r0]
     5d4:	00005740 	andeq	r5, r0, r0, asr #14
     5d8:	00230200 	eoreq	r0, r3, r0, lsl #4
     5dc:	0005420e 	andeq	r4, r5, lr, lsl #4
     5e0:	a5410400 	strbge	r0, [r1, #-1024]
     5e4:	02000004 	andeq	r0, r0, #4	; 0x4
     5e8:	6c0e0223 	sfmvs	f0, 4, [lr], {35}
     5ec:	04000000 	streq	r0, [r0]
     5f0:	0004ea42 	andeq	lr, r4, r2, asr #20
     5f4:	03230200 	teqeq	r3, #0	; 0x0
     5f8:	05c10800 	strbeq	r0, [r1, #2048]
     5fc:	43040000 	movwmi	r0, #16384	; 0x4000
     600:	000004f5 	strdeq	r0, [r0], -r5
     604:	1b05040d 	blne	141640 <__Stack_Size+0x141240>
     608:	00000574 	andeq	r0, r0, r4, ror r5
     60c:	0004540e 	andeq	r5, r4, lr, lsl #8
     610:	691c0500 	ldmdbvs	ip, {r8, sl}
     614:	02000000 	andeq	r0, r0, #0	; 0x0
     618:	320e0023 	andcc	r0, lr, #35	; 0x23
     61c:	05000007 	streq	r0, [r0, #-7]
     620:	0000691d 	andeq	r6, r0, sp, lsl r9
     624:	01230200 	teqeq	r3, r0, lsl #4
     628:	0006b00e 	andeq	fp, r6, lr
     62c:	691e0500 	ldmdbvs	lr, {r8, sl}
     630:	02000000 	andeq	r0, r0, #0	; 0x0
     634:	b30e0223 	movwlt	r0, #57891	; 0xe223
     638:	05000002 	streq	r0, [r0, #-2]
     63c:	0000ae1f 	andeq	sl, r0, pc, lsl lr
     640:	03230200 	teqeq	r3, #0	; 0x0
     644:	01c50800 	biceq	r0, r5, r0, lsl #16
     648:	20050000 	andcs	r0, r5, r0
     64c:	00000533 	andeq	r0, r0, r3, lsr r5
     650:	1c060a0d 	stcne	10, cr0, [r6], {13}
     654:	000005ce 	andeq	r0, r0, lr, asr #11
     658:	0000210e 	andeq	r2, r0, lr, lsl #2
     65c:	571d0600 	ldrpl	r0, [sp, -r0, lsl #12]
     660:	02000000 	andeq	r0, r0, #0	; 0x0
     664:	7a0e0023 	bvc	3806f8 <__Stack_Size+0x3802f8>
     668:	06000003 	streq	r0, [r0], -r3
     66c:	0000571e 	andeq	r5, r0, lr, lsl r7
     670:	02230200 	eoreq	r0, r3, #0	; 0x0
     674:	0001250e 	andeq	r2, r1, lr, lsl #10
     678:	571f0600 	ldrpl	r0, [pc, -r0, lsl #12]
     67c:	02000000 	andeq	r0, r0, #0	; 0x0
     680:	980e0423 	stmdals	lr, {r0, r1, r5, sl}
     684:	06000001 	streq	r0, [r0], -r1
     688:	00005720 	andeq	r5, r0, r0, lsr #14
     68c:	06230200 	strteq	r0, [r3], -r0, lsl #4
     690:	0002ed0e 	andeq	lr, r2, lr, lsl #26
     694:	69210600 	stmdbvs	r1!, {r9, sl}
     698:	02000000 	andeq	r0, r0, #0	; 0x0
     69c:	08000823 	stmdaeq	r0, {r0, r1, r5, fp}
     6a0:	000006e4 	andeq	r0, r0, r4, ror #13
     6a4:	057f2206 	ldrbeq	r2, [pc, #-518]!	; 4a6 <__Stack_Size+0xa6>
     6a8:	100d0000 	andne	r0, sp, r0
     6ac:	06522606 	ldrbeq	r2, [r2], -r6, lsl #12
     6b0:	b00e0000 	andlt	r0, lr, r0
     6b4:	06000004 	streq	r0, [r0], -r4
     6b8:	00005727 	andeq	r5, r0, r7, lsr #14
     6bc:	00230200 	eoreq	r0, r3, r0, lsl #4
     6c0:	0001aa0e 	andeq	sl, r1, lr, lsl #20
     6c4:	57280600 	strpl	r0, [r8, -r0, lsl #12]!
     6c8:	02000000 	andeq	r0, r0, #0	; 0x0
     6cc:	930e0223 	movwls	r0, #57891	; 0xe223
     6d0:	06000005 	streq	r0, [r0], -r5
     6d4:	00005729 	andeq	r5, r0, r9, lsr #14
     6d8:	04230200 	strteq	r0, [r3], #-512
     6dc:	00017f0e 	andeq	r7, r1, lr, lsl #30
     6e0:	572a0600 	strpl	r0, [sl, -r0, lsl #12]!
     6e4:	02000000 	andeq	r0, r0, #0	; 0x0
     6e8:	760e0623 	strvc	r0, [lr], -r3, lsr #12
     6ec:	06000000 	streq	r0, [r0], -r0
     6f0:	0000572b 	andeq	r5, r0, fp, lsr #14
     6f4:	08230200 	stmdaeq	r3!, {r9}
     6f8:	0003030e 	andeq	r0, r3, lr, lsl #6
     6fc:	572c0600 	strpl	r0, [ip, -r0, lsl #12]!
     700:	02000000 	andeq	r0, r0, #0	; 0x0
     704:	470e0a23 	strmi	r0, [lr, -r3, lsr #20]
     708:	06000001 	streq	r0, [r0], -r1
     70c:	0000572d 	andeq	r5, r0, sp, lsr #14
     710:	0c230200 	sfmeq	f0, 4, [r3]
     714:	00041e0e 	andeq	r1, r4, lr, lsl #28
     718:	572e0600 	strpl	r0, [lr, -r0, lsl #12]!
     71c:	02000000 	andeq	r0, r0, #0	; 0x0
     720:	08000e23 	stmdaeq	r0, {r0, r1, r5, r9, sl, fp}
     724:	00000043 	andeq	r0, r0, r3, asr #32
     728:	05d92f06 	ldrbeq	r2, [r9, #3846]
     72c:	100d0000 	andne	r0, sp, r0
     730:	06ba1b07 	ldrteq	r1, [sl], r7, lsl #22
     734:	890e0000 	stmdbhi	lr, {}
     738:	07000001 	streq	r0, [r0, -r1]
     73c:	0000451c 	andeq	r4, r0, ip, lsl r5
     740:	00230200 	eoreq	r0, r3, r0, lsl #4
     744:	0001140e 	andeq	r1, r1, lr, lsl #8
     748:	571d0700 	ldrpl	r0, [sp, -r0, lsl #14]
     74c:	02000000 	andeq	r0, r0, #0	; 0x0
     750:	380e0423 	stmdacc	lr, {r0, r1, r5, sl}
     754:	07000001 	streq	r0, [r0, -r1]
     758:	0000571e 	andeq	r5, r0, lr, lsl r7
     75c:	06230200 	strteq	r0, [r3], -r0, lsl #4
     760:	0006cb0e 	andeq	ip, r6, lr, lsl #22
     764:	571f0700 	ldrpl	r0, [pc, -r0, lsl #14]
     768:	02000000 	andeq	r0, r0, #0	; 0x0
     76c:	8a0e0823 	bhi	382800 <__Stack_Size+0x382400>
     770:	07000003 	streq	r0, [r0, -r3]
     774:	00005720 	andeq	r5, r0, r0, lsr #14
     778:	0a230200 	beq	8c0f80 <__Stack_Size+0x8c0b80>
     77c:	0003af0e 	andeq	sl, r3, lr, lsl #30
     780:	57210700 	strpl	r0, [r1, -r0, lsl #14]!
     784:	02000000 	andeq	r0, r0, #0	; 0x0
     788:	08000c23 	stmdaeq	r0, {r0, r1, r5, sl, fp}
     78c:	0000069e 	muleq	r0, lr, r6
     790:	065d2207 	ldrbeq	r2, [sp], -r7, lsl #4
     794:	010f0000 	mrseq	r0, CPSR
     798:	00000034 	andeq	r0, r0, r4, lsr r0
     79c:	01015a01 	tsteq	r1, r1, lsl #20
     7a0:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
     7a4:	0800314c 	stmdaeq	r0, {r2, r3, r6, r8, ip, sp}
     7a8:	01105d01 	tsteq	r0, r1, lsl #26
     7ac:	0000036b 	andeq	r0, r0, fp, ror #6
     7b0:	01015f01 	tsteq	r1, r1, lsl #30
     7b4:	00000069 	andeq	r0, r0, r9, rrx
     7b8:	0800314c 	stmdaeq	r0, {r2, r3, r6, r8, ip, sp}
     7bc:	08003164 	stmdaeq	r0, {r2, r5, r6, r8, ip, sp}
     7c0:	01115d01 	tsteq	r1, r1, lsl #26
     7c4:	0000055a 	andeq	r0, r0, sl, asr r5
     7c8:	01017301 	tsteq	r1, r1, lsl #6
     7cc:	00000069 	andeq	r0, r0, r9, rrx
     7d0:	08003164 	stmdaeq	r0, {r2, r5, r6, r8, ip, sp}
     7d4:	08003194 	stmdaeq	r0, {r2, r4, r7, r8, ip, sp}
     7d8:	071c5d01 	ldreq	r5, [ip, -r1, lsl #26]
     7dc:	4e120000 	wxormi	wr0, wr2, wr0
     7e0:	01000004 	tsteq	r0, r4
     7e4:	00690174 	rsbeq	r0, r9, r4, ror r1
     7e8:	50010000 	andpl	r0, r1, r0
     7ec:	d8010f00 	stmdale	r1, {r8, r9, sl, fp}
     7f0:	01000006 	tsteq	r0, r6
     7f4:	94010222 	strls	r0, [r1], #-546
     7f8:	a8080031 	stmdage	r8, {r0, r4, r5}
     7fc:	01080031 	tsteq	r8, r1, lsr r0
     800:	8501135d 	strhi	r1, [r1, #-861]
     804:	01000005 	tsteq	r0, r5
     808:	a8010237 	stmdage	r1, {r0, r1, r2, r4, r5, r9}
     80c:	b4080031 	strlt	r0, [r8], #-49
     810:	01080031 	tsteq	r8, r1, lsr r0
     814:	0007575d 	andeq	r5, r7, sp, asr r7
     818:	00171400 	andseq	r1, r7, r0, lsl #8
     81c:	36010000 	strcc	r0, [r1], -r0
     820:	00002502 	andeq	r2, r0, r2, lsl #10
     824:	00500100 	subseq	r0, r0, r0, lsl #2
     828:	054d0110 	strbeq	r0, [sp, #-272]
     82c:	3c010000 	stccc	0, cr0, [r1], {0}
     830:	00690102 	rsbeq	r0, r9, r2, lsl #2
     834:	31b40000 	undefined instruction 0x31b40000
     838:	31c80800 	biccc	r0, r8, r0, lsl #16
     83c:	5d010800 	stcpl	8, cr0, [r1]
     840:	03130115 	tsteq	r3, #1073741829	; 0x40000005
     844:	28010000 	stmdacs	r1, {}
     848:	31c80102 	biccc	r0, r8, r2, lsl #2
     84c:	31f40800 	mvnscc	r0, r0, lsl #16
     850:	00000800 	andeq	r0, r0, r0, lsl #16
     854:	079a0000 	ldreq	r0, [sl, r0]
     858:	74160000 	ldrvc	r0, [r6]
     85c:	01000007 	tsteq	r0, r7
     860:	00450227 	subeq	r0, r5, r7, lsr #4
     864:	001f0000 	andseq	r0, pc, r0
     868:	17000000 	strne	r0, [r0, -r0]
     86c:	0003dc01 	andeq	sp, r3, r1, lsl #24
     870:	02190100 	andseq	r0, r9, #0	; 0x0
     874:	0031f401 	eorseq	pc, r1, r1, lsl #8
     878:	00320a08 	eorseq	r0, r2, r8, lsl #20
     87c:	00003d08 	andeq	r3, r0, r8, lsl #26
     880:	45011700 	strmi	r1, [r1, #-1792]
     884:	01000002 	tsteq	r0, r2
     888:	0c010213 	sfmeq	f0, 4, [r1], {19}
     88c:	44080032 	strmi	r0, [r8], #-50
     890:	68080032 	stmdavs	r8, {r1, r4, r5}
     894:	17000000 	strne	r0, [r0, -r0]
     898:	0003c901 	andeq	ip, r3, r1, lsl #18
     89c:	02040100 	andeq	r0, r4, #0	; 0x0
     8a0:	00324401 	eorseq	r4, r2, r1, lsl #8
     8a4:	00329808 	eorseq	r9, r2, r8, lsl #16
     8a8:	00009308 	andeq	r9, r0, r8, lsl #6
     8ac:	74011500 	strvc	r1, [r1], #-1280
     8b0:	01000004 	tsteq	r0, r4
     8b4:	980101df 	stmdals	r1, {r0, r1, r2, r3, r4, r6, r7, r8}
     8b8:	28080032 	stmdacs	r8, {r1, r4, r5}
     8bc:	be080033 	mcrlt	0, 0, r0, cr8, cr3, {1}
     8c0:	15000000 	strne	r0, [r0]
     8c4:	12000008 	andne	r0, r0, #8	; 0x8
     8c8:	000005ab 	andeq	r0, r0, fp, lsr #11
     8cc:	ce01e001 	cdpgt	0, 0, cr14, cr1, cr1, {0}
     8d0:	02000005 	andeq	r0, r0, #5	; 0x5
     8d4:	d9126691 	ldmdble	r2, {r0, r4, r7, r9, sl, sp, lr}
     8d8:	01000002 	tsteq	r0, r2
     8dc:	065201e1 	ldrbeq	r0, [r2], -r1, ror #3
     8e0:	91020000 	tstls	r2, r0
     8e4:	01150056 	tsteq	r5, r6, asr r0
     8e8:	00000211 	andeq	r0, r0, r1, lsl r2
     8ec:	0101d901 	tsteq	r1, r1, lsl #18
     8f0:	08003328 	stmdaeq	r0, {r3, r5, r8, r9, ip, sp}
     8f4:	08003348 	stmdaeq	r0, {r3, r6, r8, r9, ip, sp}
     8f8:	000000e9 	andeq	r0, r0, r9, ror #1
     8fc:	00000840 	andeq	r0, r0, r0, asr #16
     900:	00010b16 	andeq	r0, r1, r6, lsl fp
     904:	01d80100 	bicseq	r0, r8, r0, lsl #2
     908:	00000069 	andeq	r0, r0, r9, rrx
     90c:	00000114 	andeq	r0, r0, r4, lsl r1
     910:	94011500 	strls	r1, [r1], #-1280
     914:	01000004 	tsteq	r0, r4
     918:	480101cb 	stmdami	r1, {r0, r1, r3, r6, r7, r8}
     91c:	70080033 	andvc	r0, r8, r3, lsr r0
     920:	32080033 	andcc	r0, r8, #51	; 0x33
     924:	7b000001 	blvc	930 <__Stack_Size+0x530>
     928:	16000008 	strne	r0, [r0], -r8
     92c:	000001d6 	ldrdeq	r0, [r0], -r6
     930:	6901ca01 	stmdbvs	r1, {r0, r9, fp, lr, pc}
     934:	51000000 	tstpl	r0, r0
     938:	18000001 	stmdane	r0, {r0}
     93c:	000005e0 	andeq	r0, r0, r0, ror #11
     940:	6901cc01 	stmdbvs	r1, {r0, sl, fp, lr, pc}
     944:	6f000000 	svcvs	0x00000000
     948:	00000001 	andeq	r0, r0, r1
     94c:	029c0115 	addseq	r0, ip, #1073741829	; 0x40000005
     950:	c5010000 	strgt	r0, [r1]
     954:	33700101 	cmncc	r0, #1073741824	; 0x40000000
     958:	33840800 	orrcc	r0, r4, #0	; 0x0
     95c:	018d0800 	orreq	r0, sp, r0, lsl #16
     960:	08a60000 	stmiaeq	r6!, {}
     964:	24160000 	ldrcs	r0, [r6]
     968:	01000002 	tsteq	r0, r2
     96c:	005701c4 	subseq	r0, r7, r4, asr #3
     970:	01ac0000 	undefined instruction 0x01ac0000
     974:	15000000 	strne	r0, [r0]
     978:	00017501 	andeq	r7, r1, r1, lsl #10
     97c:	01bf0100 	undefined instruction 0x01bf0100
     980:	00338401 	eorseq	r8, r3, r1, lsl #8
     984:	00339e08 	eorseq	r9, r3, r8, lsl #28
     988:	0001ca08 	andeq	ip, r1, r8, lsl #20
     98c:	0008d100 	andeq	sp, r8, r0, lsl #2
     990:	01bf1600 	undefined instruction 0x01bf1600
     994:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
     998:	0008d101 	andeq	sp, r8, r1, lsl #2
     99c:	0001f500 	andeq	pc, r1, r0, lsl #10
     9a0:	04190000 	ldreq	r0, [r9]
     9a4:	00000069 	andeq	r0, r0, r9, rrx
     9a8:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
     9ac:	84010000 	strhi	r0, [r1]
     9b0:	33a00101 	movcc	r0, #1073741824	; 0x40000000
     9b4:	33f40800 	mvnscc	r0, #0	; 0x0
     9b8:	02130800 	andseq	r0, r3, #0	; 0x0
     9bc:	09020000 	stmdbeq	r2, {}
     9c0:	ae160000 	wxorge	wr0, wr6, wr0
     9c4:	0100000d 	tsteq	r0, sp
     9c8:	09020183 	stmdbeq	r2, {r0, r1, r7, r8}
     9cc:	023e0000 	eorseq	r0, lr, #0	; 0x0
     9d0:	1a000000 	bne	9d8 <__Stack_Size+0x5d8>
     9d4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     9d8:	01170074 	tsteq	r7, r4, ror r0
     9dc:	0000077a 	andeq	r0, r0, sl, ror r7
     9e0:	0101a701 	tsteq	r1, r1, lsl #14
     9e4:	080033f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, ip, sp}
     9e8:	08003488 	stmdaeq	r0, {r3, r7, sl, ip, sp}
     9ec:	00000251 	andeq	r0, r0, r1, asr r2
     9f0:	027f0115 	rsbseq	r0, pc, #1073741829	; 0x40000005
     9f4:	67010000 	strvs	r0, [r1, -r0]
     9f8:	34880101 	strcc	r0, [r8], #257
     9fc:	34cc0800 	strbcc	r0, [ip], #2048
     a00:	027c0800 	rsbseq	r0, ip, #0	; 0x0
     a04:	094a0000 	stmdbeq	sl, {}^
     a08:	0b160000 	bleq	580a10 <__Stack_Size+0x580610>
     a0c:	01000001 	tsteq	r0, r1
     a10:	00690166 	rsbeq	r0, r9, r6, ror #2
     a14:	029b0000 	addseq	r0, fp, #0	; 0x0
     a18:	17000000 	strne	r0, [r0, -r0]
     a1c:	00056601 	andeq	r6, r5, r1, lsl #12
     a20:	01550100 	cmpeq	r5, r0, lsl #2
     a24:	0034cc01 	eorseq	ip, r4, r1, lsl #24
     a28:	0034e008 	eorseq	lr, r4, r8
     a2c:	0002b908 	andeq	fp, r2, r8, lsl #18
     a30:	f6011500 	undefined instruction 0xf6011500
     a34:	01000005 	tsteq	r0, r5
     a38:	e0010126 	and	r0, r1, r6, lsr #2
     a3c:	60080034 	andvs	r0, r8, r4, lsr r0
     a40:	e4080035 	str	r0, [r8], #-53
     a44:	aa000002 	bge	a54 <__Stack_Size+0x654>
     a48:	16000009 	strne	r0, [r0], -r9
     a4c:	000003f2 	strdeq	r0, [r0], -r2
     a50:	69012501 	stmdbvs	r1, {r0, r8, sl, sp}
     a54:	0f000000 	svceq	0x00000000
     a58:	16000003 	strne	r0, [r0], -r3
     a5c:	000000d3 	ldrdeq	r0, [r0], -r3
     a60:	45012501 	strmi	r2, [r1, #-1281]
     a64:	2d000000 	stccs	0, cr0, [r0]
     a68:	12000003 	andne	r0, r0, #3	; 0x3
     a6c:	0000031a 	andeq	r0, r0, sl, lsl r3
     a70:	ba012801 	blt	4aa7c <__Stack_Size+0x4a67c>
     a74:	02000006 	andeq	r0, r0, #6	; 0x6
     a78:	15006091 	strne	r6, [r0, #-145]
     a7c:	00039501 	andeq	r9, r3, r1, lsl #10
     a80:	01210100 	teqeq	r1, r0, lsl #2
     a84:	00356001 	eorseq	r6, r5, r1
     a88:	00357008 	eorseq	r7, r5, r8
     a8c:	00034b08 	andeq	r4, r3, r8, lsl #22
     a90:	0009d500 	andeq	sp, r9, r0, lsl #10
     a94:	00d31600 	sbcseq	r1, r3, r0, lsl #12
     a98:	20010000 	andcs	r0, r1, r0
     a9c:	00004501 	andeq	r4, r0, r1, lsl #10
     aa0:	00037600 	andeq	r7, r3, r0, lsl #12
     aa4:	01150000 	tsteq	r5, r0
     aa8:	0000068b 	andeq	r0, r0, fp, lsl #13
     aac:	01010601 	tsteq	r1, r1, lsl #12
     ab0:	08003570 	stmdaeq	r0, {r4, r5, r6, r8, sl, ip, sp}
     ab4:	080035f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, ip, sp}
     ab8:	00000394 	muleq	r0, r4, r3
     abc:	000009ff 	strdeq	r0, [r0], -pc
     ac0:	00042f12 	andeq	r2, r4, r2, lsl pc
     ac4:	01070100 	tsteq	r7, r0, lsl #2
     ac8:	00000528 	andeq	r0, r0, r8, lsr #10
     acc:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     ad0:	060a011b 	undefined
     ad4:	e1010000 	tst	r1, r0
     ad8:	0035f801 	eorseq	pc, r5, r1, lsl #16
     adc:	00364a08 	eorseq	r4, r6, r8, lsl #20
     ae0:	0003bf08 	andeq	fp, r3, r8, lsl #30
     ae4:	000a2700 	andeq	r2, sl, r0, lsl #14
     ae8:	03501c00 	cmpeq	r0, #0	; 0x0
     aec:	e2010000 	and	r0, r1, #0	; 0x0
     af0:	00000574 	andeq	r0, r0, r4, ror r5
     af4:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     af8:	040c011b 	streq	r0, [ip], #-283
     afc:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
     b00:	00364c01 	eorseq	r4, r6, r1, lsl #24
     b04:	0036d008 	eorseq	sp, r6, r8
     b08:	0003ea08 	andeq	lr, r3, r8, lsl #20
     b0c:	000a4c00 	andeq	r4, sl, r0, lsl #24
     b10:	07891d00 	streq	r1, [r9, r0, lsl #26]
     b14:	9f010000 	svcls	0x00010000
     b18:	000000ce 	andeq	r0, r0, lr, asr #1
     b1c:	25011e00 	strcs	r1, [r1, #-3584]
     b20:	01000007 	tsteq	r0, r7
     b24:	09020162 	stmdbeq	r2, {r1, r5, r6, r8}
     b28:	36d00000 	ldrbcc	r0, [r0], r0
     b2c:	37980800 	ldrcc	r0, [r8, r0, lsl #16]
     b30:	04150800 	ldreq	r0, [r5], #-2048
     b34:	691f0000 	ldmdbvs	pc, {}
     b38:	75000000 	strvc	r0, [r0]
     b3c:	2000000a 	andcs	r0, r0, sl
     b40:	000000d9 	ldrdeq	r0, [r0], -r9
     b44:	f72100ff 	undefined instruction 0xf72100ff
     b48:	01000003 	tsteq	r0, r3
     b4c:	000a872d 	andeq	r8, sl, sp, lsr #14
     b50:	03050100 	movweq	r0, #20736	; 0x5100
     b54:	20000019 	andcs	r0, r0, r9, lsl r0
     b58:	000a6504 	andeq	r6, sl, r4, lsl #10
     b5c:	00552100 	subseq	r2, r5, r0, lsl #2
     b60:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     b64:	00000a9e 	muleq	r0, lr, sl
     b68:	19030501 	stmdbne	r3, {r0, r8, sl}
     b6c:	04200001 	strteq	r0, [r0], #-1
     b70:	00000069 	andeq	r0, r0, r9, rrx
     b74:	0006fc21 	andeq	pc, r6, r1, lsr #24
     b78:	9e2e0100 	suflse	f0, f6, f0
     b7c:	0100000a 	tsteq	r0, sl
     b80:	011a0305 	tsteq	sl, r5, lsl #6
     b84:	cb212000 	blgt	848b8c <__Stack_Size+0x84878c>
     b88:	01000002 	tsteq	r0, r2
     b8c:	00007a2f 	andeq	r7, r0, pc, lsr #20
     b90:	03050100 	movweq	r0, #20736	; 0x5100
     b94:	2000011c 	andcs	r0, r0, ip, lsl r1
     b98:	0002a621 	andeq	sl, r2, r1, lsr #12
     b9c:	7a2f0100 	bvc	bc0fa4 <__Stack_Size+0xbc0ba4>
     ba0:	01000000 	tsteq	r0, r0
     ba4:	01200305 	teqeq	r0, r5, lsl #6
     ba8:	ec212000 	stc	0, cr2, [r1]
     bac:	01000000 	tsteq	r0, r0
     bb0:	00004530 	andeq	r4, r0, r0, lsr r5
     bb4:	03050100 	movweq	r0, #20736	; 0x5100
     bb8:	20000000 	andcs	r0, r0, r0
     bbc:	00033c21 	andeq	r3, r3, r1, lsr #24
     bc0:	45310100 	ldrmi	r0, [r1, #-256]!
     bc4:	01000000 	tsteq	r0, r0
     bc8:	00040305 	andeq	r0, r4, r5, lsl #6
     bcc:	57212000 	strpl	r2, [r1, -r0]!
     bd0:	01000001 	tsteq	r0, r1
     bd4:	00007f32 	andeq	r7, r0, r2, lsr pc
     bd8:	03050100 	movweq	r0, #20736	; 0x5100
     bdc:	20000008 	andcs	r0, r0, r8
     be0:	00021c21 	andeq	r1, r2, r1, lsr #24
     be4:	7a330100 	bvc	cc0fec <__Stack_Size+0xcc0bec>
     be8:	01000000 	tsteq	r0, r0
     bec:	00140305 	andseq	r0, r4, r5, lsl #6
     bf0:	571f2000 	ldrpl	r2, [pc, -r0]
     bf4:	31000000 	tstcc	r0, r0
     bf8:	2000000b 	andcs	r0, r0, fp
     bfc:	000000d9 	ldrdeq	r0, [r0], -r9
     c00:	2a210001 	bcs	840c0c <__Stack_Size+0x84080c>
     c04:	01000007 	tsteq	r0, r7
     c08:	000b2134 	andeq	r2, fp, r4, lsr r1
     c0c:	03050100 	movweq	r0, #20736	; 0x5100
     c10:	2000000a 	andcs	r0, r0, sl
     c14:	00033321 	andeq	r3, r3, r1, lsr #6
     c18:	57360100 	ldrpl	r0, [r6, -r0, lsl #2]!
     c1c:	01000000 	tsteq	r0, r0
     c20:	01240305 	teqeq	r4, r5, lsl #6
     c24:	42212000 	eormi	r2, r1, #0	; 0x0
     c28:	01000004 	tsteq	r0, r4
     c2c:	00005737 	andeq	r5, r0, r7, lsr r7
     c30:	03050100 	movweq	r0, #20736	; 0x5100
     c34:	20000126 	andcs	r0, r0, r6, lsr #2
     c38:	00010521 	andeq	r0, r1, r1, lsr #10
     c3c:	69380100 	ldmdbvs	r8!, {r8}
     c40:	01000000 	tsteq	r0, r0
     c44:	00180305 	andseq	r0, r8, r5, lsl #6
     c48:	3d212000 	stccc	0, cr2, [r1]
     c4c:	01000002 	tsteq	r0, r2
     c50:	00006939 	andeq	r6, r0, r9, lsr r9
     c54:	03050100 	movweq	r0, #20736	; 0x5100
     c58:	20000128 	andcs	r0, r0, r8, lsr #2
     c5c:	00646922 	rsbeq	r6, r4, r2, lsr #18
     c60:	00693a01 	rsbeq	r3, r9, r1, lsl #20
     c64:	05010000 	streq	r0, [r1]
     c68:	00000e03 	andeq	r0, r0, r3, lsl #28
     c6c:	01302120 	teqeq	r0, r0, lsr #2
     c70:	3b010000 	blcc	40c78 <__Stack_Size+0x40878>
     c74:	00000069 	andeq	r0, r0, r9, rrx
     c78:	29030501 	stmdbcs	r3, {r0, r8, sl}
     c7c:	21200001 	teqcs	r0, r1
     c80:	00000dae 	andeq	r0, r0, lr, lsr #27
     c84:	00693b01 	rsbeq	r3, r9, r1, lsl #22
     c88:	05010000 	streq	r0, [r1]
     c8c:	00012a03 	andeq	r2, r1, r3, lsl #20
     c90:	05790020 	ldrbeq	r0, [r9, #-32]!
     c94:	00020000 	andeq	r0, r2, r0
     c98:	0000022b 	andeq	r0, r0, fp, lsr #4
     c9c:	04880104 	streq	r0, [r8], #260
     ca0:	72010000 	andvc	r0, r1, #0	; 0x0
     ca4:	8e00000c 	cdphi	0, 0, cr0, cr0, cr12, {0}
     ca8:	98000000 	stmdals	r0, {}
     cac:	c4080037 	strgt	r0, [r8], #-55
     cb0:	05080038 	streq	r0, [r8, #-56]
     cb4:	02000003 	andeq	r0, r0, #3	; 0x3
     cb8:	0009ae01 	andeq	sl, r9, r1, lsl #28
     cbc:	01240100 	teqeq	r4, r0, lsl #2
     cc0:	08003798 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, ip, sp}
     cc4:	0800379a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sl, ip, sp}
     cc8:	01025d01 	tsteq	r2, r1, lsl #26
     ccc:	0000080f 	andeq	r0, r0, pc, lsl #16
     cd0:	9c012f01 	stcls	15, cr2, [r1], {1}
     cd4:	9e080037 	mcrls	0, 0, r0, cr8, cr7, {1}
     cd8:	01080037 	tsteq	r8, r7, lsr r0
     cdc:	9b01025d 	blls	41658 <__Stack_Size+0x41258>
     ce0:	01000009 	tsteq	r0, r9
     ce4:	37a0013e 	undefined
     ce8:	37a20800 	strcc	r0, [r2, r0, lsl #16]!
     cec:	5d010800 	stcpl	8, cr0, [r1]
     cf0:	079f0102 	ldreq	r0, [pc, r2, lsl #2]
     cf4:	4d010000 	stcmi	0, cr0, [r1]
     cf8:	0037a401 	eorseq	sl, r7, r1, lsl #8
     cfc:	0037a608 	eorseq	sl, r7, r8, lsl #12
     d00:	025d0108 	subseq	r0, sp, #2	; 0x2
     d04:	00090701 	andeq	r0, r9, r1, lsl #14
     d08:	015c0100 	cmpeq	ip, r0, lsl #2
     d0c:	080037a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, ip, sp}
     d10:	080037aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, ip, sp}
     d14:	01025d01 	tsteq	r2, r1, lsl #26
     d18:	00000880 	andeq	r0, r0, r0, lsl #17
     d1c:	ac016b01 	stcge	11, cr6, [r1], {1}
     d20:	ae080037 	mcrge	0, 0, r0, cr8, cr7, {1}
     d24:	01080037 	tsteq	r8, r7, lsr r0
     d28:	3401025d 	strcc	r0, [r1], #-605
     d2c:	01000009 	tsteq	r0, r9
     d30:	37b00176 	undefined
     d34:	37b20800 	ldrcc	r0, [r2, r0, lsl #16]!
     d38:	5d010800 	stcpl	8, cr0, [r1]
     d3c:	0c5a0102 	ldfeqe	f0, [sl], {2}
     d40:	81010000 	tsthi	r1, r0
     d44:	0037b401 	eorseq	fp, r7, r1, lsl #8
     d48:	0037b608 	eorseq	fp, r7, r8, lsl #12
     d4c:	025d0108 	subseq	r0, sp, #2	; 0x2
     d50:	000c1601 	andeq	r1, ip, r1, lsl #12
     d54:	01980100 	orrseq	r0, r8, r0, lsl #2
     d58:	080037b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, ip, sp}
     d5c:	080037ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, sl, ip, sp}
     d60:	01025d01 	tsteq	r2, r1, lsl #26
     d64:	00000800 	andeq	r0, r0, r0, lsl #16
     d68:	bc01a301 	stclt	3, cr10, [r1], {1}
     d6c:	be080037 	mcrlt	0, 0, r0, cr8, cr7, {1}
     d70:	01080037 	tsteq	r8, r7, lsr r0
     d74:	3401025d 	strcc	r0, [r1], #-605
     d78:	01000008 	tsteq	r0, r8
     d7c:	37c001ae 	strbcc	r0, [r0, lr, lsr #3]
     d80:	37c20800 	strbcc	r0, [r2, r0, lsl #16]
     d84:	5d010800 	stcpl	8, cr0, [r1]
     d88:	09510102 	ldmdbeq	r1, {r1, r8}^
     d8c:	b9010000 	stmdblt	r1, {}
     d90:	0037c401 	eorseq	ip, r7, r1, lsl #8
     d94:	0037c608 	eorseq	ip, r7, r8, lsl #12
     d98:	025d0108 	subseq	r0, sp, #2	; 0x2
     d9c:	000a0a01 	andeq	r0, sl, r1, lsl #20
     da0:	01c40100 	biceq	r0, r4, r0, lsl #2
     da4:	080037c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, ip, sp}
     da8:	080037ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sl, ip, sp}
     dac:	01025d01 	tsteq	r2, r1, lsl #26
     db0:	00000bde 	ldrdeq	r0, [r0], -lr
     db4:	cc01cf01 	stcgt	15, cr12, [r1], {1}
     db8:	ce080037 	mcrgt	0, 0, r0, cr8, cr7, {1}
     dbc:	01080037 	tsteq	r8, r7, lsr r0
     dc0:	ef01025d 	svc	0x0001025d
     dc4:	01000007 	tsteq	r0, r7
     dc8:	37d001da 	undefined
     dcc:	37d20800 	ldrbcc	r0, [r2, r0, lsl #16]
     dd0:	5d010800 	stcpl	8, cr0, [r1]
     dd4:	0ab70102 	beq	fedc11e4 <SCS_BASE+0x1edb31e4>
     dd8:	e5010000 	str	r0, [r1]
     ddc:	0037d401 	eorseq	sp, r7, r1, lsl #8
     de0:	0037d608 	eorseq	sp, r7, r8, lsl #12
     de4:	025d0108 	subseq	r0, sp, #2	; 0x2
     de8:	0007b101 	andeq	fp, r7, r1, lsl #2
     dec:	01f00100 	mvnseq	r0, r0, lsl #2
     df0:	080037d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, ip, sp}
     df4:	080037da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, ip, sp}
     df8:	01025d01 	tsteq	r2, r1, lsl #26
     dfc:	000009bb 	strheq	r0, [r0], -fp
     e00:	dc01fb01 	stcle	11, cr15, [r1], {1}
     e04:	de080037 	mcrle	0, 0, r0, cr8, cr7, {1}
     e08:	01080037 	tsteq	r8, r7, lsr r0
     e0c:	3601035d 	undefined
     e10:	0100000c 	tsteq	r0, ip
     e14:	e0010106 	and	r0, r1, r6, lsl #2
     e18:	e2080037 	and	r0, r8, #55	; 0x37
     e1c:	01080037 	tsteq	r8, r7, lsr r0
     e20:	1b01035d 	blne	41b9c <__Stack_Size+0x4179c>
     e24:	01000009 	tsteq	r0, r9
     e28:	e4010111 	str	r0, [r1], #-273
     e2c:	e6080037 	undefined
     e30:	01080037 	tsteq	r8, r7, lsr r0
     e34:	7a01035d 	bvc	41bb0 <__Stack_Size+0x417b0>
     e38:	0100000b 	tsteq	r0, fp
     e3c:	e801011c 	stmda	r1, {r2, r3, r4, r8}
     e40:	ea080037 	b	200f24 <__Stack_Size+0x200b24>
     e44:	01080037 	tsteq	r8, r7, lsr r0
     e48:	8d01035d 	stchi	3, cr0, [r1, #-372]
     e4c:	01000008 	tsteq	r0, r8
     e50:	ec010127 	stfs	f0, [r1], {39}
     e54:	ee080037 	mcr	0, 0, r0, cr8, cr7, {1}
     e58:	01080037 	tsteq	r8, r7, lsr r0
     e5c:	8e01035d 	mcrhi	3, 0, r0, cr1, cr13, {2}
     e60:	0100000a 	tsteq	r0, sl
     e64:	f0010132 	undefined instruction 0xf0010132
     e68:	f2080037 	vqadd.s8	d0, d8, d23
     e6c:	01080037 	tsteq	r8, r7, lsr r0
     e70:	b301035d 	movwlt	r0, #4957	; 0x135d
     e74:	0100000c 	tsteq	r0, ip
     e78:	f401013d 	vst4.8	{d0,d2,d4,d6}, [r1, :256]!
     e7c:	f6080037 	undefined instruction 0xf6080037
     e80:	01080037 	tsteq	r8, r7, lsr r0
     e84:	4201035d 	andmi	r0, r1, #1946157057	; 0x74000001
     e88:	0100000a 	tsteq	r0, sl
     e8c:	f8010148 	undefined instruction 0xf8010148
     e90:	fa080037 	blx	200f74 <__Stack_Size+0x200b74>
     e94:	01080037 	tsteq	r8, r7, lsr r0
     e98:	8901035d 	stmdbhi	r1, {r0, r2, r3, r4, r6, r8, r9}
     e9c:	0100000c 	tsteq	r0, ip
     ea0:	fc010153 	stc2	1, cr0, [r1], {83}
     ea4:	fe080037 	mcr2	0, 0, r0, cr8, cr7, {1}
     ea8:	01080037 	tsteq	r8, r7, lsr r0
     eac:	2201035d 	andcs	r0, r1, #1946157057	; 0x74000001
     eb0:	01000008 	tsteq	r0, r8
     eb4:	0001015f 	andeq	r0, r1, pc, asr r1
     eb8:	02080038 	andeq	r0, r8, #56	; 0x38
     ebc:	01080038 	tsteq	r8, r8, lsr r0
     ec0:	2a01035d 	bcs	41c3c <__Stack_Size+0x4183c>
     ec4:	0100000b 	tsteq	r0, fp
     ec8:	0401016b 	streq	r0, [r1], #-363
     ecc:	06080038 	undefined
     ed0:	01080038 	tsteq	r8, r8, lsr r0
     ed4:	1001035d 	andne	r0, r1, sp, asr r3
     ed8:	0100000b 	tsteq	r0, fp
     edc:	08010177 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8}
     ee0:	0a080038 	beq	200fc8 <__Stack_Size+0x200bc8>
     ee4:	01080038 	tsteq	r8, r8, lsr r0
     ee8:	5e01035d 	mcrpl	3, 0, r0, cr1, cr13, {2}
     eec:	01000008 	tsteq	r0, r8
     ef0:	0c010182 	stfeqs	f0, [r1], {130}
     ef4:	0e080038 	mcreq	0, 0, r0, cr8, cr8, {1}
     ef8:	01080038 	tsteq	r8, r8, lsr r0
     efc:	7b01035d 	blvc	41c78 <__Stack_Size+0x41878>
     f00:	0100000a 	tsteq	r0, sl
     f04:	1001018d 	andne	r0, r1, sp, lsl #3
     f08:	12080038 	andne	r0, r8, #56	; 0x38
     f0c:	01080038 	tsteq	r8, r8, lsr r0
     f10:	4701035d 	smlsdmi	r1, sp, r3, r0
     f14:	0100000c 	tsteq	r0, ip
     f18:	14010198 	strne	r0, [r1], #-408
     f1c:	16080038 	undefined
     f20:	01080038 	tsteq	r8, r8, lsr r0
     f24:	db01035d 	blle	41ca0 <__Stack_Size+0x418a0>
     f28:	01000007 	tsteq	r0, r7
     f2c:	180101a3 	stmdane	r1, {r0, r1, r5, r7, r8}
     f30:	1a080038 	bne	201018 <__Stack_Size+0x200c18>
     f34:	01080038 	tsteq	r8, r8, lsr r0
     f38:	a601035d 	undefined
     f3c:	01000008 	tsteq	r0, r8
     f40:	1c0101af 	stfnes	f0, [r1], {175}
     f44:	1e080038 	mcrne	0, 0, r0, cr8, cr8, {1}
     f48:	01080038 	tsteq	r8, r8, lsr r0
     f4c:	c601035d 	undefined
     f50:	0100000b 	tsteq	r0, fp
     f54:	200101bb 	strhcs	r0, [r1], -fp
     f58:	22080038 	andcs	r0, r8, #56	; 0x38
     f5c:	01080038 	tsteq	r8, r8, lsr r0
     f60:	cc01035d 	stcgt	3, cr0, [r1], {93}
     f64:	01000008 	tsteq	r0, r8
     f68:	240101c6 	strcs	r0, [r1], #-454
     f6c:	26080038 	undefined
     f70:	01080038 	tsteq	r8, r8, lsr r0
     f74:	6b01035d 	blvs	41cf0 <__Stack_Size+0x418f0>
     f78:	0100000a 	tsteq	r0, sl
     f7c:	280101dd 	stmdacs	r1, {r0, r2, r3, r4, r6, r7, r8}
     f80:	2a080038 	bcs	201068 <__Stack_Size+0x200c68>
     f84:	01080038 	tsteq	r8, r8, lsr r0
     f88:	b601035d 	undefined
     f8c:	0100000b 	tsteq	r0, fp
     f90:	2c0101e8 	stfcss	f0, [r1], {232}
     f94:	2e080038 	mcrcs	0, 0, r0, cr8, cr8, {1}
     f98:	01080038 	tsteq	r8, r8, lsr r0
     f9c:	1b01035d 	blne	41d18 <__Stack_Size+0x41918>
     fa0:	0100000a 	tsteq	r0, sl
     fa4:	300101f3 	strdcc	r0, [r1], -r3
     fa8:	32080038 	andcc	r0, r8, #56	; 0x38
     fac:	01080038 	tsteq	r8, r8, lsr r0
     fb0:	4301035d 	movwmi	r0, #4957	; 0x135d
     fb4:	0100000b 	tsteq	r0, fp
     fb8:	340101fe 	strcc	r0, [r1], #-510
     fbc:	36080038 	undefined
     fc0:	01080038 	tsteq	r8, r8, lsr r0
     fc4:	d801035d 	stmdale	r1, {r0, r2, r3, r4, r6, r8, r9}
     fc8:	0100000a 	tsteq	r0, sl
     fcc:	38010209 	stmdacc	r1, {r0, r3, r9}
     fd0:	3a080038 	bcc	2010b8 <__Stack_Size+0x200cb8>
     fd4:	01080038 	tsteq	r8, r8, lsr r0
     fd8:	eb01035d 	bl	41d54 <__Stack_Size+0x41954>
     fdc:	0100000a 	tsteq	r0, sl
     fe0:	3c010214 	sfmcc	f0, 4, [r1], {20}
     fe4:	3e080038 	mcrcc	0, 0, r0, cr8, cr8, {1}
     fe8:	01080038 	tsteq	r8, r8, lsr r0
     fec:	5601035d 	undefined
     ff0:	0100000b 	tsteq	r0, fp
     ff4:	4001021f 	andmi	r0, r1, pc, lsl r2
     ff8:	42080038 	andmi	r0, r8, #56	; 0x38
     ffc:	01080038 	tsteq	r8, r8, lsr r0
    1000:	2601035d 	undefined
    1004:	0100000c 	tsteq	r0, ip
    1008:	4401022a 	strmi	r0, [r1], #-554
    100c:	46080038 	undefined
    1010:	01080038 	tsteq	r8, r8, lsr r0
    1014:	a401035d 	strge	r0, [r1], #-861
    1018:	0100000b 	tsteq	r0, fp
    101c:	48010241 	stmdami	r1, {r0, r6, r9}
    1020:	4a080038 	bmi	201108 <__Stack_Size+0x200d08>
    1024:	01080038 	tsteq	r8, r8, lsr r0
    1028:	3f01035d 	svccc	0x0001035d
    102c:	01000009 	tsteq	r0, r9
    1030:	4c01024c 	sfmmi	f0, 4, [r1], {76}
    1034:	4e080038 	mcrmi	0, 0, r0, cr8, cr8, {1}
    1038:	01080038 	tsteq	r8, r8, lsr r0
    103c:	f201035d 	vcge.s8	q0, <illegal reg q0.5>, <illegal reg q6.5>
    1040:	01000008 	tsteq	r0, r8
    1044:	50010257 	andpl	r0, r1, r7, asr r2
    1048:	52080038 	andpl	r0, r8, #56	; 0x38
    104c:	01080038 	tsteq	r8, r8, lsr r0
    1050:	2e01035d 	mcrcs	3, 0, r0, cr1, cr13, {2}
    1054:	0100000a 	tsteq	r0, sl
    1058:	54010262 	strpl	r0, [r1], #-610
    105c:	56080038 	undefined
    1060:	01080038 	tsteq	r8, r8, lsr r0
    1064:	e501035d 	str	r0, [r1, #-861]
    1068:	01000009 	tsteq	r0, r9
    106c:	5801026d 	stmdapl	r1, {r0, r2, r3, r5, r6, r9}
    1070:	5a080038 	bpl	201158 <__Stack_Size+0x200d58>
    1074:	01080038 	tsteq	r8, r8, lsr r0
    1078:	6601035d 	undefined
    107c:	0100000b 	tsteq	r0, fp
    1080:	5c010278 	sfmpl	f0, 4, [r1], {120}
    1084:	5e080038 	mcrpl	0, 0, r0, cr8, cr8, {1}
    1088:	01080038 	tsteq	r8, r8, lsr r0
    108c:	b901035d 	stmdblt	r1, {r0, r2, r3, r4, r6, r8, r9}
    1090:	01000008 	tsteq	r0, r8
    1094:	60010284 	andvs	r0, r1, r4, lsl #5
    1098:	62080038 	andvs	r0, r8, #56	; 0x38
    109c:	01080038 	tsteq	r8, r8, lsr r0
    10a0:	4601035d 	undefined
    10a4:	01000008 	tsteq	r0, r8
    10a8:	64010290 	strvs	r0, [r1], #-656
    10ac:	66080038 	undefined
    10b0:	01080038 	tsteq	r8, r8, lsr r0
    10b4:	df01035d 	svcle	0x0001035d
    10b8:	01000008 	tsteq	r0, r8
    10bc:	6801029b 	stmdavs	r1, {r0, r1, r3, r4, r7, r9}
    10c0:	6a080038 	bvs	2011a8 <__Stack_Size+0x200da8>
    10c4:	01080038 	tsteq	r8, r8, lsr r0
    10c8:	c801035d 	stmdagt	r1, {r0, r2, r3, r4, r6, r8, r9}
    10cc:	0100000a 	tsteq	r0, sl
    10d0:	6c0102a6 	sfmvs	f0, 4, [r1], {166}
    10d4:	6e080038 	mcrvs	0, 0, r0, cr8, cr8, {1}
    10d8:	01080038 	tsteq	r8, r8, lsr r0
    10dc:	a701035d 	smlsdge	r1, sp, r3, r0
    10e0:	0100000a 	tsteq	r0, sl
    10e4:	700102b1 	strhvc	r0, [r1], -r1
    10e8:	72080038 	andvc	r0, r8, #56	; 0x38
    10ec:	01080038 	tsteq	r8, r8, lsr r0
    10f0:	fa01035d 	blx	41e6c <__Stack_Size+0x41a6c>
    10f4:	01000009 	tsteq	r0, r9
    10f8:	740102bc 	strvc	r0, [r1], #-700
    10fc:	76080038 	undefined
    1100:	01080038 	tsteq	r8, r8, lsr r0
    1104:	6001035d 	andvs	r0, r1, sp, asr r3
    1108:	01000009 	tsteq	r0, r9
    110c:	780102c7 	stmdavc	r1, {r0, r1, r2, r6, r7, r9}
    1110:	7a080038 	bvc	2011f8 <__Stack_Size+0x200df8>
    1114:	01080038 	tsteq	r8, r8, lsr r0
    1118:	5b01035d 	blpl	41e94 <__Stack_Size+0x41a94>
    111c:	0100000a 	tsteq	r0, sl
    1120:	7c0102d2 	sfmvc	f0, 4, [r1], {210}
    1124:	7e080038 	mcrvc	0, 0, r0, cr8, cr8, {1}
    1128:	01080038 	tsteq	r8, r8, lsr r0
    112c:	9301035d 	movwls	r0, #4957	; 0x135d
    1130:	0100000b 	tsteq	r0, fp
    1134:	800102dd 	ldrdhi	r0, [r1], -sp
    1138:	82080038 	andhi	r0, r8, #56	; 0x38
    113c:	01080038 	tsteq	r8, r8, lsr r0
    1140:	a201035d 	andge	r0, r1, #1946157057	; 0x74000001
    1144:	0100000c 	tsteq	r0, ip
    1148:	840102e8 	strhi	r0, [r1], #-744
    114c:	86080038 	undefined
    1150:	01080038 	tsteq	r8, r8, lsr r0
    1154:	6201035d 	andvs	r0, r1, #1946157057	; 0x74000001
    1158:	0100000c 	tsteq	r0, ip
    115c:	880102f3 	stmdahi	r1, {r0, r1, r4, r5, r6, r7, r9}
    1160:	8a080038 	bhi	201248 <__Stack_Size+0x200e48>
    1164:	01080038 	tsteq	r8, r8, lsr r0
    1168:	0601035d 	undefined
    116c:	0100000c 	tsteq	r0, ip
    1170:	8c0102fe 	sfmhi	f0, 4, [r1], {254}
    1174:	8e080038 	mcrhi	0, 0, r0, cr8, cr8, {1}
    1178:	01080038 	tsteq	r8, r8, lsr r0
    117c:	ed01035d 	stc	3, cr0, [r1, #-372]
    1180:	0100000b 	tsteq	r0, fp
    1184:	90010309 	andls	r0, r1, r9, lsl #6
    1188:	92080038 	andls	r0, r8, #56	; 0x38
    118c:	01080038 	tsteq	r8, r8, lsr r0
    1190:	c201035d 	andgt	r0, r1, #1946157057	; 0x74000001
    1194:	01000007 	tsteq	r0, r7
    1198:	94010314 	strls	r0, [r1], #-788
    119c:	96080038 	undefined
    11a0:	01080038 	tsteq	r8, r8, lsr r0
    11a4:	cc01035d 	stcgt	3, cr0, [r1], {93}
    11a8:	01000009 	tsteq	r0, r9
    11ac:	9801031f 	stmdals	r1, {r0, r1, r2, r3, r4, r8, r9}
    11b0:	9a080038 	bls	201298 <__Stack_Size+0x200e98>
    11b4:	01080038 	tsteq	r8, r8, lsr r0
    11b8:	7001035d 	andvc	r0, r1, sp, asr r3
    11bc:	01000009 	tsteq	r0, r9
    11c0:	9c01032b 	stcls	3, cr0, [r1], {43}
    11c4:	9e080038 	mcrls	0, 0, r0, cr8, cr8, {1}
    11c8:	01080038 	tsteq	r8, r8, lsr r0
    11cc:	fe01045d 	mcr2	4, 0, r0, cr1, cr13, {2}
    11d0:	0100000a 	tsteq	r0, sl
    11d4:	a0010235 	andge	r0, r1, r5, lsr r2
    11d8:	ac080038 	stcge	0, cr0, [r8], {56}
    11dc:	40080038 	andmi	r0, r8, r8, lsr r0
    11e0:	04000004 	streq	r0, [r0], #-4
    11e4:	00098b01 	andeq	r8, r9, r1, lsl #22
    11e8:	01d10100 	bicseq	r0, r1, r0, lsl #2
    11ec:	0038ac01 	eorseq	sl, r8, r1, lsl #24
    11f0:	0038b808 	eorseq	fp, r8, r8, lsl #16
    11f4:	00046b08 	andeq	r6, r4, r8, lsl #22
    11f8:	71010500 	tstvc	r1, r0, lsl #10
    11fc:	01000008 	tsteq	r0, r8
    1200:	38b8018c 	ldmcc	r8!, {r2, r3, r7, r8}
    1204:	38c40800 	stmiacc	r4, {fp}^
    1208:	04960800 	ldreq	r0, [r6], #2048
    120c:	68000000 	stmdavs	r0, {}
    1210:	02000001 	andeq	r0, r0, #1	; 0x1
    1214:	00029300 	andeq	r9, r2, r0, lsl #6
    1218:	88010400 	stmdahi	r1, {sl}
    121c:	01000004 	tsteq	r0, r4
    1220:	00000d2a 	andeq	r0, r0, sl, lsr #26
    1224:	0000008e 	andeq	r0, r0, lr, lsl #1
    1228:	080038c4 	stmdaeq	r0, {r2, r6, r7, fp, ip, sp}
    122c:	08003950 	stmdaeq	r0, {r4, r6, r8, fp, ip, sp}
    1230:	0000045e 	andeq	r0, r0, lr, asr r4
    1234:	0cfd0102 	ldfeqe	f0, [sp], #8
    1238:	48010000 	stmdami	r1, {}
    123c:	00003e01 	andeq	r3, r0, r1, lsl #28
    1240:	0038c400 	eorseq	ip, r8, r0, lsl #8
    1244:	0038d008 	eorseq	sp, r8, r8
    1248:	0004c108 	andeq	ip, r4, r8, lsl #2
    124c:	05040300 	streq	r0, [r4, #-768]
    1250:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1254:	0d0d0104 	stfeqs	f0, [sp, #-16]
    1258:	3f010000 	svccc	0x00010000
    125c:	0038d001 	eorseq	sp, r8, r1
    1260:	0038e408 	eorseq	lr, r8, r8, lsl #8
    1264:	0004ec08 	andeq	lr, r4, r8, lsl #24
    1268:	00006e00 	andeq	r6, r0, r0, lsl #28
    126c:	0cf20500 	cfldr64eq	mvdx0, [r2]
    1270:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    1274:	0000003e 	andeq	r0, r0, lr, lsr r0
    1278:	00000517 	andeq	r0, r0, r7, lsl r5
    127c:	4e010600 	cfmadd32mi	mvax0, mvfx0, mvfx1, mvfx0
    1280:	0100000d 	tsteq	r0, sp
    1284:	003e012d 	eorseq	r0, lr, sp, lsr #2
    1288:	38e40000 	stmiacc	r4!, {}^
    128c:	390a0800 	stmdbcc	sl, {fp}
    1290:	05350800 	ldreq	r0, [r5, #-2048]!
    1294:	00b50000 	adcseq	r0, r5, r0
    1298:	3c050000 	stccc	0, cr0, [r5], {0}
    129c:	0100000d 	tsteq	r0, sp
    12a0:	0000b52c 	andeq	fp, r0, ip, lsr #10
    12a4:	00055400 	andeq	r5, r5, r0, lsl #8
    12a8:	0d440500 	cfstr64eq	mvdx0, [r4]
    12ac:	2c010000 	stccs	0, cr0, [r1], {0}
    12b0:	0000003e 	andeq	r0, r0, lr, lsr r0
    12b4:	00000572 	andeq	r0, r0, r2, ror r5
    12b8:	01006907 	tsteq	r0, r7, lsl #18
    12bc:	0000bb33 	andeq	fp, r0, r3, lsr fp
    12c0:	00540100 	subseq	r0, r4, r0, lsl #2
    12c4:	00bb0408 	adcseq	r0, fp, r8, lsl #8
    12c8:	01090000 	tsteq	r9, r0
    12cc:	0005d208 	andeq	sp, r5, r8, lsl #4
    12d0:	d9010600 	stmdble	r1, {r9, sl}
    12d4:	0100000c 	tsteq	r0, ip
    12d8:	003e011f 	eorseq	r0, lr, pc, lsl r1
    12dc:	390c0000 	stmdbcc	ip, {}
    12e0:	39280800 	stmdbcc	r8!, {fp}
    12e4:	05900800 	ldreq	r0, [r0, #2048]
    12e8:	01090000 	tsteq	r9, r0
    12ec:	3c050000 	stccc	0, cr0, [r5], {0}
    12f0:	0100000d 	tsteq	r0, sp
    12f4:	0000b51e 	andeq	fp, r0, lr, lsl r5
    12f8:	0005af00 	andeq	sl, r5, r0, lsl #30
    12fc:	0d440500 	cfstr64eq	mvdx0, [r4]
    1300:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    1304:	0000003e 	andeq	r0, r0, lr, lsr r0
    1308:	000005cd 	andeq	r0, r0, sp, asr #11
    130c:	01006907 	tsteq	r0, r7, lsl #18
    1310:	0000bb25 	andeq	fp, r0, r5, lsr #22
    1314:	00540100 	subseq	r0, r4, r0, lsl #2
    1318:	0ce4010a 	stfeqe	f0, [r4], #40
    131c:	18010000 	stmdane	r1, {}
    1320:	00392801 	eorseq	r2, r9, r1, lsl #16
    1324:	00393408 	eorseq	r3, r9, r8, lsl #8
    1328:	0005eb08 	andeq	lr, r5, r8, lsl #22
    132c:	59010a00 	stmdbpl	r1, {r9, fp}
    1330:	0100000d 	tsteq	r0, sp
    1334:	39340110 	ldmdbcc	r4!, {r4, r8}
    1338:	39400800 	stmdbcc	r0, {fp}^
    133c:	06160800 	ldreq	r0, [r6], -r0, lsl #16
    1340:	010b0000 	tsteq	fp, r0
    1344:	00000ccc 	andeq	r0, r0, ip, asr #25
    1348:	3e010501 	cfsh32cc	mvfx0, mvfx1, #1
    134c:	40000000 	andmi	r0, r0, r0
    1350:	50080039 	andpl	r0, r8, r9, lsr r0
    1354:	41080039 	tstmi	r8, r9, lsr r0
    1358:	05000006 	streq	r0, [r0, #-6]
    135c:	00000d21 	andeq	r0, r0, r1, lsr #26
    1360:	003e0401 	eorseq	r0, lr, r1, lsl #8
    1364:	066c0000 	strbteq	r0, [ip], -r0
    1368:	d3050000 	movwle	r0, #20480	; 0x5000
    136c:	01000000 	tsteq	r0, r0
    1370:	00003e04 	andeq	r3, r0, r4, lsl #28
    1374:	00067f00 	andeq	r7, r6, r0, lsl #30
    1378:	89000000 	stmdbhi	r0, {}
    137c:	02000005 	andeq	r0, r0, #5	; 0x5
    1380:	00035700 	andeq	r5, r3, r0, lsl #14
    1384:	88010400 	stmdahi	r1, {sl}
    1388:	01000004 	tsteq	r0, r4
    138c:	00000e58 	andeq	r0, r0, r8, asr lr
    1390:	0000008e 	andeq	r0, r0, lr, lsl #1
    1394:	08003950 	stmdaeq	r0, {r4, r6, r8, fp, ip, sp}
    1398:	08003d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, ip, sp}
    139c:	000004cf 	andeq	r0, r0, pc, asr #9
    13a0:	0e0b0102 	adfeqe	f0, f3, f2
    13a4:	1c010000 	stcne	0, cr0, [r1], {0}
    13a8:	00510101 	subseq	r0, r1, r1, lsl #2
    13ac:	51010000 	tstpl	r1, r0
    13b0:	03000000 	movweq	r0, #0	; 0x0
    13b4:	00000da7 	andeq	r0, r0, r7, lsr #27
    13b8:	51011b01 	tstpl	r1, r1, lsl #22
    13bc:	04000000 	streq	r0, [r0]
    13c0:	00000f41 	andeq	r0, r0, r1, asr #30
    13c4:	58011d01 	stmdapl	r1, {r0, r8, sl, fp, ip}
    13c8:	00000000 	andeq	r0, r0, r0
    13cc:	69050405 	stmdbvs	r5, {r0, r2, sl}
    13d0:	0600746e 	streq	r7, [r0], -lr, ror #8
    13d4:	07120702 	ldreq	r0, [r2, -r2, lsl #14]
    13d8:	01020000 	tsteq	r2, r0
    13dc:	00000dd1 	ldrdeq	r0, [r0], -r1
    13e0:	01012401 	tsteq	r1, r1, lsl #8
    13e4:	00000051 	andeq	r0, r0, r1, asr r0
    13e8:	00008b01 	andeq	r8, r0, r1, lsl #22
    13ec:	0da70300 	stceq	3, cr0, [r7]
    13f0:	23010000 	movwcs	r0, #4096	; 0x1000
    13f4:	00005101 	andeq	r5, r0, r1, lsl #2
    13f8:	0f410400 	svceq	0x00410400
    13fc:	25010000 	strcs	r0, [r1]
    1400:	00005801 	andeq	r5, r0, r1, lsl #16
    1404:	01020000 	tsteq	r2, r0
    1408:	00000ede 	ldrdeq	r0, [r0], -lr
    140c:	01011201 	tsteq	r1, r1, lsl #4
    1410:	00000051 	andeq	r0, r0, r1, asr r0
    1414:	0000c301 	andeq	ip, r0, r1, lsl #6
    1418:	0e130300 	cdpeq	3, 1, cr0, cr3, cr0, {0}
    141c:	11010000 	tstne	r1, r0
    1420:	00005101 	andeq	r5, r0, r1, lsl #2
    1424:	0dd90300 	ldcleq	3, cr0, [r9]
    1428:	11010000 	tstne	r1, r0
    142c:	00005101 	andeq	r5, r0, r1, lsl #2
    1430:	0da70400 	cfstrseq	mvf0, [r7]
    1434:	13010000 	movwne	r0, #4096	; 0x1000
    1438:	00005801 	andeq	r5, r0, r1, lsl #16
    143c:	01070000 	tsteq	r7, r0
    1440:	00000ec4 	andeq	r0, r0, r4, asr #29
    1444:	5101e701 	tstpl	r1, r1, lsl #14
    1448:	50000000 	andpl	r0, r0, r0
    144c:	5c080039 	stcpl	0, cr0, [r8], {57}
    1450:	01080039 	tsteq	r8, r9, lsr r0
    1454:	9201085d 	andls	r0, r1, #6094848	; 0x5d0000
    1458:	0100000e 	tsteq	r0, lr
    145c:	395c01ec 	ldmdbcc	ip, {r2, r3, r5, r6, r7, r8}^
    1460:	39680800 	stmdbcc	r8!, {fp}^
    1464:	5d010800 	stcpl	8, cr0, [r1]
    1468:	000000fe 	strdeq	r0, [r0], -lr
    146c:	00646909 	rsbeq	r6, r4, r9, lsl #18
    1470:	0051eb01 	subseq	lr, r1, r1, lsl #22
    1474:	50010000 	andpl	r0, r1, r0
    1478:	24010800 	strcs	r0, [r1], #-2048
    147c:	0100000f 	tsteq	r0, pc
    1480:	396801f1 	stmdbcc	r8!, {r0, r4, r5, r6, r7, r8}^
    1484:	39740800 	ldmdbcc	r4!, {fp}^
    1488:	5d010800 	stcpl	8, cr0, [r1]
    148c:	00000123 	andeq	r0, r0, r3, lsr #2
    1490:	000f350a 	andeq	r3, pc, sl, lsl #10
    1494:	51f00100 	mvnspl	r0, r0, lsl #2
    1498:	01000000 	tsteq	r0, r0
    149c:	01080050 	qaddeq	r0, r0, r8
    14a0:	00000df0 	strdeq	r0, [r0], -r0
    14a4:	7401f601 	strvc	pc, [r1], #-1537
    14a8:	80080039 	andhi	r0, r8, r9, lsr r0
    14ac:	01080039 	tsteq	r8, r9, lsr r0
    14b0:	0001555d 	andeq	r5, r1, sp, asr r5
    14b4:	0f530a00 	svceq	0x00530a00
    14b8:	f5010000 	undefined instruction 0xf5010000
    14bc:	00000051 	andeq	r0, r0, r1, asr r0
    14c0:	6d0a5001 	stcvs	0, cr5, [sl, #-4]
    14c4:	01000030 	tsteq	r0, r0, lsr r0
    14c8:	000051f5 	strdeq	r5, [r0], -r5
    14cc:	00510100 	subseq	r0, r1, r0, lsl #2
    14d0:	0e7a0108 	rpweqe	f0, f2, #0.0
    14d4:	fb010000 	blx	414de <__Stack_Size+0x410de>
    14d8:	00398001 	eorseq	r8, r9, r1
    14dc:	00398c08 	eorseq	r8, r9, r8, lsl #24
    14e0:	7a5d0108 	bvc	1741908 <__Stack_Size+0x1741508>
    14e4:	0a000001 	beq	14f0 <__Stack_Size+0x10f0>
    14e8:	00000dca 	andeq	r0, r0, sl, asr #27
    14ec:	0051fa01 	subseq	pc, r1, r1, lsl #20
    14f0:	50010000 	andpl	r0, r1, r0
    14f4:	32010b00 	andcc	r0, r1, #0	; 0x0
    14f8:	0100000e 	tsteq	r0, lr
    14fc:	51010100 	tstpl	r1, r0, lsl #2
    1500:	8c000000 	stchi	0, cr0, [r0], {0}
    1504:	a0080039 	andge	r0, r8, r9, lsr r0
    1508:	01080039 	tsteq	r8, r9, lsr r0
    150c:	0001a65d 	andeq	sl, r1, sp, asr r6
    1510:	0f460c00 	svceq	0x00460c00
    1514:	ff010000 	undefined instruction 0xff010000
    1518:	00000051 	andeq	r0, r0, r1, asr r0
    151c:	00000692 	muleq	r0, r2, r6
    1520:	b9010d00 	stmdblt	r1, {r8, sl, fp}
    1524:	0100000d 	tsteq	r0, sp
    1528:	51010108 	tstpl	r1, r8, lsl #2
    152c:	a0000000 	andge	r0, r0, r0
    1530:	ac080039 	stcge	0, cr0, [r8], {57}
    1534:	01080039 	tsteq	r8, r9, lsr r0
    1538:	eb010b5d 	bl	442b4 <__Stack_Size+0x43eb4>
    153c:	0100000e 	tsteq	r0, lr
    1540:	5101010d 	tstpl	r1, sp, lsl #2
    1544:	ac000000 	stcge	0, cr0, [r0], {0}
    1548:	b8080039 	stmdalt	r8, {r0, r3, r4, r5}
    154c:	01080039 	tsteq	r8, r9, lsr r0
    1550:	0001eb5d 	andeq	lr, r1, sp, asr fp
    1554:	0f530e00 	svceq	0x00530e00
    1558:	0c010000 	stceq	0, cr0, [r1], {0}
    155c:	00005101 	andeq	r5, r0, r1, lsl #2
    1560:	0006a500 	andeq	sl, r6, r0, lsl #10
    1564:	8b0f0000 	blhi	3c156c <__Stack_Size+0x3c116c>
    1568:	b8000000 	stmdalt	r0, {}
    156c:	c0080039 	andgt	r0, r8, r9, lsr r0
    1570:	01080039 	tsteq	r8, r9, lsr r0
    1574:	0002145d 	andeq	r1, r2, sp, asr r4
    1578:	009e1000 	addseq	r1, lr, r0
    157c:	06b80000 	ldrteq	r0, [r8], r0
    1580:	aa110000 	bge	441588 <__Stack_Size+0x441188>
    1584:	01000000 	tsteq	r0, r0
    1588:	00b61251 	adcseq	r1, r6, r1, asr r2
    158c:	0f000000 	svceq	0x00000000
    1590:	00000025 	andeq	r0, r0, r5, lsr #32
    1594:	080039c0 	stmdaeq	r0, {r6, r7, r8, fp, ip, sp}
    1598:	080039c4 	stmdaeq	r0, {r2, r6, r7, r8, fp, ip, sp}
    159c:	02365d01 	eorseq	r5, r6, #64	; 0x40
    15a0:	38100000 	ldmdacc	r0, {}
    15a4:	cb000000 	blgt	15ac <__Stack_Size+0x11ac>
    15a8:	12000006 	andne	r0, r0, #6	; 0x6
    15ac:	00000044 	andeq	r0, r0, r4, asr #32
    15b0:	005f0f00 	subseq	r0, pc, r0, lsl #30
    15b4:	39c40000 	stmibcc	r4, {}^
    15b8:	39cc0800 	stmibcc	ip, {fp}^
    15bc:	5d010800 	stcpl	8, cr0, [r1]
    15c0:	0000025c 	andeq	r0, r0, ip, asr r2
    15c4:	00007210 	andeq	r7, r0, r0, lsl r2
    15c8:	0006de00 	andeq	sp, r6, r0, lsl #28
    15cc:	007e1300 	rsbseq	r1, lr, r0, lsl #6
    15d0:	06f10000 	ldrbteq	r0, [r1], r0
    15d4:	14000000 	strne	r0, [r0]
    15d8:	000e1b01 	andeq	r1, lr, r1, lsl #22
    15dc:	016c0100 	cmneq	ip, r0, lsl #2
    15e0:	080039cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp, ip, sp}
    15e4:	08003b34 	stmdaeq	r0, {r2, r4, r5, r8, r9, fp, ip, sp}
    15e8:	00000704 	andeq	r0, r0, r4, lsl #14
    15ec:	000002aa 	andeq	r0, r0, sl, lsr #5
    15f0:	01006915 	tsteq	r0, r5, lsl r9
    15f4:	0002aa6d 	andeq	sl, r2, sp, ror #20
    15f8:	00072f00 	andeq	r2, r7, r0, lsl #30
    15fc:	006a1500 	rsbeq	r1, sl, r0, lsl #10
    1600:	02aa6d01 	adceq	r6, sl, #64	; 0x40
    1604:	07790000 	ldrbeq	r0, [r9, -r0]!
    1608:	4d160000 	ldcmi	0, cr0, [r6]
    160c:	0100000f 	tsteq	r0, pc
    1610:	0002aa6d 	andeq	sl, r2, sp, ror #20
    1614:	0e291700 	cdpeq	7, 2, cr1, cr9, cr0, {0}
    1618:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    161c:	000002aa 	andeq	r0, r0, sl, lsr #5
    1620:	000007ad 	andeq	r0, r0, sp, lsr #15
    1624:	08010600 	stmdaeq	r1, {r9, sl}
    1628:	000005d2 	ldrdeq	r0, [r0], -r2
    162c:	0d780114 	ldfeqe	f0, [r8, #-80]!
    1630:	29010000 	stmdbcs	r1, {}
    1634:	003b3401 	eorseq	r3, fp, r1, lsl #8
    1638:	003bf808 	eorseq	pc, fp, r8, lsl #16
    163c:	0007cb08 	andeq	ip, r7, r8, lsl #22
    1640:	0002ff00 	andeq	pc, r2, r0, lsl #30
    1644:	00691500 	rsbeq	r1, r9, r0, lsl #10
    1648:	02aa2a01 	adceq	r2, sl, #4096	; 0x1000
    164c:	07f60000 	ldrbeq	r0, [r6, r0]!
    1650:	70180000 	andsvc	r0, r8, r0
    1654:	0100000e 	tsteq	r0, lr
    1658:	0002aa2b 	andeq	sl, r2, fp, lsr #20
    165c:	16540100 	ldrbne	r0, [r4], -r0, lsl #2
    1660:	00000e6c 	andeq	r0, r0, ip, ror #28
    1664:	02aa2b01 	adceq	r2, sl, #1024	; 0x400
    1668:	29170000 	ldmdbcs	r7, {}
    166c:	0100000e 	tsteq	r0, lr
    1670:	0002aa2c 	andeq	sl, r2, ip, lsr #20
    1674:	00081400 	andeq	r1, r8, r0, lsl #8
    1678:	01190000 	tsteq	r9, r0
    167c:	00000f14 	andeq	r0, r0, r4, lsl pc
    1680:	f801d601 	undefined instruction 0xf801d601
    1684:	1808003b 	stmdane	r8, {r0, r1, r3, r4, r5}
    1688:	2708003c 	smladxcs	r8, ip, r0, r0
    168c:	1a000008 	bne	16b4 <__Stack_Size+0x12b4>
    1690:	000e4901 	andeq	r4, lr, r1, lsl #18
    1694:	01660100 	cmneq	r6, r0, lsl #2
    1698:	003c1801 	eorseq	r1, ip, r1, lsl #16
    169c:	003c5008 	eorseq	r5, ip, r8
    16a0:	00084608 	andeq	r4, r8, r8, lsl #12
    16a4:	00038300 	andeq	r8, r3, r0, lsl #6
    16a8:	64691b00 	strbtvs	r1, [r9], #-2816
    16ac:	01650100 	cmneq	r5, r0, lsl #2
    16b0:	00000051 	andeq	r0, r0, r1, asr r0
    16b4:	00000871 	andeq	r0, r0, r1, ror r8
    16b8:	0015ed0e 	andseq	lr, r5, lr, lsl #26
    16bc:	01650100 	cmneq	r5, r0, lsl #2
    16c0:	00000051 	andeq	r0, r0, r1, asr r0
    16c4:	0000088f 	andeq	r0, r0, pc, lsl #17
    16c8:	00306d0e 	eorseq	r6, r0, lr, lsl #26
    16cc:	01650100 	cmneq	r5, r0, lsl #2
    16d0:	00000051 	andeq	r0, r0, r1, asr r0
    16d4:	000008ad 	andeq	r0, r0, sp, lsr #17
    16d8:	0000251c 	andeq	r2, r0, ip, lsl r5
    16dc:	003c2a00 	eorseq	r2, ip, r0, lsl #20
    16e0:	003c2e08 	eorseq	r2, ip, r8, lsl #28
    16e4:	016c0108 	cmneq	ip, r8, lsl #2
    16e8:	0002271d 	andeq	r2, r2, sp, lsl r7
    16ec:	3c2a1e00 	stccc	14, cr1, [sl]
    16f0:	3c2e0800 	stccc	8, cr0, [lr]
    16f4:	44120800 	ldrmi	r0, [r2], #-2048
    16f8:	00000000 	andeq	r0, r0, r0
    16fc:	011f0000 	tsteq	pc, r0
    1700:	00000d9e 	muleq	r0, lr, sp
    1704:	01015401 	tsteq	r1, r1, lsl #8
    1708:	00000051 	andeq	r0, r0, r1, asr r0
    170c:	08003c50 	stmdaeq	r0, {r4, r6, sl, fp, ip, sp}
    1710:	08003c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, ip, sp}
    1714:	000008d6 	ldrdeq	r0, [r0], -r6
    1718:	000003ef 	andeq	r0, r0, pc, ror #7
    171c:	0064691b 	rsbeq	r6, r4, fp, lsl r9
    1720:	51015301 	tstpl	r1, r1, lsl #6
    1724:	01000000 	tsteq	r0, r0
    1728:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    172c:	000015ed 	andeq	r1, r0, sp, ror #11
    1730:	51015301 	tstpl	r1, r1, lsl #6
    1734:	1f000000 	svcne	0x00000000
    1738:	1c000009 	stcne	0, cr0, [r0], {9}
    173c:	0000008b 	andeq	r0, r0, fp, lsl #1
    1740:	08003c6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, fp, ip, sp}
    1744:	08003c7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, fp, ip, sp}
    1748:	1d016201 	sfmne	f6, 4, [r1, #-4]
    174c:	00000207 	andeq	r0, r0, r7, lsl #4
    1750:	0001fe1d 	andeq	pc, r1, sp, lsl lr
    1754:	3c6e1e00 	stclcc	14, cr1, [lr]
    1758:	3c7a0800 	ldclcc	8, cr0, [sl]
    175c:	b6130800 	ldrlt	r0, [r3], -r0, lsl #16
    1760:	3d000000 	stccc	0, cr0, [r0]
    1764:	00000009 	andeq	r0, r0, r9
    1768:	011a0000 	tsteq	sl, r0
    176c:	00000ea6 	andeq	r0, r0, r6, lsr #29
    1770:	01014701 	tsteq	r1, r1, lsl #14
    1774:	08003c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, ip, sp}
    1778:	08003cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip, sp}
    177c:	00000950 	andeq	r0, r0, r0, asr r9
    1780:	00000439 	andeq	r0, r0, r9, lsr r4
    1784:	0064691b 	rsbeq	r6, r4, fp, lsl r9
    1788:	51014601 	tstpl	r1, r1, lsl #12
    178c:	7b000000 	blvc	1794 <__Stack_Size+0x1394>
    1790:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    1794:	000015ed 	andeq	r1, r0, sp, ror #11
    1798:	51014601 	tstpl	r1, r1, lsl #12
    179c:	99000000 	stmdbls	r0, {}
    17a0:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    17a4:	0000306d 	andeq	r3, r0, sp, rrx
    17a8:	51014601 	tstpl	r1, r1, lsl #12
    17ac:	b7000000 	strlt	r0, [r0, -r0]
    17b0:	00000009 	andeq	r0, r0, r9
    17b4:	0de2011f 	stfeqe	f0, [r2, #124]!
    17b8:	38010000 	stmdacc	r1, {}
    17bc:	00510101 	subseq	r0, r1, r1, lsl #2
    17c0:	3cbc0000 	ldccc	0, cr0, [ip]
    17c4:	3cf40800 	ldclcc	8, cr0, [r4]
    17c8:	09e00800 	stmibeq	r0!, {fp}^
    17cc:	04770000 	ldrbteq	r0, [r7]
    17d0:	691b0000 	ldmdbvs	fp, {}
    17d4:	37010064 	strcc	r0, [r1, -r4, rrx]
    17d8:	00005101 	andeq	r5, r0, r1, lsl #2
    17dc:	000a0b00 	andeq	r0, sl, r0, lsl #22
    17e0:	15ed0e00 	strbne	r0, [sp, #3584]!
    17e4:	37010000 	strcc	r0, [r1, -r0]
    17e8:	00005101 	andeq	r5, r0, r1, lsl #2
    17ec:	000a2900 	andeq	r2, sl, r0, lsl #18
    17f0:	011a0000 	tsteq	sl, r0
    17f4:	00000d86 	andeq	r0, r0, r6, lsl #27
    17f8:	01012d01 	tsteq	r1, r1, lsl #26
    17fc:	08003cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip, sp}
    1800:	08003d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp, ip, sp}
    1804:	00000a47 	andeq	r0, r0, r7, asr #20
    1808:	000004a1 	andeq	r0, r0, r1, lsr #9
    180c:	0064691b 	rsbeq	r6, r4, fp, lsl r9
    1810:	51012c01 	tstpl	r1, r1, lsl #24
    1814:	72000000 	andvc	r0, r0, #0	; 0x0
    1818:	0000000a 	andeq	r0, r0, sl
    181c:	0f750119 	svceq	0x00750119
    1820:	24010000 	strcs	r0, [r1]
    1824:	003d1c01 	eorseq	r1, sp, r1, lsl #24
    1828:	003d2808 	eorseq	r2, sp, r8, lsl #16
    182c:	000a9008 	andeq	r9, sl, r8
    1830:	8f012000 	svchi	0x00012000
    1834:	0100000d 	tsteq	r0, sp
    1838:	00510114 	subseq	r0, r1, r4, lsl r1
    183c:	3d280000 	stccc	0, cr0, [r8]
    1840:	3d5c0800 	ldclcc	8, cr0, [ip]
    1844:	0abb0800 	beq	feec384c <SCS_BASE+0x1eeb584c>
    1848:	04fd0000 	ldrbteq	r0, [sp]
    184c:	210c0000 	tstcs	ip, r0
    1850:	0100000d 	tsteq	r0, sp
    1854:	00005113 	andeq	r5, r0, r3, lsl r1
    1858:	000ae600 	andeq	lr, sl, r0, lsl #12
    185c:	0f6d0c00 	svceq	0x006d0c00
    1860:	13010000 	movwne	r0, #4096	; 0x1000
    1864:	00000051 	andeq	r0, r0, r1, asr r0
    1868:	00000af9 	strdeq	r0, [r0], -r9
    186c:	0000d316 	andeq	sp, r0, r6, lsl r3
    1870:	51150100 	tstpl	r5, r0, lsl #2
    1874:	00000000 	andeq	r0, r0, r0
    1878:	0002aa21 	andeq	sl, r2, r1, lsr #20
    187c:	00050d00 	andeq	r0, r5, r0, lsl #26
    1880:	050d2200 	streq	r2, [sp, #-512]
    1884:	009f0000 	addseq	r0, pc, r0
    1888:	24070423 	strcs	r0, [r7], #-1059
    188c:	00000f59 	andeq	r0, r0, r9, asr pc
    1890:	04fd0b01 	ldrbteq	r0, [sp], #2817
    1894:	05010000 	streq	r0, [r1]
    1898:	00012c03 	andeq	r2, r1, r3, lsl #24
    189c:	02aa2120 	adceq	r2, sl, #8	; 0x8
    18a0:	05320000 	ldreq	r0, [r2]!
    18a4:	0d220000 	stceq	0, cr0, [r2]
    18a8:	45000005 	strmi	r0, [r0, #-5]
    18ac:	0eb52400 	cdpeq	4, 11, cr2, cr5, cr0, {0}
    18b0:	0c010000 	stceq	0, cr0, [r1], {0}
    18b4:	00000522 	andeq	r0, r0, r2, lsr #10
    18b8:	cc030501 	cfstr32gt	mvfx0, [r3], {1}
    18bc:	24200001 	strtcs	r0, [r0], #-1
    18c0:	00000d67 	andeq	r0, r0, r7, ror #26
    18c4:	02aa0d01 	adceq	r0, sl, #64	; 0x40
    18c8:	05010000 	streq	r0, [r1]
    18cc:	00021203 	andeq	r1, r2, r3, lsl #4
    18d0:	0f062420 	svceq	0x00062420
    18d4:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    18d8:	000002aa 	andeq	r0, r0, sl, lsr #5
    18dc:	13030501 	movwne	r0, #13569	; 0x3501
    18e0:	24200002 	strtcs	r0, [r0], #-2
    18e4:	00000dac 	andeq	r0, r0, ip, lsr #27
    18e8:	00510f01 	subseq	r0, r1, r1, lsl #30
    18ec:	05010000 	streq	r0, [r1]
    18f0:	00001003 	andeq	r1, r0, r3
    18f4:	0ed32420 	cdpeq	4, 13, cr2, cr3, cr0, {1}
    18f8:	10010000 	andne	r0, r1, r0
    18fc:	00000051 	andeq	r0, r0, r1, asr r0
    1900:	14030501 	strne	r0, [r3], #-1281
    1904:	00200002 	eoreq	r0, r0, r2
    1908:	00000736 	andeq	r0, r0, r6, lsr r7
    190c:	05840002 	streq	r0, [r4, #2]
    1910:	01040000 	tsteq	r4, r0
    1914:	00000488 	andeq	r0, r0, r8, lsl #9
    1918:	00111301 	andseq	r1, r1, r1, lsl #6
    191c:	00008e00 	andeq	r8, r0, r0, lsl #28
    1920:	003d5c00 	eorseq	r5, sp, r0, lsl #24
    1924:	00428408 	subeq	r8, r2, r8, lsl #8
    1928:	00061508 	andeq	r1, r6, r8, lsl #10
    192c:	05040200 	streq	r0, [r4, #-512]
    1930:	00002cfb 	strdeq	r2, [r0], -fp
    1934:	0f050202 	svceq	0x00050202
    1938:	02000005 	andeq	r0, r0, #5	; 0x5
    193c:	05d40601 	ldrbeq	r0, [r4, #1537]
    1940:	75030000 	strvc	r0, [r3]
    1944:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    1948:	00004527 	andeq	r4, r0, r7, lsr #10
    194c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1950:	00002d75 	andeq	r2, r0, r5, ror sp
    1954:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    1958:	57280200 	strpl	r0, [r8, -r0, lsl #4]!
    195c:	02000000 	andeq	r0, r0, #0	; 0x0
    1960:	07120702 	ldreq	r0, [r2, -r2, lsl #14]
    1964:	75030000 	strvc	r0, [r3]
    1968:	29020038 	stmdbcs	r2, {r3, r4, r5}
    196c:	00000068 	andeq	r0, r0, r8, rrx
    1970:	d2080102 	andle	r0, r8, #-2147483648	; 0x80000000
    1974:	04000005 	streq	r0, [r0], #-5
    1978:	00000045 	andeq	r0, r0, r5, asr #32
    197c:	00005704 	andeq	r5, r0, r4, lsl #14
    1980:	02010500 	andeq	r0, r1, #0	; 0x0
    1984:	00008e39 	andeq	r8, r0, r9, lsr lr
    1988:	13770600 	cmnne	r7, #0	; 0x0
    198c:	07000000 	streq	r0, [r0, -r0]
    1990:	00544553 	subseq	r4, r4, r3, asr r5
    1994:	ca080001 	bgt	2019a0 <__Stack_Size+0x2015a0>
    1998:	0200001c 	andeq	r0, r0, #28	; 0x1c
    199c:	00007939 	andeq	r7, r0, r9, lsr r9
    19a0:	02010500 	andeq	r0, r1, #0	; 0x0
    19a4:	0000ae3b 	andeq	sl, r0, fp, lsr lr
    19a8:	03630600 	cmneq	r3, #0	; 0x0
    19ac:	06000000 	streq	r0, [r0], -r0
    19b0:	000005a4 	andeq	r0, r0, r4, lsr #11
    19b4:	dc080001 	stcle	0, cr0, [r8], {1}
    19b8:	02000000 	andeq	r0, r0, #0	; 0x0
    19bc:	0000993b 	andeq	r9, r0, fp, lsr r9
    19c0:	07040900 	streq	r0, [r4, -r0, lsl #18]
    19c4:	0d03240a 	cfstrseq	mvf2, [r3, #-40]
    19c8:	00014a01 	andeq	r4, r1, r1, lsl #20
    19cc:	43410b00 	movtmi	r0, #6912	; 0x1b00
    19d0:	0e030052 	mcreq	0, 0, r0, cr3, cr2, {2}
    19d4:	00006f01 	andeq	r6, r0, r1, lsl #30
    19d8:	00230200 	eoreq	r0, r3, r0, lsl #4
    19dc:	0010940c 	andseq	r9, r0, ip, lsl #8
    19e0:	010f0300 	tsteq	pc, r0, lsl #6
    19e4:	0000006f 	andeq	r0, r0, pc, rrx
    19e8:	0c042302 	stceq	3, cr2, [r4], {2}
    19ec:	00001091 	muleq	r0, r1, r0
    19f0:	6f011003 	svcvs	0x00011003
    19f4:	02000000 	andeq	r0, r0, #0	; 0x0
    19f8:	530b0823 	movwpl	r0, #47139	; 0xb823
    19fc:	11030052 	qaddne	r0, r2, r3
    1a00:	00006f01 	andeq	r6, r0, r1, lsl #30
    1a04:	0c230200 	sfmeq	f0, 4, [r3]
    1a08:	0052430b 	subseq	r4, r2, fp, lsl #6
    1a0c:	6f011203 	svcvs	0x00011203
    1a10:	02000000 	andeq	r0, r0, #0	; 0x0
    1a14:	410b1023 	tstmi	fp, r3, lsr #32
    1a18:	13030052 	movwne	r0, #12370	; 0x3052
    1a1c:	00006f01 	andeq	r6, r0, r1, lsl #30
    1a20:	14230200 	strtne	r0, [r3], #-512
    1a24:	0012da0c 	andseq	sp, r2, ip, lsl #20
    1a28:	01140300 	tsteq	r4, r0, lsl #6
    1a2c:	0000006f 	andeq	r0, r0, pc, rrx
    1a30:	0b182302 	bleq	60a640 <__Stack_Size+0x60a240>
    1a34:	0052424f 	subseq	r4, r2, pc, asr #4
    1a38:	6f011503 	svcvs	0x00011503
    1a3c:	02000000 	andeq	r0, r0, #0	; 0x0
    1a40:	130c1c23 	movwne	r1, #52259	; 0xcc23
    1a44:	03000013 	movweq	r0, #19	; 0x13
    1a48:	006f0116 	rsbeq	r0, pc, r6, lsl r1
    1a4c:	23020000 	movwcs	r0, #8192	; 0x2000
    1a50:	100a0020 	andne	r0, sl, r0, lsr #32
    1a54:	cc011a03 	stcgt	10, cr1, [r1], {3}
    1a58:	0b000001 	bleq	1a64 <__Stack_Size+0x1664>
    1a5c:	00504452 	subseq	r4, r0, r2, asr r4
    1a60:	74011b03 	strvc	r1, [r1], #-2819
    1a64:	02000000 	andeq	r0, r0, #0	; 0x0
    1a68:	a20c0023 	andge	r0, ip, #35	; 0x23
    1a6c:	03000012 	movweq	r0, #18	; 0x12
    1a70:	0074011c 	rsbseq	r0, r4, ip, lsl r1
    1a74:	23020000 	movwcs	r0, #8192	; 0x2000
    1a78:	12a70c02 	adcne	r0, r7, #512	; 0x200
    1a7c:	1d030000 	stcne	0, cr0, [r3]
    1a80:	00007401 	andeq	r7, r0, r1, lsl #8
    1a84:	04230200 	strteq	r0, [r3], #-512
    1a88:	0012ad0c 	andseq	sl, r2, ip, lsl #26
    1a8c:	011e0300 	tsteq	lr, r0, lsl #6
    1a90:	00000074 	andeq	r0, r0, r4, ror r0
    1a94:	0c062302 	stceq	3, cr2, [r6], {2}
    1a98:	0000105a 	andeq	r1, r0, sl, asr r0
    1a9c:	74011f03 	strvc	r1, [r1], #-3843
    1aa0:	02000000 	andeq	r0, r0, #0	; 0x0
    1aa4:	5f0c0823 	svcpl	0x000c0823
    1aa8:	03000010 	movweq	r0, #16	; 0x10
    1aac:	00740120 	rsbseq	r0, r4, r0, lsr #2
    1ab0:	23020000 	movwcs	r0, #8192	; 0x2000
    1ab4:	10640c0a 	rsbne	r0, r4, sl, lsl #24
    1ab8:	21030000 	tstcs	r3, r0
    1abc:	00007401 	andeq	r7, r0, r1, lsl #8
    1ac0:	0c230200 	sfmeq	f0, 4, [r3]
    1ac4:	0010690c 	andseq	r6, r0, ip, lsl #18
    1ac8:	01220300 	teqeq	r2, r0, lsl #6
    1acc:	00000074 	andeq	r0, r0, r4, ror r0
    1ad0:	000e2302 	andeq	r2, lr, r2, lsl #6
    1ad4:	1d040105 	stfnes	f0, [r4, #-20]
    1ad8:	000001f3 	strdeq	r0, [r0], -r3
    1adc:	00118206 	andseq	r8, r1, r6, lsl #4
    1ae0:	ef060100 	svc	0x00060100
    1ae4:	02000010 	andeq	r0, r0, #16	; 0x10
    1ae8:	000fd106 	andeq	sp, pc, r6, lsl #2
    1aec:	73060300 	movwvc	r0, #25344	; 0x6300
    1af0:	04000011 	streq	r0, [r0], #-17
    1af4:	00119706 	andseq	r9, r1, r6, lsl #14
    1af8:	08000500 	stmdaeq	r0, {r8, sl}
    1afc:	00001044 	andeq	r1, r0, r4, asr #32
    1b00:	01cc2304 	biceq	r2, ip, r4, lsl #6
    1b04:	010d0000 	tsteq	sp, r0
    1b08:	000011f7 	strdeq	r1, [r0], -r7
    1b0c:	01034001 	tsteq	r3, r1
    1b10:	000001f3 	strdeq	r0, [r0], -r3
    1b14:	00021e01 	andeq	r1, r2, r1, lsl #28
    1b18:	10cc0e00 	sbcne	r0, ip, r0, lsl #28
    1b1c:	41010000 	tstmi	r1, r0
    1b20:	0001f303 	andeq	pc, r1, r3, lsl #6
    1b24:	1d0f0000 	stcne	0, cr0, [pc]
    1b28:	01000010 	tsteq	r0, r0, lsl r0
    1b2c:	01010386 	smlabbeq	r1, r6, r3, r0
    1b30:	00000237 	andeq	r0, r0, r7, lsr r2
    1b34:	01006910 	tsteq	r0, r0, lsl r9
    1b38:	006f0387 	rsbeq	r0, pc, r7, lsl #7
    1b3c:	11000000 	tstne	r0, r0
    1b40:	00122301 	andseq	r2, r2, r1, lsl #6
    1b44:	01570100 	cmpeq	r7, r0, lsl #2
    1b48:	08003d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, ip, sp}
    1b4c:	08003d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, ip, sp}
    1b50:	025e5d01 	subseq	r5, lr, #64	; 0x40
    1b54:	f1120000 	undefined instruction 0xf1120000
    1b58:	0100000f 	tsteq	r0, pc
    1b5c:	00003a56 	andeq	r3, r0, r6, asr sl
    1b60:	000b0c00 	andeq	r0, fp, r0, lsl #24
    1b64:	01110000 	tsteq	r1, r0
    1b68:	00001234 	andeq	r1, r0, r4, lsr r2
    1b6c:	74016b01 	strvc	r6, [r1], #-2817
    1b70:	8c08003d 	stchi	0, cr0, [r8], {61}
    1b74:	0108003d 	tsteq	r8, sp, lsr r0
    1b78:	0002855d 	andeq	r8, r2, sp, asr r5
    1b7c:	11e11200 	mvnne	r1, r0, lsl #4
    1b80:	6a010000 	bvs	41b88 <__Stack_Size+0x41788>
    1b84:	0000003a 	andeq	r0, r0, sl, lsr r0
    1b88:	00000b1f 	andeq	r0, r0, pc, lsl fp
    1b8c:	37011100 	strcc	r1, [r1, -r0, lsl #2]
    1b90:	01000011 	tsteq	r0, r1, lsl r0
    1b94:	3d8c017f 	stfccs	f0, [ip, #508]
    1b98:	3da40800 	stccc	8, cr0, [r4]
    1b9c:	5d010800 	stcpl	8, cr0, [r1]
    1ba0:	000002ac 	andeq	r0, r0, ip, lsr #5
    1ba4:	0012fe12 	andseq	pc, r2, r2, lsl lr
    1ba8:	3a7e0100 	bcc	1f81fb0 <__Stack_Size+0x1f81bb0>
    1bac:	32000000 	andcc	r0, r0, #0	; 0x0
    1bb0:	0000000b 	andeq	r0, r0, fp
    1bb4:	10230113 	eorne	r0, r3, r3, lsl r1
    1bb8:	91010000 	tstls	r1, r0
    1bbc:	003da401 	eorseq	sl, sp, r1, lsl #8
    1bc0:	003dbc08 	eorseq	fp, sp, r8, lsl #24
    1bc4:	135d0108 	cmpne	sp, #2	; 0x2
    1bc8:	0010fe01 	andseq	pc, r0, r1, lsl #28
    1bcc:	019f0100 	orrseq	r0, pc, r0, lsl #2
    1bd0:	08003dbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, fp, ip, sp}
    1bd4:	08003dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip, sp}
    1bd8:	01145d01 	tsteq	r4, r1, lsl #26
    1bdc:	00001269 	andeq	r1, r0, r9, ror #4
    1be0:	01029701 	tsteq	r2, r1, lsl #14
    1be4:	0000003a 	andeq	r0, r0, sl, lsr r0
    1be8:	08003dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip, sp}
    1bec:	08003dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip, sp}
    1bf0:	01145d01 	tsteq	r4, r1, lsl #26
    1bf4:	0000106e 	andeq	r1, r0, lr, rrx
    1bf8:	0102a401 	tsteq	r2, r1, lsl #8
    1bfc:	0000003a 	andeq	r0, r0, sl, lsr r0
    1c00:	08003dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, ip, sp}
    1c04:	08003de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, ip, sp}
    1c08:	01155d01 	tsteq	r5, r1, lsl #26
    1c0c:	000011ad 	andeq	r1, r0, sp, lsr #3
    1c10:	0102b201 	tsteq	r2, r1, lsl #4
    1c14:	0000008e 	andeq	r0, r0, lr, lsl #1
    1c18:	08003de4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sl, fp, ip, sp}
    1c1c:	08003df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp, ip, sp}
    1c20:	032b5d01 	teqeq	fp, #64	; 0x40
    1c24:	c30e0000 	movwgt	r0, #57344	; 0xe000
    1c28:	0100000f 	tsteq	r0, pc
    1c2c:	008e02b3 	strheq	r0, [lr], r3
    1c30:	15000000 	strne	r0, [r0]
    1c34:	000fff01 	andeq	pc, pc, r1, lsl #30
    1c38:	02c80100 	sbceq	r0, r8, #0	; 0x0
    1c3c:	00008e01 	andeq	r8, r0, r1, lsl #28
    1c40:	003df400 	eorseq	pc, sp, r0, lsl #8
    1c44:	003e0408 	eorseq	r0, lr, r8, lsl #8
    1c48:	545d0108 	ldrbpl	r0, [sp], #-264
    1c4c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    1c50:	000010d8 	ldrdeq	r1, [r0], -r8
    1c54:	8e02c901 	cdphi	9, 0, cr12, cr2, cr1, {0}
    1c58:	00000000 	andeq	r0, r0, r0
    1c5c:	0f830116 	svceq	0x00830116
    1c60:	e3010000 	movw	r0, #4096	; 0x1000
    1c64:	3e040102 	adfccs	f0, f4, f2
    1c68:	3e200800 	cdpcc	8, 2, cr0, cr0, cr0, {0}
    1c6c:	5d010800 	stcpl	8, cr0, [r1]
    1c70:	00000389 	andeq	r0, r0, r9, lsl #7
    1c74:	0012bf17 	andseq	fp, r2, r7, lsl pc
    1c78:	02e20100 	rsceq	r0, r2, #0	; 0x0
    1c7c:	0000004c 	andeq	r0, r0, ip, asr #32
    1c80:	51175001 	tstpl	r7, r1
    1c84:	01000010 	tsteq	r0, r0, lsl r0
    1c88:	00ae02e2 	adceq	r0, lr, r2, ror #5
    1c8c:	51010000 	tstpl	r1, r0
    1c90:	4f011500 	svcmi	0x00011500
    1c94:	01000011 	tsteq	r0, r1, lsl r0
    1c98:	8e010302 	cdphi	3, 0, cr0, cr1, cr2, {0}
    1c9c:	20000000 	andcs	r0, r0, r0
    1ca0:	4008003e 	andmi	r0, r8, lr, lsr r0
    1ca4:	0108003e 	tsteq	r8, lr, lsr r0
    1ca8:	0003c65d 	andeq	ip, r3, sp, asr r6
    1cac:	12971800 	addsne	r1, r7, #0	; 0x0
    1cb0:	01010000 	tsteq	r1, r0
    1cb4:	00004c03 	andeq	r4, r0, r3, lsl #24
    1cb8:	000b4500 	andeq	r4, fp, r0, lsl #10
    1cbc:	10d81900 	sbcsne	r1, r8, r0, lsl #18
    1cc0:	03010000 	movweq	r0, #4096	; 0x1000
    1cc4:	00008e03 	andeq	r8, r0, r3, lsl #28
    1cc8:	000b6300 	andeq	r6, fp, r0, lsl #6
    1ccc:	01160000 	tsteq	r6, r0
    1cd0:	00001163 	andeq	r1, r0, r3, ror #2
    1cd4:	01032f01 	tsteq	r3, r1, lsl #30
    1cd8:	08003e40 	stmdaeq	r0, {r6, r9, sl, fp, ip, sp}
    1cdc:	08003e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, ip, sp}
    1ce0:	03ed5d01 	mvneq	r5, #64	; 0x40
    1ce4:	97170000 	ldrls	r0, [r7, -r0]
    1ce8:	01000012 	tsteq	r0, r2, lsl r0
    1cec:	004c032e 	subeq	r0, ip, lr, lsr #6
    1cf0:	50010000 	andpl	r0, r1, r0
    1cf4:	01fe1a00 	mvnseq	r1, r0, lsl #20
    1cf8:	3e4c0000 	cdpcc	0, 4, cr0, cr12, cr0, {0}
    1cfc:	3e780800 	cdpcc	8, 7, cr0, cr8, cr0, {0}
    1d00:	5d010800 	stcpl	8, cr0, [r1]
    1d04:	0000040a 	andeq	r0, r0, sl, lsl #8
    1d08:	0002111b 	andeq	r1, r2, fp, lsl r1
    1d0c:	000b8100 	andeq	r8, fp, r0, lsl #2
    1d10:	011c0000 	tsteq	ip, r0
    1d14:	000012e3 	andeq	r1, r0, r3, ror #5
    1d18:	01036701 	tsteq	r3, r1, lsl #14
    1d1c:	000001f3 	strdeq	r0, [r0], -r3
    1d20:	08003e78 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, fp, ip, sp}
    1d24:	08003f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip, sp}
    1d28:	00000baa 	andeq	r0, r0, sl, lsr #23
    1d2c:	0000049d 	muleq	r0, sp, r4
    1d30:	0011a518 	andseq	sl, r1, r8, lsl r5
    1d34:	03660100 	cmneq	r6, #0	; 0x0
    1d38:	0000003a 	andeq	r0, r0, sl, lsr r0
    1d3c:	00000bd5 	ldrdeq	r0, [r0], -r5
    1d40:	0010d119 	andseq	sp, r0, r9, lsl r1
    1d44:	03680100 	cmneq	r8, #0	; 0x0
    1d48:	000001f3 	strdeq	r0, [r0], -r3
    1d4c:	00000bf3 	strdeq	r0, [r0], -r3
    1d50:	0001fe1d 	andeq	pc, r1, sp, lsl lr
    1d54:	00002000 	andeq	r2, r0, r0
    1d58:	036b0100 	cmneq	fp, #0	; 0x0
    1d5c:	00000464 	andeq	r0, r0, r4, ror #8
    1d60:	0000401e 	andeq	r4, r0, lr, lsl r0
    1d64:	02111f00 	andseq	r1, r1, #0	; 0x0
    1d68:	00000000 	andeq	r0, r0, r0
    1d6c:	00021e1d 	andeq	r1, r2, sp, lsl lr
    1d70:	00006000 	andeq	r6, r0, r0
    1d74:	03700100 	cmneq	r0, #0	; 0x0
    1d78:	00000484 	andeq	r0, r0, r4, lsl #9
    1d7c:	0000781e 	andeq	r7, r0, lr, lsl r8
    1d80:	022c1b00 	eoreq	r1, ip, #0	; 0x0
    1d84:	0c1c0000 	ldceq	0, cr0, [ip], {0}
    1d88:	00000000 	andeq	r0, r0, r0
    1d8c:	0001fe20 	andeq	pc, r1, r0, lsr #28
    1d90:	00009000 	andeq	r9, r0, r0
    1d94:	03710100 	cmneq	r1, #0	; 0x0
    1d98:	0000a81e 	andeq	sl, r0, lr, lsl r8
    1d9c:	02111f00 	andseq	r1, r1, #0	; 0x0
    1da0:	00000000 	andeq	r0, r0, r0
    1da4:	99011c00 	stmdbls	r1, {sl, fp, ip}
    1da8:	01000010 	tsteq	r0, r0, lsl r0
    1dac:	f301026b 	vhsub.u8	q0, <illegal reg q0.5>, <illegal reg q13.5>
    1db0:	0c000001 	stceq	0, cr0, [r0], {1}
    1db4:	6808003f 	stmdavs	r8, {r0, r1, r2, r3, r4, r5}
    1db8:	6c08003f 	stcvs	0, cr0, [r8], {63}
    1dbc:	fc00000c 	stc2	0, cr0, [r0], {12}
    1dc0:	18000004 	stmdane	r0, {r2}
    1dc4:	00000f92 	muleq	r0, r2, pc
    1dc8:	4c026a01 	stcmi	10, cr6, [r2], {1}
    1dcc:	97000000 	strls	r0, [r0, -r0]
    1dd0:	1800000c 	stmdane	r0, {r2, r3}
    1dd4:	00000fa4 	andeq	r0, r0, r4, lsr #31
    1dd8:	4c026a01 	stcmi	10, cr6, [r2], {1}
    1ddc:	b5000000 	strlt	r0, [r0]
    1de0:	1800000c 	stmdane	r0, {r2, r3}
    1de4:	000011ce 	andeq	r1, r0, lr, asr #3
    1de8:	4c026a01 	stcmi	10, cr6, [r2], {1}
    1dec:	d3000000 	movwle	r0, #0	; 0x0
    1df0:	1900000c 	stmdbne	r0, {r2, r3}
    1df4:	000010d1 	ldrdeq	r1, [r0], -r1
    1df8:	f3026c01 	undefined instruction 0xf3026c01
    1dfc:	f1000001 	cps	#1
    1e00:	0000000c 	andeq	r0, r0, ip
    1e04:	10b4011c 	adcsne	r0, r4, ip, lsl r1
    1e08:	1a010000 	bne	41e10 <__Stack_Size+0x41a10>
    1e0c:	01f30102 	mvnseq	r0, r2, lsl #2
    1e10:	3f680000 	svccc	0x00680000
    1e14:	40040800 	andmi	r0, r4, r0, lsl #16
    1e18:	0d0f0800 	stceq	8, cr0, [pc]
    1e1c:	053b0000 	ldreq	r0, [fp]!
    1e20:	51180000 	tstpl	r8, r0
    1e24:	01000010 	tsteq	r0, r0, lsl r0
    1e28:	00ae0219 	adceq	r0, lr, r9, lsl r2
    1e2c:	0d3a0000 	ldceq	0, cr0, [sl]
    1e30:	d1190000 	tstle	r9, r0
    1e34:	01000010 	tsteq	r0, r0, lsl r0
    1e38:	01f3021b 	mvnseq	r0, fp, lsl r2
    1e3c:	0d580000 	ldcleq	0, cr0, [r8]
    1e40:	1c000000 	stcne	0, cr0, [r0], {0}
    1e44:	00120701 	andseq	r0, r2, r1, lsl #14
    1e48:	01cb0100 	biceq	r0, fp, r0, lsl #2
    1e4c:	0001f301 	andeq	pc, r1, r1, lsl #6
    1e50:	00400400 	subeq	r0, r0, r0, lsl #8
    1e54:	0040c408 	subeq	ip, r0, r8, lsl #8
    1e58:	000d8108 	andeq	r8, sp, r8, lsl #2
    1e5c:	0005ba00 	andeq	fp, r5, r0, lsl #20
    1e60:	12b31800 	adcsne	r1, r3, #0	; 0x0
    1e64:	ca010000 	bgt	41e6c <__Stack_Size+0x41a6c>
    1e68:	00003a01 	andeq	r3, r0, r1, lsl #20
    1e6c:	000da000 	andeq	sl, sp, r0
    1e70:	11d71900 	bicsne	r1, r7, r0, lsl #18
    1e74:	cc010000 	stcgt	0, cr0, [r1], {0}
    1e78:	00004c01 	andeq	r4, r0, r1, lsl #24
    1e7c:	000dbe00 	andeq	fp, sp, r0, lsl #28
    1e80:	118d1900 	orrne	r1, sp, r0, lsl #18
    1e84:	cc010000 	stcgt	0, cr0, [r1], {0}
    1e88:	00004c01 	andeq	r4, r0, r1, lsl #24
    1e8c:	000dfd00 	andeq	pc, sp, r0, lsl #26
    1e90:	0f9a1900 	svceq	0x009a1900
    1e94:	cc010000 	stcgt	0, cr0, [r1], {0}
    1e98:	00004c01 	andeq	r4, r0, r1, lsl #24
    1e9c:	000e1b00 	andeq	r1, lr, r0, lsl #22
    1ea0:	11091900 	tstne	r9, r0, lsl #18
    1ea4:	cc010000 	stcgt	0, cr0, [r1], {0}
    1ea8:	00004c01 	andeq	r4, r0, r1, lsl #24
    1eac:	000e3900 	andeq	r3, lr, r0, lsl #18
    1eb0:	10d11900 	sbcsne	r1, r1, r0, lsl #18
    1eb4:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    1eb8:	0001f301 	andeq	pc, r1, r1, lsl #6
    1ebc:	000e5700 	andeq	r5, lr, r0, lsl #14
    1ec0:	011c0000 	tsteq	ip, r0
    1ec4:	0000124d 	andeq	r1, r0, sp, asr #4
    1ec8:	01019a01 	tsteq	r1, r1, lsl #20
    1ecc:	000001f3 	strdeq	r0, [r0], -r3
    1ed0:	080040c4 	stmdaeq	r0, {r2, r6, r7, lr}
    1ed4:	08004108 	stmdaeq	r0, {r3, r8, lr}
    1ed8:	00000e96 	muleq	r0, r6, lr
    1edc:	00000609 	andeq	r0, r0, r9, lsl #12
    1ee0:	002b2118 	eoreq	r2, fp, r8, lsl r1
    1ee4:	01990100 	orrseq	r0, r9, r0, lsl #2
    1ee8:	0000003a 	andeq	r0, r0, sl, lsr r0
    1eec:	00000eb5 	strheq	r0, [r0], -r5
    1ef0:	0011dc18 	andseq	sp, r1, r8, lsl ip
    1ef4:	01990100 	orrseq	r0, r9, r0, lsl #2
    1ef8:	0000005e 	andeq	r0, r0, lr, asr r0
    1efc:	00000ed3 	ldrdeq	r0, [r0], -r3
    1f00:	0010d119 	andseq	sp, r0, r9, lsl r1
    1f04:	019b0100 	orrseq	r0, fp, r0, lsl #2
    1f08:	000001f3 	strdeq	r0, [r0], -r3
    1f0c:	00000ef1 	strdeq	r0, [r0], -r1
    1f10:	81011c00 	tsthi	r1, r0, lsl #24
    1f14:	01000012 	tsteq	r0, r2, lsl r0
    1f18:	f3010172 	veor	q0, <illegal reg q0.5>, q9
    1f1c:	08000001 	stmdaeq	r0, {r0}
    1f20:	40080041 	andmi	r0, r8, r1, asr #32
    1f24:	0f080041 	svceq	0x00080041
    1f28:	5800000f 	stmdapl	r0, {r0, r1, r2, r3}
    1f2c:	18000006 	stmdane	r0, {r1, r2}
    1f30:	00002b21 	andeq	r2, r0, r1, lsr #22
    1f34:	3a017101 	bcc	5e340 <__Stack_Size+0x5df40>
    1f38:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    1f3c:	1800000f 	stmdane	r0, {r0, r1, r2, r3}
    1f40:	000011dc 	ldrdeq	r1, [r0], -ip
    1f44:	4c017101 	stfmis	f7, [r1], {1}
    1f48:	4c000000 	stcmi	0, cr0, [r0], {0}
    1f4c:	1900000f 	stmdbne	r0, {r0, r1, r2, r3}
    1f50:	000010d1 	ldrdeq	r1, [r0], -r1
    1f54:	f3017301 	vcgt.u8	d7, d1, d1
    1f58:	6a000001 	bvs	1f64 <__Stack_Size+0x1b64>
    1f5c:	0000000f 	andeq	r0, r0, pc
    1f60:	12c8011c 	sbcne	r0, r8, #7	; 0x7
    1f64:	37010000 	strcc	r0, [r1, -r0]
    1f68:	01f30101 	mvnseq	r0, r1, lsl #2
    1f6c:	41400000 	cmpmi	r0, r0
    1f70:	41880800 	orrmi	r0, r8, r0, lsl #16
    1f74:	0f880800 	svceq	0x00880800
    1f78:	06a70000 	strteq	r0, [r7], r0
    1f7c:	21180000 	tstcs	r8, r0
    1f80:	0100002b 	tsteq	r0, fp, lsr #32
    1f84:	003a0136 	eorseq	r0, sl, r6, lsr r1
    1f88:	0fa70000 	svceq	0x00a70000
    1f8c:	dc180000 	ldcle	0, cr0, [r8], {0}
    1f90:	01000011 	tsteq	r0, r1, lsl r0
    1f94:	003a0136 	eorseq	r0, sl, r6, lsr r1
    1f98:	0fc50000 	svceq	0x00c50000
    1f9c:	d1190000 	tstle	r9, r0
    1fa0:	01000010 	tsteq	r0, r0, lsl r0
    1fa4:	01f30138 	mvnseq	r0, r8, lsr r1
    1fa8:	0fe30000 	svceq	0x00e30000
    1fac:	21000000 	tstcs	r0, r0
    1fb0:	000fac01 	andeq	sl, pc, r1, lsl #24
    1fb4:	01f80100 	mvnseq	r0, r0, lsl #2
    1fb8:	000001f3 	strdeq	r0, [r0], -r3
    1fbc:	08004188 	stmdaeq	r0, {r3, r7, r8, lr}
    1fc0:	08004200 	stmdaeq	r0, {r9, lr}
    1fc4:	0000100c 	andeq	r1, r0, ip
    1fc8:	000006d4 	ldrdeq	r0, [r0], -r4
    1fcc:	0010d122 	andseq	sp, r0, r2, lsr #2
    1fd0:	f3f90100 	vceq.i32	d16, d0, #0
    1fd4:	2b000001 	blcs	1fe0 <__Stack_Size+0x1be0>
    1fd8:	00000010 	andeq	r0, r0, r0, lsl r0
    1fdc:	10300121 	eorsne	r0, r0, r1, lsr #2
    1fe0:	d5010000 	strle	r0, [r1]
    1fe4:	0001f301 	andeq	pc, r1, r1, lsl #6
    1fe8:	00420000 	subeq	r0, r2, r0
    1fec:	00423c08 	subeq	r3, r2, r8, lsl #24
    1ff0:	00105408 	andseq	r5, r0, r8, lsl #8
    1ff4:	00070100 	andeq	r0, r7, r0, lsl #2
    1ff8:	10d12200 	sbcsne	r2, r1, r0, lsl #4
    1ffc:	d6010000 	strle	r0, [r1], -r0
    2000:	000001f3 	strdeq	r0, [r0], -r3
    2004:	00001073 	andeq	r1, r0, r3, ror r0
    2008:	e1012300 	tst	r1, r0, lsl #6
    200c:	0100000f 	tsteq	r0, pc
    2010:	01f301ae 	mvnseq	r0, lr, lsr #3
    2014:	423c0000 	eorsmi	r0, ip, #0	; 0x0
    2018:	42840800 	addmi	r0, r4, #0	; 0x0
    201c:	10910800 	addsne	r0, r1, r0, lsl #16
    2020:	e2120000 	ands	r0, r2, #0	; 0x0
    2024:	01000010 	tsteq	r0, r0, lsl r0
    2028:	00003aad 	andeq	r3, r0, sp, lsr #21
    202c:	0010bc00 	andseq	fp, r0, r0, lsl #24
    2030:	10d12200 	sbcsne	r2, r1, r0, lsl #4
    2034:	af010000 	svcge	0x00010000
    2038:	000001f3 	strdeq	r0, [r0], -r3
    203c:	000010da 	ldrdeq	r1, [r0], -sl
    2040:	06440000 	strbeq	r0, [r4], -r0
    2044:	00020000 	andeq	r0, r2, r0
    2048:	000007a0 	andeq	r0, r0, r0, lsr #15
    204c:	04880104 	streq	r0, [r8], #260
    2050:	a9010000 	stmdbge	r1, {}
    2054:	8e000013 	mcrhi	0, 0, r0, cr0, cr3, {0}
    2058:	84000000 	strhi	r0, [r0]
    205c:	0c080042 	stceq	0, cr0, [r8], {66}
    2060:	38080045 	stmdacc	r8, {r0, r2, r6}
    2064:	02000008 	andeq	r0, r0, #8	; 0x8
    2068:	2cfb0504 	cfldr64cs	mvdx0, [fp], #16
    206c:	02020000 	andeq	r0, r2, #0	; 0x0
    2070:	00050f05 	andeq	r0, r5, r5, lsl #30
    2074:	06010200 	streq	r0, [r1], -r0, lsl #4
    2078:	000005d4 	ldrdeq	r0, [r0], -r4
    207c:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    2080:	45270200 	strmi	r0, [r7, #-512]!
    2084:	02000000 	andeq	r0, r0, #0	; 0x0
    2088:	2d750704 	ldclcs	7, cr0, [r5, #-16]!
    208c:	75030000 	strvc	r0, [r3]
    2090:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    2094:	00005728 	andeq	r5, r0, r8, lsr #14
    2098:	07020200 	streq	r0, [r2, -r0, lsl #4]
    209c:	00000712 	andeq	r0, r0, r2, lsl r7
    20a0:	00387503 	eorseq	r7, r8, r3, lsl #10
    20a4:	00682902 	rsbeq	r2, r8, r2, lsl #18
    20a8:	01020000 	tsteq	r2, r0
    20ac:	0005d208 	andeq	sp, r5, r8, lsl #4
    20b0:	00450400 	subeq	r0, r5, r0, lsl #8
    20b4:	01050000 	tsteq	r5, r0
    20b8:	00893b02 	addeq	r3, r9, r2, lsl #22
    20bc:	63060000 	movwvs	r0, #24576	; 0x6000
    20c0:	00000003 	andeq	r0, r0, r3
    20c4:	0005a406 	andeq	sl, r5, r6, lsl #8
    20c8:	07000100 	streq	r0, [r0, -r0, lsl #2]
    20cc:	000000dc 	ldrdeq	r0, [r0], -ip
    20d0:	00743b02 	rsbseq	r3, r4, r2, lsl #22
    20d4:	04080000 	streq	r0, [r8]
    20d8:	031c0907 	tsteq	ip, #114688	; 0x1c000
    20dc:	010a014f 	tsteq	sl, pc, asr #2
    20e0:	430a0000 	movwmi	r0, #40960	; 0xa000
    20e4:	03004c52 	movweq	r4, #3154	; 0xc52
    20e8:	006f0150 	rsbeq	r0, pc, r0, asr r1
    20ec:	23020000 	movwcs	r0, #8192	; 0x2000
    20f0:	52430a00 	subpl	r0, r3, #0	; 0x0
    20f4:	51030048 	tstpl	r3, r8, asr #32
    20f8:	00006f01 	andeq	r6, r0, r1, lsl #30
    20fc:	04230200 	strteq	r0, [r3], #-512
    2100:	5244490a 	subpl	r4, r4, #163840	; 0x28000
    2104:	01520300 	cmpeq	r2, r0, lsl #6
    2108:	0000006f 	andeq	r0, r0, pc, rrx
    210c:	0a082302 	beq	20ad1c <__Stack_Size+0x20a91c>
    2110:	0052444f 	subseq	r4, r2, pc, asr #8
    2114:	6f015303 	svcvs	0x00015303
    2118:	02000000 	andeq	r0, r0, #0	; 0x0
    211c:	2f0b0c23 	svccs	0x000b0c23
    2120:	03000000 	movweq	r0, #0	; 0x0
    2124:	006f0154 	rsbeq	r0, pc, r4, asr r1
    2128:	23020000 	movwcs	r0, #8192	; 0x2000
    212c:	52420a10 	subpl	r0, r2, #65536	; 0x10000
    2130:	55030052 	strpl	r0, [r3, #-82]
    2134:	00006f01 	andeq	r6, r0, r1, lsl #30
    2138:	14230200 	strtne	r0, [r3], #-512
    213c:	00079a0b 	andeq	r9, r7, fp, lsl #20
    2140:	01560300 	cmpeq	r6, r0, lsl #6
    2144:	0000006f 	andeq	r0, r0, pc, rrx
    2148:	00182302 	andseq	r2, r8, r2, lsl #6
    214c:	0013180c 	andseq	r1, r3, ip, lsl #16
    2150:	01570300 	cmpeq	r7, r0, lsl #6
    2154:	00000097 	muleq	r0, r7, r0
    2158:	5a031809 	bpl	c8184 <__Stack_Size+0xc7d84>
    215c:	00014d01 	andeq	r4, r1, r1, lsl #26
    2160:	14f70b00 	ldrbtne	r0, [r7], #2816
    2164:	5b030000 	blpl	c216c <__Stack_Size+0xc1d6c>
    2168:	00006f01 	andeq	r6, r0, r1, lsl #30
    216c:	00230200 	eoreq	r0, r3, r0, lsl #4
    2170:	0014dc0b 	andseq	sp, r4, fp, lsl #24
    2174:	015c0300 	cmpeq	ip, r0, lsl #6
    2178:	0000006f 	andeq	r0, r0, pc, rrx
    217c:	0b042302 	bleq	10ad8c <__Stack_Size+0x10a98c>
    2180:	000013a2 	andeq	r1, r0, r2, lsr #7
    2184:	5d015d03 	stcpl	13, cr5, [r1, #-12]
    2188:	02000001 	andeq	r0, r0, #1	; 0x1
    218c:	0d000823 	stceq	8, cr0, [r0, #-140]
    2190:	00000045 	andeq	r0, r0, r5, asr #32
    2194:	0000015d 	andeq	r0, r0, sp, asr r1
    2198:	0000940e 	andeq	r9, r0, lr, lsl #8
    219c:	04000300 	streq	r0, [r0], #-768
    21a0:	0000014d 	andeq	r0, r0, sp, asr #2
    21a4:	23040105 	movwcs	r0, #16645	; 0x4105
    21a8:	0000017d 	andeq	r0, r0, sp, ror r1
    21ac:	00020006 	andeq	r0, r2, r6
    21b0:	60060100 	andvs	r0, r6, r0, lsl #2
    21b4:	02000001 	andeq	r0, r0, #1	; 0x1
    21b8:	0005e506 	andeq	lr, r5, r6, lsl #10
    21bc:	07000300 	streq	r0, [r0, -r0, lsl #6]
    21c0:	0000049e 	muleq	r0, lr, r4
    21c4:	01622704 	cmneq	r2, r4, lsl #14
    21c8:	01050000 	tsteq	r5, r0
    21cc:	01c22e04 	biceq	r2, r2, r4, lsl #28
    21d0:	bb060000 	bllt	1821d8 <__Stack_Size+0x181dd8>
    21d4:	00000004 	andeq	r0, r0, r4
    21d8:	00075406 	andeq	r5, r7, r6, lsl #8
    21dc:	63060400 	movwvs	r0, #25600	; 0x6400
    21e0:	28000002 	stmdacs	r0, {r1}
    21e4:	00027106 	andeq	r7, r2, r6, lsl #2
    21e8:	0600c800 	streq	ip, [r0], -r0, lsl #16
    21ec:	0000028b 	andeq	r0, r0, fp, lsl #5
    21f0:	00000614 	andeq	r0, r0, r4, lsl r6
    21f4:	06100000 	ldreq	r0, [r0], -r0
    21f8:	00000464 	andeq	r0, r0, r4, ror #8
    21fc:	052d061c 	streq	r0, [sp, #-1564]!
    2200:	00180000 	andseq	r0, r8, r0
    2204:	00057407 	andeq	r7, r5, r7, lsl #8
    2208:	88360400 	ldmdahi	r6!, {sl}
    220c:	0f000001 	svceq	0x00000001
    2210:	003f0404 	eorseq	r0, pc, r4, lsl #8
    2214:	10000002 	andne	r0, r0, r2
    2218:	00000085 	andeq	r0, r0, r5, lsl #1
    221c:	004c4004 	subeq	r4, ip, r4
    2220:	23020000 	movwcs	r0, #8192	; 0x2000
    2224:	05421000 	strbeq	r1, [r2]
    2228:	41040000 	tstmi	r4, r0
    222c:	0000017d 	andeq	r0, r0, sp, ror r1
    2230:	10022302 	andne	r2, r2, r2, lsl #6
    2234:	0000006c 	andeq	r0, r0, ip, rrx
    2238:	01c24204 	biceq	r4, r2, r4, lsl #4
    223c:	23020000 	movwcs	r0, #8192	; 0x2000
    2240:	c1070003 	tstgt	r7, r3
    2244:	04000005 	streq	r0, [r0], #-5
    2248:	0001cd43 	andeq	ip, r1, r3, asr #26
    224c:	04010500 	streq	r0, [r1], #-1280
    2250:	00022047 	andeq	r2, r2, r7, asr #32
    2254:	13730600 	cmnne	r3, #0	; 0x0
    2258:	06000000 	streq	r0, [r0], -r0
    225c:	0000132c 	andeq	r1, r0, ip, lsr #6
    2260:	d2070001 	andle	r0, r7, #1	; 0x1
    2264:	04000014 	streq	r0, [r0], #-20
    2268:	00020b49 	andeq	r0, r2, r9, asr #22
    226c:	98011100 	stmdals	r1, {r8, ip}
    2270:	01000013 	tsteq	r0, r3, lsl r0
    2274:	4284017d 	addmi	r0, r4, #1073741855	; 0x4000001f
    2278:	432a0800 	teqmi	sl, #0	; 0x0
    227c:	10f80800 	rscsne	r0, r8, r0, lsl #16
    2280:	02af0000 	adceq	r0, pc, #0	; 0x0
    2284:	e1120000 	tst	r2, r0
    2288:	01000014 	tsteq	r0, r4, lsl r0
    228c:	0002af7c 	andeq	sl, r2, ip, ror pc
    2290:	13500100 	cmpne	r0, #0	; 0x0
    2294:	000014e7 	andeq	r1, r0, r7, ror #9
    2298:	02b57c01 	adcseq	r7, r5, #256	; 0x100
    229c:	11230000 	teqne	r3, r0
    22a0:	46140000 	ldrmi	r0, [r4], -r0
    22a4:	01000014 	tsteq	r0, r4, lsl r0
    22a8:	00003a7e 	andeq	r3, r0, lr, ror sl
    22ac:	14570100 	ldrbne	r0, [r7], #-256
    22b0:	000014a3 	andeq	r1, r0, r3, lsr #9
    22b4:	003a7e01 	eorseq	r7, sl, r1, lsl #28
    22b8:	5c010000 	stcpl	0, cr0, [r1], {0}
    22bc:	00132514 	andseq	r2, r3, r4, lsl r5
    22c0:	3a7e0100 	bcc	1f826c8 <__Stack_Size+0x1f822c8>
    22c4:	01000000 	tsteq	r0, r0
    22c8:	6f701551 	svcvs	0x00701551
    22cc:	7e010073 	mcrvc	0, 0, r0, cr1, cr3, {3}
    22d0:	0000003a 	andeq	r0, r0, sl, lsr r0
    22d4:	0000114c 	andeq	r1, r0, ip, asr #2
    22d8:	00142814 	andseq	r2, r4, r4, lsl r8
    22dc:	3a7f0100 	bcc	1fc26e4 <__Stack_Size+0x1fc22e4>
    22e0:	01000000 	tsteq	r0, r0
    22e4:	13cc1654 	bicne	r1, ip, #88080384	; 0x5400000
    22e8:	7f010000 	svcvc	0x00010000
    22ec:	0000003a 	andeq	r0, r0, sl, lsr r0
    22f0:	0a041700 	beq	107ef8 <__Stack_Size+0x107af8>
    22f4:	17000001 	strne	r0, [r0, -r1]
    22f8:	00020004 	andeq	r0, r2, r4
    22fc:	5c011800 	stcpl	8, cr1, [r1], {0}
    2300:	01000013 	tsteq	r0, r3, lsl r0
    2304:	432c01e6 	teqmi	ip, #-2147483591	; 0x80000039
    2308:	433c0800 	teqmi	ip, #0	; 0x0
    230c:	5d010800 	stcpl	8, cr0, [r1]
    2310:	000002e0 	andeq	r0, r0, r0, ror #5
    2314:	0014e712 	andseq	lr, r4, r2, lsl r7
    2318:	b5e50100 	strblt	r0, [r5, #256]!
    231c:	01000002 	tsteq	r0, r2
    2320:	01190050 	tsteq	r9, r0, asr r0
    2324:	00001412 	andeq	r1, r0, r2, lsl r4
    2328:	5e01f701 	cdppl	7, 0, cr15, cr1, cr1, {0}
    232c:	3c000000 	stccc	0, cr0, [r0], {0}
    2330:	48080043 	stmdami	r8, {r0, r1, r6}
    2334:	01080043 	tsteq	r8, r3, asr #32
    2338:	0003235d 	andeq	r2, r3, sp, asr r3
    233c:	14e11300 	strbtne	r1, [r1], #768
    2340:	f6010000 	undefined instruction 0xf6010000
    2344:	000002af 	andeq	r0, r0, pc, lsr #5
    2348:	00001180 	andeq	r1, r0, r0, lsl #3
    234c:	00008512 	andeq	r8, r0, r2, lsl r5
    2350:	4cf60100 	ldfmie	f0, [r6]
    2354:	01000000 	tsteq	r0, r0
    2358:	10d81651 	sbcsne	r1, r8, r1, asr r6
    235c:	f8010000 	undefined instruction 0xf8010000
    2360:	0000005e 	andeq	r0, r0, lr, asr r0
    2364:	75011a00 	strvc	r1, [r1, #-2560]
    2368:	01000014 	tsteq	r0, r4, lsl r0
    236c:	4c010111 	stfmis	f0, [r1], {17}
    2370:	48000000 	stmdami	r0, {}
    2374:	4e080043 	cdpmi	0, 0, cr0, cr8, cr3, {2}
    2378:	01080043 	tsteq	r8, r3, asr #32
    237c:	0003505d 	andeq	r5, r3, sp, asr r0
    2380:	14e11b00 	strbtne	r1, [r1], #2816
    2384:	10010000 	andne	r0, r1, r0
    2388:	0002af01 	andeq	sl, r2, r1, lsl #30
    238c:	00119300 	andseq	r9, r1, r0, lsl #6
    2390:	011a0000 	tsteq	sl, r0
    2394:	000014fc 	strdeq	r1, [r0], -ip
    2398:	01012201 	tsteq	r1, r1, lsl #4
    239c:	0000005e 	andeq	r0, r0, lr, asr r0
    23a0:	08004350 	stmdaeq	r0, {r4, r6, r8, r9, lr}
    23a4:	0800435c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, lr}
    23a8:	03975d01 	orrseq	r5, r7, #64	; 0x40
    23ac:	e11b0000 	tst	fp, r0
    23b0:	01000014 	tsteq	r0, r4, lsl r0
    23b4:	02af0121 	adceq	r0, pc, #1073741832	; 0x40000008
    23b8:	11a60000 	undefined instruction 0x11a60000
    23bc:	851c0000 	ldrhi	r0, [ip]
    23c0:	01000000 	tsteq	r0, r0
    23c4:	004c0121 	subeq	r0, ip, r1, lsr #2
    23c8:	51010000 	tstpl	r1, r0
    23cc:	0010d81d 	andseq	sp, r0, sp, lsl r8
    23d0:	01230100 	teqeq	r3, r0, lsl #2
    23d4:	0000005e 	andeq	r0, r0, lr, asr r0
    23d8:	34011a00 	strcc	r1, [r1], #-2560
    23dc:	01000013 	tsteq	r0, r3, lsl r0
    23e0:	4c01013c 	stfmis	f0, [r1], {60}
    23e4:	5c000000 	stcpl	0, cr0, [r0], {0}
    23e8:	62080043 	andvs	r0, r8, #67	; 0x43
    23ec:	01080043 	tsteq	r8, r3, asr #32
    23f0:	0003c45d 	andeq	ip, r3, sp, asr r4
    23f4:	14e11b00 	strbtne	r1, [r1], #2816
    23f8:	3b010000 	blcc	42400 <__Stack_Size+0x42000>
    23fc:	0002af01 	andeq	sl, r2, r1, lsl #30
    2400:	0011b900 	andseq	fp, r1, r0, lsl #18
    2404:	011e0000 	tsteq	lr, r0
    2408:	0000138b 	andeq	r1, r0, fp, lsl #7
    240c:	01014e01 	tsteq	r1, r1, lsl #28
    2410:	08004364 	stmdaeq	r0, {r2, r5, r6, r8, r9, lr}
    2414:	08004368 	stmdaeq	r0, {r3, r5, r6, r8, r9, lr}
    2418:	03f95d01 	mvnseq	r5, #64	; 0x40
    241c:	e11c0000 	tst	ip, r0
    2420:	01000014 	tsteq	r0, r4, lsl r0
    2424:	02af014d 	adceq	r0, pc, #1073741843	; 0x40000013
    2428:	50010000 	andpl	r0, r1, r0
    242c:	0000851c 	andeq	r8, r0, ip, lsl r5
    2430:	014d0100 	cmpeq	sp, r0, lsl #2
    2434:	0000004c 	andeq	r0, r0, ip, asr #32
    2438:	1e005101 	adfnes	f5, f0, f1
    243c:	00142f01 	andseq	r2, r4, r1, lsl #30
    2440:	01610100 	cmneq	r1, r0, lsl #2
    2444:	00436801 	subeq	r6, r3, r1, lsl #16
    2448:	00436c08 	subeq	r6, r3, r8, lsl #24
    244c:	2e5d0108 	rdfcse	f0, f5, #0.0
    2450:	1c000004 	stcne	0, cr0, [r0], {4}
    2454:	000014e1 	andeq	r1, r0, r1, ror #9
    2458:	af016001 	svcge	0x00016001
    245c:	01000002 	tsteq	r0, r2
    2460:	00851c50 	addeq	r1, r5, r0, asr ip
    2464:	60010000 	andvs	r0, r1, r0
    2468:	00004c01 	andeq	r4, r0, r1, lsl #24
    246c:	00510100 	subseq	r0, r1, r0, lsl #2
    2470:	137d011e 	cmnne	sp, #-2147483641	; 0x80000007
    2474:	77010000 	strvc	r0, [r1, -r0]
    2478:	436c0101 	cmnmi	ip, #1073741824	; 0x40000000
    247c:	43760800 	cmnmi	r6, #0	; 0x0
    2480:	5d010800 	stcpl	8, cr0, [r1]
    2484:	00000471 	andeq	r0, r0, r1, ror r4
    2488:	0014e11c 	andseq	lr, r4, ip, lsl r1
    248c:	01760100 	cmneq	r6, r0, lsl #2
    2490:	000002af 	andeq	r0, r0, pc, lsr #5
    2494:	851c5001 	ldrhi	r5, [ip, #-1]
    2498:	01000000 	tsteq	r0, r0
    249c:	004c0176 	subeq	r0, ip, r6, ror r1
    24a0:	51010000 	tstpl	r1, r0
    24a4:	00136c1c 	andseq	r6, r3, ip, lsl ip
    24a8:	01760100 	cmneq	r6, r0, lsl #2
    24ac:	00000220 	andeq	r0, r0, r0, lsr #4
    24b0:	1e005201 	cdpne	2, 0, cr5, cr0, cr1, {0}
    24b4:	0014ae01 	andseq	sl, r4, r1, lsl #28
    24b8:	01910100 	orrseq	r0, r1, r0, lsl #2
    24bc:	00437801 	subeq	r7, r3, r1, lsl #16
    24c0:	00437c08 	subeq	r7, r3, r8, lsl #24
    24c4:	a65d0108 	ldrbge	r0, [sp], -r8, lsl #2
    24c8:	1c000004 	stcne	0, cr0, [r0], {4}
    24cc:	000014e1 	andeq	r1, r0, r1, ror #9
    24d0:	af019001 	svcge	0x00019001
    24d4:	01000002 	tsteq	r0, r2
    24d8:	143e1c50 	ldrtne	r1, [lr], #-3152
    24dc:	90010000 	andls	r0, r1, r0
    24e0:	00004c01 	andeq	r4, r0, r1, lsl #24
    24e4:	00510100 	subseq	r0, r1, r0, lsl #2
    24e8:	1490011e 	ldrne	r0, [r0], #286
    24ec:	a3010000 	movwge	r0, #4096	; 0x1000
    24f0:	437c0101 	cmnmi	ip, #1073741824	; 0x40000000
    24f4:	438c0800 	orrmi	r0, ip, #0	; 0x0
    24f8:	5d010800 	stcpl	8, cr0, [r1]
    24fc:	000004e9 	andeq	r0, r0, r9, ror #9
    2500:	0014e11c 	andseq	lr, r4, ip, lsl r1
    2504:	01a20100 	undefined instruction 0x01a20100
    2508:	000002af 	andeq	r0, r0, pc, lsr #5
    250c:	851c5001 	ldrhi	r5, [ip, #-1]
    2510:	01000000 	tsteq	r0, r0
    2514:	004c01a2 	subeq	r0, ip, r2, lsr #3
    2518:	51010000 	tstpl	r1, r0
    251c:	706d741f 	rsbvc	r7, sp, pc, lsl r4
    2520:	01a40100 	undefined instruction 0x01a40100
    2524:	0000003a 	andeq	r0, r0, sl, lsr r0
    2528:	1e005301 	cdpne	3, 0, cr5, cr0, cr1, {0}
    252c:	0013f001 	andseq	pc, r3, r1
    2530:	01c40100 	biceq	r0, r4, r0, lsl #2
    2534:	00438c01 	subeq	r8, r3, r1, lsl #24
    2538:	0043ac08 	subeq	sl, r3, r8, lsl #24
    253c:	305d0108 	subscc	r0, sp, r8, lsl #2
    2540:	1c000005 	stcne	0, cr0, [r0], {5}
    2544:	000013d4 	ldrdeq	r1, [r0], -r4
    2548:	5e01c301 	cdppl	3, 0, cr12, cr1, cr1, {0}
    254c:	01000000 	tsteq	r0, r0
    2550:	14661b50 	strbtne	r1, [r6], #-2896
    2554:	c3010000 	movwgt	r0, #4096	; 0x1000
    2558:	00005e01 	andeq	r5, r0, r1, lsl #28
    255c:	0011cc00 	andseq	ip, r1, r0, lsl #24
    2560:	14282000 	strtne	r2, [r8]
    2564:	c5010000 	strgt	r0, [r1]
    2568:	00003a01 	andeq	r3, r0, r1, lsl #20
    256c:	0011df00 	andseq	sp, r1, r0, lsl #30
    2570:	011e0000 	tsteq	lr, r0
    2574:	00001348 	andeq	r1, r0, r8, asr #6
    2578:	0101dd01 	tsteq	r1, r1, lsl #26
    257c:	080043ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, lr}
    2580:	080043b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, lr}
    2584:	05575d01 	ldrbeq	r5, [r7, #-3329]
    2588:	511c0000 	tstpl	ip, r0
    258c:	01000010 	tsteq	r0, r0, lsl r0
    2590:	008901dc 	ldrdeq	r0, [r9], ip
    2594:	50010000 	andpl	r0, r1, r0
    2598:	52012100 	andpl	r2, r1, #0	; 0x0
    259c:	01000014 	tsteq	r0, r4, lsl r0
    25a0:	b8010208 	stmdalt	r1, {r3, r9}
    25a4:	18080043 	stmdane	r8, {r0, r1, r6}
    25a8:	1e080044 	cdpne	0, 0, cr0, cr8, cr4, {2}
    25ac:	c6000012 	undefined
    25b0:	1c000005 	stcne	0, cr0, [r0], {5}
    25b4:	00001407 	andeq	r1, r0, r7, lsl #8
    25b8:	3a020701 	bcc	841c4 <__Stack_Size+0x83dc4>
    25bc:	01000000 	tsteq	r0, r0
    25c0:	10511b50 	subsne	r1, r1, r0, asr fp
    25c4:	07010000 	streq	r0, [r1, -r0]
    25c8:	00008902 	andeq	r8, r0, r2, lsl #18
    25cc:	00123d00 	andseq	r3, r2, r0, lsl #26
    25d0:	6d741f00 	ldclvs	15, cr1, [r4]
    25d4:	09010070 	stmdbeq	r1, {r4, r5, r6}
    25d8:	00003a02 	andeq	r3, r0, r2, lsl #20
    25dc:	1d540100 	ldfnee	f0, [r4]
    25e0:	000014b9 	strheq	r1, [r0], -r9
    25e4:	3a020901 	bcc	849f0 <__Stack_Size+0x845f0>
    25e8:	20000000 	andcs	r0, r0, r0
    25ec:	00001428 	andeq	r1, r0, r8, lsr #8
    25f0:	3a020901 	bcc	849fc <__Stack_Size+0x845fc>
    25f4:	5b000000 	blpl	25fc <__Stack_Size+0x21fc>
    25f8:	1d000012 	stcne	0, cr0, [r0, #-72]
    25fc:	00001488 	andeq	r1, r0, r8, lsl #9
    2600:	3a020901 	bcc	84a0c <__Stack_Size+0x8460c>
    2604:	00000000 	andeq	r0, r0, r0
    2608:	14be0121 	ldrtne	r0, [lr], #289
    260c:	3a010000 	bcc	42614 <__Stack_Size+0x42214>
    2610:	44180102 	ldrmi	r0, [r8], #-258
    2614:	444c0800 	strbmi	r0, [ip], #-2048
    2618:	129a0800 	addsne	r0, sl, #0	; 0x0
    261c:	060d0000 	streq	r0, [sp], -r0
    2620:	d41b0000 	ldrle	r0, [fp]
    2624:	01000013 	tsteq	r0, r3, lsl r0
    2628:	005e0239 	subseq	r0, lr, r9, lsr r2
    262c:	12b90000 	adcsne	r0, r9, #0	; 0x0
    2630:	661b0000 	ldrvs	r0, [fp], -r0
    2634:	01000014 	tsteq	r0, r4, lsl r0
    2638:	005e0239 	subseq	r0, lr, r9, lsr r2
    263c:	12cc0000 	sbcne	r0, ip, #0	; 0x0
    2640:	74220000 	strtvc	r0, [r2]
    2644:	0100706d 	tsteq	r0, sp, rrx
    2648:	003a023b 	eorseq	r0, sl, fp, lsr r2
    264c:	23000000 	movwcs	r0, #0	; 0x0
    2650:	00151301 	andseq	r1, r5, r1, lsl #6
    2654:	016c0100 	cmneq	ip, r0, lsl #2
    2658:	0800444c 	stmdaeq	r0, {r2, r3, r6, sl, lr}
    265c:	08004464 	stmdaeq	r0, {r2, r5, r6, sl, lr}
    2660:	000012df 	ldrdeq	r1, [r0], -pc
    2664:	13e40124 	mvnne	r0, #9	; 0x9
    2668:	34010000 	strcc	r0, [r1]
    266c:	00446401 	subeq	r6, r4, r1, lsl #8
    2670:	00450c08 	subeq	r0, r5, r8, lsl #24
    2674:	00130a08 	andseq	r0, r3, r8, lsl #20
    2678:	14e11300 	strbtne	r1, [r1], #768
    267c:	33010000 	movwcc	r0, #4096	; 0x1000
    2680:	000002af 	andeq	r0, r0, pc, lsr #5
    2684:	00001335 	andeq	r1, r0, r5, lsr r3
    2688:	08e30000 	stmiaeq	r3!, {}^
    268c:	00020000 	andeq	r0, r2, r0
    2690:	000009c5 	andeq	r0, r0, r5, asr #19
    2694:	04880104 	streq	r0, [r8], #260
    2698:	16010000 	strne	r0, [r1], -r0
    269c:	8e000016 	mcrhi	0, 0, r0, cr0, cr6, {0}
    26a0:	0c000000 	stceq	0, cr0, [r0], {0}
    26a4:	90080045 	andls	r0, r8, r5, asr #32
    26a8:	b0080048 	andlt	r0, r8, r8, asr #32
    26ac:	02000009 	andeq	r0, r0, #9	; 0x9
    26b0:	2cfb0504 	cfldr64cs	mvdx0, [fp], #16
    26b4:	02020000 	andeq	r0, r2, #0	; 0x0
    26b8:	00050f05 	andeq	r0, r5, r5, lsl #30
    26bc:	06010200 	streq	r0, [r1], -r0, lsl #4
    26c0:	000005d4 	ldrdeq	r0, [r0], -r4
    26c4:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    26c8:	45270200 	strmi	r0, [r7, #-512]!
    26cc:	02000000 	andeq	r0, r0, #0	; 0x0
    26d0:	2d750704 	ldclcs	7, cr0, [r5, #-16]!
    26d4:	75030000 	strvc	r0, [r3]
    26d8:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    26dc:	00005728 	andeq	r5, r0, r8, lsr #14
    26e0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    26e4:	00000712 	andeq	r0, r0, r2, lsl r7
    26e8:	00387503 	eorseq	r7, r8, r3, lsl #10
    26ec:	00682902 	rsbeq	r2, r8, r2, lsl #18
    26f0:	01020000 	tsteq	r2, r0
    26f4:	0005d208 	andeq	sp, r5, r8, lsl #4
    26f8:	00450400 	subeq	r0, r5, r0, lsl #8
    26fc:	6f050000 	svcvs	0x00050000
    2700:	06000000 	streq	r0, [r0], -r0
    2704:	8e390201 	cdphi	2, 3, cr0, cr9, cr1, {0}
    2708:	07000000 	streq	r0, [r0, -r0]
    270c:	00001377 	andeq	r1, r0, r7, ror r3
    2710:	45530800 	ldrbmi	r0, [r3, #-2048]
    2714:	00010054 	andeq	r0, r1, r4, asr r0
    2718:	001ac409 	andseq	ip, sl, r9, lsl #8
    271c:	79390200 	ldmdbvc	r9!, {r9}
    2720:	06000000 	streq	r0, [r0], -r0
    2724:	ae3b0201 	cdpge	2, 3, cr0, cr11, cr1, {0}
    2728:	07000000 	streq	r0, [r0, -r0]
    272c:	00000363 	andeq	r0, r0, r3, ror #6
    2730:	05a40700 	streq	r0, [r4, #1792]!
    2734:	00010000 	andeq	r0, r1, r0
    2738:	0000dc09 	andeq	sp, r0, r9, lsl #24
    273c:	993b0200 	ldmdbls	fp!, {r9}
    2740:	0a000000 	beq	2748 <__Stack_Size+0x2348>
    2744:	3c0b0704 	stccc	7, cr0, [fp], {4}
    2748:	01820303 	orreq	r0, r2, r3, lsl #6
    274c:	00000175 	andeq	r0, r0, r5, ror r1
    2750:	0018150c 	andseq	r1, r8, ip, lsl #10
    2754:	01830300 	orreq	r0, r3, r0, lsl #6
    2758:	00000185 	andeq	r0, r0, r5, lsl #3
    275c:	0c002302 	stceq	3, cr2, [r0], {2}
    2760:	000004c9 	andeq	r0, r0, r9, asr #9
    2764:	8a018403 	bhi	63778 <__Stack_Size+0x63378>
    2768:	02000001 	andeq	r0, r0, #1	; 0x1
    276c:	d90c0823 	stmdble	ip, {r0, r1, r5, fp}
    2770:	03000017 	movweq	r0, #23	; 0x17
    2774:	019a0185 	orrseq	r0, sl, r5, lsl #3
    2778:	23030000 	movwcs	r0, #12288	; 0x3000
    277c:	9e0c0180 	adfls<illegal precision>	f0, f4, f0
    2780:	03000016 	movweq	r0, #22	; 0x16
    2784:	018a0186 	orreq	r0, sl, r6, lsl #3
    2788:	23030000 	movwcs	r0, #12288	; 0x3000
    278c:	ef0c0188 	svc	0x000c0188
    2790:	03000017 	movweq	r0, #23	; 0x17
    2794:	019f0187 	orrseq	r0, pc, r7, lsl #3
    2798:	23030000 	movwcs	r0, #12288	; 0x3000
    279c:	dd0c0280 	sfmle	f0, 4, [ip, #-512]
    27a0:	03000004 	movweq	r0, #4	; 0x4
    27a4:	018a0188 	orreq	r0, sl, r8, lsl #3
    27a8:	23030000 	movwcs	r0, #12288	; 0x3000
    27ac:	5e0c0288 	cdppl	2, 0, cr0, cr12, cr8, {4}
    27b0:	03000017 	movweq	r0, #23	; 0x17
    27b4:	01a40189 	undefined instruction 0x01a40189
    27b8:	23030000 	movwcs	r0, #12288	; 0x3000
    27bc:	e70c0380 	str	r0, [ip, -r0, lsl #7]
    27c0:	03000004 	movweq	r0, #4	; 0x4
    27c4:	018a018a 	orreq	r0, sl, sl, lsl #3
    27c8:	23030000 	movwcs	r0, #12288	; 0x3000
    27cc:	230c0388 	movwcs	r0, #50056	; 0xc388
    27d0:	03000015 	movweq	r0, #21	; 0x15
    27d4:	01a9018b 	undefined instruction 0x01a9018b
    27d8:	23030000 	movwcs	r0, #12288	; 0x3000
    27dc:	f10c0480 	undefined instruction 0xf10c0480
    27e0:	03000004 	movweq	r0, #4	; 0x4
    27e4:	01ae018c 	undefined instruction 0x01ae018c
    27e8:	23030000 	movwcs	r0, #12288	; 0x3000
    27ec:	490d0488 	stmdbmi	sp, {r3, r7, sl}
    27f0:	03005250 	movweq	r5, #592	; 0x250
    27f4:	01ce018d 	biceq	r0, lr, sp, lsl #3
    27f8:	23030000 	movwcs	r0, #12288	; 0x3000
    27fc:	0e000680 	cfmadd32eq	mvax4, mvfx0, mvfx0, mvfx0
    2800:	00000045 	andeq	r0, r0, r5, asr #32
    2804:	00000185 	andeq	r0, r0, r5, lsl #3
    2808:	0000b90f 	andeq	fp, r0, pc, lsl #18
    280c:	04000100 	streq	r0, [r0], #-256
    2810:	00000175 	andeq	r0, r0, r5, ror r1
    2814:	00003a0e 	andeq	r3, r0, lr, lsl #20
    2818:	00019a00 	andeq	r9, r1, r0, lsl #20
    281c:	00b90f00 	adcseq	r0, r9, r0, lsl #30
    2820:	001d0000 	andseq	r0, sp, r0
    2824:	00017504 	andeq	r7, r1, r4, lsl #10
    2828:	01750400 	cmneq	r5, r0, lsl #8
    282c:	75040000 	strvc	r0, [r4]
    2830:	04000001 	streq	r0, [r0], #-1
    2834:	00000175 	andeq	r0, r0, r5, ror r1
    2838:	00003a0e 	andeq	r3, r0, lr, lsl #20
    283c:	0001be00 	andeq	fp, r1, r0, lsl #28
    2840:	00b90f00 	adcseq	r0, r9, r0, lsl #30
    2844:	003d0000 	eorseq	r0, sp, r0
    2848:	0000450e 	andeq	r4, r0, lr, lsl #10
    284c:	0001ce00 	andeq	ip, r1, r0, lsl #28
    2850:	00b90f00 	adcseq	r0, r9, r0, lsl #30
    2854:	000e0000 	andeq	r0, lr, r0
    2858:	0001be04 	andeq	fp, r1, r4, lsl #28
    285c:	03401000 	movteq	r1, #0	; 0x0
    2860:	02af0191 	adceq	r0, pc, #1073741860	; 0x40000024
    2864:	410c0000 	tstmi	ip, r0
    2868:	03000016 	movweq	r0, #22	; 0x16
    286c:	00740192 	ldrbteq	r0, [r4], #-18
    2870:	23020000 	movwcs	r0, #8192	; 0x2000
    2874:	16990c00 	ldrne	r0, [r9], r0, lsl #24
    2878:	93030000 	movwls	r0, #12288	; 0x3000
    287c:	00006f01 	andeq	r6, r0, r1, lsl #30
    2880:	04230200 	strteq	r0, [r3], #-512
    2884:	0017ea0c 	andseq	lr, r7, ip, lsl #20
    2888:	01940300 	orrseq	r0, r4, r0, lsl #6
    288c:	0000006f 	andeq	r0, r0, pc, rrx
    2890:	0c082302 	stceq	3, cr2, [r8], {2}
    2894:	00001744 	andeq	r1, r0, r4, asr #14
    2898:	6f019503 	svcvs	0x00019503
    289c:	02000000 	andeq	r0, r0, #0	; 0x0
    28a0:	530d0c23 	movwpl	r0, #56355	; 0xdc23
    28a4:	03005243 	movweq	r5, #579	; 0x243
    28a8:	006f0196 	mlseq	pc, r6, r1, r0
    28ac:	23020000 	movwcs	r0, #8192	; 0x2000
    28b0:	43430d10 	movtmi	r0, #15632	; 0x3d10
    28b4:	97030052 	smlsdls	r3, r2, r0, r0
    28b8:	00006f01 	andeq	r6, r0, r1, lsl #30
    28bc:	14230200 	strtne	r0, [r3], #-512
    28c0:	00176d0c 	andseq	r6, r7, ip, lsl #26
    28c4:	01980300 	orrseq	r0, r8, r0, lsl #6
    28c8:	000002bf 	strheq	r0, [r0], -pc
    28cc:	0c182302 	ldceq	3, cr2, [r8], {2}
    28d0:	00001772 	andeq	r1, r0, r2, ror r7
    28d4:	6f019903 	svcvs	0x00019903
    28d8:	02000000 	andeq	r0, r0, #0	; 0x0
    28dc:	1f0c2423 	svcne	0x000c2423
    28e0:	03000017 	movweq	r0, #23	; 0x17
    28e4:	006f019a 	mlseq	pc, sl, r1, r0
    28e8:	23020000 	movwcs	r0, #8192	; 0x2000
    28ec:	17f90c28 	ldrbne	r0, [r9, r8, lsr #24]!
    28f0:	9b030000 	blls	c28f8 <__Stack_Size+0xc24f8>
    28f4:	00006f01 	andeq	r6, r0, r1, lsl #30
    28f8:	2c230200 	sfmcs	f0, 4, [r3]
    28fc:	0017f40c 	andseq	pc, r7, ip, lsl #8
    2900:	019c0300 	orrseq	r0, ip, r0, lsl #6
    2904:	0000006f 	andeq	r0, r0, pc, rrx
    2908:	0c302302 	ldceq	3, cr2, [r0], #-8
    290c:	00001788 	andeq	r1, r0, r8, lsl #15
    2910:	6f019d03 	svcvs	0x00019d03
    2914:	02000000 	andeq	r0, r0, #0	; 0x0
    2918:	f60c3423 	undefined instruction 0xf60c3423
    291c:	03000016 	movweq	r0, #22	; 0x16
    2920:	006f019e 	mlseq	pc, lr, r1, r0
    2924:	23020000 	movwcs	r0, #8192	; 0x2000
    2928:	18100c38 	ldmdane	r0, {r3, r4, r5, sl, fp}
    292c:	9f030000 	svcls	0x00030000
    2930:	00006f01 	andeq	r6, r0, r1, lsl #30
    2934:	3c230200 	sfmcc	f0, 4, [r3]
    2938:	00450e00 	subeq	r0, r5, r0, lsl #28
    293c:	02bf0000 	adcseq	r0, pc, #0	; 0x0
    2940:	b90f0000 	stmdblt	pc, {}
    2944:	02000000 	andeq	r0, r0, #0	; 0x0
    2948:	02af0400 	adceq	r0, pc, #0	; 0x0
    294c:	04110000 	ldreq	r0, [r1]
    2950:	03051b04 	movweq	r1, #23300	; 0x5b04
    2954:	54120000 	ldrpl	r0, [r2]
    2958:	04000004 	streq	r0, [r0], #-4
    295c:	00005e1c 	andeq	r5, r0, ip, lsl lr
    2960:	00230200 	eoreq	r0, r3, r0, lsl #4
    2964:	00073212 	andeq	r3, r7, r2, lsl r2
    2968:	5e1d0400 	cfmulspl	mvf0, mvf13, mvf0
    296c:	02000000 	andeq	r0, r0, #0	; 0x0
    2970:	b0120123 	andslt	r0, r2, r3, lsr #2
    2974:	04000006 	streq	r0, [r0], #-6
    2978:	00005e1e 	andeq	r5, r0, lr, lsl lr
    297c:	02230200 	eoreq	r0, r3, #0	; 0x0
    2980:	0002b312 	andeq	fp, r2, r2, lsl r3
    2984:	ae1f0400 	cfmulsge	mvf0, mvf15, mvf0
    2988:	02000000 	andeq	r0, r0, #0	; 0x0
    298c:	09000323 	stmdbeq	r0, {r0, r1, r5, r8, r9}
    2990:	000001c5 	andeq	r0, r0, r5, asr #3
    2994:	02c42004 	sbceq	r2, r4, #4	; 0x4
    2998:	01130000 	tsteq	r3, r0
    299c:	00001946 	andeq	r1, r0, r6, asr #18
    29a0:	0c012501 	cfstr32eq	mvfx2, [r1], {1}
    29a4:	40080045 	andmi	r0, r8, r5, asr #32
    29a8:	01080045 	tsteq	r8, r5, asr #32
    29ac:	0003355d 	andeq	r3, r3, sp, asr r5
    29b0:	0f531400 	svceq	0x00531400
    29b4:	26010000 	strcs	r0, [r1], -r0
    29b8:	0000003a 	andeq	r0, r0, sl, lsr r0
    29bc:	13005201 	movwne	r5, #513	; 0x201
    29c0:	0018d301 	andseq	sp, r8, r1, lsl #6
    29c4:	013c0100 	teqeq	ip, r0, lsl #2
    29c8:	08004540 	stmdaeq	r0, {r6, r8, sl, lr}
    29cc:	08004570 	stmdaeq	r0, {r4, r5, r6, r8, sl, lr}
    29d0:	03585d01 	cmpeq	r8, #64	; 0x40
    29d4:	53150000 	tstpl	r5, #0	; 0x0
    29d8:	0100000f 	tsteq	r0, pc
    29dc:	00003a3d 	andeq	r3, r0, sp, lsr sl
    29e0:	01130000 	tsteq	r3, r0
    29e4:	00001952 	andeq	r1, r0, r2, asr r9
    29e8:	70016201 	andvc	r6, r1, r1, lsl #4
    29ec:	84080045 	strhi	r0, [r8], #-69
    29f0:	01080045 	tsteq	r8, r5, asr #32
    29f4:	00037f5d 	andeq	r7, r3, sp, asr pc
    29f8:	16471600 	strbne	r1, [r7], -r0, lsl #12
    29fc:	61010000 	tstvs	r1, r0
    2a00:	0000003a 	andeq	r0, r0, sl, lsr r0
    2a04:	00001354 	andeq	r1, r0, r4, asr r3
    2a08:	63011700 	movwvs	r1, #5888	; 0x1700
    2a0c:	01000017 	tsteq	r0, r7, lsl r0
    2a10:	45840175 	strmi	r0, [r4, #373]
    2a14:	46000800 	strmi	r0, [r0], -r0, lsl #16
    2a18:	13670800 	cmnne	r7, #0	; 0x0
    2a1c:	03eb0000 	mvneq	r0, #0	; 0x0
    2a20:	47160000 	ldrmi	r0, [r6, -r0]
    2a24:	01000015 	tsteq	r0, r5, lsl r0
    2a28:	0003eb74 	andeq	lr, r3, r4, ror fp
    2a2c:	00138600 	andseq	r8, r3, r0, lsl #12
    2a30:	17de1800 	ldrbne	r1, [lr, r0, lsl #16]
    2a34:	76010000 	strvc	r0, [r1], -r0
    2a38:	0000003a 	andeq	r0, r0, sl, lsr r0
    2a3c:	000013a4 	andeq	r1, r0, r4, lsr #7
    2a40:	00142818 	andseq	r2, r4, r8, lsl r8
    2a44:	3a760100 	bcc	1d82e4c <__Stack_Size+0x1d82a4c>
    2a48:	cd000000 	stcgt	0, cr0, [r0]
    2a4c:	18000013 	stmdane	r0, {r0, r1, r4}
    2a50:	00001488 	andeq	r1, r0, r8, lsl #9
    2a54:	003a7601 	eorseq	r7, sl, r1, lsl #12
    2a58:	13eb0000 	mvnne	r0, #0	; 0x0
    2a5c:	cf150000 	svcgt	0x00150000
    2a60:	01000015 	tsteq	r0, r5, lsl r0
    2a64:	00003a77 	andeq	r3, r0, r7, ror sl
    2a68:	178e1500 	strne	r1, [lr, r0, lsl #10]
    2a6c:	77010000 	strvc	r0, [r1, -r0]
    2a70:	0000003a 	andeq	r0, r0, sl, lsr r0
    2a74:	05041900 	streq	r1, [r4, #-2304]
    2a78:	13000003 	movwne	r0, #3	; 0x3
    2a7c:	0017c901 	andseq	ip, r7, r1, lsl #18
    2a80:	01a90100 	undefined instruction 0x01a90100
    2a84:	08004600 	stmdaeq	r0, {r9, sl, lr}
    2a88:	0800460c 	stmdaeq	r0, {r2, r3, r9, sl, lr}
    2a8c:	04165d01 	ldreq	r5, [r6], #-3329
    2a90:	471a0000 	ldrmi	r0, [sl, -r0]
    2a94:	01000015 	tsteq	r0, r5, lsl r0
    2a98:	0003eba8 	andeq	lr, r3, r8, lsr #23
    2a9c:	00500100 	subseq	r0, r0, r0, lsl #2
    2aa0:	1557011b 	ldrbne	r0, [r7, #-283]
    2aa4:	06010000 	streq	r0, [r1], -r0
    2aa8:	004c0101 	subeq	r0, ip, r1, lsl #2
    2aac:	460c0000 	strmi	r0, [ip], -r0
    2ab0:	46240800 	strtmi	r0, [r4], -r0, lsl #16
    2ab4:	5d010800 	stcpl	8, cr0, [r1]
    2ab8:	18b0011c 	ldmne	r0!, {r2, r3, r4, r8}
    2abc:	13010000 	movwne	r0, #4096	; 0x1000
    2ac0:	008e0101 	addeq	r0, lr, r1, lsl #2
    2ac4:	46240000 	strtmi	r0, [r4], -r0
    2ac8:	46480800 	strbmi	r0, [r8], -r0, lsl #16
    2acc:	5d010800 	stcpl	8, cr0, [r1]
    2ad0:	00000475 	andeq	r0, r0, r5, ror r4
    2ad4:	0004541d 	andeq	r5, r4, sp, lsl r4
    2ad8:	01120100 	tsteq	r2, r0, lsl #2
    2adc:	0000005e 	andeq	r0, r0, lr, asr r0
    2ae0:	000013fe 	strdeq	r1, [r0], -lr
    2ae4:	00196b1e 	andseq	r6, r9, lr, lsl fp
    2ae8:	01140100 	tsteq	r4, r0, lsl #2
    2aec:	0000008e 	andeq	r0, r0, lr, lsl #1
    2af0:	706d741f 	rsbvc	r7, sp, pc, lsl r4
    2af4:	01150100 	tsteq	r5, r0, lsl #2
    2af8:	0000003a 	andeq	r0, r0, sl, lsr r0
    2afc:	20005201 	andcs	r5, r0, r1, lsl #4
    2b00:	0016fb01 	andseq	pc, r6, r1, lsl #22
    2b04:	012f0100 	teqeq	pc, r0, lsl #2
    2b08:	00464801 	subeq	r4, r6, r1, lsl #16
    2b0c:	00465408 	subeq	r5, r6, r8, lsl #8
    2b10:	9c5d0108 	ldflse	f0, [sp], {8}
    2b14:	21000004 	tstcs	r0, r4
    2b18:	00000454 	andeq	r0, r0, r4, asr r4
    2b1c:	5e012e01 	cdppl	14, 0, cr2, cr1, cr1, {0}
    2b20:	01000000 	tsteq	r0, r0
    2b24:	01200050 	qsubeq	r0, r0, r0
    2b28:	00001528 	andeq	r1, r0, r8, lsr #10
    2b2c:	01013e01 	tsteq	r1, r1, lsl #28
    2b30:	08004654 	stmdaeq	r0, {r2, r4, r6, r9, sl, lr}
    2b34:	0800466c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, lr}
    2b38:	04c55d01 	strbeq	r5, [r5], #3329
    2b3c:	541d0000 	ldrpl	r0, [sp]
    2b40:	01000004 	tsteq	r0, r4
    2b44:	005e013d 	subseq	r0, lr, sp, lsr r1
    2b48:	14110000 	ldrne	r0, [r1]
    2b4c:	1b000000 	blne	2b54 <__Stack_Size+0x2754>
    2b50:	00166e01 	andseq	r6, r6, r1, lsl #28
    2b54:	014e0100 	cmpeq	lr, r0, lsl #2
    2b58:	00004c01 	andeq	r4, r0, r1, lsl #24
    2b5c:	00466c00 	subeq	r6, r6, r0, lsl #24
    2b60:	00467c08 	subeq	r7, r6, r8, lsl #24
    2b64:	1c5d0108 	ldfnee	f0, [sp], {8}
    2b68:	00192401 	andseq	r2, r9, r1, lsl #8
    2b6c:	015b0100 	cmpeq	fp, r0, lsl #2
    2b70:	00008e01 	andeq	r8, r0, r1, lsl #28
    2b74:	00467c00 	subeq	r7, r6, r0, lsl #24
    2b78:	0046a008 	subeq	sl, r6, r8
    2b7c:	245d0108 	ldrbcs	r0, [sp], #-264
    2b80:	1d000005 	stcne	0, cr0, [r0, #-20]
    2b84:	00000454 	andeq	r0, r0, r4, asr r4
    2b88:	5e015a01 	fmacspl	s10, s2, s2
    2b8c:	24000000 	strcs	r0, [r0]
    2b90:	1e000014 	mcrne	0, 0, r0, cr0, cr4, {0}
    2b94:	000018fb 	strdeq	r1, [r0], -fp
    2b98:	8e015c01 	cdphi	12, 0, cr5, cr1, cr1, {0}
    2b9c:	1f000000 	svcne	0x00000000
    2ba0:	00706d74 	rsbseq	r6, r0, r4, ror sp
    2ba4:	3a015d01 	bcc	59fb0 <__Stack_Size+0x59bb0>
    2ba8:	01000000 	tsteq	r0, r0
    2bac:	011b0052 	tsteq	fp, r2, asr r0
    2bb0:	00001639 	andeq	r1, r0, r9, lsr r6
    2bb4:	01017801 	tsteq	r1, r1, lsl #16
    2bb8:	0000003a 	andeq	r0, r0, sl, lsr r0
    2bbc:	080046a0 	stmdaeq	r0, {r5, r7, r9, sl, lr}
    2bc0:	080046ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, lr}
    2bc4:	01205d01 	teqeq	r0, r1, lsl #26
    2bc8:	0000174a 	andeq	r1, r0, sl, asr #14
    2bcc:	01018a01 	tsteq	r1, r1, lsl #20
    2bd0:	080046ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, lr}
    2bd4:	080046c0 	stmdaeq	r0, {r6, r7, r9, sl, lr}
    2bd8:	05735d01 	ldrbeq	r5, [r3, #-3329]!
    2bdc:	ee210000 	cdp	0, 2, cr0, cr1, cr0, {0}
    2be0:	01000018 	tsteq	r0, r8, lsl r0
    2be4:	003a0189 	eorseq	r0, sl, r9, lsl #3
    2be8:	50010000 	andpl	r0, r1, r0
    2bec:	0017c21d 	andseq	ip, r7, sp, lsl r2
    2bf0:	01890100 	orreq	r0, r9, r0, lsl #2
    2bf4:	0000003a 	andeq	r0, r0, sl, lsr r0
    2bf8:	00001437 	andeq	r1, r0, r7, lsr r4
    2bfc:	b6012200 	strlt	r2, [r1], -r0, lsl #4
    2c00:	01000015 	tsteq	r0, r5, lsl r0
    2c04:	c001019a 	mulgt	r1, sl, r1
    2c08:	d0080046 	andle	r0, r8, r6, asr #32
    2c0c:	01080046 	tsteq	r8, r6, asr #32
    2c10:	a701225d 	smlsdge	r1, sp, r2, r2
    2c14:	01000016 	tsteq	r0, r6, lsl r0
    2c18:	d00101a6 	andle	r0, r1, r6, lsr #3
    2c1c:	e0080046 	and	r0, r8, r6, asr #32
    2c20:	01080046 	tsteq	r8, r6, asr #32
    2c24:	ae01205d 	mcrge	0, 0, r2, cr1, cr13, {2}
    2c28:	01000017 	tsteq	r0, r7, lsl r0
    2c2c:	e00101b9 	strh	r0, [r1], -r9
    2c30:	fc080046 	stc2	0, cr0, [r8], {70}
    2c34:	01080046 	tsteq	r8, r6, asr #32
    2c38:	0005d05d 	andeq	sp, r5, sp, asr r0
    2c3c:	19172100 	ldmdbne	r7, {r8, sp}
    2c40:	b8010000 	stmdalt	r1, {}
    2c44:	00005e01 	andeq	r5, r0, r1, lsl #28
    2c48:	21500100 	cmpcs	r0, r0, lsl #2
    2c4c:	00001051 	andeq	r1, r0, r1, asr r0
    2c50:	ae01b801 	cdpge	8, 0, cr11, cr1, cr1, {0}
    2c54:	01000000 	tsteq	r0, r0
    2c58:	01200051 	qsubeq	r0, r1, r0
    2c5c:	00001795 	muleq	r0, r5, r7
    2c60:	0101d701 	tsteq	r1, r1, lsl #14
    2c64:	080046fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, lr}
    2c68:	08004724 	stmdaeq	r0, {r2, r5, r8, r9, sl, lr}
    2c6c:	06155d01 	ldreq	r5, [r5], -r1, lsl #26
    2c70:	8b1d0000 	blhi	742c78 <__Stack_Size+0x742878>
    2c74:	01000016 	tsteq	r0, r6, lsl r0
    2c78:	003a01d6 	ldrsbteq	r0, [sl], -r6
    2c7c:	144a0000 	strbne	r0, [sl]
    2c80:	51210000 	teqpl	r1, r0
    2c84:	01000010 	tsteq	r0, r0, lsl r0
    2c88:	00ae01d6 	ldrdeq	r0, [lr], r6
    2c8c:	51010000 	tstpl	r1, r0
    2c90:	00142823 	andseq	r2, r4, r3, lsr #16
    2c94:	01d80100 	bicseq	r0, r8, r0, lsl #2
    2c98:	0000003a 	andeq	r0, r0, sl, lsr r0
    2c9c:	24005001 	strcs	r5, [r0], #-1
    2ca0:	0015f501 	andseq	pc, r5, r1, lsl #10
    2ca4:	02000100 	andeq	r0, r0, #0	; 0x0
    2ca8:	00472401 	subeq	r2, r7, r1, lsl #8
    2cac:	00477c08 	subeq	r7, r7, r8, lsl #24
    2cb0:	00145d08 	andseq	r5, r4, r8, lsl #26
    2cb4:	00069800 	andeq	r9, r6, r0, lsl #16
    2cb8:	168b1d00 	strne	r1, [fp], r0, lsl #26
    2cbc:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    2cc0:	00003a01 	andeq	r3, r0, r1, lsl #20
    2cc4:	00147c00 	andseq	r7, r4, r0, lsl #24
    2cc8:	18901d00 	ldmne	r0, {r8, sl, fp, ip}
    2ccc:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    2cd0:	00005e01 	andeq	r5, r0, r1, lsl #28
    2cd4:	00148f00 	andseq	r8, r4, r0, lsl #30
    2cd8:	158d1d00 	strne	r1, [sp, #3328]
    2cdc:	ff010000 	undefined instruction 0xff010000
    2ce0:	00005e01 	andeq	r5, r0, r1, lsl #28
    2ce4:	0014a200 	andseq	sl, r4, r0, lsl #4
    2ce8:	14b92500 	ldrtne	r2, [r9], #1280
    2cec:	01010000 	tsteq	r1, r0
    2cf0:	00003a02 	andeq	r3, r0, r2, lsl #20
    2cf4:	0014b500 	andseq	fp, r4, r0, lsl #10
    2cf8:	18361e00 	ldmdane	r6!, {r9, sl, fp, ip}
    2cfc:	01010000 	tsteq	r1, r0
    2d00:	00003a02 	andeq	r3, r0, r2, lsl #20
    2d04:	190b1e00 	stmdbne	fp, {r9, sl, fp, ip}
    2d08:	01010000 	tsteq	r1, r0
    2d0c:	00003a02 	andeq	r3, r0, r2, lsl #20
    2d10:	17de2500 	ldrbne	r2, [lr, r0, lsl #10]
    2d14:	02010000 	andeq	r0, r1, #0	; 0x0
    2d18:	00003a02 	andeq	r3, r0, r2, lsl #20
    2d1c:	0014c800 	andseq	ip, r4, r0, lsl #16
    2d20:	011c0000 	tsteq	ip, r0
    2d24:	0000183b 	andeq	r1, r0, fp, lsr r8
    2d28:	01022901 	tsteq	r2, r1, lsl #18
    2d2c:	0000008e 	andeq	r0, r0, lr, lsl #1
    2d30:	0800477c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, lr}
    2d34:	0800479c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, lr}
    2d38:	06ed5d01 	strbteq	r5, [sp], r1, lsl #26
    2d3c:	8b1d0000 	blhi	742d44 <__Stack_Size+0x742944>
    2d40:	01000016 	tsteq	r0, r6, lsl r0
    2d44:	003a0228 	eorseq	r0, sl, r8, lsr #4
    2d48:	14f10000 	ldrbtne	r0, [r1]
    2d4c:	d81e0000 	ldmdale	lr, {}
    2d50:	01000010 	tsteq	r0, r0, lsl r0
    2d54:	008e022a 	addeq	r0, lr, sl, lsr #4
    2d58:	74260000 	strtvc	r0, [r6]
    2d5c:	0100706d 	tsteq	r0, sp, rrx
    2d60:	003a022b 	eorseq	r0, sl, fp, lsr #4
    2d64:	18250000 	stmdane	r5!, {}
    2d68:	01000017 	tsteq	r0, r7, lsl r0
    2d6c:	003a022b 	eorseq	r0, sl, fp, lsr #4
    2d70:	15040000 	strne	r0, [r4]
    2d74:	20000000 	andcs	r0, r0, r0
    2d78:	00172401 	andseq	r2, r7, r1, lsl #8
    2d7c:	024f0100 	subeq	r0, pc, #0	; 0x0
    2d80:	00479c01 	subeq	r9, r7, r1, lsl #24
    2d84:	0047b408 	subeq	fp, r7, r8, lsl #8
    2d88:	225d0108 	subscs	r0, sp, #2	; 0x2
    2d8c:	1d000007 	stcne	0, cr0, [r0, #-28]
    2d90:	0000168b 	andeq	r1, r0, fp, lsl #13
    2d94:	3a024e01 	bcc	965a0 <__Stack_Size+0x961a0>
    2d98:	22000000 	andcs	r0, r0, #0	; 0x0
    2d9c:	26000015 	undefined
    2da0:	00706d74 	rsbseq	r6, r0, r4, ror sp
    2da4:	3a025001 	bcc	96db0 <__Stack_Size+0x969b0>
    2da8:	00000000 	andeq	r0, r0, r0
    2dac:	18610120 	stmdane	r1!, {r5, r8}^
    2db0:	67010000 	strvs	r0, [r1, -r0]
    2db4:	47b40102 	ldrmi	r0, [r4, r2, lsl #2]!
    2db8:	47cc0800 	strbmi	r0, [ip, r0, lsl #16]
    2dbc:	5d010800 	stcpl	8, cr0, [r1]
    2dc0:	00000757 	andeq	r0, r0, r7, asr r7
    2dc4:	00168b1d 	andseq	r8, r6, sp, lsl fp
    2dc8:	02660100 	rsbeq	r0, r6, #0	; 0x0
    2dcc:	0000003a 	andeq	r0, r0, sl, lsr r0
    2dd0:	00001535 	andeq	r1, r0, r5, lsr r5
    2dd4:	706d7426 	rsbvc	r7, sp, r6, lsr #8
    2dd8:	02680100 	rsbeq	r0, r8, #0	; 0x0
    2ddc:	0000003a 	andeq	r0, r0, sl, lsr r0
    2de0:	be011c00 	cdplt	12, 0, cr1, cr1, cr0, {0}
    2de4:	01000016 	tsteq	r0, r6, lsl r0
    2de8:	8e010285 	cdphi	2, 0, cr0, cr1, cr5, {4}
    2dec:	cc000000 	stcgt	0, cr0, [r0], {0}
    2df0:	ec080047 	stc	0, cr0, [r8], {71}
    2df4:	01080047 	tsteq	r8, r7, asr #32
    2df8:	0007aa5d 	andeq	sl, r7, sp, asr sl
    2dfc:	168b1d00 	strne	r1, [fp], r0, lsl #26
    2e00:	84010000 	strhi	r0, [r1]
    2e04:	00003a02 	andeq	r3, r0, r2, lsl #20
    2e08:	00154800 	andseq	r4, r5, r0, lsl #16
    2e0c:	10d81e00 	sbcsne	r1, r8, r0, lsl #28
    2e10:	86010000 	strhi	r0, [r1], -r0
    2e14:	00008e02 	andeq	r8, r0, r2, lsl #28
    2e18:	6d742600 	ldclvs	6, cr2, [r4]
    2e1c:	88010070 	stmdahi	r1, {r4, r5, r6}
    2e20:	00003a02 	andeq	r3, r0, r2, lsl #20
    2e24:	17182300 	ldrne	r2, [r8, -r0, lsl #6]
    2e28:	88010000 	stmdahi	r1, {}
    2e2c:	00003a02 	andeq	r3, r0, r2, lsl #20
    2e30:	00530100 	subseq	r0, r3, r0, lsl #2
    2e34:	181a011c 	ldmdane	sl, {r2, r3, r4, r8}
    2e38:	ad010000 	stcge	0, cr0, [r1]
    2e3c:	003a0102 	eorseq	r0, sl, r2, lsl #2
    2e40:	47ec0000 	strbmi	r0, [ip, r0]!
    2e44:	48300800 	ldmdami	r0!, {fp}
    2e48:	5d010800 	stcpl	8, cr0, [r1]
    2e4c:	00000807 	andeq	r0, r0, r7, lsl #16
    2e50:	00168b1d 	andseq	r8, r6, sp, lsl fp
    2e54:	02ac0100 	adceq	r0, ip, #0	; 0x0
    2e58:	0000003a 	andeq	r0, r0, sl, lsr r0
    2e5c:	0000155b 	andeq	r1, r0, fp, asr r5
    2e60:	00188325 	andseq	r8, r8, r5, lsr #6
    2e64:	02ae0100 	adceq	r0, lr, #0	; 0x0
    2e68:	0000003a 	andeq	r0, r0, sl, lsr r0
    2e6c:	00001584 	andeq	r1, r0, r4, lsl #11
    2e70:	00142825 	andseq	r2, r4, r5, lsr #16
    2e74:	02af0100 	adceq	r0, pc, #0	; 0x0
    2e78:	0000003a 	andeq	r0, r0, sl, lsr r0
    2e7c:	000015ad 	andeq	r1, r0, sp, lsr #11
    2e80:	00171825 	andseq	r1, r7, r5, lsr #16
    2e84:	02af0100 	adceq	r0, pc, #0	; 0x0
    2e88:	0000003a 	andeq	r0, r0, sl, lsr r0
    2e8c:	000015d6 	ldrdeq	r1, [r0], -r6
    2e90:	78011c00 	stmdavc	r1, {sl, fp, ip}
    2e94:	01000015 	tsteq	r0, r5, lsl r0
    2e98:	3a0102db 	bcc	43a0c <__Stack_Size+0x4360c>
    2e9c:	30000000 	andcc	r0, r0, r0
    2ea0:	44080048 	strmi	r0, [r8], #-72
    2ea4:	01080048 	tsteq	r8, r8, asr #32
    2ea8:	0008505d 	andeq	r5, r8, sp, asr r0
    2eac:	168b1d00 	strne	r1, [fp], r0, lsl #26
    2eb0:	da010000 	ble	42eb8 <__Stack_Size+0x42ab8>
    2eb4:	00003a02 	andeq	r3, r0, r2, lsl #20
    2eb8:	0015f400 	andseq	pc, r5, r0, lsl #8
    2ebc:	15e82500 	strbne	r2, [r8, #1280]!
    2ec0:	dc010000 	stcle	0, cr0, [r1], {0}
    2ec4:	00003a02 	andeq	r3, r0, r2, lsl #20
    2ec8:	00160700 	andseq	r0, r6, r0, lsl #14
    2ecc:	6d742600 	ldclvs	6, cr2, [r4]
    2ed0:	dd010070 	stcle	0, cr0, [r1, #-448]
    2ed4:	00003a02 	andeq	r3, r0, r2, lsl #20
    2ed8:	01270000 	teqeq	r7, r0
    2edc:	00001778 	andeq	r1, r0, r8, ror r7
    2ee0:	3a01fa01 	bcc	816ec <__Stack_Size+0x812ec>
    2ee4:	44000000 	strmi	r0, [r0]
    2ee8:	50080048 	andpl	r0, r8, r8, asr #32
    2eec:	1a080048 	bne	203014 <__Stack_Size+0x202c14>
    2ef0:	17000016 	smladne	r0, r6, r0, r0
    2ef4:	0016e301 	andseq	lr, r6, r1, lsl #6
    2ef8:	01eb0100 	mvneq	r0, r0, lsl #2
    2efc:	08004850 	stmdaeq	r0, {r4, r6, fp, lr}
    2f00:	0800485e 	stmdaeq	r0, {r1, r2, r3, r4, r6, fp, lr}
    2f04:	00001645 	andeq	r1, r0, r5, asr #12
    2f08:	00000892 	muleq	r0, r2, r8
    2f0c:	0018e216 	andseq	lr, r8, r6, lsl r2
    2f10:	3aea0100 	bcc	ffa83318 <SCS_BASE+0x1fa75318>
    2f14:	70000000 	andvc	r0, r0, r0
    2f18:	00000016 	andeq	r0, r0, r6, lsl r0
    2f1c:	165a0128 	ldrbne	r0, [sl], -r8, lsr #2
    2f20:	dd010000 	stcle	0, cr0, [r1]
    2f24:	00486001 	subeq	r6, r8, r1
    2f28:	00486c08 	subeq	r6, r8, r8, lsl #24
    2f2c:	00168308 	andseq	r8, r6, r8, lsl #6
    2f30:	fe012800 	cdp2	8, 0, cr2, cr1, cr0, {0}
    2f34:	01000017 	tsteq	r0, r7, lsl r0
    2f38:	486c01d1 	stmdami	ip!, {r0, r4, r6, r7, r8}^
    2f3c:	48780800 	ldmdami	r8!, {fp}^
    2f40:	16ae0800 	strtne	r0, [lr], r0, lsl #16
    2f44:	01280000 	teqeq	r8, r0
    2f48:	000015d6 	ldrdeq	r1, [r0], -r6
    2f4c:	7801c501 	stmdavc	r1, {r0, r8, sl, lr, pc}
    2f50:	84080048 	strhi	r0, [r8], #-72
    2f54:	d9080048 	stmdble	r8, {r3, r6}
    2f58:	28000016 	stmdacs	r0, {r1, r2, r4}
    2f5c:	0015a601 	andseq	sl, r5, r1, lsl #12
    2f60:	01b90100 	undefined instruction 0x01b90100
    2f64:	08004884 	stmdaeq	r0, {r2, r7, fp, lr}
    2f68:	08004890 	stmdaeq	r0, {r4, r7, fp, lr}
    2f6c:	00001704 	andeq	r1, r0, r4, lsl #14
    2f70:	00024300 	andeq	r4, r2, r0, lsl #6
    2f74:	1e000200 	cdpne	2, 0, cr0, cr0, cr0, {0}
    2f78:	0400000c 	streq	r0, [r0], #-12
    2f7c:	00048801 	andeq	r8, r4, r1, lsl #16
    2f80:	19d90100 	ldmibne	r9, {r8}^
    2f84:	008e0000 	addeq	r0, lr, r0
    2f88:	48900000 	ldmmi	r0, {}
    2f8c:	49700800 	ldmdbmi	r0!, {fp}^
    2f90:	0b5a0800 	bleq	1684f98 <__Stack_Size+0x1684b98>
    2f94:	04020000 	streq	r0, [r2]
    2f98:	002cfb05 	eoreq	pc, ip, r5, lsl #22
    2f9c:	05020200 	streq	r0, [r2, #-512]
    2fa0:	0000050f 	andeq	r0, r0, pc, lsl #10
    2fa4:	d4060102 	strle	r0, [r6], #-258
    2fa8:	03000005 	movweq	r0, #5	; 0x5
    2fac:	00323375 	eorseq	r3, r2, r5, ror r3
    2fb0:	00452702 	subeq	r2, r5, r2, lsl #14
    2fb4:	04020000 	streq	r0, [r2]
    2fb8:	002d7507 	eoreq	r7, sp, r7, lsl #10
    2fbc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2fc0:	00000712 	andeq	r0, r0, r2, lsl r7
    2fc4:	00387503 	eorseq	r7, r8, r3, lsl #10
    2fc8:	005d2902 	subseq	r2, sp, r2, lsl #18
    2fcc:	01020000 	tsteq	r2, r0
    2fd0:	0005d208 	andeq	sp, r5, r8, lsl #4
    2fd4:	00450400 	subeq	r0, r5, r0, lsl #8
    2fd8:	01050000 	tsteq	r5, r0
    2fdc:	007e3902 	rsbseq	r3, lr, r2, lsl #18
    2fe0:	77060000 	strvc	r0, [r6, -r0]
    2fe4:	00000013 	andeq	r0, r0, r3, lsl r0
    2fe8:	54455307 	strbpl	r5, [r5], #-775
    2fec:	08000100 	stmdaeq	r0, {r8}
    2ff0:	00001cca 	andeq	r1, r0, sl, asr #25
    2ff4:	00693902 	rsbeq	r3, r9, r2, lsl #18
    2ff8:	01050000 	tsteq	r5, r0
    2ffc:	009e3b02 	addseq	r3, lr, r2, lsl #22
    3000:	63060000 	movwvs	r0, #24576	; 0x6000
    3004:	00000003 	andeq	r0, r0, r3
    3008:	0005a406 	andeq	sl, r5, r6, lsl #8
    300c:	08000100 	stmdaeq	r0, {r8}
    3010:	000000dc 	ldrdeq	r0, [r0], -ip
    3014:	00893b02 	addeq	r3, r9, r2, lsl #22
    3018:	04090000 	streq	r0, [r9]
    301c:	03080a07 	movweq	r0, #35335	; 0x8a07
    3020:	00d301a4 	sbcseq	r0, r3, r4, lsr #3
    3024:	430b0000 	movwmi	r0, #45056	; 0xb000
    3028:	a5030052 	strge	r0, [r3, #-82]
    302c:	00006401 	andeq	r6, r0, r1, lsl #8
    3030:	00230200 	eoreq	r0, r3, r0, lsl #4
    3034:	5253430b 	subspl	r4, r3, #738197504	; 0x2c000000
    3038:	01a60300 	undefined instruction 0x01a60300
    303c:	00000064 	andeq	r0, r0, r4, rrx
    3040:	00042302 	andeq	r2, r4, r2, lsl #6
    3044:	1a40010c 	bne	100347c <__Stack_Size+0x100307c>
    3048:	52010000 	andpl	r0, r1, #0	; 0x0
    304c:	00489001 	subeq	r9, r8, r1
    3050:	00489c08 	subeq	r9, r8, r8, lsl #24
    3054:	f85d0108 	undefined instruction 0xf85d0108
    3058:	0d000000 	stceq	0, cr0, [r0]
    305c:	00001051 	andeq	r1, r0, r1, asr r0
    3060:	009e5101 	addseq	r5, lr, r1, lsl #2
    3064:	50010000 	andpl	r0, r1, r0
    3068:	ce010c00 	cdpgt	12, 0, cr0, cr1, cr0, {0}
    306c:	01000019 	tsteq	r0, r9, lsl r0
    3070:	489c0162 	ldmmi	ip, {r1, r5, r6, r8}
    3074:	48a80800 	stmiami	r8!, {fp}
    3078:	5d010800 	stcpl	8, cr0, [r1]
    307c:	0000011d 	andeq	r0, r0, sp, lsl r1
    3080:	0010510d 	andseq	r5, r0, sp, lsl #2
    3084:	9e610100 	powlss	f0, f1, f0
    3088:	01000000 	tsteq	r0, r0
    308c:	010c0050 	qaddeq	r0, r0, ip
    3090:	00001a0d 	andeq	r1, r0, sp, lsl #20
    3094:	a8017b01 	stmdage	r1, {r0, r8, r9, fp, ip, sp, lr}
    3098:	bc080048 	stclt	0, cr0, [r8], {72}
    309c:	01080048 	tsteq	r8, r8, asr #32
    30a0:	0001535d 	andeq	r5, r1, sp, asr r3
    30a4:	19b80e00 	ldmibne	r8!, {r9, sl, fp}
    30a8:	7a010000 	bvc	430b0 <__Stack_Size+0x42cb0>
    30ac:	0000003a 	andeq	r0, r0, sl, lsr r0
    30b0:	0000172f 	andeq	r1, r0, pc, lsr #14
    30b4:	0014280f 	andseq	r2, r4, pc, lsl #16
    30b8:	3a7c0100 	bcc	1f034c0 <__Stack_Size+0x1f030c0>
    30bc:	42000000 	andmi	r0, r0, #0	; 0x0
    30c0:	00000017 	andeq	r0, r0, r7, lsl r0
    30c4:	1a54010c 	bne	15034fc <__Stack_Size+0x15030fc>
    30c8:	96010000 	strls	r0, [r1], -r0
    30cc:	0048bc01 	subeq	fp, r8, r1, lsl #24
    30d0:	0048c808 	subeq	ip, r8, r8, lsl #16
    30d4:	785d0108 	ldmdavc	sp, {r3, r8}^
    30d8:	0d000001 	stceq	0, cr0, [r0, #-4]
    30dc:	00001051 	andeq	r1, r0, r1, asr r0
    30e0:	009e9501 	addseq	r9, lr, r1, lsl #10
    30e4:	50010000 	andpl	r0, r1, r0
    30e8:	20011000 	andcs	r1, r1, r0
    30ec:	0100001a 	tsteq	r0, sl, lsl r0
    30f0:	007e01f3 	ldrshteq	r0, [lr], #-19
    30f4:	48c80000 	stmiami	r8, {}^
    30f8:	48dc0800 	ldmmi	ip, {fp}^
    30fc:	5d010800 	stcpl	8, cr0, [r1]
    3100:	000001ae 	andeq	r0, r0, lr, lsr #3
    3104:	0019c50e 	andseq	ip, r9, lr, lsl #10
    3108:	3af20100 	bcc	ffc83510 <SCS_BASE+0x1fc75510>
    310c:	60000000 	andvs	r0, r0, r0
    3110:	11000017 	tstne	r0, r7, lsl r0
    3114:	000010d8 	ldrdeq	r1, [r0], -r8
    3118:	007ef401 	rsbseq	pc, lr, r1, lsl #8
    311c:	12000000 	andne	r0, r0, #0	; 0x0
    3120:	00199101 	andseq	r9, r9, r1, lsl #2
    3124:	01110100 	tsteq	r1, r0, lsl #2
    3128:	0048dc01 	subeq	sp, r8, r1, lsl #24
    312c:	0048ec08 	subeq	lr, r8, r8, lsl #24
    3130:	d55d0108 	ldrble	r0, [sp, #-264]
    3134:	13000001 	movwne	r0, #1	; 0x1
    3138:	000019c5 	andeq	r1, r0, r5, asr #19
    313c:	3a011001 	bcc	47148 <__Stack_Size+0x46d48>
    3140:	01000000 	tsteq	r0, r0
    3144:	01140050 	tsteq	r4, r0, asr r0
    3148:	0000197c 	andeq	r1, r0, ip, ror r9
    314c:	ec01d901 	stc	9, cr13, [r1], {1}
    3150:	20080048 	andcs	r0, r8, r8, asr #32
    3154:	73080049 	movwvc	r0, #32841	; 0x8049
    3158:	15000017 	strne	r0, [r0, #-23]
    315c:	0019fb01 	andseq	pc, r9, r1, lsl #22
    3160:	01ae0100 	undefined instruction 0x01ae0100
    3164:	08004920 	stmdaeq	r0, {r5, r8, fp, lr}
    3168:	08004958 	stmdaeq	r0, {r3, r4, r6, r8, fp, lr}
    316c:	0000179e 	muleq	r0, lr, r7
    3170:	00000231 	andeq	r0, r0, r1, lsr r2
    3174:	0019aa0e 	andseq	sl, r9, lr, lsl #20
    3178:	3aad0100 	bcc	feb43580 <SCS_BASE+0x1eb35580>
    317c:	c9000000 	stmdbgt	r0, {}
    3180:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
    3184:	00001a32 	andeq	r1, r0, r2, lsr sl
    3188:	0053ad01 	subseq	sl, r3, r1, lsl #26
    318c:	17dc0000 	ldrbne	r0, [ip, r0]
    3190:	280f0000 	stmdacs	pc, {}
    3194:	01000014 	tsteq	r0, r4, lsl r0
    3198:	00003aaf 	andeq	r3, r0, pc, lsr #21
    319c:	0017fa00 	andseq	pc, r7, r0, lsl #20
    31a0:	01140000 	tsteq	r4, r0
    31a4:	0000199f 	muleq	r0, pc, r9
    31a8:	58014401 	stmdapl	r1, {r0, sl, lr}
    31ac:	70080049 	andvc	r0, r8, r9, asr #32
    31b0:	23080049 	movwcs	r0, #32841	; 0x8049
    31b4:	00000018 	andeq	r0, r0, r8, lsl r0
    31b8:	000008b9 	strheq	r0, [r0], -r9
    31bc:	0d5e0002 	ldcleq	0, cr0, [lr, #-8]
    31c0:	01040000 	tsteq	r4, r0
    31c4:	00000488 	andeq	r0, r0, r8, lsl #9
    31c8:	001dd201 	andseq	sp, sp, r1, lsl #4
    31cc:	00008e00 	andeq	r8, r0, r0, lsl #28
    31d0:	00497000 	subeq	r7, r9, r0
    31d4:	004d1408 	subeq	r1, sp, r8, lsl #8
    31d8:	000c3008 	andeq	r3, ip, r8
    31dc:	05040200 	streq	r0, [r4, #-512]
    31e0:	00002cfb 	strdeq	r2, [r0], -fp
    31e4:	0f050202 	svceq	0x00050202
    31e8:	02000005 	andeq	r0, r0, #5	; 0x5
    31ec:	05d40601 	ldrbeq	r0, [r4, #1537]
    31f0:	75030000 	strvc	r0, [r3]
    31f4:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    31f8:	00004527 	andeq	r4, r0, r7, lsr #10
    31fc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3200:	00002d75 	andeq	r2, r0, r5, ror sp
    3204:	12070202 	andne	r0, r7, #536870912	; 0x20000000
    3208:	03000007 	movweq	r0, #7	; 0x7
    320c:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    3210:	00005d29 	andeq	r5, r0, r9, lsr #26
    3214:	08010200 	stmdaeq	r1, {r9}
    3218:	000005d2 	ldrdeq	r0, [r0], -r2
    321c:	00004504 	andeq	r4, r0, r4, lsl #10
    3220:	02010500 	andeq	r0, r1, #0	; 0x0
    3224:	00007e39 	andeq	r7, r0, r9, lsr lr
    3228:	13770600 	cmnne	r7, #0	; 0x0
    322c:	07000000 	streq	r0, [r0, -r0]
    3230:	00544553 	subseq	r4, r4, r3, asr r5
    3234:	ca080001 	bgt	203240 <__Stack_Size+0x202e40>
    3238:	0200001c 	andeq	r0, r0, #28	; 0x1c
    323c:	00006939 	andeq	r6, r0, r9, lsr r9
    3240:	1ac40800 	bne	ff105248 <SCS_BASE+0x1f0f7248>
    3244:	39020000 	stmdbcc	r2, {}
    3248:	00000069 	andeq	r0, r0, r9, rrx
    324c:	3b020105 	blcc	83668 <__Stack_Size+0x83268>
    3250:	000000a9 	andeq	r0, r0, r9, lsr #1
    3254:	00036306 	andeq	r6, r3, r6, lsl #6
    3258:	a4060000 	strge	r0, [r6]
    325c:	01000005 	tsteq	r0, r5
    3260:	00dc0800 	sbcseq	r0, ip, r0, lsl #16
    3264:	3b020000 	blcc	8326c <__Stack_Size+0x82e6c>
    3268:	00000094 	muleq	r0, r4, r0
    326c:	3e020105 	adfccs	f0, f2, f5
    3270:	000000c9 	andeq	r0, r0, r9, asr #1
    3274:	00001106 	andeq	r1, r0, r6, lsl #2
    3278:	48060000 	stmdami	r6, {}
    327c:	01000003 	tsteq	r0, r3
    3280:	00f90800 	rscseq	r0, r9, r0, lsl #16
    3284:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    3288:	000000b4 	strheq	r0, [r0], -r4
    328c:	0a070409 	beq	1c42b8 <__Stack_Size+0x1c3eb8>
    3290:	01ab0328 	undefined instruction 0x01ab0328
    3294:	00000176 	andeq	r0, r0, r6, ror r1
    3298:	0052430b 	subseq	r4, r2, fp, lsl #6
    329c:	6401ac03 	strvs	sl, [r1], #-3075
    32a0:	02000000 	andeq	r0, r0, #0	; 0x0
    32a4:	290c0023 	stmdbcs	ip, {r0, r1, r5}
    32a8:	0300001b 	movweq	r0, #27	; 0x1b
    32ac:	006401ad 	rsbeq	r0, r4, sp, lsr #3
    32b0:	23020000 	movwcs	r0, #8192	; 0x2000
    32b4:	49430b04 	stmdbmi	r3, {r2, r8, r9, fp}^
    32b8:	ae030052 	mcrge	0, 0, r0, cr3, cr2, {2}
    32bc:	00006401 	andeq	r6, r0, r1, lsl #8
    32c0:	08230200 	stmdaeq	r3!, {r9}
    32c4:	001be80c 	andseq	lr, fp, ip, lsl #16
    32c8:	01af0300 	undefined instruction 0x01af0300
    32cc:	00000064 	andeq	r0, r0, r4, rrx
    32d0:	0c0c2302 	stceq	3, cr2, [ip], {2}
    32d4:	00001a65 	andeq	r1, r0, r5, ror #20
    32d8:	6401b003 	strvs	fp, [r1], #-3
    32dc:	02000000 	andeq	r0, r0, #0	; 0x0
    32e0:	0a0c1023 	beq	307374 <__Stack_Size+0x306f74>
    32e4:	0300001c 	movweq	r0, #28	; 0x1c
    32e8:	006401b1 	strhteq	r0, [r4], #-17
    32ec:	23020000 	movwcs	r0, #8192	; 0x2000
    32f0:	1c420c14 	mcrrne	12, 1, r0, r2, cr4
    32f4:	b2030000 	andlt	r0, r3, #0	; 0x0
    32f8:	00006401 	andeq	r6, r0, r1, lsl #8
    32fc:	18230200 	stmdane	r3!, {r9}
    3300:	001b3d0c 	andseq	r3, fp, ip, lsl #26
    3304:	01b30300 	undefined instruction 0x01b30300
    3308:	00000064 	andeq	r0, r0, r4, rrx
    330c:	0c1c2302 	ldceq	3, cr2, [ip], {2}
    3310:	00001acd 	andeq	r1, r0, sp, asr #21
    3314:	6401b403 	strvs	fp, [r1], #-1027
    3318:	02000000 	andeq	r0, r0, #0	; 0x0
    331c:	430b2023 	movwmi	r2, #45091	; 0xb023
    3320:	03005253 	movweq	r5, #595	; 0x253
    3324:	006401b5 	strhteq	r0, [r4], #-21
    3328:	23020000 	movwcs	r0, #8192	; 0x2000
    332c:	140d0024 	strne	r0, [sp], #-36
    3330:	01c51a04 	biceq	r1, r5, r4, lsl #20
    3334:	280e0000 	stmdacs	lr, {}
    3338:	0400001d 	streq	r0, [r0], #-29
    333c:	00003a1b 	andeq	r3, r0, fp, lsl sl
    3340:	00230200 	eoreq	r0, r3, r0, lsl #4
    3344:	001b2e0e 	andseq	r2, fp, lr, lsl #28
    3348:	3a1c0400 	bcc	704350 <__Stack_Size+0x703f50>
    334c:	02000000 	andeq	r0, r0, #0	; 0x0
    3350:	910e0423 	tstls	lr, r3, lsr #8
    3354:	0400001d 	streq	r0, [r0], #-29
    3358:	00003a1d 	andeq	r3, r0, sp, lsl sl
    335c:	08230200 	stmdaeq	r3!, {r9}
    3360:	001d440e 	andseq	r4, sp, lr, lsl #8
    3364:	3a1e0400 	bcc	78436c <__Stack_Size+0x783f6c>
    3368:	02000000 	andeq	r0, r0, #0	; 0x0
    336c:	8a0e0c23 	bhi	386400 <__Stack_Size+0x386000>
    3370:	0400001c 	streq	r0, [r0], #-28
    3374:	00003a1f 	andeq	r3, r0, pc, lsl sl
    3378:	10230200 	eorne	r0, r3, r0, lsl #4
    337c:	1af60800 	bne	ffd85384 <SCS_BASE+0x1fd77384>
    3380:	20040000 	andcs	r0, r4, r0
    3384:	00000176 	andeq	r0, r0, r6, ror r1
    3388:	1cc3010f 	stfnee	f0, [r3], {15}
    338c:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    3390:	007e0103 	rsbseq	r0, lr, r3, lsl #2
    3394:	14010000 	strne	r0, [r1]
    3398:	10000002 	andne	r0, r0, r2
    339c:	00001c9b 	muleq	r0, fp, ip
    33a0:	5303dd01 	movwpl	sp, #15617	; 0x3d01
    33a4:	11000000 	tstne	r0, r0
    33a8:	00706d74 	rsbseq	r6, r0, r4, ror sp
    33ac:	3a03df01 	bcc	fafb8 <__Stack_Size+0xfabb8>
    33b0:	12000000 	andne	r0, r0, #0	; 0x0
    33b4:	00001c21 	andeq	r1, r0, r1, lsr #24
    33b8:	3a03e001 	bcc	fb3c4 <__Stack_Size+0xfafc4>
    33bc:	12000000 	andne	r0, r0, #0	; 0x0
    33c0:	000010d8 	ldrdeq	r1, [r0], -r8
    33c4:	7e03e101 	mvfvcs	f6, f1
    33c8:	00000000 	andeq	r0, r0, r0
    33cc:	1b590113 	blne	1643820 <__Stack_Size+0x1643420>
    33d0:	7d010000 	stcvc	0, cr0, [r1]
    33d4:	00497001 	subeq	r7, r9, r1
    33d8:	0049b008 	subeq	fp, r9, r8
    33dc:	145d0108 	ldrbne	r0, [sp], #-264
    33e0:	001d1a01 	andseq	r1, sp, r1, lsl #20
    33e4:	01a00100 	lsleq	r0, r0, #2
    33e8:	080049b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, lr}
    33ec:	080049e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp, lr}
    33f0:	024c5d01 	subeq	r5, ip, #64	; 0x40
    33f4:	78150000 	ldmdavc	r5, {}
    33f8:	0100001d 	tsteq	r0, sp, lsl r0
    33fc:	00003a9f 	muleq	r0, pc, sl
    3400:	00500100 	subseq	r0, r0, r0, lsl #2
    3404:	1b640116 	blne	1903864 <__Stack_Size+0x1903464>
    3408:	c7010000 	strgt	r0, [r1, -r0]
    340c:	0000c901 	andeq	ip, r0, r1, lsl #18
    3410:	0049e400 	subeq	lr, r9, r0, lsl #8
    3414:	004a1408 	subeq	r1, sl, r8, lsl #8
    3418:	00184208 	andseq	r4, r8, r8, lsl #4
    341c:	0002f100 	andeq	pc, r2, r0, lsl #2
    3420:	1c4a1700 	mcrrne	7, 0, r1, sl, cr0
    3424:	c8010000 	stmdagt	r1, {}
    3428:	00000064 	andeq	r0, r0, r4, rrx
    342c:	00001861 	andeq	r1, r0, r1, ror #16
    3430:	0010d118 	andseq	sp, r0, r8, lsl r1
    3434:	c9c90100 	stmibgt	r9, {r8}^
    3438:	18000000 	stmdane	r0, {}
    343c:	00001d10 	andeq	r1, r0, r0, lsl sp
    3440:	007eca01 	rsbseq	ip, lr, r1, lsl #20
    3444:	d0190000 	andsle	r0, r9, r0
    3448:	e8000001 	stmda	r0, {r0}
    344c:	c8080049 	stmdagt	r8, {r0, r3, r6}
    3450:	01000000 	tsteq	r0, r0
    3454:	0002becf 	andeq	fp, r2, pc, asr #29
    3458:	01e31a00 	mvneq	r1, r0, lsl #20
    345c:	e01b0000 	ands	r0, fp, r0
    3460:	1c000000 	stcne	0, cr0, [r0], {0}
    3464:	000001ef 	andeq	r0, r0, pc, ror #3
    3468:	0001fb1d 	andeq	pc, r1, sp, lsl fp
    346c:	1c520100 	ldfnee	f0, [r2], {0}
    3470:	00000207 	andeq	r0, r0, r7, lsl #4
    3474:	d01e0000 	andsle	r0, lr, r0
    3478:	02000001 	andeq	r0, r0, #1	; 0x1
    347c:	0c08004a 	stceq	0, cr0, [r8], {74}
    3480:	0108004a 	tsteq	r8, sl, asr #32
    3484:	01e31ad4 	ldrdeq	r1, [r3, #164]!
    3488:	021f0000 	andseq	r0, pc, #0	; 0x0
    348c:	0c08004a 	stceq	0, cr0, [r8], {74}
    3490:	1c08004a 	stcne	0, cr0, [r8], {74}
    3494:	000001ef 	andeq	r0, r0, pc, ror #3
    3498:	0001fb20 	andeq	pc, r1, r0, lsr #22
    349c:	00188c00 	andseq	r8, r8, r0, lsl #24
    34a0:	02071c00 	andeq	r1, r7, #0	; 0x0
    34a4:	00000000 	andeq	r0, r0, r0
    34a8:	6c011400 	cfstrsvs	mvf1, [r1], {0}
    34ac:	0100001c 	tsteq	r0, ip, lsl r0
    34b0:	4a1401ea 	bmi	503c60 <__Stack_Size+0x503860>
    34b4:	4a280800 	bmi	a054bc <__Stack_Size+0xa050bc>
    34b8:	5d010800 	stcpl	8, cr0, [r1]
    34bc:	00000323 	andeq	r0, r0, r3, lsr #6
    34c0:	001c7615 	andseq	r7, ip, r5, lsl r6
    34c4:	53e90100 	mvnpl	r0, #0	; 0x0
    34c8:	01000000 	tsteq	r0, r0
    34cc:	14282150 	strtne	r2, [r8], #-336
    34d0:	eb010000 	bl	434d8 <__Stack_Size+0x430d8>
    34d4:	0000003a 	andeq	r0, r0, sl, lsr r0
    34d8:	22005301 	andcs	r5, r0, #67108864	; 0x4000000
    34dc:	001e2c01 	andseq	r2, lr, r1, lsl #24
    34e0:	01070100 	tsteq	r7, r0, lsl #2
    34e4:	004a2801 	subeq	r2, sl, r1, lsl #16
    34e8:	004a3408 	subeq	r3, sl, r8, lsl #8
    34ec:	4a5d0108 	bmi	1743914 <__Stack_Size+0x1743514>
    34f0:	23000003 	movwcs	r0, #3	; 0x3
    34f4:	00001051 	andeq	r1, r0, r1, asr r0
    34f8:	a9010601 	stmdbge	r1, {r0, r9, sl}
    34fc:	01000000 	tsteq	r0, r0
    3500:	01220050 	qsubeq	r0, r0, r2
    3504:	00001ba2 	andeq	r1, r0, r2, lsr #23
    3508:	01012001 	tsteq	r1, r1
    350c:	08004a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, lr}
    3510:	08004a48 	stmdaeq	r0, {r3, r6, r9, fp, lr}
    3514:	03915d01 	orrseq	r5, r1, #64	; 0x40
    3518:	a4240000 	strtge	r0, [r4]
    351c:	0100001c 	tsteq	r0, ip, lsl r0
    3520:	003a011f 	eorseq	r0, sl, pc, lsl r1
    3524:	189f0000 	ldmne	pc, {}
    3528:	08230000 	stmdaeq	r3!, {}
    352c:	0100001b 	tsteq	r0, fp, lsl r0
    3530:	003a011f 	eorseq	r0, sl, pc, lsl r1
    3534:	51010000 	tstpl	r1, r0
    3538:	00142825 	andseq	r2, r4, r5, lsr #16
    353c:	01210100 	teqeq	r1, r0, lsl #2
    3540:	0000003a 	andeq	r0, r0, sl, lsr r0
    3544:	000018b2 	strheq	r1, [r0], -r2
    3548:	eb012200 	bl	4bd50 <__Stack_Size+0x4b950>
    354c:	0100001a 	tsteq	r0, sl, lsl r0
    3550:	4801013d 	stmdami	r1, {r0, r2, r3, r4, r5, r8}
    3554:	5408004a 	strpl	r0, [r8], #-74
    3558:	0108004a 	tsteq	r8, sl, asr #32
    355c:	0003b85d 	andeq	fp, r3, sp, asr r8
    3560:	10512300 	subsne	r2, r1, r0, lsl #6
    3564:	3c010000 	stccc	0, cr0, [r1], {0}
    3568:	0000a901 	andeq	sl, r0, r1, lsl #18
    356c:	00500100 	subseq	r0, r0, r0, lsl #2
    3570:	1cb20122 	ldfnes	f0, [r2], #136
    3574:	50010000 	andpl	r0, r1, r0
    3578:	4a540101 	bmi	1503984 <__Stack_Size+0x1503584>
    357c:	4a680800 	bmi	1a05584 <__Stack_Size+0x1a05184>
    3580:	5d010800 	stcpl	8, cr0, [r1]
    3584:	000003f1 	strdeq	r0, [r0], -r1
    3588:	001d8024 	andseq	r8, sp, r4, lsr #32
    358c:	014f0100 	cmpeq	pc, r0, lsl #2
    3590:	0000003a 	andeq	r0, r0, sl, lsr r0
    3594:	000018d0 	ldrdeq	r1, [r0], -r0
    3598:	00142825 	andseq	r2, r4, r5, lsr #16
    359c:	01510100 	cmpeq	r1, r0, lsl #2
    35a0:	0000003a 	andeq	r0, r0, sl, lsr r0
    35a4:	000018e3 	andeq	r1, r0, r3, ror #17
    35a8:	d4012600 	strle	r2, [r1], #-1536
    35ac:	0100001b 	tsteq	r0, fp, lsl r0
    35b0:	5301016e 	movwpl	r0, #4462	; 0x116e
    35b4:	68000000 	stmdavs	r0, {}
    35b8:	7808004a 	stmdavc	r8, {r1, r3, r6}
    35bc:	0108004a 	tsteq	r8, sl, asr #32
    35c0:	1d01225d 	sfmne	f2, 4, [r1, #-372]
    35c4:	0100001e 	tsteq	r0, lr, lsl r0
    35c8:	78010185 	stmdavc	r1, {r0, r2, r7, r8}
    35cc:	8c08004a 	stchi	0, cr0, [r8], {74}
    35d0:	0108004a 	tsteq	r8, sl, asr #32
    35d4:	0004425d 	andeq	r4, r4, sp, asr r2
    35d8:	1d052400 	cfstrsne	mvf2, [r5]
    35dc:	84010000 	strhi	r0, [r1]
    35e0:	00003a01 	andeq	r3, r0, r1, lsl #20
    35e4:	00190100 	andseq	r0, r9, r0, lsl #2
    35e8:	14282500 	strtne	r2, [r8], #-1280
    35ec:	86010000 	strhi	r0, [r1], -r0
    35f0:	00003a01 	andeq	r3, r0, r1, lsl #20
    35f4:	00191400 	andseq	r1, r9, r0, lsl #8
    35f8:	01220000 	teqeq	r2, r0
    35fc:	00001c11 	andeq	r1, r0, r1, lsl ip
    3600:	0101a601 	tsteq	r1, r1, lsl #12
    3604:	08004a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, lr}
    3608:	08004aa0 	stmdaeq	r0, {r5, r7, r9, fp, lr}
    360c:	047b5d01 	ldrbteq	r5, [fp], #-3329
    3610:	6e240000 	cdpvs	0, 2, cr0, cr4, cr0, {0}
    3614:	0100001a 	tsteq	r0, sl, lsl r0
    3618:	003a01a5 	eorseq	r0, sl, r5, lsr #3
    361c:	19320000 	ldmdbne	r2!, {}
    3620:	28250000 	stmdacs	r5!, {}
    3624:	01000014 	tsteq	r0, r4, lsl r0
    3628:	003a01a7 	eorseq	r0, sl, r7, lsr #3
    362c:	19450000 	stmdbne	r5, {}^
    3630:	22000000 	andcs	r0, r0, #0	; 0x0
    3634:	001e5401 	andseq	r5, lr, r1, lsl #8
    3638:	01c70100 	biceq	r0, r7, r0, lsl #2
    363c:	004aa001 	subeq	sl, sl, r1
    3640:	004ab408 	subeq	fp, sl, r8, lsl #8
    3644:	b05d0108 	subslt	r0, sp, r8, lsl #2
    3648:	23000004 	movwcs	r0, #4	; 0x4
    364c:	00001a6e 	andeq	r1, r0, lr, ror #20
    3650:	3a01c601 	bcc	74e5c <__Stack_Size+0x74a5c>
    3654:	01000000 	tsteq	r0, r0
    3658:	14282750 	strtne	r2, [r8], #-1872
    365c:	c8010000 	stmdagt	r1, {}
    3660:	00003a01 	andeq	r3, r0, r1, lsl #20
    3664:	00530100 	subseq	r0, r3, r0, lsl #2
    3668:	1d540122 	ldfnee	f0, [r4, #-136]
    366c:	ea010000 	b	43674 <__Stack_Size+0x43274>
    3670:	4ab40101 	bmi	fed03a7c <SCS_BASE+0x1ecf5a7c>
    3674:	4ad00800 	bmi	ff40567c <SCS_BASE+0x1f3f767c>
    3678:	5d010800 	stcpl	8, cr0, [r1]
    367c:	000004e5 	andeq	r0, r0, r5, ror #9
    3680:	001e3f23 	andseq	r3, lr, r3, lsr #30
    3684:	01e90100 	mvneq	r0, r0, lsl #2
    3688:	00000053 	andeq	r0, r0, r3, asr r0
    368c:	51235001 	teqpl	r3, r1
    3690:	01000010 	tsteq	r0, r0, lsl r0
    3694:	00a901e9 	adceq	r0, r9, r9, ror #3
    3698:	51010000 	tstpl	r1, r0
    369c:	b8012200 	stmdalt	r1, {r9, sp}
    36a0:	0100001b 	tsteq	r0, fp, lsl r0
    36a4:	d0010209 	andle	r0, r1, r9, lsl #4
    36a8:	dc08004a 	stcle	0, cr0, [r8], {74}
    36ac:	0108004a 	tsteq	r8, sl, asr #32
    36b0:	00050c5d 	andeq	r0, r5, sp, asr ip
    36b4:	1ce62300 	stclne	3, cr2, [r6]
    36b8:	08010000 	stmdaeq	r1, {}
    36bc:	00003a02 	andeq	r3, r0, r2, lsl #20
    36c0:	00500100 	subseq	r0, r0, r0, lsl #2
    36c4:	1a770122 	bne	1dc3b54 <__Stack_Size+0x1dc3754>
    36c8:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    36cc:	4adc0102 	bmi	ff703adc <SCS_BASE+0x1f6f5adc>
    36d0:	4af00800 	bmi	ffc056d8 <SCS_BASE+0x1fbf76d8>
    36d4:	5d010800 	stcpl	8, cr0, [r1]
    36d8:	00000545 	andeq	r0, r0, r5, asr #10
    36dc:	001ae124 	andseq	lr, sl, r4, lsr #2
    36e0:	021d0100 	andseq	r0, sp, #0	; 0x0
    36e4:	0000003a 	andeq	r0, r0, sl, lsr r0
    36e8:	00001963 	andeq	r1, r0, r3, ror #18
    36ec:	00142825 	andseq	r2, r4, r5, lsr #16
    36f0:	021f0100 	andseq	r0, pc, #0	; 0x0
    36f4:	0000003a 	andeq	r0, r0, sl, lsr r0
    36f8:	00001976 	andeq	r1, r0, r6, ror r9
    36fc:	a1012200 	tstge	r1, r0, lsl #4
    3700:	0100001d 	tsteq	r0, sp, lsl r0
    3704:	f001023d 	undefined instruction 0xf001023d
    3708:	1008004a 	andne	r0, r8, sl, asr #32
    370c:	0108004b 	tsteq	r8, fp, asr #32
    3710:	00056c5d 	andeq	r6, r5, sp, asr ip
    3714:	1ab52300 	bne	fed4c31c <SCS_BASE+0x1ed3e31c>
    3718:	3c010000 	stccc	0, cr0, [r1], {0}
    371c:	00005302 	andeq	r5, r0, r2, lsl #6
    3720:	00500100 	subseq	r0, r0, r0, lsl #2
    3724:	1bc90122 	blne	ff243bb4 <SCS_BASE+0x1f235bb4>
    3728:	64010000 	strvs	r0, [r1]
    372c:	4b100102 	blmi	403b3c <__Stack_Size+0x40373c>
    3730:	4b1c0800 	blmi	705738 <__Stack_Size+0x705338>
    3734:	5d010800 	stcpl	8, cr0, [r1]
    3738:	00000593 	muleq	r0, r3, r5
    373c:	00105123 	andseq	r5, r0, r3, lsr #2
    3740:	02630100 	rsbeq	r0, r3, #0	; 0x0
    3744:	000000a9 	andeq	r0, r0, r9, lsr #1
    3748:	22005001 	andcs	r5, r0, #1	; 0x1
    374c:	001cd501 	andseq	sp, ip, r1, lsl #10
    3750:	027a0100 	rsbseq	r0, sl, #0	; 0x0
    3754:	004b1c01 	subeq	r1, fp, r1, lsl #24
    3758:	004b2c08 	subeq	r2, fp, r8, lsl #24
    375c:	bc5d0108 	ldflte	f0, [sp], {8}
    3760:	24000005 	strcs	r0, [r0], #-5
    3764:	00001b7a 	andeq	r1, r0, sl, ror fp
    3768:	3a027901 	bcc	a1b74 <__Stack_Size+0xa1774>
    376c:	94000000 	strls	r0, [r0]
    3770:	00000019 	andeq	r0, r0, r9, lsl r0
    3774:	1df40122 	ldfnee	f0, [r4, #136]!
    3778:	8d010000 	stchi	0, cr0, [r1]
    377c:	4b2c0102 	blmi	b03b8c <__Stack_Size+0xb0378c>
    3780:	4b380800 	blmi	e05788 <__Stack_Size+0xe05388>
    3784:	5d010800 	stcpl	8, cr0, [r1]
    3788:	000005e3 	andeq	r0, r0, r3, ror #11
    378c:	00105123 	andseq	r5, r0, r3, lsr #2
    3790:	028c0100 	addeq	r0, ip, #0	; 0x0
    3794:	000000a9 	andeq	r0, r0, r9, lsr #1
    3798:	22005001 	andcs	r5, r0, #1	; 0x1
    379c:	001dc001 	andseq	ip, sp, r1
    37a0:	029d0100 	addseq	r0, sp, #0	; 0x0
    37a4:	004b3801 	subeq	r3, fp, r1, lsl #16
    37a8:	004bf008 	subeq	pc, fp, r8
    37ac:	445d0108 	ldrbmi	r0, [sp], #-264
    37b0:	24000006 	strcs	r0, [r0], #-6
    37b4:	00001d39 	andeq	r1, r0, r9, lsr sp
    37b8:	44029c01 	strmi	r9, [r2], #-3073
    37bc:	a7000006 	strge	r0, [r0, -r6]
    37c0:	28000019 	stmdacs	r0, {r0, r3, r4}
    37c4:	00706d74 	rsbseq	r6, r0, r4, ror sp
    37c8:	3a029e01 	bcc	aafd4 <__Stack_Size+0xaabd4>
    37cc:	c5000000 	strgt	r0, [r0]
    37d0:	25000019 	strcs	r0, [r0, #-25]
    37d4:	00001bb0 	strheq	r1, [r0], -r0
    37d8:	3a029e01 	bcc	aafe4 <__Stack_Size+0xaabe4>
    37dc:	f9000000 	undefined instruction 0xf9000000
    37e0:	12000019 	andne	r0, r0, #25	; 0x19
    37e4:	00001c00 	andeq	r1, r0, r0, lsl #24
    37e8:	3a029e01 	bcc	aaff4 <__Stack_Size+0xaabf4>
    37ec:	12000000 	andne	r0, r0, #0	; 0x0
    37f0:	00001b45 	andeq	r1, r0, r5, asr #22
    37f4:	3a029e01 	bcc	ab000 <__Stack_Size+0xaac00>
    37f8:	00000000 	andeq	r0, r0, r0
    37fc:	01c50429 	biceq	r0, r5, r9, lsr #8
    3800:	01220000 	teqeq	r2, r0
    3804:	00001b13 	andeq	r1, r0, r3, lsl fp
    3808:	01030101 	tsteq	r3, r1, lsl #2
    380c:	08004bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp, lr}
    3810:	08004c0c 	stmdaeq	r0, {r2, r3, sl, fp, lr}
    3814:	067f5d01 	ldrbteq	r5, [pc], -r1, lsl #26
    3818:	46230000 	strtmi	r0, [r3], -r0
    381c:	0100001e 	tsteq	r0, lr, lsl r0
    3820:	003a0300 	eorseq	r0, sl, r0, lsl #6
    3824:	50010000 	andpl	r0, r1, r0
    3828:	00105123 	andseq	r5, r0, r3, lsr #2
    382c:	03000100 	movweq	r0, #256	; 0x100
    3830:	000000a9 	andeq	r0, r0, r9, lsr #1
    3834:	22005101 	andcs	r5, r0, #1073741824	; 0x40000000
    3838:	001d6101 	andseq	r6, sp, r1, lsl #2
    383c:	03220100 	teqeq	r2, #0	; 0x0
    3840:	004c0c01 	subeq	r0, ip, r1, lsl #24
    3844:	004c2808 	subeq	r2, ip, r8, lsl #16
    3848:	b45d0108 	ldrblt	r0, [sp], #-264
    384c:	23000006 	movwcs	r0, #6	; 0x6
    3850:	00001ad2 	ldrdeq	r1, [r0], -r2
    3854:	3a032101 	bcc	cbc60 <__Stack_Size+0xcb860>
    3858:	01000000 	tsteq	r0, r0
    385c:	10512350 	subsne	r2, r1, r0, asr r3
    3860:	21010000 	tstcs	r1, r0
    3864:	0000a903 	andeq	sl, r0, r3, lsl #18
    3868:	00510100 	subseq	r0, r1, r0, lsl #2
    386c:	1c2b0122 	stfnes	f0, [fp], #-136
    3870:	44010000 	strmi	r0, [r1]
    3874:	4c280103 	stfmis	f0, [r8], #-12
    3878:	4c440800 	mcrrmi	8, 0, r0, r4, cr0
    387c:	5d010800 	stcpl	8, cr0, [r1]
    3880:	000006e9 	andeq	r0, r0, r9, ror #13
    3884:	001bf123 	andseq	pc, fp, r3, lsr #2
    3888:	03430100 	movteq	r0, #12544	; 0x3100
    388c:	0000003a 	andeq	r0, r0, sl, lsr r0
    3890:	51235001 	teqpl	r3, r1
    3894:	01000010 	tsteq	r0, r0, lsl r0
    3898:	00a90343 	adceq	r0, r9, r3, asr #6
    389c:	51010000 	tstpl	r1, r0
    38a0:	9e012200 	cdpls	2, 0, cr2, cr1, cr0, {0}
    38a4:	0100001a 	tsteq	r0, sl, lsl r0
    38a8:	44010364 	strmi	r0, [r1], #-868
    38ac:	6008004c 	andvs	r0, r8, ip, asr #32
    38b0:	0108004c 	tsteq	r8, ip, asr #32
    38b4:	00071e5d 	andeq	r1, r7, sp, asr lr
    38b8:	1ad22300 	bne	ff48c4c0 <SCS_BASE+0x1f47e4c0>
    38bc:	63010000 	movwvs	r0, #4096	; 0x1000
    38c0:	00003a03 	andeq	r3, r0, r3, lsl #20
    38c4:	23500100 	cmpcs	r0, #0	; 0x0
    38c8:	00001051 	andeq	r1, r0, r1, asr r0
    38cc:	a9036301 	stmdbge	r3, {r0, r8, r9, sp, lr}
    38d0:	01000000 	tsteq	r0, r0
    38d4:	01220051 	qsubeq	r0, r1, r2
    38d8:	00001b8b 	andeq	r1, r0, fp, lsl #23
    38dc:	01038501 	tsteq	r3, r1, lsl #10
    38e0:	08004c60 	stmdaeq	r0, {r5, r6, sl, fp, lr}
    38e4:	08004c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, lr}
    38e8:	07535d01 	ldrbeq	r5, [r3, -r1, lsl #26]
    38ec:	f1230000 	undefined instruction 0xf1230000
    38f0:	0100001b 	tsteq	r0, fp, lsl r0
    38f4:	003a0384 	eorseq	r0, sl, r4, lsl #7
    38f8:	50010000 	andpl	r0, r1, r0
    38fc:	00105123 	andseq	r5, r0, r3, lsr #2
    3900:	03840100 	orreq	r0, r4, #0	; 0x0
    3904:	000000a9 	andeq	r0, r0, r9, lsr #1
    3908:	22005101 	andcs	r5, r0, #1073741824	; 0x40000000
    390c:	001c5901 	andseq	r5, ip, r1, lsl #18
    3910:	039d0100 	orrseq	r0, sp, #0	; 0x0
    3914:	004c7c01 	subeq	r7, ip, r1, lsl #24
    3918:	004c8808 	subeq	r8, ip, r8, lsl #16
    391c:	7a5d0108 	bvc	1743d44 <__Stack_Size+0x1743944>
    3920:	23000007 	movwcs	r0, #7	; 0x7
    3924:	00001051 	andeq	r1, r0, r1, asr r0
    3928:	a9039c01 	stmdbge	r3, {r0, sl, fp, ip, pc}
    392c:	01000000 	tsteq	r0, r0
    3930:	01220050 	qsubeq	r0, r0, r2
    3934:	00001e02 	andeq	r1, r0, r2, lsl #28
    3938:	0103ad01 	tsteq	r3, r1, lsl #26
    393c:	08004c88 	stmdaeq	r0, {r3, r7, sl, fp, lr}
    3940:	08004c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, lr}
    3944:	07a15d01 	streq	r5, [r1, r1, lsl #26]!
    3948:	51230000 	teqpl	r3, r0
    394c:	01000010 	tsteq	r0, r0, lsl r0
    3950:	00a903ac 	adceq	r0, r9, ip, lsr #7
    3954:	50010000 	andpl	r0, r1, r0
    3958:	4b012200 	blmi	4c160 <__Stack_Size+0x4bd60>
    395c:	0100001b 	tsteq	r0, fp, lsl r0
    3960:	940103c2 	strls	r0, [r1], #-962
    3964:	a008004c 	andge	r0, r8, ip, asr #32
    3968:	0108004c 	tsteq	r8, ip, asr #32
    396c:	0007c85d 	andeq	ip, r7, sp, asr r8
    3970:	1e372300 	cdpne	3, 3, cr2, cr7, cr0, {0}
    3974:	c1010000 	tstgt	r1, r0
    3978:	00005303 	andeq	r5, r0, r3, lsl #6
    397c:	00500100 	subseq	r0, r0, r0, lsl #2
    3980:	0001d02a 	andeq	sp, r1, sl, lsr #32
    3984:	004ca000 	subeq	sl, ip, r0
    3988:	004ce408 	subeq	lr, ip, r8, lsl #8
    398c:	fc5d0108 	mrrc2	1, 0, r0, sp, cr8
    3990:	2b000007 	blcs	39b4 <__Stack_Size+0x35b4>
    3994:	000001e3 	andeq	r0, r0, r3, ror #3
    3998:	00001a17 	andeq	r1, r0, r7, lsl sl
    399c:	0001ef20 	andeq	lr, r1, r0, lsr #30
    39a0:	001a2a00 	andseq	r2, sl, r0, lsl #20
    39a4:	01fb2000 	mvnseq	r2, r0
    39a8:	1a530000 	bne	14c39b0 <__Stack_Size+0x14c35b0>
    39ac:	071c0000 	ldreq	r0, [ip, -r0]
    39b0:	00000002 	andeq	r0, r0, r2
    39b4:	1cf7012c 	ldfnee	f0, [r7], #176
    39b8:	11010000 	tstne	r1, r0
    39bc:	4ce40104 	stfmie	f0, [r4], #16
    39c0:	4cf40800 	ldclmi	8, cr0, [r4]
    39c4:	5d010800 	stcpl	8, cr0, [r1]
    39c8:	1abd012d 	bne	fef43e84 <SCS_BASE+0x1ef35e84>
    39cc:	25010000 	strcs	r0, [r1]
    39d0:	00890104 	addeq	r0, r9, r4, lsl #2
    39d4:	4cf40000 	ldclmi	0, cr0, [r4]
    39d8:	4d080800 	stcmi	8, cr0, [r8]
    39dc:	5d010800 	stcpl	8, cr0, [r1]
    39e0:	00000849 	andeq	r0, r0, r9, asr #16
    39e4:	001e3f24 	andseq	r3, lr, r4, lsr #30
    39e8:	04240100 	strteq	r0, [r4], #-256
    39ec:	00000053 	andeq	r0, r0, r3, asr r0
    39f0:	00001a7c 	andeq	r1, r0, ip, ror sl
    39f4:	0010d812 	andseq	sp, r0, r2, lsl r8
    39f8:	04260100 	strteq	r0, [r6], #-256
    39fc:	00000089 	andeq	r0, r0, r9, lsl #1
    3a00:	88012200 	stmdahi	r1, {r9, sp}
    3a04:	0100001a 	tsteq	r0, sl, lsl r0
    3a08:	08010448 	stmdaeq	r1, {r3, r6, sl}
    3a0c:	1408004d 	strne	r0, [r8], #-77
    3a10:	0108004d 	tsteq	r8, sp, asr #32
    3a14:	0008705d 	andeq	r7, r8, sp, asr r0
    3a18:	1e3f2300 	cdpne	3, 3, cr2, cr15, cr0, {0}
    3a1c:	47010000 	strmi	r0, [r1, -r0]
    3a20:	00005304 	andeq	r5, r0, r4, lsl #6
    3a24:	00500100 	subseq	r0, r0, r0, lsl #2
    3a28:	00005d2e 	andeq	r5, r0, lr, lsr #26
    3a2c:	00088000 	andeq	r8, r8, r0
    3a30:	00d42f00 	sbcseq	r2, r4, r0, lsl #30
    3a34:	000f0000 	andeq	r0, pc, r0
    3a38:	001daf21 	andseq	sl, sp, r1, lsr #30
    3a3c:	916f0100 	cmnls	pc, r0, lsl #2
    3a40:	05000008 	streq	r0, [r0, #-8]
    3a44:	005fc003 	subseq	ip, pc, r3
    3a48:	08703008 	ldmdaeq	r0!, {r3, ip, sp}^
    3a4c:	5d2e0000 	stcpl	0, cr0, [lr]
    3a50:	a6000000 	strge	r0, [r0], -r0
    3a54:	2f000008 	svccs	0x00000008
    3a58:	000000d4 	ldrdeq	r0, [r0], -r4
    3a5c:	64210003 	strtvs	r0, [r1], #-3
    3a60:	0100001e 	tsteq	r0, lr, lsl r0
    3a64:	0008b770 	andeq	fp, r8, r0, ror r7
    3a68:	d0030500 	andle	r0, r3, r0, lsl #10
    3a6c:	3008005f 	andcc	r0, r8, pc, asr r0
    3a70:	00000896 	muleq	r0, r6, r8
    3a74:	0001eb00 	andeq	lr, r1, r0, lsl #22
    3a78:	f9000200 	undefined instruction 0xf9000200
    3a7c:	0400000f 	streq	r0, [r0], #-15
    3a80:	00048801 	andeq	r8, r4, r1, lsl #16
    3a84:	1ec00100 	polnes	f0, f0, f0
    3a88:	008e0000 	addeq	r0, lr, r0
    3a8c:	4d140000 	ldcmi	0, cr0, [r4]
    3a90:	4db80800 	ldcmi	8, cr0, [r8]
    3a94:	0de80800 	stcleq	8, cr0, [r8]
    3a98:	04020000 	streq	r0, [r2]
    3a9c:	002cfb05 	eoreq	pc, ip, r5, lsl #22
    3aa0:	05020200 	streq	r0, [r2, #-512]
    3aa4:	0000050f 	andeq	r0, r0, pc, lsl #10
    3aa8:	d4060102 	strle	r0, [r6], #-258
    3aac:	03000005 	movweq	r0, #5	; 0x5
    3ab0:	00323375 	eorseq	r3, r2, r5, ror r3
    3ab4:	00452702 	subeq	r2, r5, r2, lsl #14
    3ab8:	04020000 	streq	r0, [r2]
    3abc:	002d7507 	eoreq	r7, sp, r7, lsl #10
    3ac0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    3ac4:	00000712 	andeq	r0, r0, r2, lsl r7
    3ac8:	00387503 	eorseq	r7, r8, r3, lsl #10
    3acc:	005d2902 	subseq	r2, sp, r2, lsl #18
    3ad0:	01020000 	tsteq	r2, r0
    3ad4:	0005d208 	andeq	sp, r5, r8, lsl #4
    3ad8:	00450400 	subeq	r0, r5, r0, lsl #8
    3adc:	64050000 	strvs	r0, [r5]
    3ae0:	06000000 	streq	r0, [r0], -r0
    3ae4:	83390201 	teqhi	r9, #268435456	; 0x10000000
    3ae8:	07000000 	streq	r0, [r0, -r0]
    3aec:	00001377 	andeq	r1, r0, r7, ror r3
    3af0:	45530800 	ldrbmi	r0, [r3, #-2048]
    3af4:	00010054 	andeq	r0, r1, r4, asr r0
    3af8:	001cca09 	andseq	ip, ip, r9, lsl #20
    3afc:	6e390200 	cdpvs	2, 3, cr0, cr9, cr0, {0}
    3b00:	06000000 	streq	r0, [r0], -r0
    3b04:	a33b0201 	teqge	fp, #268435456	; 0x10000000
    3b08:	07000000 	streq	r0, [r0, -r0]
    3b0c:	00000363 	andeq	r0, r0, r3, ror #6
    3b10:	05a40700 	streq	r0, [r4, #1792]!
    3b14:	00010000 	andeq	r0, r1, r0
    3b18:	0000dc09 	andeq	sp, r0, r9, lsl #24
    3b1c:	8e3b0200 	cdphi	2, 3, cr0, cr11, cr0, {0}
    3b20:	0a000000 	beq	3b28 <__Stack_Size+0x3728>
    3b24:	100b0704 	andne	r0, fp, r4, lsl #14
    3b28:	f7020303 	undefined instruction 0xf7020303
    3b2c:	0c000000 	stceq	0, cr0, [r0], {0}
    3b30:	00001ee6 	andeq	r1, r0, r6, ror #29
    3b34:	64020403 	strvs	r0, [r2], #-1027
    3b38:	02000000 	andeq	r0, r0, #0	; 0x0
    3b3c:	260c0023 	strcs	r0, [ip], -r3, lsr #32
    3b40:	0300001f 	movweq	r0, #31	; 0x1f
    3b44:	00640205 	rsbeq	r0, r4, r5, lsl #4
    3b48:	23020000 	movwcs	r0, #8192	; 0x2000
    3b4c:	41560d04 	cmpmi	r6, r4, lsl #26
    3b50:	0603004c 	streq	r0, [r3], -ip, asr #32
    3b54:	00006402 	andeq	r6, r0, r2, lsl #8
    3b58:	08230200 	stmdaeq	r3!, {r9}
    3b5c:	001eba0c 	andseq	fp, lr, ip, lsl #20
    3b60:	02070300 	andeq	r0, r7, #0	; 0x0
    3b64:	00000069 	andeq	r0, r0, r9, rrx
    3b68:	000c2302 	andeq	r2, ip, r2, lsl #6
    3b6c:	1f0e010e 	svcne	0x000e010e
    3b70:	2c010000 	stccs	0, cr0, [r1], {0}
    3b74:	004d1401 	subeq	r1, sp, r1, lsl #8
    3b78:	004d3008 	subeq	r3, sp, r8
    3b7c:	1c5d0108 	ldfnee	f0, [sp], {8}
    3b80:	0f000001 	svceq	0x00000001
    3b84:	00001f2b 	andeq	r1, r0, fp, lsr #30
    3b88:	003a2b01 	eorseq	r2, sl, r1, lsl #22
    3b8c:	50010000 	andpl	r0, r1, r0
    3b90:	85010e00 	strhi	r0, [r1, #-3584]
    3b94:	0100001e 	tsteq	r0, lr, lsl r0
    3b98:	4d300143 	ldfmis	f0, [r0, #-268]!
    3b9c:	4d3c0800 	ldcmi	8, cr0, [ip]
    3ba0:	5d010800 	stcpl	8, cr0, [r1]
    3ba4:	00000141 	andeq	r0, r0, r1, asr #2
    3ba8:	001e900f 	andseq	r9, lr, pc
    3bac:	3a420100 	bcc	1083fb4 <__Stack_Size+0x1083bb4>
    3bb0:	01000000 	tsteq	r0, r0
    3bb4:	010e0050 	qaddeq	r0, r0, lr
    3bb8:	00001eeb 	andeq	r1, r0, fp, ror #29
    3bbc:	3c015601 	stccc	6, cr5, [r1], {1}
    3bc0:	6808004d 	stmdavs	r8, {r0, r2, r3, r6}
    3bc4:	0108004d 	tsteq	r8, sp, asr #32
    3bc8:	0001665d 	andeq	r6, r1, sp, asr r6
    3bcc:	1efe0f00 	cdpne	15, 15, cr0, cr14, cr0, {0}
    3bd0:	55010000 	strpl	r0, [r1]
    3bd4:	0000003a 	andeq	r0, r0, sl, lsr r0
    3bd8:	0e005001 	cdpeq	0, 0, cr5, cr0, cr1, {0}
    3bdc:	001f3d01 	andseq	r3, pc, r1, lsl #26
    3be0:	01710100 	cmneq	r1, r0, lsl #2
    3be4:	08004d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, lr}
    3be8:	08004d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, lr}
    3bec:	018b5d01 	orreq	r5, fp, r1, lsl #26
    3bf0:	510f0000 	mrspl	r0, CPSR
    3bf4:	01000010 	tsteq	r0, r0, lsl r0
    3bf8:	0000a370 	andeq	sl, r0, r0, ror r3
    3bfc:	00500100 	subseq	r0, r0, r0, lsl #2
    3c00:	1e720110 	mrcne	1, 3, r0, cr2, cr0, {0}
    3c04:	87010000 	strhi	r0, [r1, -r0]
    3c08:	00003a01 	andeq	r3, r0, r1, lsl #20
    3c0c:	004d8400 	subeq	r8, sp, r0, lsl #8
    3c10:	004d9008 	subeq	r9, sp, r8
    3c14:	115d0108 	cmpne	sp, r8, lsl #2
    3c18:	001e9701 	andseq	r9, lr, r1, lsl #14
    3c1c:	01970100 	orrseq	r0, r7, r0, lsl #2
    3c20:	00000083 	andeq	r0, r0, r3, lsl #1
    3c24:	08004d90 	stmdaeq	r0, {r4, r7, r8, sl, fp, lr}
    3c28:	08004db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, lr}
    3c2c:	ad125d01 	ldcge	13, cr5, [r2, #-4]
    3c30:	0100001e 	tsteq	r0, lr, lsl r0
    3c34:	00005396 	muleq	r0, r6, r3
    3c38:	001a8f00 	andseq	r8, sl, r0, lsl #30
    3c3c:	1c211300 	stcne	3, cr1, [r1]
    3c40:	98010000 	stmdals	r1, {}
    3c44:	0000003a 	andeq	r0, r0, sl, lsr r0
    3c48:	00001aad 	andeq	r1, r0, sp, lsr #21
    3c4c:	706d7414 	rsbvc	r7, sp, r4, lsl r4
    3c50:	3a980100 	bcc	fe604058 <SCS_BASE+0x1e5f6058>
    3c54:	15000000 	strne	r0, [r0]
    3c58:	000010d8 	ldrdeq	r1, [r0], -r8
    3c5c:	00839901 	addeq	r9, r3, r1, lsl #18
    3c60:	00000000 	andeq	r0, r0, r0
    3c64:	00002145 	andeq	r2, r0, r5, asr #2
    3c68:	111f0002 	tstne	pc, r2
    3c6c:	01040000 	tsteq	r4, r0
    3c70:	00000488 	andeq	r0, r0, r8, lsl #9
    3c74:	0022b501 	eoreq	fp, r2, r1, lsl #10
    3c78:	00008e00 	andeq	r8, r0, r0, lsl #28
    3c7c:	004db800 	subeq	fp, sp, r0, lsl #16
    3c80:	005b4008 	subseq	r4, fp, r8
    3c84:	000ea508 	andeq	sl, lr, r8, lsl #10
    3c88:	05040200 	streq	r0, [r4, #-512]
    3c8c:	00002cfb 	strdeq	r2, [r0], -fp
    3c90:	0f050202 	svceq	0x00050202
    3c94:	02000005 	andeq	r0, r0, #5	; 0x5
    3c98:	05d40601 	ldrbeq	r0, [r4, #1537]
    3c9c:	04020000 	streq	r0, [r2]
    3ca0:	002d7507 	eoreq	r7, sp, r7, lsl #10
    3ca4:	31750300 	cmncc	r5, r0, lsl #6
    3ca8:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    3cac:	0000004c 	andeq	r0, r0, ip, asr #32
    3cb0:	12070202 	andne	r0, r7, #536870912	; 0x20000000
    3cb4:	03000007 	movweq	r0, #7	; 0x7
    3cb8:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    3cbc:	00005d29 	andeq	r5, r0, r9, lsr #26
    3cc0:	08010200 	stmdaeq	r1, {r9}
    3cc4:	000005d2 	ldrdeq	r0, [r0], -r2
    3cc8:	00004c04 	andeq	r4, r0, r4, lsl #24
    3ccc:	02010500 	andeq	r0, r1, #0	; 0x0
    3cd0:	00007e39 	andeq	r7, r0, r9, lsr lr
    3cd4:	13770600 	cmnne	r7, #0	; 0x0
    3cd8:	07000000 	streq	r0, [r0, -r0]
    3cdc:	00544553 	subseq	r4, r4, r3, asr r5
    3ce0:	ca080001 	bgt	203cec <__Stack_Size+0x2038ec>
    3ce4:	0200001c 	andeq	r0, r0, #28	; 0x1c
    3ce8:	00006939 	andeq	r6, r0, r9, lsr r9
    3cec:	1ac40800 	bne	ff105cf4 <SCS_BASE+0x1f0f7cf4>
    3cf0:	39020000 	stmdbcc	r2, {}
    3cf4:	00000069 	andeq	r0, r0, r9, rrx
    3cf8:	3b020105 	blcc	84114 <__Stack_Size+0x83d14>
    3cfc:	000000a9 	andeq	r0, r0, r9, lsr #1
    3d00:	00036306 	andeq	r6, r3, r6, lsl #6
    3d04:	a4060000 	strge	r0, [r6]
    3d08:	01000005 	tsteq	r0, r5
    3d0c:	00dc0800 	sbcseq	r0, ip, r0, lsl #16
    3d10:	3b020000 	blcc	83d18 <__Stack_Size+0x83918>
    3d14:	00000094 	muleq	r0, r4, r0
    3d18:	0a070409 	beq	1c4d44 <__Stack_Size+0x1c4944>
    3d1c:	020c0350 	andeq	r0, ip, #1073741825	; 0x40000001
    3d20:	00000318 	andeq	r0, r0, r8, lsl r3
    3d24:	3152430b 	cmpcc	r2, fp, lsl #6
    3d28:	020d0300 	andeq	r0, sp, #0	; 0x0
    3d2c:	00000064 	andeq	r0, r0, r4, rrx
    3d30:	0c002302 	stceq	3, cr2, [r0], {2}
    3d34:	000004c9 	andeq	r0, r0, r9, asr #9
    3d38:	41020e03 	tstmi	r2, r3, lsl #28
    3d3c:	02000000 	andeq	r0, r0, #0	; 0x0
    3d40:	430b0223 	movwmi	r0, #45603	; 0xb223
    3d44:	03003252 	movweq	r3, #594	; 0x252
    3d48:	0064020f 	rsbeq	r0, r4, pc, lsl #4
    3d4c:	23020000 	movwcs	r0, #8192	; 0x2000
    3d50:	04d30c04 	ldrbeq	r0, [r3], #3076
    3d54:	10030000 	andne	r0, r3, r0
    3d58:	00004102 	andeq	r4, r0, r2, lsl #2
    3d5c:	06230200 	strteq	r0, [r3], -r0, lsl #4
    3d60:	0003aa0c 	andeq	sl, r3, ip, lsl #20
    3d64:	02110300 	andseq	r0, r1, #0	; 0x0
    3d68:	00000064 	andeq	r0, r0, r4, rrx
    3d6c:	0c082302 	stceq	3, cr2, [r8], {2}
    3d70:	000004dd 	ldrdeq	r0, [r0], -sp
    3d74:	41021203 	tstmi	r2, r3, lsl #4
    3d78:	02000000 	andeq	r0, r0, #0	; 0x0
    3d7c:	c60c0a23 	strgt	r0, [ip], -r3, lsr #20
    3d80:	03000002 	movweq	r0, #2	; 0x2
    3d84:	00640213 	rsbeq	r0, r4, r3, lsl r2
    3d88:	23020000 	movwcs	r0, #8192	; 0x2000
    3d8c:	04e70c0c 	strbteq	r0, [r7], #3084
    3d90:	14030000 	strne	r0, [r3]
    3d94:	00004102 	andeq	r4, r0, r2, lsl #2
    3d98:	0e230200 	cdpeq	2, 2, cr0, cr3, cr0, {0}
    3d9c:	0052530b 	subseq	r5, r2, fp, lsl #6
    3da0:	64021503 	strvs	r1, [r2], #-1283
    3da4:	02000000 	andeq	r0, r0, #0	; 0x0
    3da8:	f10c1023 	undefined instruction 0xf10c1023
    3dac:	03000004 	movweq	r0, #4	; 0x4
    3db0:	00410216 	subeq	r0, r1, r6, lsl r2
    3db4:	23020000 	movwcs	r0, #8192	; 0x2000
    3db8:	47450b12 	smlaldmi	r0, r5, r2, fp
    3dbc:	17030052 	smlsdne	r3, r2, r0, r0
    3dc0:	00006402 	andeq	r6, r0, r2, lsl #8
    3dc4:	14230200 	strtne	r0, [r3], #-512
    3dc8:	0004fb0c 	andeq	pc, r4, ip, lsl #22
    3dcc:	02180300 	andseq	r0, r8, #0	; 0x0
    3dd0:	00000041 	andeq	r0, r0, r1, asr #32
    3dd4:	0c162302 	ldceq	3, cr2, [r6], {2}
    3dd8:	000001f4 	strdeq	r0, [r0], -r4
    3ddc:	64021903 	strvs	r1, [r2], #-2307
    3de0:	02000000 	andeq	r0, r0, #0	; 0x0
    3de4:	050c1823 	streq	r1, [ip, #-2083]
    3de8:	03000005 	movweq	r0, #5	; 0x5
    3dec:	0041021a 	subeq	r0, r1, sl, lsl r2
    3df0:	23020000 	movwcs	r0, #8192	; 0x2000
    3df4:	01fa0c1a 	mvnseq	r0, sl, lsl ip
    3df8:	1b030000 	blne	c3e00 <__Stack_Size+0xc3a00>
    3dfc:	00006402 	andeq	r6, r0, r2, lsl #8
    3e00:	1c230200 	sfmne	f0, 4, [r3]
    3e04:	00076a0c 	andeq	r6, r7, ip, lsl #20
    3e08:	021c0300 	andseq	r0, ip, #0	; 0x0
    3e0c:	00000041 	andeq	r0, r0, r1, asr #32
    3e10:	0c1e2302 	ldceq	3, cr2, [lr], {2}
    3e14:	0000032e 	andeq	r0, r0, lr, lsr #6
    3e18:	64021d03 	strvs	r1, [r2], #-3331
    3e1c:	02000000 	andeq	r0, r0, #0	; 0x0
    3e20:	190c2023 	stmdbne	ip, {r0, r1, r5, sp}
    3e24:	03000005 	movweq	r0, #5	; 0x5
    3e28:	0041021e 	subeq	r0, r1, lr, lsl r2
    3e2c:	23020000 	movwcs	r0, #8192	; 0x2000
    3e30:	4e430b22 	fmacdmi	d16, d3, d18
    3e34:	1f030054 	svcne	0x00030054
    3e38:	00006402 	andeq	r6, r0, r2, lsl #8
    3e3c:	24230200 	strtcs	r0, [r3], #-512
    3e40:	0005230c 	andeq	r2, r5, ip, lsl #6
    3e44:	02200300 	eoreq	r0, r0, #0	; 0x0
    3e48:	00000041 	andeq	r0, r0, r1, asr #32
    3e4c:	0b262302 	bleq	98ca5c <__Stack_Size+0x98c65c>
    3e50:	00435350 	subeq	r5, r3, r0, asr r3
    3e54:	64022103 	strvs	r2, [r2], #-259
    3e58:	02000000 	andeq	r0, r0, #0	; 0x0
    3e5c:	1d0c2823 	stcne	8, cr2, [ip, #-140]
    3e60:	03000006 	movweq	r0, #6	; 0x6
    3e64:	00410222 	subeq	r0, r1, r2, lsr #4
    3e68:	23020000 	movwcs	r0, #8192	; 0x2000
    3e6c:	52410b2a 	subpl	r0, r1, #43008	; 0xa800
    3e70:	23030052 	movwcs	r0, #12370	; 0x3052
    3e74:	00006402 	andeq	r6, r0, r2, lsl #8
    3e78:	2c230200 	sfmcs	f0, 4, [r3]
    3e7c:	0006280c 	andeq	r2, r6, ip, lsl #16
    3e80:	02240300 	eoreq	r0, r4, #0	; 0x0
    3e84:	00000041 	andeq	r0, r0, r1, asr #32
    3e88:	0b2e2302 	bleq	b8ca98 <__Stack_Size+0xb8c698>
    3e8c:	00524352 	subseq	r4, r2, r2, asr r3
    3e90:	64022503 	strvs	r2, [r2], #-1283
    3e94:	02000000 	andeq	r0, r0, #0	; 0x0
    3e98:	330c3023 	movwcc	r3, #49187	; 0xc023
    3e9c:	03000006 	movweq	r0, #6	; 0x6
    3ea0:	00410226 	subeq	r0, r1, r6, lsr #4
    3ea4:	23020000 	movwcs	r0, #8192	; 0x2000
    3ea8:	01e00c32 	mvneq	r0, r2, lsr ip
    3eac:	27030000 	strcs	r0, [r3, -r0]
    3eb0:	00006402 	andeq	r6, r0, r2, lsl #8
    3eb4:	34230200 	strtcc	r0, [r3], #-512
    3eb8:	00063e0c 	andeq	r3, r6, ip, lsl #28
    3ebc:	02280300 	eoreq	r0, r8, #0	; 0x0
    3ec0:	00000041 	andeq	r0, r0, r1, asr #32
    3ec4:	0c362302 	ldceq	3, cr2, [r6], #-8
    3ec8:	000001e5 	andeq	r0, r0, r5, ror #3
    3ecc:	64022903 	strvs	r2, [r2], #-2307
    3ed0:	02000000 	andeq	r0, r0, #0	; 0x0
    3ed4:	490c3823 	stmdbmi	ip, {r0, r1, r5, fp, ip, sp}
    3ed8:	03000006 	movweq	r0, #6	; 0x6
    3edc:	0041022a 	subeq	r0, r1, sl, lsr #4
    3ee0:	23020000 	movwcs	r0, #8192	; 0x2000
    3ee4:	01ea0c3a 	mvneq	r0, sl, lsr ip
    3ee8:	2b030000 	blcs	c3ef0 <__Stack_Size+0xc3af0>
    3eec:	00006402 	andeq	r6, r0, r2, lsl #8
    3ef0:	3c230200 	sfmcc	f0, 4, [r3]
    3ef4:	0006540c 	andeq	r5, r6, ip, lsl #8
    3ef8:	022c0300 	eoreq	r0, ip, #0	; 0x0
    3efc:	00000041 	andeq	r0, r0, r1, asr #32
    3f00:	0c3e2302 	ldceq	3, cr2, [lr], #-8
    3f04:	000001ef 	andeq	r0, r0, pc, ror #3
    3f08:	64022d03 	strvs	r2, [r2], #-3331
    3f0c:	02000000 	andeq	r0, r0, #0	; 0x0
    3f10:	5f0c4023 	svcpl	0x000c4023
    3f14:	03000006 	movweq	r0, #6	; 0x6
    3f18:	0041022e 	subeq	r0, r1, lr, lsr #4
    3f1c:	23020000 	movwcs	r0, #8192	; 0x2000
    3f20:	01ba0c42 	undefined instruction 0x01ba0c42
    3f24:	2f030000 	svccs	0x00030000
    3f28:	00006402 	andeq	r6, r0, r2, lsl #8
    3f2c:	44230200 	strtmi	r0, [r3], #-512
    3f30:	00066a0c 	andeq	r6, r6, ip, lsl #20
    3f34:	02300300 	eorseq	r0, r0, #0	; 0x0
    3f38:	00000041 	andeq	r0, r0, r1, asr #32
    3f3c:	0b462302 	bleq	118cb4c <__Stack_Size+0x118c74c>
    3f40:	00524344 	subseq	r4, r2, r4, asr #6
    3f44:	64023103 	strvs	r3, [r2], #-259
    3f48:	02000000 	andeq	r0, r0, #0	; 0x0
    3f4c:	750c4823 	strvc	r4, [ip, #-2083]
    3f50:	03000006 	movweq	r0, #6	; 0x6
    3f54:	00410232 	subeq	r0, r1, r2, lsr r2
    3f58:	23020000 	movwcs	r0, #8192	; 0x2000
    3f5c:	053d0c4a 	ldreq	r0, [sp, #-3146]!
    3f60:	33030000 	movwcc	r0, #12288	; 0x3000
    3f64:	00006402 	andeq	r6, r0, r2, lsl #8
    3f68:	4c230200 	sfmmi	f0, 4, [r3]
    3f6c:	0006800c 	andeq	r8, r6, ip
    3f70:	02340300 	eorseq	r0, r4, #0	; 0x0
    3f74:	00000041 	andeq	r0, r0, r1, asr #32
    3f78:	004e2302 	subeq	r2, lr, r2, lsl #6
    3f7c:	0021c40d 	eoreq	ip, r1, sp, lsl #8
    3f80:	02350300 	eorseq	r0, r5, #0	; 0x0
    3f84:	000000b7 	strheq	r0, [r0], -r7
    3f88:	1c040a0e 	stcne	10, cr0, [r4], {14}
    3f8c:	00000373 	andeq	r0, r0, r3, ror r3
    3f90:	0000210f 	andeq	r2, r0, pc, lsl #2
    3f94:	411d0400 	tstmi	sp, r0, lsl #8
    3f98:	02000000 	andeq	r0, r0, #0	; 0x0
    3f9c:	7a0f0023 	bvc	3c4030 <__Stack_Size+0x3c3c30>
    3fa0:	04000003 	streq	r0, [r0], #-3
    3fa4:	0000411e 	andeq	r4, r0, lr, lsl r1
    3fa8:	02230200 	eoreq	r0, r3, #0	; 0x0
    3fac:	0001250f 	andeq	r2, r1, pc, lsl #10
    3fb0:	411f0400 	tstmi	pc, r0, lsl #8
    3fb4:	02000000 	andeq	r0, r0, #0	; 0x0
    3fb8:	980f0423 	stmdals	pc, {r0, r1, r5, sl}
    3fbc:	04000001 	streq	r0, [r0], #-1
    3fc0:	00004120 	andeq	r4, r0, r0, lsr #2
    3fc4:	06230200 	strteq	r0, [r3], -r0, lsl #4
    3fc8:	0002ed0f 	andeq	lr, r2, pc, lsl #26
    3fcc:	53210400 	teqpl	r1, #0	; 0x0
    3fd0:	02000000 	andeq	r0, r0, #0	; 0x0
    3fd4:	08000823 	stmdaeq	r0, {r0, r1, r5, fp}
    3fd8:	000006e4 	andeq	r0, r0, r4, ror #13
    3fdc:	03242204 	teqeq	r4, #1073741824	; 0x40000000
    3fe0:	100e0000 	andne	r0, lr, r0
    3fe4:	03f72604 	mvnseq	r2, #4194304	; 0x400000
    3fe8:	b00f0000 	andlt	r0, pc, r0
    3fec:	04000004 	streq	r0, [r0], #-4
    3ff0:	00004127 	andeq	r4, r0, r7, lsr #2
    3ff4:	00230200 	eoreq	r0, r3, r0, lsl #4
    3ff8:	0001aa0f 	andeq	sl, r1, pc, lsl #20
    3ffc:	41280400 	teqmi	r8, r0, lsl #8
    4000:	02000000 	andeq	r0, r0, #0	; 0x0
    4004:	930f0223 	movwls	r0, #61987	; 0xf223
    4008:	04000005 	streq	r0, [r0], #-5
    400c:	00004129 	andeq	r4, r0, r9, lsr #2
    4010:	04230200 	strteq	r0, [r3], #-512
    4014:	00017f0f 	andeq	r7, r1, pc, lsl #30
    4018:	412a0400 	teqmi	sl, r0, lsl #8
    401c:	02000000 	andeq	r0, r0, #0	; 0x0
    4020:	760f0623 	strvc	r0, [pc], -r3, lsr #12
    4024:	04000000 	streq	r0, [r0]
    4028:	0000412b 	andeq	r4, r0, fp, lsr #2
    402c:	08230200 	stmdaeq	r3!, {r9}
    4030:	0003030f 	andeq	r0, r3, pc, lsl #6
    4034:	412c0400 	teqmi	ip, r0, lsl #8
    4038:	02000000 	andeq	r0, r0, #0	; 0x0
    403c:	470f0a23 	strmi	r0, [pc, -r3, lsr #20]
    4040:	04000001 	streq	r0, [r0], #-1
    4044:	0000412d 	andeq	r4, r0, sp, lsr #2
    4048:	0c230200 	sfmeq	f0, 4, [r3]
    404c:	00041e0f 	andeq	r1, r4, pc, lsl #28
    4050:	412e0400 	teqmi	lr, r0, lsl #8
    4054:	02000000 	andeq	r0, r0, #0	; 0x0
    4058:	08000e23 	stmdaeq	r0, {r0, r1, r5, r9, sl, fp}
    405c:	00000043 	andeq	r0, r0, r3, asr #32
    4060:	037e2f04 	cmneq	lr, #16	; 0x10
    4064:	0a0e0000 	beq	38406c <__Stack_Size+0x383c6c>
    4068:	04513304 	ldrbeq	r3, [r1], #-772
    406c:	dd0f0000 	stcle	0, cr0, [pc]
    4070:	04000025 	streq	r0, [r0], #-37
    4074:	00004134 	andeq	r4, r0, r4, lsr r1
    4078:	00230200 	eoreq	r0, r3, r0, lsl #4
    407c:	0026cd0f 	eoreq	ip, r6, pc, lsl #26
    4080:	41350400 	teqmi	r5, r0, lsl #8
    4084:	02000000 	andeq	r0, r0, #0	; 0x0
    4088:	680f0223 	stmdavs	pc, {r0, r1, r5, r9}
    408c:	04000026 	streq	r0, [r0], #-38
    4090:	00004136 	andeq	r4, r0, r6, lsr r1
    4094:	04230200 	strteq	r0, [r3], #-512
    4098:	0023ad0f 	eoreq	sl, r3, pc, lsl #26
    409c:	41370400 	teqmi	r7, r0, lsl #8
    40a0:	02000000 	andeq	r0, r0, #0	; 0x0
    40a4:	aa0f0623 	bge	3c5938 <__Stack_Size+0x3c5538>
    40a8:	04000028 	streq	r0, [r0], #-40
    40ac:	00004138 	andeq	r4, r0, r8, lsr r1
    40b0:	08230200 	stmdaeq	r3!, {r9}
    40b4:	20360800 	eorscs	r0, r6, r0, lsl #16
    40b8:	39040000 	stmdbcc	r4, {}
    40bc:	00000402 	andeq	r0, r0, r2, lsl #8
    40c0:	3d040e0e 	stccc	14, cr0, [r4, #-56]
    40c4:	000004c7 	andeq	r0, r0, r7, asr #9
    40c8:	0026bf0f 	eoreq	fp, r6, pc, lsl #30
    40cc:	413e0400 	teqmi	lr, r0, lsl #8
    40d0:	02000000 	andeq	r0, r0, #0	; 0x0
    40d4:	af0f0023 	svcge	0x000f0023
    40d8:	04000021 	streq	r0, [r0], #-33
    40dc:	0000413f 	andeq	r4, r0, pc, lsr r1
    40e0:	02230200 	eoreq	r0, r3, #0	; 0x0
    40e4:	0023720f 	eoreq	r7, r3, pc, lsl #4
    40e8:	41400400 	cmpmi	r0, r0, lsl #8
    40ec:	02000000 	andeq	r0, r0, #0	; 0x0
    40f0:	c40f0423 	strgt	r0, [pc], #1059	; 40f8 <__Stack_Size+0x3cf8>
    40f4:	04000027 	streq	r0, [r0], #-39
    40f8:	00004141 	andeq	r4, r0, r1, asr #2
    40fc:	06230200 	strteq	r0, [r3], -r0, lsl #4
    4100:	00245c0f 	eoreq	r5, r4, pc, lsl #24
    4104:	41420400 	cmpmi	r2, r0, lsl #8
    4108:	02000000 	andeq	r0, r0, #0	; 0x0
    410c:	190f0823 	stmdbne	pc, {r0, r1, r5, fp}
    4110:	04000023 	streq	r0, [r0], #-35
    4114:	00004143 	andeq	r4, r0, r3, asr #2
    4118:	0a230200 	beq	8c4920 <__Stack_Size+0x8c4520>
    411c:	0027500f 	eoreq	r5, r7, pc
    4120:	41440400 	cmpmi	r4, r0, lsl #8
    4124:	02000000 	andeq	r0, r0, #0	; 0x0
    4128:	08000c23 	stmdaeq	r0, {r0, r1, r5, sl, fp}
    412c:	00002404 	andeq	r2, r0, r4, lsl #8
    4130:	045c4504 	ldrbeq	r4, [ip], #-1284
    4134:	01100000 	tsteq	r0, r0
    4138:	0000258c 	andeq	r2, r0, ip, lsl #11
    413c:	0104b301 	tsteq	r4, r1, lsl #6
    4140:	00051e01 	andeq	r1, r5, r1, lsl #28
    4144:	21671100 	cmncs	r7, r0, lsl #2
    4148:	b1010000 	tstlt	r1, r0
    414c:	00051e04 	andeq	r1, r5, r4, lsl #28
    4150:	206b1100 	rsbcs	r1, fp, r0, lsl #2
    4154:	b1010000 	tstlt	r1, r0
    4158:	00004104 	andeq	r4, r0, r4, lsl #2
    415c:	28431100 	stmdacs	r3, {r8, ip}^
    4160:	b1010000 	tstlt	r1, r0
    4164:	00004104 	andeq	r4, r0, r4, lsl #2
    4168:	23f71100 	mvnscs	r1, #0	; 0x0
    416c:	b2010000 	andlt	r0, r1, #0	; 0x0
    4170:	00004104 	andeq	r4, r0, r4, lsl #2
    4174:	214d1200 	cmpcs	sp, r0, lsl #4
    4178:	b4010000 	strlt	r0, [r1]
    417c:	00004104 	andeq	r4, r0, r4, lsl #2
    4180:	04130000 	ldreq	r0, [r3]
    4184:	00000318 	andeq	r0, r0, r8, lsl r3
    4188:	28d10110 	ldmcs	r1, {r4, r8}^
    418c:	19010000 	stmdbne	r1, {}
    4190:	58010105 	stmdapl	r1, {r0, r2, r8}
    4194:	11000005 	tstne	r0, r5
    4198:	00002167 	andeq	r2, r0, r7, ror #2
    419c:	1e051801 	cdpne	8, 0, cr1, cr5, cr1, {0}
    41a0:	11000005 	tstne	r0, r5
    41a4:	00002048 	andeq	r2, r0, r8, asr #32
    41a8:	41051801 	tstmi	r5, r1, lsl #16
    41ac:	12000000 	andne	r0, r0, #0	; 0x0
    41b0:	0000214d 	andeq	r2, r0, sp, asr #2
    41b4:	41051a01 	tstmi	r5, r1, lsl #20
    41b8:	00000000 	andeq	r0, r0, r0
    41bc:	00201814 	eoreq	r1, r0, r4, lsl r8
    41c0:	0c1d0100 	ldfeqs	f0, [sp], {0}
    41c4:	05bb0101 	ldreq	r0, [fp, #257]!
    41c8:	67110000 	ldrvs	r0, [r1, -r0]
    41cc:	01000021 	tsteq	r0, r1, lsr #32
    41d0:	051e0c1b 	ldreq	r0, [lr, #-3099]
    41d4:	cd110000 	ldcgt	0, cr0, [r1]
    41d8:	01000026 	tsteq	r0, r6, lsr #32
    41dc:	00410c1b 	subeq	r0, r1, fp, lsl ip
    41e0:	68110000 	ldmdavs	r1, {}
    41e4:	01000026 	tsteq	r0, r6, lsr #32
    41e8:	00410c1b 	subeq	r0, r1, fp, lsl ip
    41ec:	aa110000 	bge	4441f4 <__Stack_Size+0x443df4>
    41f0:	01000028 	tsteq	r0, r8, lsr #32
    41f4:	00410c1c 	subeq	r0, r1, ip, lsl ip
    41f8:	cb120000 	blgt	484200 <__Stack_Size+0x483e00>
    41fc:	01000025 	tsteq	r0, r5, lsr #32
    4200:	00410c1e 	subeq	r0, r1, lr, lsl ip
    4204:	ea120000 	b	48420c <__Stack_Size+0x483e0c>
    4208:	01000022 	tsteq	r0, r2, lsr #32
    420c:	00410c1e 	subeq	r0, r1, lr, lsl ip
    4210:	74150000 	ldrvc	r0, [r5]
    4214:	0100706d 	tsteq	r0, sp, rrx
    4218:	00410c1e 	subeq	r0, r1, lr, lsl ip
    421c:	14000000 	strne	r0, [r0]
    4220:	000021f4 	strdeq	r2, [r0], -r4
    4224:	010bef01 	tsteq	fp, r1, lsl #30
    4228:	00061201 	andeq	r1, r6, r1, lsl #4
    422c:	21671100 	cmncs	r7, r0, lsl #2
    4230:	ed010000 	stc	0, cr0, [r1]
    4234:	00051e0b 	andeq	r1, r5, fp, lsl #28
    4238:	26cd1100 	strbcs	r1, [sp], r0, lsl #2
    423c:	ed010000 	stc	0, cr0, [r1]
    4240:	0000410b 	andeq	r4, r0, fp, lsl #2
    4244:	26681100 	strbtcs	r1, [r8], -r0, lsl #2
    4248:	ed010000 	stc	0, cr0, [r1]
    424c:	0000410b 	andeq	r4, r0, fp, lsl #2
    4250:	28aa1100 	stmiacs	sl!, {r8, ip}
    4254:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    4258:	0000410b 	andeq	r4, r0, fp, lsl #2
    425c:	25cb1200 	strbcs	r1, [fp, #512]
    4260:	f0010000 	undefined instruction 0xf0010000
    4264:	0000410b 	andeq	r4, r0, fp, lsl #2
    4268:	22ea1200 	rsccs	r1, sl, #0	; 0x0
    426c:	f0010000 	undefined instruction 0xf0010000
    4270:	0000410b 	andeq	r4, r0, fp, lsl #2
    4274:	01100000 	tsteq	r0, r0
    4278:	00002638 	andeq	r2, r0, r8, lsr r6
    427c:	010a6b01 	tsteq	sl, r1, lsl #22
    4280:	00063a01 	andeq	r3, r6, r1, lsl #20
    4284:	21671100 	cmncs	r7, r0, lsl #2
    4288:	6a010000 	bvs	44290 <__Stack_Size+0x43e90>
    428c:	00051e0a 	andeq	r1, r5, sl, lsl #28
    4290:	25b11100 	ldrcs	r1, [r1, #256]!
    4294:	6a010000 	bvs	4429c <__Stack_Size+0x43e9c>
    4298:	0000410a 	andeq	r4, r0, sl, lsl #2
    429c:	01100000 	tsteq	r0, r0
    42a0:	0000243f 	andeq	r2, r0, pc, lsr r4
    42a4:	010a8701 	tsteq	sl, r1, lsl #14
    42a8:	00066201 	andeq	r6, r6, r1, lsl #4
    42ac:	21671100 	cmncs	r7, r0, lsl #2
    42b0:	86010000 	strhi	r0, [r1], -r0
    42b4:	00051e0a 	andeq	r1, r5, sl, lsl #28
    42b8:	25b11100 	ldrcs	r1, [r1, #256]!
    42bc:	86010000 	strhi	r0, [r1], -r0
    42c0:	0000410a 	andeq	r4, r0, sl, lsl #2
    42c4:	ca140000 	bgt	5042cc <__Stack_Size+0x503ecc>
    42c8:	01000024 	tsteq	r0, r4, lsr #32
    42cc:	01010c4d 	tsteq	r1, sp, asr #24
    42d0:	000006c5 	andeq	r0, r0, r5, asr #13
    42d4:	00216711 	eoreq	r6, r1, r1, lsl r7
    42d8:	0c4b0100 	stfeqe	f0, [fp], {0}
    42dc:	0000051e 	andeq	r0, r0, lr, lsl r5
    42e0:	0026cd11 	eoreq	ip, r6, r1, lsl sp
    42e4:	0c4b0100 	stfeqe	f0, [fp], {0}
    42e8:	00000041 	andeq	r0, r0, r1, asr #32
    42ec:	00266811 	eoreq	r6, r6, r1, lsl r8
    42f0:	0c4b0100 	stfeqe	f0, [fp], {0}
    42f4:	00000041 	andeq	r0, r0, r1, asr #32
    42f8:	0028aa11 	eoreq	sl, r8, r1, lsl sl
    42fc:	0c4c0100 	stfeqe	f0, [ip], {0}
    4300:	00000041 	andeq	r0, r0, r1, asr #32
    4304:	0025d412 	eoreq	sp, r5, r2, lsl r4
    4308:	0c4e0100 	stfeqe	f0, [lr], {0}
    430c:	00000041 	andeq	r0, r0, r1, asr #32
    4310:	0022ea12 	eoreq	lr, r2, r2, lsl sl
    4314:	0c4e0100 	stfeqe	f0, [lr], {0}
    4318:	00000041 	andeq	r0, r0, r1, asr #32
    431c:	706d7415 	rsbvc	r7, sp, r5, lsl r4
    4320:	0c4e0100 	stfeqe	f0, [lr], {0}
    4324:	00000041 	andeq	r0, r0, r1, asr #32
    4328:	54011000 	strpl	r1, [r1]
    432c:	01000026 	tsteq	r0, r6, lsr #32
    4330:	01010aa3 	smlatbeq	r1, r3, sl, r0
    4334:	000006ed 	andeq	r0, r0, sp, ror #13
    4338:	00216711 	eoreq	r6, r1, r1, lsl r7
    433c:	0aa20100 	beq	fe884744 <SCS_BASE+0x1e876744>
    4340:	0000051e 	andeq	r0, r0, lr, lsl r5
    4344:	0025b111 	eoreq	fp, r5, r1, lsl r1
    4348:	0aa20100 	beq	fe884750 <SCS_BASE+0x1e876750>
    434c:	00000041 	andeq	r0, r0, r1, asr #32
    4350:	27b91400 	ldrcs	r1, [r9, r0, lsl #8]!
    4354:	7c010000 	stcvc	0, cr0, [r1], {0}
    4358:	5001010c 	andpl	r0, r1, ip, lsl #2
    435c:	11000007 	tstne	r0, r7
    4360:	00002167 	andeq	r2, r0, r7, ror #2
    4364:	1e0c7a01 	fmacsne	s14, s24, s2
    4368:	11000005 	tstne	r0, r5
    436c:	000026cd 	andeq	r2, r0, sp, asr #13
    4370:	410c7a01 	tstmi	ip, r1, lsl #20
    4374:	11000000 	tstne	r0, r0
    4378:	00002668 	andeq	r2, r0, r8, ror #12
    437c:	410c7a01 	tstmi	ip, r1, lsl #20
    4380:	11000000 	tstne	r0, r0
    4384:	000028aa 	andeq	r2, r0, sl, lsr #17
    4388:	410c7b01 	tstmi	ip, r1, lsl #22
    438c:	12000000 	andne	r0, r0, #0	; 0x0
    4390:	000025d4 	ldrdeq	r2, [r0], -r4
    4394:	410c7d01 	tstmi	ip, r1, lsl #26
    4398:	12000000 	andne	r0, r0, #0	; 0x0
    439c:	000022ea 	andeq	r2, r0, sl, ror #5
    43a0:	410c7d01 	tstmi	ip, r1, lsl #26
    43a4:	15000000 	strne	r0, [r0]
    43a8:	00706d74 	rsbseq	r6, r0, r4, ror sp
    43ac:	410c7d01 	tstmi	ip, r1, lsl #26
    43b0:	00000000 	andeq	r0, r0, r0
    43b4:	218d0110 	orrcs	r0, sp, r0, lsl r1
    43b8:	bf010000 	svclt	0x00010000
    43bc:	7801010a 	stmdavc	r1, {r1, r3, r8}
    43c0:	11000007 	tstne	r0, r7
    43c4:	00002167 	andeq	r2, r0, r7, ror #2
    43c8:	1e0abe01 	cdpne	14, 0, cr11, cr10, cr1, {0}
    43cc:	11000005 	tstne	r0, r5
    43d0:	000025b1 	strheq	r2, [r0], -r1
    43d4:	410abe01 	tstmi	sl, r1, lsl #28
    43d8:	00000000 	andeq	r0, r0, r0
    43dc:	247f0116 	ldrbtcs	r0, [pc], #278	; 43e4 <__Stack_Size+0x3fe4>
    43e0:	c7010000 	strgt	r0, [r1, -r0]
    43e4:	004db801 	subeq	fp, sp, r1, lsl #16
    43e8:	004e0c08 	subeq	r0, lr, r8, lsl #24
    43ec:	001acb08 	andseq	ip, sl, r8, lsl #22
    43f0:	0007b000 	andeq	fp, r7, r0
    43f4:	21671700 	cmncs	r7, r0, lsl #14
    43f8:	c6010000 	strgt	r0, [r1], -r0
    43fc:	0000051e 	andeq	r0, r0, lr, lsl r5
    4400:	00001aea 	andeq	r1, r0, sl, ror #21
    4404:	00234317 	eoreq	r4, r3, r7, lsl r3
    4408:	b0c60100 	sbclt	r0, r6, r0, lsl #2
    440c:	09000007 	stmdbeq	r0, {r0, r1, r2}
    4410:	0000001b 	andeq	r0, r0, fp, lsl r0
    4414:	03730413 	cmneq	r3, #318767104	; 0x13000000
    4418:	01160000 	tsteq	r6, r0
    441c:	0000210c 	andeq	r2, r0, ip, lsl #2
    4420:	0c01ee01 	stceq	14, cr14, [r1], {1}
    4424:	bc08004e 	stclt	0, cr0, [r8], {78}
    4428:	2708004e 	strcs	r0, [r8, -lr, asr #32]
    442c:	1b00001b 	blne	44a0 <__Stack_Size+0x40a0>
    4430:	17000008 	strne	r0, [r0, -r8]
    4434:	00002167 	andeq	r2, r0, r7, ror #2
    4438:	051eed01 	ldreq	lr, [lr, #-3329]
    443c:	1b520000 	blne	1484444 <__Stack_Size+0x1484044>
    4440:	55170000 	ldrpl	r0, [r7]
    4444:	01000025 	tsteq	r0, r5, lsr #32
    4448:	00081bed 	andeq	r1, r8, sp, ror #23
    444c:	001b7100 	andseq	r7, fp, r0, lsl #2
    4450:	26901800 	ldrcs	r1, [r0], r0, lsl #16
    4454:	ef010000 	svc	0x00010000
    4458:	00000041 	andeq	r0, r0, r1, asr #32
    445c:	00001b8f 	andeq	r1, r0, pc, lsl #23
    4460:	0022ea18 	eoreq	lr, r2, r8, lsl sl
    4464:	41ef0100 	mvnmi	r0, r0, lsl #2
    4468:	ad000000 	stcge	0, cr0, [r0]
    446c:	1800001b 	stmdane	r0, {r0, r1, r3, r4}
    4470:	00002875 	andeq	r2, r0, r5, ror r8
    4474:	0041ef01 	subeq	lr, r1, r1, lsl #30
    4478:	1c020000 	stcne	0, cr0, [r2], {0}
    447c:	13000000 	movwne	r0, #0	; 0x0
    4480:	0003f704 	andeq	pc, r3, r4, lsl #14
    4484:	d0011900 	andle	r1, r1, r0, lsl #18
    4488:	01000021 	tsteq	r0, r1, lsr #32
    448c:	bc010149 	stflts	f0, [r1], {73}
    4490:	7408004e 	strvc	r0, [r8], #-78
    4494:	3608004f 	strcc	r0, [r8], -pc, asr #32
    4498:	8c00001c 	stchi	0, cr0, [r0], {28}
    449c:	1a000008 	bne	44c4 <__Stack_Size+0x40c4>
    44a0:	00002167 	andeq	r2, r0, r7, ror #2
    44a4:	1e014801 	cdpne	8, 0, cr4, cr1, cr1, {0}
    44a8:	61000005 	tstvs	r0, r5
    44ac:	1a00001c 	bne	4524 <__Stack_Size+0x4124>
    44b0:	00002555 	andeq	r2, r0, r5, asr r5
    44b4:	1b014801 	blne	564c0 <__Stack_Size+0x560c0>
    44b8:	80000008 	andhi	r0, r0, r8
    44bc:	1b00001c 	blne	4534 <__Stack_Size+0x4134>
    44c0:	00002690 	muleq	r0, r0, r6
    44c4:	41014a01 	tstmi	r1, r1, lsl #20
    44c8:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    44cc:	1b00001c 	blne	4544 <__Stack_Size+0x4144>
    44d0:	000022ea 	andeq	r2, r0, sl, ror #5
    44d4:	41014a01 	tstmi	r1, r1, lsl #20
    44d8:	c7000000 	strgt	r0, [r0, -r0]
    44dc:	1b00001c 	blne	4554 <__Stack_Size+0x4154>
    44e0:	00002875 	andeq	r2, r0, r5, ror r8
    44e4:	41014a01 	tstmi	r1, r1, lsl #20
    44e8:	11000000 	tstne	r0, r0
    44ec:	0000001d 	andeq	r0, r0, sp, lsl r0
    44f0:	27d10119 	bfics	r0, r9, #2, #16
    44f4:	a5010000 	strge	r0, [r1]
    44f8:	4f740101 	svcmi	0x00740101
    44fc:	50280800 	eorpl	r0, r8, r0, lsl #16
    4500:	1d450800 	stclne	8, cr0, [r5]
    4504:	08f70000 	ldmeq	r7!, {}^
    4508:	671a0000 	ldrvs	r0, [sl, -r0]
    450c:	01000021 	tsteq	r0, r1, lsr #32
    4510:	051e01a4 	ldreq	r0, [lr, #-420]
    4514:	1d700000 	ldclne	0, cr0, [r0]
    4518:	551a0000 	ldrpl	r0, [sl]
    451c:	01000025 	tsteq	r0, r5, lsr #32
    4520:	081b01a4 	ldmdaeq	fp, {r2, r5, r7, r8}
    4524:	1d8f0000 	stcne	0, cr0, [pc]
    4528:	901b0000 	andsls	r0, fp, r0
    452c:	01000026 	tsteq	r0, r6, lsr #32
    4530:	004101a6 	subeq	r0, r1, r6, lsr #3
    4534:	1dad0000 	stcne	0, cr0, [sp]
    4538:	ea1b0000 	b	6c4540 <__Stack_Size+0x6c4140>
    453c:	01000022 	tsteq	r0, r2, lsr #32
    4540:	004101a6 	subeq	r0, r1, r6, lsr #3
    4544:	1dcb0000 	stclne	0, cr0, [fp]
    4548:	751b0000 	ldrvc	r0, [fp]
    454c:	01000028 	tsteq	r0, r8, lsr #32
    4550:	004101a6 	subeq	r0, r1, r6, lsr #3
    4554:	1e150000 	wxorne	wr0, wr5, wr0
    4558:	19000000 	stmdbne	r0, {}
    455c:	00252601 	eoreq	r2, r5, r1, lsl #12
    4560:	02010100 	andeq	r0, r1, #0	; 0x0
    4564:	00502801 	subseq	r2, r0, r1, lsl #16
    4568:	0050bc08 	subseq	fp, r0, r8, lsl #24
    456c:	001e4908 	andseq	r4, lr, r8, lsl #18
    4570:	00096200 	andeq	r6, r9, r0, lsl #4
    4574:	21671a00 	cmncs	r7, r0, lsl #20
    4578:	00010000 	andeq	r0, r1, r0
    457c:	00051e02 	andeq	r1, r5, r2, lsl #28
    4580:	001e7400 	andseq	r7, lr, r0, lsl #8
    4584:	25551a00 	ldrbcs	r1, [r5, #-2560]
    4588:	00010000 	andeq	r0, r1, r0
    458c:	00081b02 	andeq	r1, r8, r2, lsl #22
    4590:	001e9300 	andseq	r9, lr, r0, lsl #6
    4594:	26901b00 	ldrcs	r1, [r0], r0, lsl #22
    4598:	02010000 	andeq	r0, r1, #0	; 0x0
    459c:	00004102 	andeq	r4, r0, r2, lsl #2
    45a0:	001eb100 	andseq	fp, lr, r0, lsl #2
    45a4:	22ea1b00 	rsccs	r1, sl, #0	; 0x0
    45a8:	02010000 	andeq	r0, r1, #0	; 0x0
    45ac:	00004102 	andeq	r4, r0, r2, lsl #2
    45b0:	001eda00 	andseq	sp, lr, r0, lsl #20
    45b4:	28751b00 	ldmdacs	r5!, {r8, r9, fp, ip}^
    45b8:	02010000 	andeq	r0, r1, #0	; 0x0
    45bc:	00004102 	andeq	r4, r0, r2, lsl #2
    45c0:	001f0f00 	andseq	r0, pc, r0, lsl #30
    45c4:	01190000 	tsteq	r9, r0
    45c8:	0000289f 	muleq	r0, pc, r8
    45cc:	01024a01 	tsteq	r2, r1, lsl #20
    45d0:	080050bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, lr}
    45d4:	08005228 	stmdaeq	r0, {r3, r5, r9, ip, lr}
    45d8:	00001f38 	andeq	r1, r0, r8, lsr pc
    45dc:	00000b28 	andeq	r0, r0, r8, lsr #22
    45e0:	0021671a 	eoreq	r6, r1, sl, lsl r7
    45e4:	02490100 	subeq	r0, r9, #0	; 0x0
    45e8:	0000051e 	andeq	r0, r0, lr, lsl r5
    45ec:	00001f57 	andeq	r1, r0, r7, asr pc
    45f0:	0024b91a 	eoreq	fp, r4, sl, lsl r9
    45f4:	02490100 	subeq	r0, r9, #0	; 0x0
    45f8:	00000b28 	andeq	r0, r0, r8, lsr #22
    45fc:	00001f75 	andeq	r1, r0, r5, ror pc
    4600:	0005bb1c 	andeq	fp, r5, ip, lsl fp
    4604:	0000f800 	andeq	pc, r0, r0, lsl #16
    4608:	02560100 	subseq	r0, r6, #0	; 0x0
    460c:	000009d9 	ldrdeq	r0, [r0], -r9
    4610:	0005ed1d 	andeq	lr, r5, sp, lsl sp
    4614:	05e11d00 	strbeq	r1, [r1, #3328]!
    4618:	d51d0000 	ldrle	r0, [sp]
    461c:	1d000005 	stcne	0, cr0, [r0, #-20]
    4620:	000005c9 	andeq	r0, r0, r9, asr #11
    4624:	0001181e 	andeq	r1, r1, lr, lsl r8
    4628:	05f91f00 	ldrbeq	r1, [r9, #3840]!
    462c:	1f930000 	svcne	0x00930000
    4630:	051f0000 	ldreq	r0, [pc, #0]	; 4638 <__Stack_Size+0x4238>
    4634:	a6000006 	strge	r0, [r0], -r6
    4638:	0000001f 	andeq	r0, r0, pc, lsl r0
    463c:	06122000 	ldreq	r2, [r2], -r0
    4640:	51020000 	tstpl	r2, r0
    4644:	01380800 	teqeq	r8, r0, lsl #16
    4648:	5b010000 	blpl	44650 <__Stack_Size+0x44250>
    464c:	0009f802 	andeq	pc, r9, r2, lsl #16
    4650:	062d1d00 	strteq	r1, [sp], -r0, lsl #26
    4654:	211d0000 	tstcs	sp, r0
    4658:	00000006 	andeq	r0, r0, r6
    465c:	0005581c 	andeq	r5, r5, ip, lsl r8
    4660:	00015000 	andeq	r5, r1, r0
    4664:	02600100 	rsbeq	r0, r0, #0	; 0x0
    4668:	00000a3a 	andeq	r0, r0, sl, lsr sl
    466c:	00058a1d 	andeq	r8, r5, sp, lsl sl
    4670:	057e1d00 	ldrbeq	r1, [lr, #-3328]!
    4674:	721d0000 	andsvc	r0, sp, #0	; 0x0
    4678:	1d000005 	stcne	0, cr0, [r0, #-20]
    467c:	00000566 	andeq	r0, r0, r6, ror #10
    4680:	0001701e 	andeq	r7, r1, lr, lsl r0
    4684:	05961f00 	ldreq	r1, [r6, #3840]
    4688:	1fb90000 	svcne	0x00b90000
    468c:	a21f0000 	andsge	r0, pc, #0	; 0x0
    4690:	e2000005 	and	r0, r0, #5	; 0x5
    4694:	2100001f 	tstcs	r0, pc, lsl r0
    4698:	000005ae 	andeq	r0, r0, lr, lsr #11
    469c:	3a200000 	bcc	8046a4 <__Stack_Size+0x8042a4>
    46a0:	5e000006 	cdppl	0, 0, cr0, cr0, cr6, {0}
    46a4:	90080051 	andls	r0, r8, r1, asr r0
    46a8:	01000001 	tsteq	r0, r1
    46ac:	0a590265 	beq	1645048 <__Stack_Size+0x1644c48>
    46b0:	551d0000 	ldrpl	r0, [sp]
    46b4:	1d000006 	stcne	0, cr0, [r0, #-24]
    46b8:	00000649 	andeq	r0, r0, r9, asr #12
    46bc:	06622200 	strbteq	r2, [r2], -r0, lsl #4
    46c0:	51860000 	orrpl	r0, r6, r0
    46c4:	51bc0800 	undefined instruction 0x51bc0800
    46c8:	6a010800 	bvs	466d0 <__Stack_Size+0x462d0>
    46cc:	000aa302 	andeq	sl, sl, r2, lsl #6
    46d0:	06941d00 	ldreq	r1, [r4], r0, lsl #26
    46d4:	881d0000 	ldmdahi	sp, {}
    46d8:	1d000006 	stcne	0, cr0, [r0, #-24]
    46dc:	0000067c 	andeq	r0, r0, ip, ror r6
    46e0:	0006701d 	andeq	r7, r6, sp, lsl r0
    46e4:	51862300 	orrpl	r2, r6, r0, lsl #6
    46e8:	51bc0800 	undefined instruction 0x51bc0800
    46ec:	a01f0800 	andsge	r0, pc, r0, lsl #16
    46f0:	f5000006 	undefined instruction 0xf5000006
    46f4:	1f00001f 	svcne	0x0000001f
    46f8:	000006ac 	andeq	r0, r0, ip, lsr #13
    46fc:	00002008 	andeq	r2, r0, r8
    4700:	0006b821 	andeq	fp, r6, r1, lsr #16
    4704:	20000000 	andcs	r0, r0, r0
    4708:	000006c5 	andeq	r0, r0, r5, asr #13
    470c:	080051bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip, lr}
    4710:	000001a8 	andeq	r0, r0, r8, lsr #3
    4714:	c2026f01 	andgt	r6, r2, #4	; 0x4
    4718:	1d00000a 	stcne	0, cr0, [r0, #-40]
    471c:	000006e0 	andeq	r0, r0, r0, ror #13
    4720:	0006d41d 	andeq	sp, r6, sp, lsl r4
    4724:	ed220000 	stc	0, cr0, [r2]
    4728:	d2000006 	andle	r0, r0, #6	; 0x6
    472c:	0c080051 	stceq	0, cr0, [r8], {81}
    4730:	01080052 	qaddeq	r0, r2, r8
    4734:	0b0c0274 	bleq	30510c <__Stack_Size+0x304d0c>
    4738:	1f1d0000 	svcne	0x001d0000
    473c:	1d000007 	stcne	0, cr0, [r0, #-28]
    4740:	00000713 	andeq	r0, r0, r3, lsl r7
    4744:	0007071d 	andeq	r0, r7, sp, lsl r7
    4748:	06fb1d00 	ldrbteq	r1, [fp], r0, lsl #26
    474c:	d2230000 	eorle	r0, r3, #0	; 0x0
    4750:	0c080051 	stceq	0, cr0, [r8], {81}
    4754:	1f080052 	svcne	0x00080052
    4758:	0000072b 	andeq	r0, r0, fp, lsr #14
    475c:	0000201b 	andeq	r2, r0, fp, lsl r0
    4760:	0007371f 	andeq	r3, r7, pc, lsl r7
    4764:	00202e00 	eoreq	r2, r0, r0, lsl #28
    4768:	07432100 	strbeq	r2, [r3, -r0, lsl #2]
    476c:	00000000 	andeq	r0, r0, r0
    4770:	00075024 	andeq	r5, r7, r4, lsr #32
    4774:	00520c00 	subseq	r0, r2, r0, lsl #24
    4778:	0001c008 	andeq	ip, r1, r8
    477c:	02790100 	rsbseq	r0, r9, #0	; 0x0
    4780:	00076b1d 	andeq	r6, r7, sp, lsl fp
    4784:	075f1d00 	ldrbeq	r1, [pc, -r0, lsl #26]
    4788:	00000000 	andeq	r0, r0, r0
    478c:	04510413 	ldrbeq	r0, [r1], #-1043
    4790:	01190000 	tsteq	r9, r0
    4794:	00002856 	andeq	r2, r0, r6, asr r8
    4798:	01028b01 	tsteq	r2, r1, lsl #22
    479c:	08005228 	stmdaeq	r0, {r3, r5, r9, ip, lr}
    47a0:	08005382 	stmdaeq	r0, {r1, r7, r8, r9, ip, lr}
    47a4:	00002041 	andeq	r2, r0, r1, asr #32
    47a8:	00000d17 	andeq	r0, r0, r7, lsl sp
    47ac:	00216725 	eoreq	r6, r1, r5, lsr #14
    47b0:	028a0100 	addeq	r0, sl, #0	; 0x0
    47b4:	0000051e 	andeq	r0, r0, lr, lsl r5
    47b8:	b91a5001 	ldmdblt	sl, {r0, ip, lr}
    47bc:	01000024 	tsteq	r0, r4, lsr #32
    47c0:	0b28028a 	bleq	a051f0 <__Stack_Size+0xa04df0>
    47c4:	20600000 	rsbcs	r0, r0, r0
    47c8:	ef260000 	svc	0x00260000
    47cc:	01000026 	tsteq	r0, r6, lsr #32
    47d0:	0041028c 	subeq	r0, r1, ip, lsl #5
    47d4:	57010000 	strpl	r0, [r1, -r0]
    47d8:	00260c26 	eoreq	r0, r6, r6, lsr #24
    47dc:	028d0100 	addeq	r0, sp, #0	; 0x0
    47e0:	00000041 	andeq	r0, r0, r1, asr #32
    47e4:	bb225601 	bllt	899ff0 <__Stack_Size+0x899bf0>
    47e8:	4c000005 	stcmi	0, cr0, [r0], {5}
    47ec:	7e080052 	mcrvc	0, 0, r0, cr8, cr2, {2}
    47f0:	01080052 	qaddeq	r0, r2, r8
    47f4:	0bc702a9 	bleq	ff1c52a0 <SCS_BASE+0x1f1b72a0>
    47f8:	ed1d0000 	ldc	0, cr0, [sp]
    47fc:	1d000005 	stcne	0, cr0, [r0, #-20]
    4800:	000005e1 	andeq	r0, r0, r1, ror #11
    4804:	0005d51d 	andeq	sp, r5, sp, lsl r5
    4808:	05c91d00 	strbeq	r1, [r9, #3328]
    480c:	4c230000 	stcmi	0, cr0, [r3]
    4810:	7e080052 	mcrvc	0, 0, r0, cr8, cr2, {2}
    4814:	1f080052 	svcne	0x00080052
    4818:	000005f9 	strdeq	r0, [r0], -r9
    481c:	0000207e 	andeq	r2, r0, lr, ror r0
    4820:	0006051f 	andeq	r0, r6, pc, lsl r5
    4824:	00209100 	eoreq	r9, r0, r0, lsl #2
    4828:	20000000 	andcs	r0, r0, r0
    482c:	00000612 	andeq	r0, r0, r2, lsl r6
    4830:	0800527e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, ip, lr}
    4834:	000001d8 	ldrdeq	r0, [r0], -r8
    4838:	e602ad01 	str	sl, [r2], -r1, lsl #26
    483c:	1d00000b 	stcne	0, cr0, [r0, #-44]
    4840:	0000062d 	andeq	r0, r0, sp, lsr #12
    4844:	0006211d 	andeq	r2, r6, sp, lsl r1
    4848:	58220000 	stmdapl	r2!, {}
    484c:	96000005 	strls	r0, [r0], -r5
    4850:	cc080052 	stcgt	0, cr0, [r8], {82}
    4854:	01080052 	qaddeq	r0, r2, r8
    4858:	0c3002b0 	lfmeq	f0, 4, [r0], #-704
    485c:	8a1d0000 	bhi	744864 <__Stack_Size+0x744464>
    4860:	1d000005 	stcne	0, cr0, [r0, #-20]
    4864:	0000057e 	andeq	r0, r0, lr, ror r5
    4868:	0005721d 	andeq	r7, r5, sp, lsl r2
    486c:	05661d00 	strbeq	r1, [r6, #-3328]!
    4870:	96230000 	strtls	r0, [r3], -r0
    4874:	cc080052 	stcgt	0, cr0, [r8], {82}
    4878:	1f080052 	svcne	0x00080052
    487c:	00000596 	muleq	r0, r6, r5
    4880:	000020a4 	andeq	r2, r0, r4, lsr #1
    4884:	0005a21f 	andeq	sl, r5, pc, lsl r2
    4888:	0020c200 	eoreq	ip, r0, r0, lsl #4
    488c:	05ae2100 	streq	r2, [lr, #256]!
    4890:	00000000 	andeq	r0, r0, r0
    4894:	00063a22 	andeq	r3, r6, r2, lsr #20
    4898:	0052cc00 	subseq	ip, r2, r0, lsl #24
    489c:	0052e408 	subseq	lr, r2, r8, lsl #8
    48a0:	02b30108 	adcseq	r0, r3, #2	; 0x2
    48a4:	00000c4f 	andeq	r0, r0, pc, asr #24
    48a8:	0006551d 	andeq	r5, r6, sp, lsl r5
    48ac:	06491d00 	strbeq	r1, [r9], -r0, lsl #26
    48b0:	22000000 	andcs	r0, r0, #0	; 0x0
    48b4:	00000558 	andeq	r0, r0, r8, asr r5
    48b8:	080052e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip, lr}
    48bc:	0800531e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, ip, lr}
    48c0:	9902b801 	stmdbls	r2, {r0, fp, ip, sp, pc}
    48c4:	1d00000c 	stcne	0, cr0, [r0, #-48]
    48c8:	0000058a 	andeq	r0, r0, sl, lsl #11
    48cc:	00057e1d 	andeq	r7, r5, sp, lsl lr
    48d0:	05721d00 	ldrbeq	r1, [r2, #-3328]!
    48d4:	661d0000 	ldrvs	r0, [sp], -r0
    48d8:	23000005 	movwcs	r0, #5	; 0x5
    48dc:	080052e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, ip, lr}
    48e0:	0800531e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, ip, lr}
    48e4:	0005961f 	andeq	r9, r5, pc, lsl r6
    48e8:	0020e000 	eoreq	lr, r0, r0
    48ec:	05a21f00 	streq	r1, [r2, #3840]!
    48f0:	21090000 	tstcs	r9, r0
    48f4:	ae210000 	cdpge	0, 2, cr0, cr1, cr0, {0}
    48f8:	00000005 	andeq	r0, r0, r5
    48fc:	063a2000 	ldrteq	r2, [sl], -r0
    4900:	531e0000 	tstpl	lr, #0	; 0x0
    4904:	01f00800 	mvnseq	r0, r0, lsl #16
    4908:	bc010000 	stclt	0, cr0, [r1], {0}
    490c:	000cb802 	andeq	fp, ip, r2, lsl #16
    4910:	06551d00 	ldrbeq	r1, [r5], -r0, lsl #26
    4914:	491d0000 	ldmdbmi	sp, {}
    4918:	00000006 	andeq	r0, r0, r6
    491c:	0005bb22 	andeq	fp, r5, r2, lsr #22
    4920:	00533a00 	subseq	r3, r3, r0, lsl #20
    4924:	00536c08 	subseq	r6, r3, r8, lsl #24
    4928:	02bf0108 	adcseq	r0, pc, #2	; 0x2
    492c:	00000cfb 	strdeq	r0, [r0], -fp
    4930:	0005ed1d 	andeq	lr, r5, sp, lsl sp
    4934:	05e11d00 	strbeq	r1, [r1, #3328]!
    4938:	d51d0000 	ldrle	r0, [sp]
    493c:	1d000005 	stcne	0, cr0, [r0, #-20]
    4940:	000005c9 	andeq	r0, r0, r9, asr #11
    4944:	00533a23 	subseq	r3, r3, r3, lsr #20
    4948:	00536c08 	subseq	r6, r3, r8, lsl #24
    494c:	05f91f08 	ldrbeq	r1, [r9, #3848]!
    4950:	211c0000 	tstcs	ip, r0
    4954:	05270000 	streq	r0, [r7]!
    4958:	01000006 	tsteq	r0, r6
    495c:	28000052 	stmdacs	r0, {r1, r4, r6}
    4960:	00000612 	andeq	r0, r0, r2, lsl r6
    4964:	0800536c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, ip, lr}
    4968:	08005380 	stmdaeq	r0, {r7, r8, r9, ip, lr}
    496c:	1d02c201 	sfmne	f4, 1, [r2, #-4]
    4970:	0000062d 	andeq	r0, r0, sp, lsr #12
    4974:	0006211d 	andeq	r2, r6, sp, lsl r1
    4978:	29000000 	stmdbcs	r0, {}
    497c:	00270201 	eoreq	r0, r7, r1, lsl #4
    4980:	02d20100 	sbcseq	r0, r2, #0	; 0x0
    4984:	00538401 	subseq	r8, r3, r1, lsl #8
    4988:	0053a608 	subseq	sl, r3, r8, lsl #12
    498c:	4c5d0108 	ldfmie	f0, [sp], {8}
    4990:	2500000d 	strcs	r0, [r0, #-13]
    4994:	00002167 	andeq	r2, r0, r7, ror #2
    4998:	1e02d101 	mvfnes	f5, f1
    499c:	01000005 	tsteq	r0, r5
    49a0:	22d72550 	sbcscs	r2, r7, #335544320	; 0x14000000
    49a4:	d1010000 	tstle	r1, r0
    49a8:	000d4c02 	andeq	r4, sp, r2, lsl #24
    49ac:	00510100 	subseq	r0, r1, r0, lsl #2
    49b0:	04c70413 	strbeq	r0, [r7], #1043
    49b4:	01290000 	teqeq	r9, r0
    49b8:	00002781 	andeq	r2, r0, r1, lsl #15
    49bc:	0102ef01 	tsteq	r2, r1, lsl #30
    49c0:	080053a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip, lr}
    49c4:	080053be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, ip, lr}
    49c8:	0d795d01 	ldcleq	13, cr5, [r9, #-4]!
    49cc:	43250000 	teqmi	r5, #0	; 0x0
    49d0:	01000023 	tsteq	r0, r3, lsr #32
    49d4:	07b002ee 	ldreq	r0, [r0, lr, ror #5]!
    49d8:	50010000 	andpl	r0, r1, r0
    49dc:	bd012900 	stclt	9, cr2, [r1]
    49e0:	01000020 	tsteq	r0, r0, lsr #32
    49e4:	c0010301 	andgt	r0, r1, r1, lsl #6
    49e8:	d6080053 	undefined
    49ec:	01080053 	qaddeq	r0, r3, r8
    49f0:	000da05d 	andeq	sl, sp, sp, asr r0
    49f4:	25552500 	ldrbcs	r2, [r5, #-1280]
    49f8:	00010000 	andeq	r0, r1, r0
    49fc:	00081b03 	andeq	r1, r8, r3, lsl #22
    4a00:	00500100 	subseq	r0, r0, r0, lsl #2
    4a04:	1f760129 	svcne	0x00760129
    4a08:	16010000 	strne	r0, [r1], -r0
    4a0c:	53d80103 	bicspl	r0, r8, #-1073741824	; 0xc0000000
    4a10:	53f00800 	mvnspl	r0, #0	; 0x0
    4a14:	5d010800 	stcpl	8, cr0, [r1]
    4a18:	00000dc7 	andeq	r0, r0, r7, asr #27
    4a1c:	0024b925 	eoreq	fp, r4, r5, lsr #18
    4a20:	03150100 	tsteq	r5, #0	; 0x0
    4a24:	00000b28 	andeq	r0, r0, r8, lsr #22
    4a28:	29005001 	stmdbcs	r0, {r0, ip, lr}
    4a2c:	00280a01 	eoreq	r0, r8, r1, lsl #20
    4a30:	03280100 	teqeq	r8, #0	; 0x0
    4a34:	0053f001 	subseq	pc, r3, r1
    4a38:	00540408 	subseq	r0, r4, r8, lsl #8
    4a3c:	ee5d0108 	rdfe	f0, f5, #0.0
    4a40:	2500000d 	strcs	r0, [r0, #-13]
    4a44:	000022d7 	ldrdeq	r2, [r0], -r7
    4a48:	4c032701 	stcmi	7, cr2, [r3], {1}
    4a4c:	0100000d 	tsteq	r0, sp
    4a50:	01290050 	qsubeq	r0, r0, r9
    4a54:	00002897 	muleq	r0, r7, r8
    4a58:	01033d01 	tsteq	r3, r1, lsl #26
    4a5c:	08005404 	stmdaeq	r0, {r2, sl, ip, lr}
    4a60:	0800541e 	stmdaeq	r0, {r1, r2, r3, r4, sl, ip, lr}
    4a64:	0e235d01 	cdpeq	13, 2, cr5, cr3, cr1, {0}
    4a68:	67250000 	strvs	r0, [r5, -r0]!
    4a6c:	01000021 	tsteq	r0, r1, lsr #32
    4a70:	051e033c 	ldreq	r0, [lr, #-828]
    4a74:	50010000 	andpl	r0, r1, r0
    4a78:	00105125 	andseq	r5, r0, r5, lsr #2
    4a7c:	033c0100 	teqeq	ip, #0	; 0x0
    4a80:	000000a9 	andeq	r0, r0, r9, lsr #1
    4a84:	29005101 	stmdbcs	r0, {r0, r8, ip, lr}
    4a88:	0026dc01 	eoreq	sp, r6, r1, lsl #24
    4a8c:	03580100 	cmpeq	r8, #0	; 0x0
    4a90:	00542001 	subseq	r2, r4, r1
    4a94:	00543c08 	subseq	r3, r4, r8, lsl #24
    4a98:	585d0108 	ldmdapl	sp, {r3, r8}^
    4a9c:	2500000e 	strcs	r0, [r0, #-14]
    4aa0:	00002167 	andeq	r2, r0, r7, ror #2
    4aa4:	1e035701 	cdpne	7, 0, cr5, cr3, cr1, {0}
    4aa8:	01000005 	tsteq	r0, r5
    4aac:	10512550 	subsne	r2, r1, r0, asr r5
    4ab0:	57010000 	strpl	r0, [r1, -r0]
    4ab4:	0000a903 	andeq	sl, r0, r3, lsl #18
    4ab8:	00510100 	subseq	r0, r1, r0, lsl #2
    4abc:	27980129 	ldrcs	r0, [r8, r9, lsr #2]
    4ac0:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    4ac4:	543c0103 	ldrtpl	r0, [ip], #-259
    4ac8:	54540800 	ldrbpl	r0, [r4], #-2048
    4acc:	5d010800 	stcpl	8, cr0, [r1]
    4ad0:	00000e9b 	muleq	r0, fp, lr
    4ad4:	00216725 	eoreq	r6, r1, r5, lsr #14
    4ad8:	037d0100 	cmneq	sp, #0	; 0x0
    4adc:	0000051e 	andeq	r0, r0, lr, lsl r5
    4ae0:	7c255001 	stcvc	0, cr5, [r5], #-4
    4ae4:	01000028 	tsteq	r0, r8, lsr #32
    4ae8:	0041037d 	subeq	r0, r1, sp, ror r3
    4aec:	51010000 	tstpl	r1, r0
    4af0:	00105125 	andseq	r5, r0, r5, lsr #2
    4af4:	037d0100 	cmneq	sp, #0	; 0x0
    4af8:	000000a9 	andeq	r0, r0, r9, lsr #1
    4afc:	29005201 	stmdbcs	r0, {r0, r9, ip, lr}
    4b00:	00242d01 	eoreq	r2, r4, r1, lsl #26
    4b04:	03a10100 	undefined instruction 0x03a10100
    4b08:	00545401 	subseq	r5, r4, r1, lsl #8
    4b0c:	00545808 	subseq	r5, r4, r8, lsl #16
    4b10:	d05d0108 	subsle	r0, sp, r8, lsl #2
    4b14:	2500000e 	strcs	r0, [r0, #-14]
    4b18:	00002167 	andeq	r2, r0, r7, ror #2
    4b1c:	1e03a001 	cdpne	0, 0, cr10, cr3, cr1, {0}
    4b20:	01000005 	tsteq	r0, r5
    4b24:	25bb2550 	ldrcs	r2, [fp, #1360]!
    4b28:	a0010000 	andge	r0, r1, r0
    4b2c:	00004103 	andeq	r4, r0, r3, lsl #2
    4b30:	00510100 	subseq	r0, r1, r0, lsl #2
    4b34:	22920129 	addscs	r0, r2, #1073741834	; 0x4000000a
    4b38:	c0010000 	andgt	r0, r1, r0
    4b3c:	54580103 	ldrbpl	r0, [r8], #-259
    4b40:	54600800 	strbtpl	r0, [r0], #-2048
    4b44:	5d010800 	stcpl	8, cr0, [r1]
    4b48:	00000f15 	andeq	r0, r0, r5, lsl pc
    4b4c:	00216725 	eoreq	r6, r1, r5, lsr #14
    4b50:	03bf0100 	undefined instruction 0x03bf0100
    4b54:	0000051e 	andeq	r0, r0, lr, lsl r5
    4b58:	5f255001 	svcpl	0x00255001
    4b5c:	01000020 	tsteq	r0, r0, lsr #32
    4b60:	004103bf 	strheq	r0, [r1], #-63
    4b64:	51010000 	tstpl	r1, r0
    4b68:	00222f1a 	eoreq	r2, r2, sl, lsl pc
    4b6c:	03bf0100 	undefined instruction 0x03bf0100
    4b70:	00000041 	andeq	r0, r0, r1, asr #32
    4b74:	0000212f 	andeq	r2, r0, pc, lsr #2
    4b78:	76012900 	strvc	r2, [r1], -r0, lsl #18
    4b7c:	01000027 	tsteq	r0, r7, lsr #32
    4b80:	600103dd 	ldrdvs	r0, [r1], -sp
    4b84:	78080054 	stmdavc	r8, {r2, r4, r6}
    4b88:	01080054 	qaddeq	r0, r4, r8
    4b8c:	000f585d 	andeq	r5, pc, sp, asr r8
    4b90:	21672500 	cmncs	r7, r0, lsl #10
    4b94:	dc010000 	stcle	0, cr0, [r1], {0}
    4b98:	00051e03 	andeq	r1, r5, r3, lsl #28
    4b9c:	25500100 	ldrbcs	r0, [r0, #-256]
    4ba0:	0000238f 	andeq	r2, r0, pc, lsl #7
    4ba4:	4103dc01 	tstmi	r3, r1, lsl #24
    4ba8:	01000000 	tsteq	r0, r0
    4bac:	10512551 	subsne	r2, r1, r1, asr r5
    4bb0:	dc010000 	stcle	0, cr0, [r1], {0}
    4bb4:	0000a903 	andeq	sl, r0, r3, lsl #18
    4bb8:	00520100 	subseq	r0, r2, r0, lsl #2
    4bbc:	26200129 	strtcs	r0, [r0], -r9, lsr #2
    4bc0:	f9010000 	undefined instruction 0xf9010000
    4bc4:	54780103 	ldrbtpl	r0, [r8], #-259
    4bc8:	54860800 	strpl	r0, [r6], #2048
    4bcc:	5d010800 	stcpl	8, cr0, [r1]
    4bd0:	00000f7f 	andeq	r0, r0, pc, ror pc
    4bd4:	00216725 	eoreq	r6, r1, r5, lsr #14
    4bd8:	03f80100 	mvnseq	r0, #0	; 0x0
    4bdc:	0000051e 	andeq	r0, r0, lr, lsl r5
    4be0:	29005001 	stmdbcs	r0, {r0, ip, lr}
    4be4:	00226001 	eoreq	r6, r2, r1
    4be8:	040f0100 	streq	r0, [pc], #256	; 4bf0 <__Stack_Size+0x47f0>
    4bec:	00548801 	subseq	r8, r4, r1, lsl #16
    4bf0:	0054a208 	subseq	sl, r4, r8, lsl #4
    4bf4:	e45d0108 	ldrb	r0, [sp], #-264
    4bf8:	2500000f 	strcs	r0, [r0, #-15]
    4bfc:	00002167 	andeq	r2, r0, r7, ror #2
    4c00:	1e040e01 	cdpne	14, 0, cr0, cr4, cr1, {0}
    4c04:	01000005 	tsteq	r0, r5
    4c08:	20481a50 	subcs	r1, r8, r0, asr sl
    4c0c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    4c10:	00004104 	andeq	r4, r0, r4, lsl #2
    4c14:	00214200 	eoreq	r4, r1, r0, lsl #4
    4c18:	05242800 	streq	r2, [r4, #-2048]!
    4c1c:	54880000 	strpl	r0, [r8]
    4c20:	54960800 	ldrpl	r0, [r6], #2048
    4c24:	15010800 	strne	r0, [r1, #-2048]
    4c28:	053f1d04 	ldreq	r1, [pc, #-3332]!	; 3f2c <__Stack_Size+0x3b2c>
    4c2c:	331d0000 	tstcc	sp, #0	; 0x0
    4c30:	23000005 	movwcs	r0, #5	; 0x5
    4c34:	08005488 	stmdaeq	r0, {r3, r7, sl, ip, lr}
    4c38:	08005496 	stmdaeq	r0, {r1, r2, r4, r7, sl, ip, lr}
    4c3c:	00054b1f 	andeq	r4, r5, pc, lsl fp
    4c40:	00215500 	eoreq	r5, r1, r0, lsl #10
    4c44:	00000000 	andeq	r0, r0, r0
    4c48:	27210119 	undefined
    4c4c:	2f010000 	svccs	0x00010000
    4c50:	54a40104 	strtpl	r0, [r4], #260
    4c54:	55360800 	ldrpl	r0, [r6, #-2048]!
    4c58:	21730800 	cmncs	r3, r0, lsl #16
    4c5c:	10f80000 	rscsne	r0, r8, r0
    4c60:	67250000 	strvs	r0, [r5, -r0]!
    4c64:	01000021 	tsteq	r0, r1, lsr #32
    4c68:	051e042d 	ldreq	r0, [lr, #-1069]
    4c6c:	50010000 	andpl	r0, r1, r0
    4c70:	0024661a 	eoreq	r6, r4, sl, lsl r6
    4c74:	042d0100 	strteq	r0, [sp], #-256
    4c78:	00000041 	andeq	r0, r0, r1, asr #32
    4c7c:	00002192 	muleq	r0, r2, r1
    4c80:	0026cd1a 	eoreq	ip, r6, sl, lsl sp
    4c84:	042e0100 	strteq	r0, [lr], #-256
    4c88:	00000041 	andeq	r0, r0, r1, asr #32
    4c8c:	000021b0 	strheq	r2, [r0], -r0
    4c90:	0028ae1a 	eoreq	sl, r8, sl, lsl lr
    4c94:	042e0100 	strteq	r0, [lr], #-256
    4c98:	00000041 	andeq	r0, r0, r1, asr #32
    4c9c:	000021ce 	andeq	r2, r0, lr, asr #3
    4ca0:	00055822 	andeq	r5, r5, r2, lsr #16
    4ca4:	0054b000 	subseq	fp, r4, r0
    4ca8:	0054e608 	subseq	lr, r4, r8, lsl #12
    4cac:	04390108 	ldrteq	r0, [r9], #-264
    4cb0:	00001086 	andeq	r1, r0, r6, lsl #1
    4cb4:	00058a1d 	andeq	r8, r5, sp, lsl sl
    4cb8:	057e1d00 	ldrbeq	r1, [lr, #-3328]!
    4cbc:	721d0000 	andsvc	r0, sp, #0	; 0x0
    4cc0:	1d000005 	stcne	0, cr0, [r0, #-20]
    4cc4:	00000566 	andeq	r0, r0, r6, ror #10
    4cc8:	0054b023 	subseq	fp, r4, r3, lsr #32
    4ccc:	0054e608 	subseq	lr, r4, r8, lsl #12
    4cd0:	05961f08 	ldreq	r1, [r6, #3848]
    4cd4:	21ec0000 	mvncs	r0, r0
    4cd8:	a21f0000 	andsge	r0, pc, #0	; 0x0
    4cdc:	15000005 	strne	r0, [r0, #-5]
    4ce0:	21000022 	tstcs	r0, r2, lsr #32
    4ce4:	000005ae 	andeq	r0, r0, lr, lsr #11
    4ce8:	bb220000 	bllt	884cf0 <__Stack_Size+0x8848f0>
    4cec:	e6000005 	str	r0, [r0], -r5
    4cf0:	1a080054 	bne	204e48 <__Stack_Size+0x204a48>
    4cf4:	01080055 	qaddeq	r0, r5, r8
    4cf8:	10c9043d 	sbcne	r0, r9, sp, lsr r4
    4cfc:	ed1d0000 	ldc	0, cr0, [sp]
    4d00:	1d000005 	stcne	0, cr0, [r0, #-20]
    4d04:	000005e1 	andeq	r0, r0, r1, ror #11
    4d08:	0005d51d 	andeq	sp, r5, sp, lsl r5
    4d0c:	05c91d00 	strbeq	r1, [r9, #3328]
    4d10:	e6230000 	strt	r0, [r3], -r0
    4d14:	1a080054 	bne	204e6c <__Stack_Size+0x204a6c>
    4d18:	1f080055 	svcne	0x00080055
    4d1c:	000005f9 	strdeq	r0, [r0], -r9
    4d20:	00002233 	andeq	r2, r0, r3, lsr r2
    4d24:	00060527 	andeq	r0, r6, r7, lsr #10
    4d28:	00520100 	subseq	r0, r2, r0, lsl #2
    4d2c:	05242800 	streq	r2, [r4, #-2048]!
    4d30:	551a0000 	ldrpl	r0, [sl]
    4d34:	552a0800 	strpl	r0, [sl, #-2048]!
    4d38:	41010800 	tstmi	r1, r0, lsl #16
    4d3c:	053f1d04 	ldreq	r1, [pc, #-3332]!	; 4040 <__Stack_Size+0x3c40>
    4d40:	331d0000 	tstcc	sp, #0	; 0x0
    4d44:	23000005 	movwcs	r0, #5	; 0x5
    4d48:	0800551a 	stmdaeq	r0, {r1, r3, r4, r8, sl, ip, lr}
    4d4c:	0800552a 	stmdaeq	r0, {r1, r3, r5, r8, sl, ip, lr}
    4d50:	00054b1f 	andeq	r4, r5, pc, lsl fp
    4d54:	00224600 	eoreq	r4, r2, r0, lsl #12
    4d58:	00000000 	andeq	r0, r0, r0
    4d5c:	26780129 	ldrbtcs	r0, [r8], -r9, lsr #2
    4d60:	5d010000 	stcpl	0, cr0, [r1]
    4d64:	55380104 	ldrpl	r0, [r8, #-260]!
    4d68:	55600800 	strbpl	r0, [r0, #-2048]!
    4d6c:	5d010800 	stcpl	8, cr0, [r1]
    4d70:	00001193 	muleq	r0, r3, r1
    4d74:	00216725 	eoreq	r6, r1, r5, lsr #14
    4d78:	045b0100 	ldrbeq	r0, [fp], #-256
    4d7c:	0000051e 	andeq	r0, r0, lr, lsl r5
    4d80:	6b1a5001 	blvs	698d8c <__Stack_Size+0x69898c>
    4d84:	01000020 	tsteq	r0, r0, lsr #32
    4d88:	0041045b 	subeq	r0, r1, fp, asr r4
    4d8c:	22590000 	subscs	r0, r9, #0	; 0x0
    4d90:	431a0000 	tstmi	sl, #0	; 0x0
    4d94:	01000028 	tsteq	r0, r8, lsr #32
    4d98:	0041045b 	subeq	r0, r1, fp, asr r4
    4d9c:	226c0000 	rsbcs	r0, ip, #0	; 0x0
    4da0:	f71a0000 	undefined instruction 0xf71a0000
    4da4:	01000023 	tsteq	r0, r3, lsr #32
    4da8:	0041045c 	subeq	r0, r1, ip, asr r4
    4dac:	227f0000 	rsbscs	r0, pc, #0	; 0x0
    4db0:	4d260000 	stcmi	0, cr0, [r6]
    4db4:	01000021 	tsteq	r0, r1, lsr #32
    4db8:	0041045e 	subeq	r0, r1, lr, asr r4
    4dbc:	53010000 	movwpl	r0, #4096	; 0x1000
    4dc0:	0004d228 	andeq	sp, r4, r8, lsr #4
    4dc4:	00553800 	subseq	r3, r5, r0, lsl #16
    4dc8:	00554e08 	subseq	r4, r5, r8, lsl #28
    4dcc:	04670108 	strbteq	r0, [r7], #-264
    4dd0:	0005051d 	andeq	r0, r5, sp, lsl r5
    4dd4:	04f91d00 	ldrbteq	r1, [r9], #3328
    4dd8:	ed1d0000 	ldc	0, cr0, [sp]
    4ddc:	1d000004 	stcne	0, cr0, [r0, #-16]
    4de0:	000004e1 	andeq	r0, r0, r1, ror #9
    4de4:	00553823 	subseq	r3, r5, r3, lsr #16
    4de8:	00554e08 	subseq	r4, r5, r8, lsl #28
    4dec:	05112708 	ldreq	r2, [r1, #-1800]
    4df0:	52010000 	andpl	r0, r1, #0	; 0x0
    4df4:	29000000 	stmdbcs	r0, {}
    4df8:	0021dc01 	eoreq	sp, r1, r1, lsl #24
    4dfc:	048f0100 	streq	r0, [pc], #256	; 4e04 <__Stack_Size+0x4a04>
    4e00:	00556001 	subseq	r6, r5, r1
    4e04:	00558208 	subseq	r8, r5, r8, lsl #4
    4e08:	205d0108 	subscs	r0, sp, r8, lsl #2
    4e0c:	25000012 	strcs	r0, [r0, #-18]
    4e10:	00002167 	andeq	r2, r0, r7, ror #2
    4e14:	1e048d01 	cdpne	13, 0, cr8, cr4, cr1, {0}
    4e18:	01000005 	tsteq	r0, r5
    4e1c:	206b1a50 	rsbcs	r1, fp, r0, asr sl
    4e20:	8d010000 	stchi	0, cr0, [r1]
    4e24:	00004104 	andeq	r4, r0, r4, lsl #2
    4e28:	00229200 	eoreq	r9, r2, r0, lsl #4
    4e2c:	28431a00 	stmdacs	r3, {r9, fp, ip}^
    4e30:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    4e34:	00004104 	andeq	r4, r0, r4, lsl #2
    4e38:	0022a500 	eoreq	sl, r2, r0, lsl #10
    4e3c:	23f71a00 	mvnscs	r1, #0	; 0x0
    4e40:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    4e44:	00004104 	andeq	r4, r0, r4, lsl #2
    4e48:	0022b800 	eoreq	fp, r2, r0, lsl #16
    4e4c:	04d22800 	ldrbeq	r2, [r2], #2048
    4e50:	55600000 	strbpl	r0, [r0]!
    4e54:	55760800 	ldrbpl	r0, [r6, #-2048]!
    4e58:	97010800 	strls	r0, [r1, -r0, lsl #16]
    4e5c:	05051d04 	streq	r1, [r5, #-3332]
    4e60:	f91d0000 	undefined instruction 0xf91d0000
    4e64:	1d000004 	stcne	0, cr0, [r0, #-16]
    4e68:	000004ed 	andeq	r0, r0, sp, ror #9
    4e6c:	0004e11d 	andeq	lr, r4, sp, lsl r1
    4e70:	55602300 	strbpl	r2, [r0, #-768]!
    4e74:	55760800 	ldrbpl	r0, [r6, #-2048]!
    4e78:	11270800 	teqne	r7, r0, lsl #16
    4e7c:	01000005 	tsteq	r0, r5
    4e80:	00000052 	andeq	r0, r0, r2, asr r0
    4e84:	0004d22a 	andeq	sp, r4, sl, lsr #4
    4e88:	00558400 	subseq	r8, r5, r0, lsl #8
    4e8c:	00559c08 	subseq	r9, r5, r8, lsl #24
    4e90:	5b5d0108 	blpl	17452b8 <__Stack_Size+0x1744eb8>
    4e94:	2b000012 	blcs	4ee4 <__Stack_Size+0x4ae4>
    4e98:	000004e1 	andeq	r0, r0, r1, ror #9
    4e9c:	ed2c5001 	stc	0, cr5, [ip, #-4]!
    4ea0:	cb000004 	blgt	4eb8 <__Stack_Size+0x4ab8>
    4ea4:	2c000022 	stccs	0, cr0, [r0], {34}
    4ea8:	000004f9 	strdeq	r0, [r0], -r9
    4eac:	000022de 	ldrdeq	r2, [r0], -lr
    4eb0:	0005052b 	andeq	r0, r5, fp, lsr #10
    4eb4:	27530100 	ldrbcs	r0, [r3, -r0, lsl #2]
    4eb8:	00000511 	andeq	r0, r0, r1, lsl r5
    4ebc:	29005201 	stmdbcs	r0, {r0, r9, ip, lr}
    4ec0:	0028e801 	eoreq	lr, r8, r1, lsl #16
    4ec4:	04d70100 	ldrbeq	r0, [r7], #256
    4ec8:	00559c01 	subseq	r9, r5, r1, lsl #24
    4ecc:	0055a208 	subseq	sl, r5, r8, lsl #4
    4ed0:	9e5d0108 	rdflse	f0, f5, #0.0
    4ed4:	25000012 	strcs	r0, [r0, #-18]
    4ed8:	00002167 	andeq	r2, r0, r7, ror #2
    4edc:	1e04d601 	cfmadd32ne	mvax0, mvfx13, mvfx4, mvfx1
    4ee0:	01000005 	tsteq	r0, r5
    4ee4:	26422550 	undefined
    4ee8:	d6010000 	strle	r0, [r1], -r0
    4eec:	00004104 	andeq	r4, r0, r4, lsl #2
    4ef0:	25510100 	ldrbcs	r0, [r1, #-256]
    4ef4:	000023c9 	andeq	r2, r0, r9, asr #7
    4ef8:	4104d601 	tstmi	r4, r1, lsl #12
    4efc:	01000000 	tsteq	r0, r0
    4f00:	01290052 	qsubeq	r0, r2, r9
    4f04:	000024f0 	strdeq	r2, [r0], -r0
    4f08:	0104f301 	tstpeq	r4, r1, lsl #6
    4f0c:	080055a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip, lr}
    4f10:	080055b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, ip, lr}
    4f14:	12e55d01 	rscne	r5, r5, #64	; 0x40
    4f18:	67250000 	strvs	r0, [r5, -r0]!
    4f1c:	01000021 	tsteq	r0, r1, lsr #32
    4f20:	051e04f2 	ldreq	r0, [lr, #-1266]
    4f24:	50010000 	andpl	r0, r1, r0
    4f28:	00037a1a 	andeq	r7, r3, sl, lsl sl
    4f2c:	04f20100 	ldrbteq	r0, [r2], #256
    4f30:	00000041 	andeq	r0, r0, r1, asr #32
    4f34:	000022f1 	strdeq	r2, [r0], -r1
    4f38:	0021bd1b 	eoreq	fp, r1, fp, lsl sp
    4f3c:	04f40100 	ldrbteq	r0, [r4], #256
    4f40:	00000041 	andeq	r0, r0, r1, asr #32
    4f44:	00002304 	andeq	r2, r0, r4, lsl #6
    4f48:	05242a00 	streq	r2, [r4, #-2560]!
    4f4c:	55b40000 	ldrpl	r0, [r4]!
    4f50:	55c40800 	strbpl	r0, [r4, #2048]
    4f54:	5d010800 	stcpl	8, cr0, [r1]
    4f58:	00001312 	andeq	r1, r0, r2, lsl r3
    4f5c:	0005332b 	andeq	r3, r5, fp, lsr #6
    4f60:	2c500100 	ldfcse	f0, [r0], {0}
    4f64:	0000053f 	andeq	r0, r0, pc, lsr r5
    4f68:	00002322 	andeq	r2, r0, r2, lsr #6
    4f6c:	00054b1f 	andeq	r4, r5, pc, lsl fp
    4f70:	00233500 	eoreq	r3, r3, r0, lsl #10
    4f74:	01190000 	tsteq	r9, r0
    4f78:	000024d5 	ldrdeq	r2, [r0], -r5
    4f7c:	01054701 	tsteq	r5, r1, lsl #14
    4f80:	080055c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, ip, lr}
    4f84:	0800560a 	stmdaeq	r0, {r1, r3, r9, sl, ip, lr}
    4f88:	00002353 	andeq	r2, r0, r3, asr r3
    4f8c:	00001395 	muleq	r0, r5, r3
    4f90:	00216725 	eoreq	r6, r1, r5, lsr #14
    4f94:	05450100 	strbeq	r0, [r5, #-256]
    4f98:	0000051e 	andeq	r0, r0, lr, lsl r5
    4f9c:	9d1a5001 	ldcls	0, cr5, [sl, #-4]
    4fa0:	01000023 	tsteq	r0, r3, lsr #32
    4fa4:	00410545 	subeq	r0, r1, r5, asr #10
    4fa8:	23720000 	cmncs	r2, #0	; 0x0
    4fac:	2d1a0000 	ldccs	0, cr0, [sl]
    4fb0:	01000021 	tsteq	r0, r1, lsr #32
    4fb4:	00410546 	subeq	r0, r1, r6, asr #10
    4fb8:	23850000 	orrcs	r0, r5, #0	; 0x0
    4fbc:	7d250000 	stcvc	0, cr0, [r5]
    4fc0:	01000021 	tsteq	r0, r1, lsr #32
    4fc4:	00410546 	subeq	r0, r1, r6, asr #10
    4fc8:	53010000 	movwpl	r0, #4096	; 0x1000
    4fcc:	00214d1b 	eoreq	r4, r1, fp, lsl sp
    4fd0:	05480100 	strbeq	r0, [r8, #-256]
    4fd4:	00000041 	andeq	r0, r0, r1, asr #32
    4fd8:	00002398 	muleq	r0, r8, r3
    4fdc:	0025cb26 	eoreq	ip, r5, r6, lsr #22
    4fe0:	05490100 	strbeq	r0, [r9, #-256]
    4fe4:	00000041 	andeq	r0, r0, r1, asr #32
    4fe8:	ea265401 	b	999ff4 <__Stack_Size+0x999bf4>
    4fec:	01000022 	tsteq	r0, r2, lsr #32
    4ff0:	0041054a 	subeq	r0, r1, sl, asr #10
    4ff4:	52010000 	andpl	r0, r1, #0	; 0x0
    4ff8:	a5012900 	strge	r2, [r1, #-2304]
    4ffc:	01000027 	tsteq	r0, r7, lsr #32
    5000:	0c010580 	cfstr32eq	mvfx0, [r1], {128}
    5004:	1c080056 	stcne	0, cr0, [r8], {86}
    5008:	01080056 	qaddeq	r0, r6, r8
    500c:	0013dc5d 	andseq	sp, r3, sp, asr ip
    5010:	21672500 	cmncs	r7, r0, lsl #10
    5014:	7f010000 	svcvc	0x00010000
    5018:	00051e05 	andeq	r1, r5, r5, lsl #28
    501c:	1a500100 	bne	1405424 <__Stack_Size+0x1405024>
    5020:	0000216c 	andeq	r2, r0, ip, ror #2
    5024:	41057f01 	tstmi	r5, r1, lsl #30
    5028:	b6000000 	strlt	r0, [r0], -r0
    502c:	1b000023 	blne	50c0 <__Stack_Size+0x4cc0>
    5030:	000025cb 	andeq	r2, r0, fp, asr #11
    5034:	41058101 	tstmi	r5, r1, lsl #2
    5038:	c9000000 	stmdbgt	r0, {}
    503c:	00000023 	andeq	r0, r0, r3, lsr #32
    5040:	20a90129 	adccs	r0, r9, r9, lsr #2
    5044:	a2010000 	andge	r0, r1, #0	; 0x0
    5048:	561c0105 	ldrpl	r0, [ip], -r5, lsl #2
    504c:	56300800 	ldrtpl	r0, [r0], -r0, lsl #16
    5050:	5d010800 	stcpl	8, cr0, [r1]
    5054:	00001421 	andeq	r1, r0, r1, lsr #8
    5058:	00216725 	eoreq	r6, r1, r5, lsr #14
    505c:	05a10100 	streq	r0, [r1, #256]!
    5060:	0000051e 	andeq	r0, r0, lr, lsl r5
    5064:	6c255001 	stcvs	0, cr5, [r5], #-4
    5068:	01000021 	tsteq	r0, r1, lsr #32
    506c:	004105a1 	subeq	r0, r1, r1, lsr #11
    5070:	51010000 	tstpl	r1, r0
    5074:	0025cb1b 	eoreq	ip, r5, fp, lsl fp
    5078:	05a30100 	streq	r0, [r3, #256]!
    507c:	00000041 	andeq	r0, r0, r1, asr #32
    5080:	000023e7 	andeq	r2, r0, r7, ror #7
    5084:	83012900 	movwhi	r2, #6400	; 0x1900
    5088:	01000028 	tsteq	r0, r8, lsr #32
    508c:	300105c4 	andcc	r0, r1, r4, asr #11
    5090:	40080056 	andmi	r0, r8, r6, asr r0
    5094:	01080056 	qaddeq	r0, r6, r8
    5098:	0014685d 	andseq	r6, r4, sp, asr r8
    509c:	21672500 	cmncs	r7, r0, lsl #10
    50a0:	c3010000 	movwgt	r0, #4096	; 0x1000
    50a4:	00051e05 	andeq	r1, r5, r5, lsl #28
    50a8:	1a500100 	bne	14054b0 <__Stack_Size+0x14050b0>
    50ac:	0000216c 	andeq	r2, r0, ip, ror #2
    50b0:	4105c301 	tstmi	r5, r1, lsl #6
    50b4:	05000000 	streq	r0, [r0]
    50b8:	1b000024 	blne	5150 <__Stack_Size+0x4d50>
    50bc:	000025d4 	ldrdeq	r2, [r0], -r4
    50c0:	4105c501 	tstmi	r5, r1, lsl #10
    50c4:	18000000 	stmdane	r0, {}
    50c8:	00000024 	andeq	r0, r0, r4, lsr #32
    50cc:	25320129 	ldrcs	r0, [r2, #-297]!
    50d0:	e6010000 	str	r0, [r1], -r0
    50d4:	56400105 	strbpl	r0, [r0], -r5, lsl #2
    50d8:	56540800 	ldrbpl	r0, [r4], -r0, lsl #16
    50dc:	5d010800 	stcpl	8, cr0, [r1]
    50e0:	000014ad 	andeq	r1, r0, sp, lsr #9
    50e4:	00216725 	eoreq	r6, r1, r5, lsr #14
    50e8:	05e50100 	strbeq	r0, [r5, #256]!
    50ec:	0000051e 	andeq	r0, r0, lr, lsl r5
    50f0:	6c255001 	stcvs	0, cr5, [r5], #-4
    50f4:	01000021 	tsteq	r0, r1, lsr #32
    50f8:	004105e5 	subeq	r0, r1, r5, ror #11
    50fc:	51010000 	tstpl	r1, r0
    5100:	0025d41b 	eoreq	sp, r5, fp, lsl r4
    5104:	05e70100 	strbeq	r0, [r7, #256]!
    5108:	00000041 	andeq	r0, r0, r1, asr #32
    510c:	00002436 	andeq	r2, r0, r6, lsr r4
    5110:	a0012900 	andge	r2, r1, r0, lsl #18
    5114:	01000022 	tsteq	r0, r2, lsr #32
    5118:	54010603 	strpl	r0, [r1], #-1539
    511c:	6e080056 	mcrvs	0, 0, r0, cr8, cr6, {2}
    5120:	01080056 	qaddeq	r0, r6, r8
    5124:	0014e25d 	andseq	lr, r4, sp, asr r2
    5128:	21672500 	cmncs	r7, r0, lsl #10
    512c:	02010000 	andeq	r0, r1, #0	; 0x0
    5130:	00051e06 	andeq	r1, r5, r6, lsl #28
    5134:	25500100 	ldrbcs	r0, [r0, #-256]
    5138:	00001051 	andeq	r1, r0, r1, asr r0
    513c:	a9060201 	stmdbge	r6, {r0, r9}
    5140:	01000000 	tsteq	r0, r0
    5144:	01290051 	qsubeq	r0, r1, r9
    5148:	000025e9 	andeq	r2, r0, r9, ror #11
    514c:	01061e01 	tsteq	r6, r1, lsl #28
    5150:	08005670 	stmdaeq	r0, {r4, r5, r6, r9, sl, ip, lr}
    5154:	0800568a 	stmdaeq	r0, {r1, r3, r7, r9, sl, ip, lr}
    5158:	15175d01 	ldrne	r5, [r7, #-3329]
    515c:	67250000 	strvs	r0, [r5, -r0]!
    5160:	01000021 	tsteq	r0, r1, lsr #32
    5164:	051e061d 	ldreq	r0, [lr, #-1565]
    5168:	50010000 	andpl	r0, r1, r0
    516c:	00105125 	andseq	r5, r0, r5, lsr #2
    5170:	061d0100 	ldreq	r0, [sp], -r0, lsl #2
    5174:	000000a9 	andeq	r0, r0, r9, lsr #1
    5178:	29005101 	stmdbcs	r0, {r0, r8, ip, lr}
    517c:	0020f101 	eoreq	pc, r0, r1, lsl #2
    5180:	063a0100 	ldrteq	r0, [sl], -r0, lsl #2
    5184:	00568c01 	subseq	r8, r6, r1, lsl #24
    5188:	0056a608 	subseq	sl, r6, r8, lsl #12
    518c:	4c5d0108 	ldfmie	f0, [sp], {8}
    5190:	25000015 	strcs	r0, [r0, #-21]
    5194:	00002167 	andeq	r2, r0, r7, ror #2
    5198:	1e063901 	cdpne	9, 0, cr3, cr6, cr1, {0}
    519c:	01000005 	tsteq	r0, r5
    51a0:	10512550 	subsne	r2, r1, r0, asr r5
    51a4:	39010000 	stmdbcc	r1, {}
    51a8:	0000a906 	andeq	sl, r0, r6, lsl #18
    51ac:	00510100 	subseq	r0, r1, r0, lsl #2
    51b0:	25f70129 	ldrbcs	r0, [r7, #297]!
    51b4:	56010000 	strpl	r0, [r1], -r0
    51b8:	56a80106 	strtpl	r0, [r8], r6, lsl #2
    51bc:	56c20800 	strbpl	r0, [r2], r0, lsl #16
    51c0:	5d010800 	stcpl	8, cr0, [r1]
    51c4:	00001581 	andeq	r1, r0, r1, lsl #11
    51c8:	00216725 	eoreq	r6, r1, r5, lsr #14
    51cc:	06550100 	ldrbeq	r0, [r5], -r0, lsl #2
    51d0:	0000051e 	andeq	r0, r0, lr, lsl r5
    51d4:	51255001 	teqpl	r5, r1
    51d8:	01000010 	tsteq	r0, r0, lsl r0
    51dc:	00a90655 	adceq	r0, r9, r5, asr r6
    51e0:	51010000 	tstpl	r1, r0
    51e4:	18012900 	stmdane	r1, {r8, fp, sp}
    51e8:	01000021 	tsteq	r0, r1, lsr #32
    51ec:	c4010675 	strgt	r0, [r1], #-1653
    51f0:	d4080056 	strle	r0, [r8], #-86
    51f4:	01080056 	qaddeq	r0, r6, r8
    51f8:	0015c85d 	andseq	ip, r5, sp, asr r8
    51fc:	21672500 	cmncs	r7, r0, lsl #10
    5200:	74010000 	strvc	r0, [r1]
    5204:	00051e06 	andeq	r1, r5, r6, lsl #28
    5208:	1a500100 	bne	1405610 <__Stack_Size+0x1405210>
    520c:	00001fe3 	andeq	r1, r0, r3, ror #31
    5210:	41067401 	tstmi	r6, r1, lsl #8
    5214:	54000000 	strpl	r0, [r0]
    5218:	1b000024 	blne	52b0 <__Stack_Size+0x4eb0>
    521c:	000025cb 	andeq	r2, r0, fp, asr #11
    5220:	41067601 	tstmi	r6, r1, lsl #12
    5224:	67000000 	strvs	r0, [r0, -r0]
    5228:	00000024 	andeq	r0, r0, r4, lsr #32
    522c:	20940129 	addscs	r0, r4, r9, lsr #2
    5230:	96010000 	strls	r0, [r1], -r0
    5234:	56d40106 	ldrbpl	r0, [r4], r6, lsl #2
    5238:	56e80800 	strbtpl	r0, [r8], r0, lsl #16
    523c:	5d010800 	stcpl	8, cr0, [r1]
    5240:	0000160d 	andeq	r1, r0, sp, lsl #12
    5244:	00216725 	eoreq	r6, r1, r5, lsr #14
    5248:	06950100 	ldreq	r0, [r5], r0, lsl #2
    524c:	0000051e 	andeq	r0, r0, lr, lsl r5
    5250:	e3255001 	teq	r5, #1	; 0x1
    5254:	0100001f 	tsteq	r0, pc, lsl r0
    5258:	00410695 	umaaleq	r0, r1, r5, r6
    525c:	51010000 	tstpl	r1, r0
    5260:	0025cb1b 	eoreq	ip, r5, fp, lsl fp
    5264:	06970100 	ldreq	r0, [r7], r0, lsl #2
    5268:	00000041 	andeq	r0, r0, r1, asr #32
    526c:	00002485 	andeq	r2, r0, r5, lsl #9
    5270:	f1012900 	undefined instruction 0xf1012900
    5274:	0100001f 	tsteq	r0, pc, lsl r0
    5278:	e80106b7 	stmda	r1, {r0, r1, r2, r4, r5, r7, r9, sl}
    527c:	f8080056 	undefined instruction 0xf8080056
    5280:	01080056 	qaddeq	r0, r6, r8
    5284:	0016545d 	andseq	r5, r6, sp, asr r4
    5288:	21672500 	cmncs	r7, r0, lsl #10
    528c:	b6010000 	strlt	r0, [r1], -r0
    5290:	00051e06 	andeq	r1, r5, r6, lsl #28
    5294:	1a500100 	bne	140569c <__Stack_Size+0x140529c>
    5298:	00001fe3 	andeq	r1, r0, r3, ror #31
    529c:	4106b601 	tstmi	r6, r1, lsl #12
    52a0:	a3000000 	movwge	r0, #0	; 0x0
    52a4:	1b000024 	blne	533c <__Stack_Size+0x4f3c>
    52a8:	000025d4 	ldrdeq	r2, [r0], -r4
    52ac:	4106b801 	tstmi	r6, r1, lsl #16
    52b0:	b6000000 	strlt	r0, [r0], -r0
    52b4:	00000024 	andeq	r0, r0, r4, lsr #32
    52b8:	1f870129 	svcne	0x00870129
    52bc:	d8010000 	stmdale	r1, {}
    52c0:	56f80106 	ldrbtpl	r0, [r8], r6, lsl #2
    52c4:	570c0800 	strpl	r0, [ip, -r0, lsl #16]
    52c8:	5d010800 	stcpl	8, cr0, [r1]
    52cc:	00001699 	muleq	r0, r9, r6
    52d0:	00216725 	eoreq	r6, r1, r5, lsr #14
    52d4:	06d70100 	ldrbeq	r0, [r7], r0, lsl #2
    52d8:	0000051e 	andeq	r0, r0, lr, lsl r5
    52dc:	e3255001 	teq	r5, #1	; 0x1
    52e0:	0100001f 	tsteq	r0, pc, lsl r0
    52e4:	004106d7 	ldrdeq	r0, [r1], #-103
    52e8:	51010000 	tstpl	r1, r0
    52ec:	0025d41b 	eoreq	sp, r5, fp, lsl r4
    52f0:	06d90100 	ldrbeq	r0, [r9], r0, lsl #2
    52f4:	00000041 	andeq	r0, r0, r1, asr #32
    52f8:	000024d4 	ldrdeq	r2, [r0], -r4
    52fc:	7a012900 	bvc	4f704 <__Stack_Size+0x4f304>
    5300:	01000025 	tsteq	r0, r5, lsr #32
    5304:	0c0106f8 	stceq	6, cr0, [r1], {248}
    5308:	1c080057 	stcne	0, cr0, [r8], {87}
    530c:	01080057 	qaddeq	r0, r7, r8
    5310:	0016e05d 	andseq	lr, r6, sp, asr r0
    5314:	21672500 	cmncs	r7, r0, lsl #10
    5318:	f7010000 	undefined instruction 0xf7010000
    531c:	00051e06 	andeq	r1, r5, r6, lsl #28
    5320:	1a500100 	bne	1405728 <__Stack_Size+0x1405328>
    5324:	00002023 	andeq	r2, r0, r3, lsr #32
    5328:	4106f701 	tstpmi	r6, r1, lsl #14
    532c:	f2000000 	vhadd.s8	d0, d0, d0
    5330:	1b000024 	blne	53c8 <__Stack_Size+0x4fc8>
    5334:	000025cb 	andeq	r2, r0, fp, asr #11
    5338:	4106f901 	tstpmi	r6, r1, lsl #18
    533c:	05000000 	streq	r0, [r0]
    5340:	00000025 	andeq	r0, r0, r5, lsr #32
    5344:	23070129 	movwcs	r0, #28969	; 0x7129
    5348:	19010000 	stmdbne	r1, {}
    534c:	571c0107 	ldrpl	r0, [ip, -r7, lsl #2]
    5350:	57300800 	ldrpl	r0, [r0, -r0, lsl #16]!
    5354:	5d010800 	stcpl	8, cr0, [r1]
    5358:	00001725 	andeq	r1, r0, r5, lsr #14
    535c:	00216725 	eoreq	r6, r1, r5, lsr #14
    5360:	07180100 	ldreq	r0, [r8, -r0, lsl #2]
    5364:	0000051e 	andeq	r0, r0, lr, lsl r5
    5368:	23255001 	teqcs	r5, #1	; 0x1
    536c:	01000020 	tsteq	r0, r0, lsr #32
    5370:	00410718 	subeq	r0, r1, r8, lsl r7
    5374:	51010000 	tstpl	r1, r0
    5378:	0025cb1b 	eoreq	ip, r5, fp, lsl fp
    537c:	071a0100 	ldreq	r0, [sl, -r0, lsl #2]
    5380:	00000041 	andeq	r0, r0, r1, asr #32
    5384:	00002523 	andeq	r2, r0, r3, lsr #10
    5388:	55012900 	strpl	r2, [r1, #-2304]
    538c:	01000021 	tsteq	r0, r1, lsr #32
    5390:	3001073a 	andcc	r0, r1, sl, lsr r7
    5394:	40080057 	andmi	r0, r8, r7, asr r0
    5398:	01080057 	qaddeq	r0, r7, r8
    539c:	00176c5d 	andseq	r6, r7, sp, asr ip
    53a0:	21672500 	cmncs	r7, r0, lsl #10
    53a4:	39010000 	stmdbcc	r1, {}
    53a8:	00051e07 	andeq	r1, r5, r7, lsl #28
    53ac:	1a500100 	bne	14057b4 <__Stack_Size+0x14053b4>
    53b0:	00002023 	andeq	r2, r0, r3, lsr #32
    53b4:	41073901 	tstmi	r7, r1, lsl #18
    53b8:	41000000 	tstmi	r0, r0
    53bc:	1b000025 	blne	5458 <__Stack_Size+0x5058>
    53c0:	000025d4 	ldrdeq	r2, [r0], -r4
    53c4:	41073b01 	tstmi	r7, r1, lsl #22
    53c8:	54000000 	strpl	r0, [r0]
    53cc:	00000025 	andeq	r0, r0, r5, lsr #32
    53d0:	1f4e0129 	svcne	0x004e0129
    53d4:	5b010000 	blpl	453dc <__Stack_Size+0x44fdc>
    53d8:	57400107 	strbpl	r0, [r0, -r7, lsl #2]
    53dc:	57540800 	ldrbpl	r0, [r4, -r0, lsl #16]
    53e0:	5d010800 	stcpl	8, cr0, [r1]
    53e4:	000017b1 	strheq	r1, [r0], -r1
    53e8:	00216725 	eoreq	r6, r1, r5, lsr #14
    53ec:	075a0100 	ldrbeq	r0, [sl, -r0, lsl #2]
    53f0:	0000051e 	andeq	r0, r0, lr, lsl r5
    53f4:	23255001 	teqcs	r5, #1	; 0x1
    53f8:	01000020 	tsteq	r0, r0, lsr #32
    53fc:	0041075a 	subeq	r0, r1, sl, asr r7
    5400:	51010000 	tstpl	r1, r0
    5404:	0025d41b 	eoreq	sp, r5, fp, lsl r4
    5408:	075c0100 	ldrbeq	r0, [ip, -r0, lsl #2]
    540c:	00000041 	andeq	r0, r0, r1, asr #32
    5410:	00002572 	andeq	r2, r0, r2, ror r5
    5414:	1d012900 	stcne	9, cr2, [r1]
    5418:	01000028 	tsteq	r0, r8, lsr #32
    541c:	5401077c 	strpl	r0, [r1], #-1916
    5420:	64080057 	strvs	r0, [r8], #-87
    5424:	01080057 	qaddeq	r0, r7, r8
    5428:	0017f85d 	andseq	pc, r7, sp, asr r8
    542c:	21672500 	cmncs	r7, r0, lsl #10
    5430:	7b010000 	blvc	45438 <__Stack_Size+0x45038>
    5434:	00051e07 	andeq	r1, r5, r7, lsl #28
    5438:	1a500100 	bne	1405840 <__Stack_Size+0x1405440>
    543c:	000023bd 	strheq	r2, [r0], -sp
    5440:	41077b01 	tstmi	r7, r1, lsl #22
    5444:	90000000 	andls	r0, r0, r0
    5448:	1b000025 	blne	54e4 <__Stack_Size+0x50e4>
    544c:	000025cb 	andeq	r2, r0, fp, asr #11
    5450:	41077d01 	tstmi	r7, r1, lsl #26
    5454:	a3000000 	movwge	r0, #0	; 0x0
    5458:	00000025 	andeq	r0, r0, r5, lsr #32
    545c:	27110129 	ldrcs	r0, [r1, -r9, lsr #2]
    5460:	9c010000 	stcls	0, cr0, [r1], {0}
    5464:	57640107 	strbpl	r0, [r4, -r7, lsl #2]!
    5468:	57740800 	ldrbpl	r0, [r4, -r0, lsl #16]!
    546c:	5d010800 	stcpl	8, cr0, [r1]
    5470:	0000183d 	andeq	r1, r0, sp, lsr r8
    5474:	00216725 	eoreq	r6, r1, r5, lsr #14
    5478:	079b0100 	ldreq	r0, [fp, r0, lsl #2]
    547c:	0000051e 	andeq	r0, r0, lr, lsl r5
    5480:	bd255001 	stclt	0, cr5, [r5, #-4]!
    5484:	01000023 	tsteq	r0, r3, lsr #32
    5488:	0041079b 	umaaleq	r0, r1, fp, r7
    548c:	51010000 	tstpl	r1, r0
    5490:	0025cb1b 	eoreq	ip, r5, fp, lsl fp
    5494:	079d0100 	ldreq	r0, [sp, r0, lsl #2]
    5498:	00000041 	andeq	r0, r0, r1, asr #32
    549c:	000025c1 	andeq	r2, r0, r1, asr #11
    54a0:	16012900 	strne	r2, [r1], -r0, lsl #18
    54a4:	01000025 	tsteq	r0, r5, lsr #32
    54a8:	740107bc 	strvc	r0, [r1], #-1980
    54ac:	84080057 	strhi	r0, [r8], #-87
    54b0:	01080057 	qaddeq	r0, r7, r8
    54b4:	0018845d 	andseq	r8, r8, sp, asr r4
    54b8:	21672500 	cmncs	r7, r0, lsl #10
    54bc:	bb010000 	bllt	454c4 <__Stack_Size+0x450c4>
    54c0:	00051e07 	andeq	r1, r5, r7, lsl #28
    54c4:	1a500100 	bne	14058cc <__Stack_Size+0x14054cc>
    54c8:	000023bd 	strheq	r2, [r0], -sp
    54cc:	4107bb01 	tstmi	r7, r1, lsl #22
    54d0:	df000000 	svcle	0x00000000
    54d4:	1b000025 	blne	5570 <__Stack_Size+0x5170>
    54d8:	000025d4 	ldrdeq	r2, [r0], -r4
    54dc:	4107bd01 	tstmi	r7, r1, lsl #26
    54e0:	f2000000 	vhadd.s8	d0, d0, d0
    54e4:	00000025 	andeq	r0, r0, r5, lsr #32
    54e8:	22500129 	subscs	r0, r0, #1073741834	; 0x4000000a
    54ec:	dc010000 	stcle	0, cr0, [r1], {0}
    54f0:	57840107 	strpl	r0, [r4, r7, lsl #2]
    54f4:	57940800 	ldrpl	r0, [r4, r0, lsl #16]
    54f8:	5d010800 	stcpl	8, cr0, [r1]
    54fc:	000018c9 	andeq	r1, r0, r9, asr #17
    5500:	00216725 	eoreq	r6, r1, r5, lsr #14
    5504:	07db0100 	ldrbeq	r0, [fp, r0, lsl #2]
    5508:	0000051e 	andeq	r0, r0, lr, lsl r5
    550c:	bd255001 	stclt	0, cr5, [r5, #-4]!
    5510:	01000023 	tsteq	r0, r3, lsr #32
    5514:	004107db 	ldrdeq	r0, [r1], #-123
    5518:	51010000 	tstpl	r1, r0
    551c:	0025d41b 	eoreq	sp, r5, fp, lsl r4
    5520:	07dd0100 	ldrbeq	r0, [sp, r0, lsl #2]
    5524:	00000041 	andeq	r0, r0, r1, asr #32
    5528:	00002610 	andeq	r2, r0, r0, lsl r6
    552c:	60012900 	andvs	r2, r1, r0, lsl #18
    5530:	0100001f 	tsteq	r0, pc, lsl r0
    5534:	940107fc 	strls	r0, [r1], #-2044
    5538:	a4080057 	strge	r0, [r8], #-87
    553c:	01080057 	qaddeq	r0, r7, r8
    5540:	0019105d 	andseq	r1, r9, sp, asr r0
    5544:	21672500 	cmncs	r7, r0, lsl #10
    5548:	fb010000 	blx	45552 <__Stack_Size+0x45152>
    554c:	00051e07 	andeq	r1, r5, r7, lsl #28
    5550:	1a500100 	bne	1405958 <__Stack_Size+0x1405558>
    5554:	00000076 	andeq	r0, r0, r6, ror r0
    5558:	4107fb01 	tstpmi	r7, r1, lsl #22
    555c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    5560:	1b000026 	blne	5600 <__Stack_Size+0x5200>
    5564:	000022ea 	andeq	r2, r0, sl, ror #5
    5568:	4107fd01 	tstpmi	r7, r1, lsl #26
    556c:	41000000 	tstmi	r0, r0
    5570:	00000026 	andeq	r0, r0, r6, lsr #32
    5574:	259a0129 	ldrcs	r0, [sl, #297]
    5578:	19010000 	stmdbne	r1, {}
    557c:	57a40108 	strpl	r0, [r4, r8, lsl #2]!
    5580:	57b40800 	ldrpl	r0, [r4, r0, lsl #16]!
    5584:	5d010800 	stcpl	8, cr0, [r1]
    5588:	00001957 	andeq	r1, r0, r7, asr r9
    558c:	00216725 	eoreq	r6, r1, r5, lsr #14
    5590:	08180100 	ldmdaeq	r8, {r8}
    5594:	0000051e 	andeq	r0, r0, lr, lsl r5
    5598:	031a5001 	tsteq	sl, #1	; 0x1
    559c:	01000003 	tsteq	r0, r3
    55a0:	00410818 	subeq	r0, r1, r8, lsl r8
    55a4:	265f0000 	ldrbcs	r0, [pc], -r0
    55a8:	ea1b0000 	b	6c55b0 <__Stack_Size+0x6c51b0>
    55ac:	01000022 	tsteq	r0, r2, lsr #32
    55b0:	0041081a 	subeq	r0, r1, sl, lsl r8
    55b4:	26720000 	ldrbtcs	r0, [r2], -r0
    55b8:	29000000 	stmdbcs	r0, {}
    55bc:	0028fc01 	eoreq	pc, r8, r1, lsl #24
    55c0:	08370100 	ldmdaeq	r7!, {r8}
    55c4:	0057b401 	subseq	fp, r7, r1, lsl #8
    55c8:	0057c808 	subseq	ip, r7, r8, lsl #16
    55cc:	9c5d0108 	ldflse	f0, [sp], {8}
    55d0:	25000019 	strcs	r0, [r0, #-25]
    55d4:	00002167 	andeq	r2, r0, r7, ror #2
    55d8:	1e083601 	cfmadd32ne	mvax0, mvfx3, mvfx8, mvfx1
    55dc:	01000005 	tsteq	r0, r5
    55e0:	00762550 	rsbseq	r2, r6, r0, asr r5
    55e4:	36010000 	strcc	r0, [r1], -r0
    55e8:	00004108 	andeq	r4, r0, r8, lsl #2
    55ec:	1b510100 	blne	14459f4 <__Stack_Size+0x14455f4>
    55f0:	000022ea 	andeq	r2, r0, sl, ror #5
    55f4:	41083801 	tstmi	r8, r1, lsl #16
    55f8:	90000000 	andls	r0, r0, r0
    55fc:	00000026 	andeq	r0, r0, r6, lsr #32
    5600:	27dd0129 	ldrbcs	r0, [sp, r9, lsr #2]
    5604:	54010000 	strpl	r0, [r1]
    5608:	57c80108 	strbpl	r0, [r8, r8, lsl #2]
    560c:	57dc0800 	ldrbpl	r0, [ip, r0, lsl #16]
    5610:	5d010800 	stcpl	8, cr0, [r1]
    5614:	000019e1 	andeq	r1, r0, r1, ror #19
    5618:	00216725 	eoreq	r6, r1, r5, lsr #14
    561c:	08530100 	ldmdaeq	r3, {r8}^
    5620:	0000051e 	andeq	r0, r0, lr, lsl r5
    5624:	03255001 	teqeq	r5, #1	; 0x1
    5628:	01000003 	tsteq	r0, r3
    562c:	00410853 	subeq	r0, r1, r3, asr r8
    5630:	51010000 	tstpl	r1, r0
    5634:	0022ea1b 	eoreq	lr, r2, fp, lsl sl
    5638:	08550100 	ldmdaeq	r5, {r8}^
    563c:	00000041 	andeq	r0, r0, r1, asr #32
    5640:	000026ae 	andeq	r2, r0, lr, lsr #13
    5644:	2d012900 	stccs	9, cr2, [r1]
    5648:	01000028 	tsteq	r0, r8, lsr #32
    564c:	dc010872 	stcle	8, cr0, [r1], {114}
    5650:	f0080057 	undefined instruction 0xf0080057
    5654:	01080057 	qaddeq	r0, r7, r8
    5658:	001a265d 	andseq	r2, sl, sp, asr r6
    565c:	21672500 	cmncs	r7, r0, lsl #10
    5660:	71010000 	tstvc	r1, r0
    5664:	00051e08 	andeq	r1, r5, r8, lsl #28
    5668:	25500100 	ldrbcs	r0, [r0, #-256]
    566c:	00000076 	andeq	r0, r0, r6, ror r0
    5670:	41087101 	tstmi	r8, r1, lsl #2
    5674:	01000000 	tsteq	r0, r0
    5678:	22ea1b51 	rsccs	r1, sl, #82944	; 0x14400
    567c:	73010000 	movwvc	r0, #4096	; 0x1000
    5680:	00004108 	andeq	r4, r0, r8, lsl #2
    5684:	0026cc00 	eoreq	ip, r6, r0, lsl #24
    5688:	01290000 	teqeq	r9, r0
    568c:	00001fcc 	andeq	r1, r0, ip, asr #31
    5690:	01088f01 	tsteq	r8, r1, lsl #30
    5694:	080057f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, ip, lr}
    5698:	08005804 	stmdaeq	r0, {r2, fp, ip, lr}
    569c:	1a6b5d01 	bne	1adcaa8 <__Stack_Size+0x1adc6a8>
    56a0:	67250000 	strvs	r0, [r5, -r0]!
    56a4:	01000021 	tsteq	r0, r1, lsr #32
    56a8:	051e088e 	ldreq	r0, [lr, #-2190]
    56ac:	50010000 	andpl	r0, r1, r0
    56b0:	00030325 	andeq	r0, r3, r5, lsr #6
    56b4:	088e0100 	stmeq	lr, {r8}
    56b8:	00000041 	andeq	r0, r0, r1, asr #32
    56bc:	ea1b5101 	b	6d9ac8 <__Stack_Size+0x6d96c8>
    56c0:	01000022 	tsteq	r0, r2, lsr #32
    56c4:	00410890 	umaaleq	r0, r1, r0, r8
    56c8:	26ea0000 	strbtcs	r0, [sl], r0
    56cc:	29000000 	stmdbcs	r0, {}
    56d0:	0027f401 	eoreq	pc, r7, r1, lsl #8
    56d4:	08ad0100 	stmiaeq	sp!, {r8}
    56d8:	00580401 	subseq	r0, r8, r1, lsl #8
    56dc:	00581808 	subseq	r1, r8, r8, lsl #16
    56e0:	b05d0108 	subslt	r0, sp, r8, lsl #2
    56e4:	2500001a 	strcs	r0, [r0, #-26]
    56e8:	00002167 	andeq	r2, r0, r7, ror #2
    56ec:	1e08ac01 	cdpne	12, 0, cr10, cr8, cr1, {0}
    56f0:	01000005 	tsteq	r0, r5
    56f4:	00762550 	rsbseq	r2, r6, r0, asr r5
    56f8:	ac010000 	stcge	0, cr0, [r1], {0}
    56fc:	00004108 	andeq	r4, r0, r8, lsl #2
    5700:	1b510100 	blne	1445b08 <__Stack_Size+0x1445708>
    5704:	000022ea 	andeq	r2, r0, sl, ror #5
    5708:	4108ae01 	tstmi	r8, r1, lsl #28
    570c:	08000000 	stmdaeq	r0, {}
    5710:	00000027 	andeq	r0, r0, r7, lsr #32
    5714:	23db0129 	bicscs	r0, fp, #1073741834	; 0x4000000a
    5718:	cf010000 	svcgt	0x00010000
    571c:	58180108 	ldmdapl	r8, {r3, r8}
    5720:	58380800 	ldmdapl	r8!, {fp}
    5724:	5d010800 	stcpl	8, cr0, [r1]
    5728:	00001af5 	strdeq	r1, [r0], -r5
    572c:	00216725 	eoreq	r6, r1, r5, lsr #14
    5730:	08ce0100 	stmiaeq	lr, {r8}^
    5734:	0000051e 	andeq	r0, r0, lr, lsl r5
    5738:	dd255001 	stcle	0, cr5, [r5, #-4]!
    573c:	01000025 	tsteq	r0, r5, lsr #32
    5740:	004108ce 	subeq	r0, r1, lr, asr #17
    5744:	51010000 	tstpl	r1, r0
    5748:	00264c1a 	eoreq	r4, r6, sl, lsl ip
    574c:	08ce0100 	stmiaeq	lr, {r8}^
    5750:	00000041 	andeq	r0, r0, r1, asr #32
    5754:	00002726 	andeq	r2, r0, r6, lsr #14
    5758:	7f012900 	svcvc	0x00012900
    575c:	01000020 	tsteq	r0, r0, lsr #32
    5760:	380108eb 	stmdacc	r1, {r0, r1, r3, r5, r6, r7, fp}
    5764:	58080058 	stmdapl	r8, {r3, r4, r6}
    5768:	01080058 	qaddeq	r0, r8, r8
    576c:	001b3a5d 	andseq	r3, fp, sp, asr sl
    5770:	21672500 	cmncs	r7, r0, lsl #10
    5774:	ea010000 	b	4577c <__Stack_Size+0x4537c>
    5778:	00051e08 	andeq	r1, r5, r8, lsl #28
    577c:	25500100 	ldrbcs	r0, [r0, #-256]
    5780:	000025dd 	ldrdeq	r2, [r0], -sp
    5784:	4108ea01 	tstmi	r8, r1, lsl #20
    5788:	01000000 	tsteq	r0, r0
    578c:	24531a51 	ldrbcs	r1, [r3], #-2641
    5790:	ea010000 	b	45798 <__Stack_Size+0x45398>
    5794:	00004108 	andeq	r4, r0, r8, lsl #2
    5798:	00273900 	eoreq	r3, r7, r0, lsl #18
    579c:	01190000 	tsteq	r9, r0
    57a0:	0000235a 	andeq	r2, r0, sl, asr r3
    57a4:	01091301 	tsteq	r9, r1, lsl #6
    57a8:	08005858 	stmdaeq	r0, {r3, r4, r6, fp, ip, lr}
    57ac:	080058c0 	stmdaeq	r0, {r6, r7, fp, ip, lr}
    57b0:	0000274c 	andeq	r2, r0, ip, asr #14
    57b4:	00001b85 	andeq	r1, r0, r5, lsl #23
    57b8:	0021671a 	eoreq	r6, r1, sl, lsl r7
    57bc:	09120100 	ldmdbeq	r2, {r8}
    57c0:	0000051e 	andeq	r0, r0, lr, lsl r5
    57c4:	0000276b 	andeq	r2, r0, fp, ror #14
    57c8:	0025dd1a 	eoreq	sp, r5, sl, lsl sp
    57cc:	09120100 	ldmdbeq	r2, {r8}
    57d0:	00000041 	andeq	r0, r0, r1, asr #32
    57d4:	0000278a 	andeq	r2, r0, sl, lsl #15
    57d8:	0004b01a 	andeq	fp, r4, sl, lsl r0
    57dc:	09120100 	ldmdbeq	r2, {r8}
    57e0:	00000041 	andeq	r0, r0, r1, asr #32
    57e4:	000027a8 	andeq	r2, r0, r8, lsr #15
    57e8:	90012900 	andls	r2, r1, r0, lsl #18
    57ec:	01000024 	tsteq	r0, r4, lsr #32
    57f0:	c0010939 	andgt	r0, r1, r9, lsr r9
    57f4:	da080058 	ble	20595c <__Stack_Size+0x20555c>
    57f8:	01080058 	qaddeq	r0, r8, r8
    57fc:	001bba5d 	andseq	fp, fp, sp, asr sl
    5800:	21672500 	cmncs	r7, r0, lsl #10
    5804:	38010000 	stmdacc	r1, {}
    5808:	00051e09 	andeq	r1, r5, r9, lsl #28
    580c:	25500100 	ldrbcs	r0, [r0, #-256]
    5810:	00001051 	andeq	r1, r0, r1, asr r0
    5814:	a9093801 	stmdbge	r9, {r0, fp, ip, sp}
    5818:	01000000 	tsteq	r0, r0
    581c:	01290051 	qsubeq	r0, r1, r9
    5820:	000020ce 	andeq	r2, r0, lr, asr #1
    5824:	01095601 	tsteq	r9, r1, lsl #12
    5828:	080058dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip, lr}
    582c:	080058f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, fp, ip, lr}
    5830:	1bef5d01 	blne	ffbdcc3c <SCS_BASE+0x1fbcec3c>
    5834:	67250000 	strvs	r0, [r5, -r0]!
    5838:	01000021 	tsteq	r0, r1, lsr #32
    583c:	051e0955 	ldreq	r0, [lr, #-2389]
    5840:	50010000 	andpl	r0, r1, r0
    5844:	0024a825 	eoreq	sl, r4, r5, lsr #16
    5848:	09550100 	ldmdbeq	r5, {r8}^
    584c:	00000041 	andeq	r0, r0, r1, asr #32
    5850:	29005101 	stmdbcs	r0, {r0, r8, ip, lr}
    5854:	00241801 	eoreq	r1, r4, r1, lsl #16
    5858:	09710100 	ldmdbeq	r1!, {r8}^
    585c:	0058f801 	subseq	pc, r8, r1, lsl #16
    5860:	00591208 	subseq	r1, r9, r8, lsl #4
    5864:	245d0108 	ldrbcs	r0, [sp], #-264
    5868:	2500001c 	strcs	r0, [r0, #-28]
    586c:	00002167 	andeq	r2, r0, r7, ror #2
    5870:	1e097001 	cdpne	0, 0, cr7, cr9, cr1, {0}
    5874:	01000005 	tsteq	r0, r5
    5878:	10512550 	subsne	r2, r1, r0, asr r5
    587c:	70010000 	andvc	r0, r1, r0
    5880:	0000a909 	andeq	sl, r0, r9, lsl #18
    5884:	00510100 	subseq	r0, r1, r0, lsl #2
    5888:	26990129 	ldrcs	r0, [r9], r9, lsr #2
    588c:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    5890:	59140109 	ldmdbpl	r4, {r0, r3, r8}
    5894:	592a0800 	stmdbpl	sl!, {fp}
    5898:	5d010800 	stcpl	8, cr0, [r1]
    589c:	00001c5b 	andeq	r1, r0, fp, asr ip
    58a0:	00216725 	eoreq	r6, r1, r5, lsr #14
    58a4:	098d0100 	stmibeq	sp, {r8}
    58a8:	0000051e 	andeq	r0, r0, lr, lsl r5
    58ac:	011a5001 	tsteq	sl, r1
    58b0:	01000021 	tsteq	r0, r1, lsr #32
    58b4:	0041098d 	subeq	r0, r1, sp, lsl #19
    58b8:	27c60000 	strbcs	r0, [r6, r0]
    58bc:	29000000 	stmdbcs	r0, {}
    58c0:	00232b01 	eoreq	r2, r3, r1, lsl #22
    58c4:	09af0100 	stmibeq	pc!, {r8}
    58c8:	00592c01 	subseq	r2, r9, r1, lsl #24
    58cc:	00594208 	subseq	r4, r9, r8, lsl #4
    58d0:	925d0108 	subsls	r0, sp, #2	; 0x2
    58d4:	2500001c 	strcs	r0, [r0, #-28]
    58d8:	00002167 	andeq	r2, r0, r7, ror #2
    58dc:	1e09ae01 	cdpne	14, 0, cr10, cr9, cr1, {0}
    58e0:	01000005 	tsteq	r0, r5
    58e4:	26b01a50 	ssatcs	r1, #17, r0, asr #20
    58e8:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    58ec:	00004109 	andeq	r4, r0, r9, lsl #2
    58f0:	0027d900 	eoreq	sp, r7, r0, lsl #18
    58f4:	01290000 	teqeq	r9, r0
    58f8:	00002566 	andeq	r2, r0, r6, ror #10
    58fc:	0109cb01 	tsteq	r9, r1, lsl #22
    5900:	08005944 	stmdaeq	r0, {r2, r6, r8, fp, ip, lr}
    5904:	0800595a 	stmdaeq	r0, {r1, r3, r4, r6, r8, fp, ip, lr}
    5908:	1cc95d01 	stclne	13, cr5, [r9], {1}
    590c:	67250000 	strvs	r0, [r5, -r0]!
    5910:	01000021 	tsteq	r0, r1, lsr #32
    5914:	051e09ca 	ldreq	r0, [lr, #-2506]
    5918:	50010000 	andpl	r0, r1, r0
    591c:	0021a11a 	eoreq	sl, r1, sl, lsl r1
    5920:	09ca0100 	stmibeq	sl, {r8}^
    5924:	00000041 	andeq	r0, r0, r1, asr #32
    5928:	000027ec 	andeq	r2, r0, ip, ror #15
    592c:	b7012900 	strlt	r2, [r1, -r0, lsl #18]
    5930:	01000028 	tsteq	r0, r8, lsr #32
    5934:	5c0109e5 	stcpl	9, cr0, [r1], {229}
    5938:	72080059 	andvc	r0, r8, #89	; 0x59
    593c:	01080059 	qaddeq	r0, r9, r8
    5940:	001d005d 	andseq	r0, sp, sp, asr r0
    5944:	21672500 	cmncs	r7, r0, lsl #10
    5948:	e4010000 	str	r0, [r1]
    594c:	00051e09 	andeq	r1, r5, r9, lsl #28
    5950:	1a500100 	bne	1405d58 <__Stack_Size+0x1405958>
    5954:	0000273c 	andeq	r2, r0, ip, lsr r7
    5958:	4109e401 	tstmi	r9, r1, lsl #8
    595c:	ff000000 	undefined instruction 0xff000000
    5960:	00000027 	andeq	r0, r0, r7, lsr #32
    5964:	23800129 	orrcs	r0, r0, #1073741834	; 0x4000000a
    5968:	fa010000 	blx	45970 <__Stack_Size+0x45570>
    596c:	59740109 	ldmdbpl	r4!, {r0, r3, r8}^
    5970:	59780800 	ldmdbpl	r8!, {fp}^
    5974:	5d010800 	stcpl	8, cr0, [r1]
    5978:	00001d35 	andeq	r1, r0, r5, lsr sp
    597c:	00216725 	eoreq	r6, r1, r5, lsr #14
    5980:	09f90100 	ldmibeq	r9!, {r8}^
    5984:	0000051e 	andeq	r0, r0, lr, lsl r5
    5988:	06255001 	strteq	r5, [r5], -r1
    598c:	0100001f 	tsteq	r0, pc, lsl r0
    5990:	004109f9 	strdeq	r0, [r1], #-153
    5994:	51010000 	tstpl	r1, r0
    5998:	64012900 	strvs	r2, [r1], #-2304
    599c:	01000027 	tsteq	r0, r7, lsr #32
    59a0:	78010a0b 	stmdavc	r1, {r0, r1, r3, r9, fp}
    59a4:	7c080059 	stcvc	0, cr0, [r8], {89}
    59a8:	01080059 	qaddeq	r0, r9, r8
    59ac:	001d6a5d 	andseq	r6, sp, sp, asr sl
    59b0:	21672500 	cmncs	r7, r0, lsl #10
    59b4:	0a010000 	beq	459bc <__Stack_Size+0x455bc>
    59b8:	00051e0a 	andeq	r1, r5, sl, lsl #28
    59bc:	25500100 	ldrbcs	r0, [r0, #-256]
    59c0:	0000276b 	andeq	r2, r0, fp, ror #14
    59c4:	410a0a01 	tstmi	sl, r1, lsl #20
    59c8:	01000000 	tsteq	r0, r0
    59cc:	01290051 	qsubeq	r0, r1, r9
    59d0:	00001f9c 	muleq	r0, ip, pc
    59d4:	010a1d01 	tsteq	sl, r1, lsl #26
    59d8:	0800597c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, ip, lr}
    59dc:	08005980 	stmdaeq	r0, {r7, r8, fp, ip, lr}
    59e0:	1d9f5d01 	ldcne	13, cr5, [pc, #4]
    59e4:	67250000 	strvs	r0, [r5, -r0]!
    59e8:	01000021 	tsteq	r0, r1, lsr #32
    59ec:	051e0a1c 	ldreq	r0, [lr, #-2588]
    59f0:	50010000 	andpl	r0, r1, r0
    59f4:	001fa325 	andseq	sl, pc, r5, lsr #6
    59f8:	0a1c0100 	beq	705e00 <__Stack_Size+0x705a00>
    59fc:	00000041 	andeq	r0, r0, r1, asr #32
    5a00:	29005101 	stmdbcs	r0, {r0, r8, ip, lr}
    5a04:	001fac01 	andseq	sl, pc, r1, lsl #24
    5a08:	0a2f0100 	beq	bc5e10 <__Stack_Size+0xbc5a10>
    5a0c:	00598001 	subseq	r8, r9, r1
    5a10:	00598408 	subseq	r8, r9, r8, lsl #8
    5a14:	d45d0108 	ldrble	r0, [sp], #-264
    5a18:	2500001d 	strcs	r0, [r0, #-29]
    5a1c:	00002167 	andeq	r2, r0, r7, ror #2
    5a20:	1e0a2e01 	cdpne	14, 0, cr2, cr10, cr1, {0}
    5a24:	01000005 	tsteq	r0, r5
    5a28:	1fb32550 	svcne	0x00b32550
    5a2c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    5a30:	0000410a 	andeq	r4, r0, sl, lsl #2
    5a34:	00510100 	subseq	r0, r1, r0, lsl #2
    5a38:	25060129 	strcs	r0, [r6, #-297]
    5a3c:	41010000 	tstmi	r1, r0
    5a40:	5984010a 	stmibpl	r4, {r1, r3, r8}
    5a44:	59880800 	stmibpl	r8, {fp}
    5a48:	5d010800 	stcpl	8, cr0, [r1]
    5a4c:	00001e09 	andeq	r1, r0, r9, lsl #28
    5a50:	00216725 	eoreq	r6, r1, r5, lsr #14
    5a54:	0a400100 	beq	1005e5c <__Stack_Size+0x1005a5c>
    5a58:	0000051e 	andeq	r0, r0, lr, lsl r5
    5a5c:	0d255001 	stceq	0, cr5, [r5, #-4]!
    5a60:	01000025 	tsteq	r0, r5, lsr #32
    5a64:	00410a40 	subeq	r0, r1, r0, asr #20
    5a68:	51010000 	tstpl	r1, r0
    5a6c:	bc012900 	stclt	9, cr2, [r1], {0}
    5a70:	0100001f 	tsteq	r0, pc, lsl r0
    5a74:	88010a53 	stmdahi	r1, {r0, r1, r4, r6, r9, fp}
    5a78:	8e080059 	mcrhi	0, 0, r0, cr8, cr9, {2}
    5a7c:	01080059 	qaddeq	r0, r9, r8
    5a80:	001e3e5d 	andseq	r3, lr, sp, asr lr
    5a84:	21672500 	cmncs	r7, r0, lsl #10
    5a88:	52010000 	andpl	r0, r1, #0	; 0x0
    5a8c:	00051e0a 	andeq	r1, r5, sl, lsl #28
    5a90:	25500100 	ldrbcs	r0, [r0, #-256]
    5a94:	00001fc3 	andeq	r1, r0, r3, asr #31
    5a98:	410a5201 	tstmi	sl, r1, lsl #4
    5a9c:	01000000 	tsteq	r0, r0
    5aa0:	122a0051 	eorne	r0, sl, #81	; 0x51
    5aa4:	90000006 	andls	r0, r0, r6
    5aa8:	a6080059 	undefined
    5aac:	01080059 	qaddeq	r0, r9, r8
    5ab0:	001e625d 	andseq	r6, lr, sp, asr r2
    5ab4:	06212b00 	strteq	r2, [r1], -r0, lsl #22
    5ab8:	50010000 	andpl	r0, r1, r0
    5abc:	00062d2c 	andeq	r2, r6, ip, lsr #26
    5ac0:	00281200 	eoreq	r1, r8, r0, lsl #4
    5ac4:	3a2a0000 	bcc	a85acc <__Stack_Size+0xa856cc>
    5ac8:	a8000006 	stmdage	r0, {r1, r2}
    5acc:	c2080059 	andgt	r0, r8, #89	; 0x59
    5ad0:	01080059 	qaddeq	r0, r9, r8
    5ad4:	001e845d 	andseq	r8, lr, sp, asr r4
    5ad8:	06492b00 	strbeq	r2, [r9], -r0, lsl #22
    5adc:	50010000 	andpl	r0, r1, r0
    5ae0:	0006552b 	andeq	r5, r6, fp, lsr #10
    5ae4:	00510100 	subseq	r0, r1, r0, lsl #2
    5ae8:	0006c52a 	andeq	ip, r6, sl, lsr #10
    5aec:	0059c400 	subseq	ip, r9, r0, lsl #8
    5af0:	0059da08 	subseq	sp, r9, r8, lsl #20
    5af4:	a85d0108 	ldmdage	sp, {r3, r8}^
    5af8:	2b00001e 	blcs	5b78 <__Stack_Size+0x5778>
    5afc:	000006d4 	ldrdeq	r0, [r0], -r4
    5b00:	e02c5001 	eor	r5, ip, r1
    5b04:	25000006 	strcs	r0, [r0, #-6]
    5b08:	00000028 	andeq	r0, r0, r8, lsr #32
    5b0c:	0007502a 	andeq	r5, r7, sl, lsr #32
    5b10:	0059dc00 	subseq	sp, r9, r0, lsl #24
    5b14:	0059f608 	subseq	pc, r9, r8, lsl #12
    5b18:	ca5d0108 	bgt	1745f40 <__Stack_Size+0x1745b40>
    5b1c:	2b00001e 	blcs	5b9c <__Stack_Size+0x579c>
    5b20:	0000075f 	andeq	r0, r0, pc, asr r7
    5b24:	6b2b5001 	blvs	ad9b30 <__Stack_Size+0xad9730>
    5b28:	01000007 	tsteq	r0, r7
    5b2c:	01290051 	qsubeq	r0, r1, r9
    5b30:	000022f2 	strdeq	r2, [r0], -r2
    5b34:	010ad901 	tsteq	sl, r1, lsl #18
    5b38:	080059f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip, lr}
    5b3c:	08005a08 	stmdaeq	r0, {r3, r9, fp, ip, lr}
    5b40:	1f015d01 	svcne	0x00015d01
    5b44:	67250000 	strvs	r0, [r5, -r0]!
    5b48:	01000021 	tsteq	r0, r1, lsr #32
    5b4c:	051e0ad8 	ldreq	r0, [lr, #-2776]
    5b50:	50010000 	andpl	r0, r1, r0
    5b54:	00202e1a 	eoreq	r2, r0, sl, lsl lr
    5b58:	0ad80100 	beq	ff605f60 <SCS_BASE+0x1f5f7f60>
    5b5c:	00000041 	andeq	r0, r0, r1, asr #32
    5b60:	00002838 	andeq	r2, r0, r8, lsr r8
    5b64:	3d012d00 	stccc	13, cr2, [r1]
    5b68:	01000021 	tsteq	r0, r1, lsr #32
    5b6c:	41010aed 	smlattmi	r1, sp, sl, r0
    5b70:	08000000 	stmdaeq	r0, {}
    5b74:	0e08005a 	mcreq	0, 0, r0, cr8, cr10, {2}
    5b78:	0108005a 	qaddeq	r0, sl, r8
    5b7c:	001f2e5d 	andseq	r2, pc, sp, asr lr
    5b80:	21671a00 	cmncs	r7, r0, lsl #20
    5b84:	ec010000 	stc	0, cr0, [r1], {0}
    5b88:	00051e0a 	andeq	r1, r5, sl, lsl #28
    5b8c:	00284b00 	eoreq	r4, r8, r0, lsl #22
    5b90:	012d0000 	teqeq	sp, r0
    5b94:	000021ff 	strdeq	r2, [r0], -pc
    5b98:	010afe01 	tstpeq	sl, r1, lsl #28
    5b9c:	00000041 	andeq	r0, r0, r1, asr #32
    5ba0:	08005a10 	stmdaeq	r0, {r4, r9, fp, ip, lr}
    5ba4:	08005a16 	stmdaeq	r0, {r1, r2, r4, r9, fp, ip, lr}
    5ba8:	1f5b5d01 	svcne	0x005b5d01
    5bac:	671a0000 	ldrvs	r0, [sl, -r0]
    5bb0:	01000021 	tsteq	r0, r1, lsr #32
    5bb4:	051e0afd 	ldreq	r0, [lr, #-2813]
    5bb8:	285e0000 	ldmdacs	lr, {}^
    5bbc:	2d000000 	stccs	0, cr0, [r0]
    5bc0:	00220f01 	eoreq	r0, r2, r1, lsl #30
    5bc4:	0b0f0100 	bleq	3c5fcc <__Stack_Size+0x3c5bcc>
    5bc8:	00004101 	andeq	r4, r0, r1, lsl #2
    5bcc:	005a1800 	subseq	r1, sl, r0, lsl #16
    5bd0:	005a1e08 	subseq	r1, sl, r8, lsl #28
    5bd4:	885d0108 	ldmdahi	sp, {r3, r8}^
    5bd8:	1a00001f 	bne	5c5c <__Stack_Size+0x585c>
    5bdc:	00002167 	andeq	r2, r0, r7, ror #2
    5be0:	1e0b0e01 	cdpne	14, 0, cr0, cr11, cr1, {0}
    5be4:	71000005 	tstvc	r0, r5
    5be8:	00000028 	andeq	r0, r0, r8, lsr #32
    5bec:	221f012d 	andscs	r0, pc, #1073741835	; 0x4000000b
    5bf0:	20010000 	andcs	r0, r1, r0
    5bf4:	0041010b 	subeq	r0, r1, fp, lsl #2
    5bf8:	5a200000 	bpl	805c00 <__Stack_Size+0x805800>
    5bfc:	5a280800 	bpl	a07c04 <__Stack_Size+0xa07804>
    5c00:	5d010800 	stcpl	8, cr0, [r1]
    5c04:	00001fb5 	strheq	r1, [r0], -r5
    5c08:	0021671a 	eoreq	r6, r1, sl, lsl r7
    5c0c:	0b1f0100 	bleq	7c6014 <__Stack_Size+0x7c5c14>
    5c10:	0000051e 	andeq	r0, r0, lr, lsl r5
    5c14:	00002884 	andeq	r2, r0, r4, lsl #17
    5c18:	46012d00 	strmi	r2, [r1], -r0, lsl #26
    5c1c:	01000025 	tsteq	r0, r5, lsr #32
    5c20:	41010b30 	tstmi	r1, r0, lsr fp
    5c24:	28000000 	stmdacs	r0, {}
    5c28:	2e08005a 	mcrcs	0, 0, r0, cr8, cr10, {2}
    5c2c:	0108005a 	qaddeq	r0, sl, r8
    5c30:	001fe25d 	andseq	lr, pc, sp, asr r2
    5c34:	21671a00 	cmncs	r7, r0, lsl #20
    5c38:	2f010000 	svccs	0x00010000
    5c3c:	00051e0b 	andeq	r1, r5, fp, lsl #28
    5c40:	00289700 	eoreq	r9, r8, r0, lsl #14
    5c44:	012d0000 	teqeq	sp, r0
    5c48:	000023e6 	andeq	r2, r0, r6, ror #7
    5c4c:	010b4001 	tsteq	fp, r1
    5c50:	00000041 	andeq	r0, r0, r1, asr #32
    5c54:	08005a30 	stmdaeq	r0, {r4, r5, r9, fp, ip, lr}
    5c58:	08005a36 	stmdaeq	r0, {r1, r2, r4, r5, r9, fp, ip, lr}
    5c5c:	200f5d01 	andcs	r5, pc, r1, lsl #26
    5c60:	671a0000 	ldrvs	r0, [sl, -r0]
    5c64:	01000021 	tsteq	r0, r1, lsr #32
    5c68:	051e0b3f 	ldreq	r0, [lr, #-2879]
    5c6c:	28aa0000 	stmiacs	sl!, {}
    5c70:	2d000000 	stccs	0, cr0, [r0]
    5c74:	00200601 	eoreq	r0, r0, r1, lsl #12
    5c78:	0b5e0100 	bleq	1786080 <__Stack_Size+0x1785c80>
    5c7c:	00007e01 	andeq	r7, r0, r1, lsl #28
    5c80:	005a3800 	subseq	r3, sl, r0, lsl #16
    5c84:	005a4408 	subseq	r4, sl, r8, lsl #8
    5c88:	565d0108 	ldrbpl	r0, [sp], -r8, lsl #2
    5c8c:	1a000020 	bne	5d14 <__Stack_Size+0x5914>
    5c90:	00002167 	andeq	r2, r0, r7, ror #2
    5c94:	1e0b5d01 	cdpne	13, 0, cr5, cr11, cr1, {0}
    5c98:	bd000005 	stclt	0, cr0, [r0, #-20]
    5c9c:	25000028 	strcs	r0, [r0, #-40]
    5ca0:	00002369 	andeq	r2, r0, r9, ror #6
    5ca4:	410b5d01 	tstmi	fp, r1, lsl #26
    5ca8:	01000000 	tsteq	r0, r0
    5cac:	10d81251 	sbcsne	r1, r8, r1, asr r2
    5cb0:	5f010000 	svcpl	0x00010000
    5cb4:	0000890b 	andeq	r8, r0, fp, lsl #18
    5cb8:	01290000 	teqeq	r9, r0
    5cbc:	00002242 	andeq	r2, r0, r2, asr #4
    5cc0:	010b8701 	tsteq	fp, r1, lsl #14
    5cc4:	08005a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, lr}
    5cc8:	08005a4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, fp, ip, lr}
    5ccc:	208d5d01 	addcs	r5, sp, r1, lsl #26
    5cd0:	67250000 	strvs	r0, [r5, -r0]!
    5cd4:	01000021 	tsteq	r0, r1, lsr #32
    5cd8:	051e0b86 	ldreq	r0, [lr, #-2950]
    5cdc:	50010000 	andpl	r0, r1, r0
    5ce0:	0023691a 	eoreq	r6, r3, sl, lsl r9
    5ce4:	0b860100 	bleq	fe1860ec <SCS_BASE+0x1e1780ec>
    5ce8:	00000041 	andeq	r0, r0, r1, asr #32
    5cec:	000028d0 	ldrdeq	r2, [r0], -r0
    5cf0:	65012d00 	strvs	r2, [r1, #-3328]
    5cf4:	01000028 	tsteq	r0, r8, lsr #32
    5cf8:	89010ba3 	stmdbhi	r1, {r0, r1, r5, r7, r8, r9, fp}
    5cfc:	50000000 	andpl	r0, r0, r0
    5d00:	6808005a 	stmdavs	r8, {r1, r3, r4, r6}
    5d04:	0108005a 	qaddeq	r0, sl, r8
    5d08:	0020ec5d 	eoreq	lr, r0, sp, asr ip
    5d0c:	21671a00 	cmncs	r7, r0, lsl #20
    5d10:	a2010000 	andge	r0, r1, #0	; 0x0
    5d14:	00051e0b 	andeq	r1, r5, fp, lsl #28
    5d18:	0028e300 	eoreq	lr, r8, r0, lsl #6
    5d1c:	287c2500 	ldmdacs	ip!, {r8, sl, sp}^
    5d20:	a2010000 	andge	r0, r1, #0	; 0x0
    5d24:	0000410b 	andeq	r4, r0, fp, lsl #2
    5d28:	12510100 	subsne	r0, r1, #0	; 0x0
    5d2c:	000010d8 	ldrdeq	r1, [r0], -r8
    5d30:	890ba401 	stmdbhi	fp, {r0, sl, sp, pc}
    5d34:	12000000 	andne	r0, r0, #0	; 0x0
    5d38:	000010d9 	ldrdeq	r1, [r0], -r9
    5d3c:	410ba501 	tstmi	fp, r1, lsl #10
    5d40:	12000000 	andne	r0, r0, #0	; 0x0
    5d44:	0000208b 	andeq	r2, r0, fp, lsl #1
    5d48:	410ba501 	tstmi	fp, r1, lsl #10
    5d4c:	00000000 	andeq	r0, r0, r0
    5d50:	227c0129 	rsbscs	r0, ip, #1073741834	; 0x4000000a
    5d54:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    5d58:	5a68010b 	bpl	1a0618c <__Stack_Size+0x1a05d8c>
    5d5c:	5a720800 	bpl	1c87d64 <__Stack_Size+0x1c87964>
    5d60:	5d010800 	stcpl	8, cr0, [r1]
    5d64:	00002123 	andeq	r2, r0, r3, lsr #2
    5d68:	00216725 	eoreq	r6, r1, r5, lsr #14
    5d6c:	0bcd0100 	bleq	ff346174 <SCS_BASE+0x1f338174>
    5d70:	0000051e 	andeq	r0, r0, lr, lsl r5
    5d74:	7c1a5001 	ldcvc	0, cr5, [sl], {1}
    5d78:	01000028 	tsteq	r0, r8, lsr #32
    5d7c:	00410bcd 	subeq	r0, r1, sp, asr #23
    5d80:	28f60000 	ldmcs	r6!, {}^
    5d84:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    5d88:	0020e601 	eoreq	lr, r0, r1, lsl #12
    5d8c:	01870100 	orreq	r0, r7, r0, lsl #2
    5d90:	08005a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, ip, lr}
    5d94:	08005b40 	stmdaeq	r0, {r6, r8, r9, fp, ip, lr}
    5d98:	00002909 	andeq	r2, r0, r9, lsl #18
    5d9c:	00216717 	eoreq	r6, r1, r7, lsl r7
    5da0:	1e860100 	rmfnes	f0, f6, f0
    5da4:	34000005 	strcc	r0, [r0], #-5
    5da8:	00000029 	andeq	r0, r0, r9, lsr #32
    5dac:	00094c00 	andeq	r4, r9, r0, lsl #24
    5db0:	9c000200 	sfmls	f0, 4, [r0], {0}
    5db4:	04000013 	streq	r0, [r0], #-19
    5db8:	00048801 	andeq	r8, r4, r1, lsl #16
    5dbc:	2c3f0100 	ldfcss	f0, [pc]
    5dc0:	008e0000 	addeq	r0, lr, r0
    5dc4:	5b400000 	blpl	1005dcc <__Stack_Size+0x10059cc>
    5dc8:	5efc0800 	cdppl	8, 15, cr0, cr12, cr0, {0}
    5dcc:	14940800 	ldrne	r0, [r4], #2048
    5dd0:	04020000 	streq	r0, [r2]
    5dd4:	002cfb05 	eoreq	pc, ip, r5, lsl #22
    5dd8:	05020200 	streq	r0, [r2, #-512]
    5ddc:	0000050f 	andeq	r0, r0, pc, lsl #10
    5de0:	d4060102 	strle	r0, [r6], #-258
    5de4:	03000005 	movweq	r0, #5	; 0x5
    5de8:	00323375 	eorseq	r3, r2, r5, ror r3
    5dec:	00452702 	subeq	r2, r5, r2, lsl #14
    5df0:	04020000 	streq	r0, [r2]
    5df4:	002d7507 	eoreq	r7, sp, r7, lsl #10
    5df8:	31750300 	cmncc	r5, r0, lsl #6
    5dfc:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    5e00:	00000057 	andeq	r0, r0, r7, asr r0
    5e04:	12070202 	andne	r0, r7, #536870912	; 0x20000000
    5e08:	03000007 	movweq	r0, #7	; 0x7
    5e0c:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    5e10:	00006829 	andeq	r6, r0, r9, lsr #16
    5e14:	08010200 	stmdaeq	r1, {r9}
    5e18:	000005d2 	ldrdeq	r0, [r0], -r2
    5e1c:	00005704 	andeq	r5, r0, r4, lsl #14
    5e20:	02010500 	andeq	r0, r1, #0	; 0x0
    5e24:	00008939 	andeq	r8, r0, r9, lsr r9
    5e28:	13770600 	cmnne	r7, #0	; 0x0
    5e2c:	07000000 	streq	r0, [r0, -r0]
    5e30:	00544553 	subseq	r4, r4, r3, asr r5
    5e34:	ca080001 	bgt	205e40 <__Stack_Size+0x205a40>
    5e38:	0200001c 	andeq	r0, r0, #28	; 0x1c
    5e3c:	00007439 	andeq	r7, r0, r9, lsr r4
    5e40:	1ac40800 	bne	ff107e48 <SCS_BASE+0x1f0f9e48>
    5e44:	39020000 	stmdbcc	r2, {}
    5e48:	00000074 	andeq	r0, r0, r4, ror r0
    5e4c:	3b020105 	blcc	86268 <__Stack_Size+0x85e68>
    5e50:	000000b4 	strheq	r0, [r0], -r4
    5e54:	00036306 	andeq	r6, r3, r6, lsl #6
    5e58:	a4060000 	strge	r0, [r6]
    5e5c:	01000005 	tsteq	r0, r5
    5e60:	00dc0800 	sbcseq	r0, ip, r0, lsl #16
    5e64:	3b020000 	blcc	85e6c <__Stack_Size+0x85a6c>
    5e68:	0000009f 	muleq	r0, pc, r0
    5e6c:	0a070409 	beq	1c6e98 <__Stack_Size+0x1c6a98>
    5e70:	0239031c 	eorseq	r0, r9, #1879048192	; 0x70000000
    5e74:	0000019c 	muleq	r0, ip, r1
    5e78:	0052530b 	subseq	r5, r2, fp, lsl #6
    5e7c:	6f023a03 	svcvs	0x00023a03
    5e80:	02000000 	andeq	r0, r0, #0	; 0x0
    5e84:	c90c0023 	stmdbgt	ip, {r0, r1, r5}
    5e88:	03000004 	movweq	r0, #4	; 0x4
    5e8c:	004c023b 	subeq	r0, ip, fp, lsr r2
    5e90:	23020000 	movwcs	r0, #8192	; 0x2000
    5e94:	52440b02 	subpl	r0, r4, #2048	; 0x800
    5e98:	023c0300 	eorseq	r0, ip, #0	; 0x0
    5e9c:	0000006f 	andeq	r0, r0, pc, rrx
    5ea0:	0c042302 	stceq	3, cr2, [r4], {2}
    5ea4:	000004d3 	ldrdeq	r0, [r0], -r3
    5ea8:	4c023d03 	stcmi	13, cr3, [r2], {3}
    5eac:	02000000 	andeq	r0, r0, #0	; 0x0
    5eb0:	420b0623 	andmi	r0, fp, #36700160	; 0x2300000
    5eb4:	03005252 	movweq	r5, #594	; 0x252
    5eb8:	006f023e 	rsbeq	r0, pc, lr, lsr r2
    5ebc:	23020000 	movwcs	r0, #8192	; 0x2000
    5ec0:	04dd0c08 	ldrbeq	r0, [sp], #3080
    5ec4:	3f030000 	svccc	0x00030000
    5ec8:	00004c02 	andeq	r4, r0, r2, lsl #24
    5ecc:	0a230200 	beq	8c66d4 <__Stack_Size+0x8c62d4>
    5ed0:	3152430b 	cmpcc	r2, fp, lsl #6
    5ed4:	02400300 	subeq	r0, r0, #0	; 0x0
    5ed8:	0000006f 	andeq	r0, r0, pc, rrx
    5edc:	0c0c2302 	stceq	3, cr2, [ip], {2}
    5ee0:	000004e7 	andeq	r0, r0, r7, ror #9
    5ee4:	4c024103 	stfmis	f4, [r2], {3}
    5ee8:	02000000 	andeq	r0, r0, #0	; 0x0
    5eec:	430b0e23 	movwmi	r0, #48675	; 0xbe23
    5ef0:	03003252 	movweq	r3, #594	; 0x252
    5ef4:	006f0242 	rsbeq	r0, pc, r2, asr #4
    5ef8:	23020000 	movwcs	r0, #8192	; 0x2000
    5efc:	04f10c10 	ldrbteq	r0, [r1], #3088
    5f00:	43030000 	movwmi	r0, #12288	; 0x3000
    5f04:	00004c02 	andeq	r4, r0, r2, lsl #24
    5f08:	12230200 	eorne	r0, r3, #0	; 0x0
    5f0c:	3352430b 	cmpcc	r2, #738197504	; 0x2c000000
    5f10:	02440300 	subeq	r0, r4, #0	; 0x0
    5f14:	0000006f 	andeq	r0, r0, pc, rrx
    5f18:	0c142302 	ldceq	3, cr2, [r4], {2}
    5f1c:	000004fb 	strdeq	r0, [r0], -fp
    5f20:	4c024503 	cfstr32mi	mvfx4, [r2], {3}
    5f24:	02000000 	andeq	r0, r0, #0	; 0x0
    5f28:	700c1623 	andvc	r1, ip, r3, lsr #12
    5f2c:	03000001 	movweq	r0, #1	; 0x1
    5f30:	006f0246 	rsbeq	r0, pc, r6, asr #4
    5f34:	23020000 	movwcs	r0, #8192	; 0x2000
    5f38:	05050c18 	streq	r0, [r5, #-3096]
    5f3c:	47030000 	strmi	r0, [r3, -r0]
    5f40:	00004c02 	andeq	r4, r0, r2, lsl #24
    5f44:	1a230200 	bne	8c674c <__Stack_Size+0x8c634c>
    5f48:	29650d00 	stmdbcs	r5!, {r8, sl, fp}^
    5f4c:	48030000 	stmdami	r3, {}
    5f50:	0000c202 	andeq	ip, r0, r2, lsl #4
    5f54:	04100e00 	ldreq	r0, [r0], #-3584
    5f58:	0002051b 	andeq	r0, r2, fp, lsl r5
    5f5c:	01890f00 	orreq	r0, r9, r0, lsl #30
    5f60:	1c040000 	stcne	0, cr0, [r4], {0}
    5f64:	0000003a 	andeq	r0, r0, sl, lsr r0
    5f68:	0f002302 	svceq	0x00002302
    5f6c:	00000114 	andeq	r0, r0, r4, lsl r1
    5f70:	004c1d04 	subeq	r1, ip, r4, lsl #26
    5f74:	23020000 	movwcs	r0, #8192	; 0x2000
    5f78:	01380f04 	teqeq	r8, r4, lsl #30
    5f7c:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    5f80:	0000004c 	andeq	r0, r0, ip, asr #32
    5f84:	0f062302 	svceq	0x00062302
    5f88:	000006cb 	andeq	r0, r0, fp, asr #13
    5f8c:	004c1f04 	subeq	r1, ip, r4, lsl #30
    5f90:	23020000 	movwcs	r0, #8192	; 0x2000
    5f94:	038a0f08 	orreq	r0, sl, #32	; 0x20
    5f98:	20040000 	andcs	r0, r4, r0
    5f9c:	0000004c 	andeq	r0, r0, ip, asr #32
    5fa0:	0f0a2302 	svceq	0x000a2302
    5fa4:	000003af 	andeq	r0, r0, pc, lsr #7
    5fa8:	004c2104 	subeq	r2, ip, r4, lsl #2
    5fac:	23020000 	movwcs	r0, #8192	; 0x2000
    5fb0:	9e08000c 	cdpls	0, 0, cr0, cr8, cr12, {0}
    5fb4:	04000006 	streq	r0, [r0], #-6
    5fb8:	0001a822 	andeq	sl, r1, r2, lsr #16
    5fbc:	04080e00 	streq	r0, [r8], #-3584
    5fc0:	00025126 	andeq	r5, r2, r6, lsr #2
    5fc4:	2b630f00 	blcs	18c9bcc <__Stack_Size+0x18c97cc>
    5fc8:	27040000 	strcs	r0, [r4, -r0]
    5fcc:	0000004c 	andeq	r0, r0, ip, asr #32
    5fd0:	0f002302 	svceq	0x00002302
    5fd4:	00002c2d 	andeq	r2, r0, sp, lsr #24
    5fd8:	004c2804 	subeq	r2, ip, r4, lsl #16
    5fdc:	23020000 	movwcs	r0, #8192	; 0x2000
    5fe0:	29210f02 	stmdbcs	r1!, {r1, r8, r9, sl, fp}
    5fe4:	29040000 	stmdbcs	r4, {}
    5fe8:	0000004c 	andeq	r0, r0, ip, asr #32
    5fec:	0f042302 	svceq	0x00042302
    5ff0:	000029d1 	ldrdeq	r2, [r0], -r1
    5ff4:	004c2a04 	subeq	r2, ip, r4, lsl #20
    5ff8:	23020000 	movwcs	r0, #8192	; 0x2000
    5ffc:	73080006 	movwvc	r0, #32774	; 0x8006
    6000:	04000029 	streq	r0, [r0], #-41
    6004:	0002102b 	andeq	r1, r2, fp, lsr #32
    6008:	05140e00 	ldreq	r0, [r4, #-3584]
    600c:	0002ab1a 	andeq	sl, r2, sl, lsl fp
    6010:	1d280f00 	stcne	15, cr0, [r8]
    6014:	1b050000 	blne	14601c <__Stack_Size+0x145c1c>
    6018:	0000003a 	andeq	r0, r0, sl, lsr r0
    601c:	0f002302 	svceq	0x00002302
    6020:	00001b2e 	andeq	r1, r0, lr, lsr #22
    6024:	003a1c05 	eorseq	r1, sl, r5, lsl #24
    6028:	23020000 	movwcs	r0, #8192	; 0x2000
    602c:	1d910f04 	ldcne	15, cr0, [r1, #16]
    6030:	1d050000 	stcne	0, cr0, [r5]
    6034:	0000003a 	andeq	r0, r0, sl, lsr r0
    6038:	0f082302 	svceq	0x00082302
    603c:	00001d44 	andeq	r1, r0, r4, asr #26
    6040:	003a1e05 	eorseq	r1, sl, r5, lsl #28
    6044:	23020000 	movwcs	r0, #8192	; 0x2000
    6048:	1c8a0f0c 	stcne	15, cr0, [sl], {12}
    604c:	1f050000 	svcne	0x00050000
    6050:	0000003a 	andeq	r0, r0, sl, lsr r0
    6054:	00102302 	andseq	r2, r0, r2, lsl #6
    6058:	001af608 	andseq	pc, sl, r8, lsl #12
    605c:	5c200500 	cfstr32pl	mvfx0, [r0]
    6060:	10000002 	andne	r0, r0, r2
    6064:	002c6c01 	eoreq	r6, ip, r1, lsl #24
    6068:	01e90100 	mvneq	r0, r0, lsl #2
    606c:	08005b40 	stmdaeq	r0, {r6, r8, r9, fp, ip, lr}
    6070:	08005b5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, fp, ip, lr}
    6074:	02db5d01 	sbcseq	r5, fp, #64	; 0x40
    6078:	0a110000 	beq	446080 <__Stack_Size+0x445c80>
    607c:	0100002b 	tsteq	r0, fp, lsr #32
    6080:	0002dbe8 	andeq	sp, r2, r8, ror #23
    6084:	00500100 	subseq	r0, r0, r0, lsl #2
    6088:	02050412 	andeq	r0, r5, #301989888	; 0x12000000
    608c:	01130000 	tsteq	r3, r0
    6090:	00002be8 	andeq	r2, r0, r8, ror #23
    6094:	01010001 	tsteq	r1, r1
    6098:	08005b60 	stmdaeq	r0, {r5, r6, r8, r9, fp, ip, lr}
    609c:	08005b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, ip, lr}
    60a0:	03245d01 	teqeq	r4, #64	; 0x40
    60a4:	f0110000 	undefined instruction 0xf0110000
    60a8:	0100002a 	tsteq	r0, sl, lsr #32
    60ac:	000324ff 	strdeq	r2, [r3], -pc
    60b0:	14500100 	ldrbne	r0, [r0], #-256
    60b4:	00002a58 	andeq	r2, r0, r8, asr sl
    60b8:	032aff01 	msreq	CPSR_fx, #4	; 0x4
    60bc:	29530000 	ldmdbcs	r3, {}^
    60c0:	28150000 	ldmdacs	r5, {}
    60c4:	01000014 	tsteq	r0, r4, lsl r0
    60c8:	003a0101 	eorseq	r0, sl, r1, lsl #2
    60cc:	52010000 	andpl	r0, r1, #0	; 0x0
    60d0:	9c041200 	sfmls	f1, 4, [r4], {0}
    60d4:	12000001 	andne	r0, r0, #1	; 0x1
    60d8:	00025104 	andeq	r5, r2, r4, lsl #2
    60dc:	7b011300 	blvc	4ace4 <__Stack_Size+0x4a8e4>
    60e0:	0100002a 	tsteq	r0, sl, lsr #32
    60e4:	88010124 	stmdahi	r1, {r2, r5, r8}
    60e8:	9608005b 	undefined
    60ec:	0108005b 	qaddeq	r0, fp, r8
    60f0:	0003575d 	andeq	r5, r3, sp, asr r7
    60f4:	2a581600 	bcs	160b8fc <__Stack_Size+0x160b4fc>
    60f8:	23010000 	movwcs	r0, #4096	; 0x1000
    60fc:	00032a01 	andeq	r2, r3, r1, lsl #20
    6100:	00500100 	subseq	r0, r0, r0, lsl #2
    6104:	298a0113 	stmibcs	sl, {r0, r1, r4, r8}
    6108:	38010000 	stmdacc	r1, {}
    610c:	5b980101 	blpl	fe606518 <SCS_BASE+0x1e5f8518>
    6110:	5bb20800 	blpl	fec88118 <SCS_BASE+0x1ec7a118>
    6114:	5d010800 	stcpl	8, cr0, [r1]
    6118:	0000038c 	andeq	r0, r0, ip, lsl #7
    611c:	002af016 	eoreq	pc, sl, r6, lsl r0
    6120:	01370100 	teqeq	r7, r0, lsl #2
    6124:	00000324 	andeq	r0, r0, r4, lsr #6
    6128:	51165001 	tstpl	r6, r1
    612c:	01000010 	tsteq	r0, r0, lsl r0
    6130:	00b40137 	adcseq	r0, r4, r7, lsr r1
    6134:	51010000 	tstpl	r1, r0
    6138:	e1011700 	tst	r1, r0, lsl #14
    613c:	0100002a 	tsteq	r0, sl, lsr #32
    6140:	b4010163 	strlt	r0, [r1], #-355
    6144:	f208005b 	vqadd.s8	q0, q4, <illegal reg q5.5>
    6148:	6608005b 	undefined
    614c:	0d000029 	stceq	0, cr0, [r0, #-164]
    6150:	18000004 	stmdane	r0, {r2}
    6154:	00002af0 	strdeq	r2, [r0], -r0
    6158:	24016201 	strcs	r6, [r1], #-513
    615c:	85000003 	strhi	r0, [r0, #-3]
    6160:	18000029 	stmdane	r0, {r0, r3, r5}
    6164:	00002bdf 	ldrdeq	r2, [r0], -pc
    6168:	4c016201 	sfmmi	f6, 4, [r1], {1}
    616c:	98000000 	stmdals	r0, {}
    6170:	16000029 	strne	r0, [r0], -r9, lsr #32
    6174:	00001051 	andeq	r1, r0, r1, asr r0
    6178:	b4016201 	strlt	r6, [r1], #-513
    617c:	01000000 	tsteq	r0, r0
    6180:	2c631552 	cfstr64cs	mvdx1, [r3], #-328
    6184:	64010000 	strvs	r0, [r1]
    6188:	00003a01 	andeq	r3, r0, r1, lsl #20
    618c:	195c0100 	ldmdbne	ip, {r8}^
    6190:	00002b2a 	andeq	r2, r0, sl, lsr #22
    6194:	3a016401 	bcc	5f1a0 <__Stack_Size+0x5eda0>
    6198:	15000000 	strne	r0, [r0]
    619c:	00002c38 	andeq	r2, r0, r8, lsr ip
    61a0:	3a016401 	bcc	5f1ac <__Stack_Size+0x5edac>
    61a4:	01000000 	tsteq	r0, r0
    61a8:	2a911a51 	bcs	fe44caf4 <SCS_BASE+0x1e43eaf4>
    61ac:	65010000 	strvs	r0, [r1]
    61b0:	00003a01 	andeq	r3, r0, r1, lsl #20
    61b4:	0029b600 	eoreq	fp, r9, r0, lsl #12
    61b8:	01130000 	tsteq	r3, r0
    61bc:	000029c4 	andeq	r2, r0, r4, asr #19
    61c0:	01019e01 	tsteq	r1, r1, lsl #28
    61c4:	08005bf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, fp, ip, lr}
    61c8:	08005c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip, lr}
    61cc:	04505d01 	ldrbeq	r5, [r0], #-3329
    61d0:	f0160000 	undefined instruction 0xf0160000
    61d4:	0100002a 	tsteq	r0, sl, lsr #32
    61d8:	0324019d 	teqeq	r4, #1073741863	; 0x40000027
    61dc:	50010000 	andpl	r0, r1, r0
    61e0:	002a6e16 	eoreq	r6, sl, r6, lsl lr
    61e4:	019d0100 	orrseq	r0, sp, r0, lsl #2
    61e8:	0000004c 	andeq	r0, r0, ip, asr #32
    61ec:	51165101 	tstpl	r6, r1, lsl #2
    61f0:	01000010 	tsteq	r0, r0, lsl r0
    61f4:	00b4019d 	umlalseq	r0, r4, sp, r1
    61f8:	52010000 	andpl	r0, r1, #0	; 0x0
    61fc:	ad011300 	stcge	3, cr1, [r1]
    6200:	0100002a 	tsteq	r0, sl, lsr #32
    6204:	0c0101bd 	stfeqs	f0, [r1], {189}
    6208:	2208005c 	andcs	r0, r8, #92	; 0x5c
    620c:	0108005c 	qaddeq	r0, ip, r8
    6210:	0004855d 	andeq	r8, r4, sp, asr r5
    6214:	2af01600 	bcs	ffc0ba1c <SCS_BASE+0x1fbfda1c>
    6218:	bc010000 	stclt	0, cr0, [r1], {0}
    621c:	00032401 	andeq	r2, r3, r1, lsl #8
    6220:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    6224:	00002b1b 	andeq	r2, r0, fp, lsl fp
    6228:	5e01bc01 	cdppl	12, 0, cr11, cr1, cr1, {0}
    622c:	01000000 	tsteq	r0, r0
    6230:	01130051 	tsteq	r3, r1, asr r0
    6234:	00002bf8 	strdeq	r2, [r0], -r8
    6238:	0101d601 	tsteq	r1, r1, lsl #12
    623c:	08005c24 	stmdaeq	r0, {r2, r5, sl, fp, ip, lr}
    6240:	08005c3a 	stmdaeq	r0, {r1, r3, r4, r5, sl, fp, ip, lr}
    6244:	04bc5d01 	ldrteq	r5, [ip], #3329
    6248:	f0160000 	undefined instruction 0xf0160000
    624c:	0100002a 	tsteq	r0, sl, lsr #32
    6250:	032401d5 	teqeq	r4, #1073741877	; 0x40000035
    6254:	50010000 	andpl	r0, r1, r0
    6258:	0029b718 	eoreq	fp, r9, r8, lsl r7
    625c:	01d50100 	bicseq	r0, r5, r0, lsl #2
    6260:	0000004c 	andeq	r0, r0, ip, asr #32
    6264:	000029df 	ldrdeq	r2, [r0], -pc
    6268:	6f011300 	svcvs	0x00011300
    626c:	0100002b 	tsteq	r0, fp, lsr #32
    6270:	3c0101eb 	stfccs	f0, [r1], {235}
    6274:	5608005c 	undefined
    6278:	0108005c 	qaddeq	r0, ip, r8
    627c:	0004f15d 	andeq	pc, r4, sp, asr r1
    6280:	2af01600 	bcs	ffc0ba88 <SCS_BASE+0x1fbfda88>
    6284:	ea010000 	b	4628c <__Stack_Size+0x45e8c>
    6288:	00032401 	andeq	r2, r3, r1, lsl #8
    628c:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    6290:	00001051 	andeq	r1, r0, r1, asr r0
    6294:	b401ea01 	strlt	lr, [r1], #-2561
    6298:	01000000 	tsteq	r0, r0
    629c:	01130051 	tsteq	r3, r1, asr r0
    62a0:	00002a1f 	andeq	r2, r0, pc, lsl sl
    62a4:	01020b01 	tsteq	r2, r1, lsl #22
    62a8:	08005c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, ip, lr}
    62ac:	08005c6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, fp, ip, lr}
    62b0:	05285d01 	streq	r5, [r8, #-3329]!
    62b4:	f0160000 	undefined instruction 0xf0160000
    62b8:	0100002a 	tsteq	r0, sl, lsr #32
    62bc:	0324020a 	teqeq	r4, #-1610612736	; 0xa0000000
    62c0:	50010000 	andpl	r0, r1, r0
    62c4:	00294a18 	eoreq	r4, r9, r8, lsl sl
    62c8:	020a0100 	andeq	r0, sl, #0	; 0x0
    62cc:	0000004c 	andeq	r0, r0, ip, asr #32
    62d0:	000029f2 	strdeq	r2, [r0], -r2
    62d4:	95011300 	strls	r1, [r1, #-768]
    62d8:	0100002b 	tsteq	r0, fp, lsr #32
    62dc:	70010220 	andvc	r0, r1, r0, lsr #4
    62e0:	8a08005c 	bhi	206458 <__Stack_Size+0x206058>
    62e4:	0108005c 	qaddeq	r0, ip, r8
    62e8:	00055d5d 	andeq	r5, r5, sp, asr sp
    62ec:	2af01600 	bcs	ffc0baf4 <SCS_BASE+0x1fbfdaf4>
    62f0:	1f010000 	svcne	0x00010000
    62f4:	00032402 	andeq	r2, r3, r2, lsl #8
    62f8:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    62fc:	00001051 	andeq	r1, r0, r1, asr r0
    6300:	b4021f01 	strlt	r1, [r2], #-3841
    6304:	01000000 	tsteq	r0, r0
    6308:	01130051 	tsteq	r3, r1, asr r0
    630c:	00002994 	muleq	r0, r4, r9
    6310:	01023c01 	tsteq	r2, r1, lsl #24
    6314:	08005c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, ip, lr}
    6318:	08005c94 	stmdaeq	r0, {r2, r4, r7, sl, fp, ip, lr}
    631c:	05945d01 	ldreq	r5, [r4, #3329]
    6320:	f0160000 	undefined instruction 0xf0160000
    6324:	0100002a 	tsteq	r0, sl, lsr #32
    6328:	0324023b 	teqeq	r4, #-1342177277	; 0xb0000003
    632c:	50010000 	andpl	r0, r1, r0
    6330:	0011dc18 	andseq	sp, r1, r8, lsl ip
    6334:	023b0100 	eorseq	r0, fp, #0	; 0x0
    6338:	0000004c 	andeq	r0, r0, ip, asr #32
    633c:	00002a05 	andeq	r2, r0, r5, lsl #20
    6340:	0b011b00 	bleq	4cf48 <__Stack_Size+0x4cb48>
    6344:	0100002c 	tsteq	r0, ip, lsr #32
    6348:	4c01024f 	sfmmi	f0, 4, [r1], {79}
    634c:	94000000 	strls	r0, [r0]
    6350:	9c08005c 	stcls	0, cr0, [r8], {92}
    6354:	0108005c 	qaddeq	r0, ip, r8
    6358:	0005c15d 	andeq	ip, r5, sp, asr r1
    635c:	2af01800 	bcs	ffc0c364 <SCS_BASE+0x1fbfe364>
    6360:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    6364:	00032402 	andeq	r2, r3, r2, lsl #8
    6368:	002a1800 	eoreq	r1, sl, r0, lsl #16
    636c:	01130000 	tsteq	r3, r0
    6370:	00002ad1 	ldrdeq	r2, [r0], -r1
    6374:	01026101 	tsteq	r2, r1, lsl #2
    6378:	08005c9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, ip, lr}
    637c:	08005ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, ip, lr}
    6380:	05e85d01 	strbeq	r5, [r8, #3329]!
    6384:	f0160000 	undefined instruction 0xf0160000
    6388:	0100002a 	tsteq	r0, sl, lsr #32
    638c:	03240260 	teqeq	r4, #6	; 0x6
    6390:	50010000 	andpl	r0, r1, r0
    6394:	be011300 	cdplt	3, 0, cr1, cr1, cr0, {0}
    6398:	0100002a 	tsteq	r0, sl, lsr #32
    639c:	a8010274 	stmdage	r1, {r2, r4, r5, r6, r9}
    63a0:	ba08005c 	blt	206518 <__Stack_Size+0x206118>
    63a4:	0108005c 	qaddeq	r0, ip, r8
    63a8:	00061d5d 	andeq	r1, r6, sp, asr sp
    63ac:	2af01600 	bcs	ffc0bbb4 <SCS_BASE+0x1fbfdbb4>
    63b0:	73010000 	movwvc	r0, #4096	; 0x1000
    63b4:	00032402 	andeq	r2, r3, r2, lsl #8
    63b8:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    63bc:	00002a0f 	andeq	r2, r0, pc, lsl #20
    63c0:	5e027301 	cdppl	3, 0, cr7, cr2, cr1, {0}
    63c4:	01000000 	tsteq	r0, r0
    63c8:	01130051 	tsteq	r3, r1, asr r0
    63cc:	0000292c 	andeq	r2, r0, ip, lsr #18
    63d0:	01028a01 	tsteq	r2, r1, lsl #20
    63d4:	08005cbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip, lr}
    63d8:	08005cce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, fp, ip, lr}
    63dc:	06525d01 	ldrbeq	r5, [r2], -r1, lsl #26
    63e0:	f0160000 	undefined instruction 0xf0160000
    63e4:	0100002a 	tsteq	r0, sl, lsr #32
    63e8:	03240289 	teqeq	r4, #-1879048184	; 0x90000008
    63ec:	50010000 	andpl	r0, r1, r0
    63f0:	002c1d16 	eoreq	r1, ip, r6, lsl sp
    63f4:	02890100 	addeq	r0, r9, #0	; 0x0
    63f8:	0000005e 	andeq	r0, r0, lr, asr r0
    63fc:	13005101 	movwne	r5, #257	; 0x101
    6400:	002af701 	eoreq	pc, sl, r1, lsl #14
    6404:	02a00100 	adceq	r0, r0, #0	; 0x0
    6408:	005cd001 	subseq	sp, ip, r1
    640c:	005cea08 	subseq	lr, ip, r8, lsl #20
    6410:	875d0108 	ldrbhi	r0, [sp, -r8, lsl #2]
    6414:	16000006 	strne	r0, [r0], -r6
    6418:	00002af0 	strdeq	r2, [r0], -r0
    641c:	24029f01 	strcs	r9, [r2], #-3841
    6420:	01000003 	tsteq	r0, r3
    6424:	10511650 	subsne	r1, r1, r0, asr r6
    6428:	9f010000 	svcls	0x00010000
    642c:	0000b402 	andeq	fp, r0, r2, lsl #8
    6430:	00510100 	subseq	r0, r1, r0, lsl #2
    6434:	2bb40113 	blcs	fed06888 <SCS_BASE+0x1ecf8888>
    6438:	bd010000 	stclt	0, cr0, [r1]
    643c:	5cec0102 	stfple	f0, [ip], #8
    6440:	5d060800 	stcpl	8, cr0, [r6]
    6444:	5d010800 	stcpl	8, cr0, [r1]
    6448:	000006bc 	strheq	r0, [r0], -ip
    644c:	002af016 	eoreq	pc, sl, r6, lsl r0
    6450:	02bc0100 	adcseq	r0, ip, #0	; 0x0
    6454:	00000324 	andeq	r0, r0, r4, lsr #6
    6458:	51165001 	tstpl	r6, r1
    645c:	01000010 	tsteq	r0, r0, lsl r0
    6460:	00b402bc 	ldrhteq	r0, [r4], ip
    6464:	51010000 	tstpl	r1, r0
    6468:	a3011300 	movwge	r1, #4864	; 0x1300
    646c:	01000029 	tsteq	r0, r9, lsr #32
    6470:	080102da 	stmdaeq	r1, {r1, r3, r4, r6, r7, r9}
    6474:	2208005d 	andcs	r0, r8, #93	; 0x5d
    6478:	0108005d 	qaddeq	r0, sp, r8
    647c:	0006f15d 	andeq	pc, r6, sp, asr r1
    6480:	2af01600 	bcs	ffc0bc88 <SCS_BASE+0x1fbfdc88>
    6484:	d9010000 	stmdble	r1, {}
    6488:	00032402 	andeq	r2, r3, r2, lsl #8
    648c:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    6490:	00001051 	andeq	r1, r0, r1, asr r0
    6494:	b402d901 	strlt	sp, [r2], #-2305
    6498:	01000000 	tsteq	r0, r0
    649c:	01130051 	tsteq	r3, r1, asr r0
    64a0:	00002b52 	andeq	r2, r0, r2, asr fp
    64a4:	0102f901 	tstpeq	r2, r1, lsl #18
    64a8:	08005d24 	stmdaeq	r0, {r2, r5, r8, sl, fp, ip, lr}
    64ac:	08005d3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, fp, ip, lr}
    64b0:	07285d01 	streq	r5, [r8, -r1, lsl #26]!
    64b4:	f0160000 	undefined instruction 0xf0160000
    64b8:	0100002a 	tsteq	r0, sl, lsr #32
    64bc:	032402f8 	teqeq	r4, #-2147483633	; 0x8000000f
    64c0:	50010000 	andpl	r0, r1, r0
    64c4:	0029df18 	eoreq	sp, r9, r8, lsl pc
    64c8:	02f80100 	rscseq	r0, r8, #0	; 0x0
    64cc:	0000004c 	andeq	r0, r0, ip, asr #32
    64d0:	00002a2b 	andeq	r2, r0, fp, lsr #20
    64d4:	87011300 	strhi	r1, [r1, -r0, lsl #6]
    64d8:	0100002b 	tsteq	r0, fp, lsr #32
    64dc:	3c01030e 	stccc	3, cr0, [r1], {14}
    64e0:	5608005d 	undefined
    64e4:	0108005d 	qaddeq	r0, sp, r8
    64e8:	00075d5d 	andeq	r5, r7, sp, asr sp
    64ec:	2af01600 	bcs	ffc0bcf4 <SCS_BASE+0x1fbfdcf4>
    64f0:	0d010000 	stceq	0, cr0, [r1]
    64f4:	00032403 	andeq	r2, r3, r3, lsl #8
    64f8:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    64fc:	00001051 	andeq	r1, r0, r1, asr r0
    6500:	b4030d01 	strlt	r0, [r3], #-3329
    6504:	01000000 	tsteq	r0, r0
    6508:	011b0051 	tsteq	fp, r1, asr r0
    650c:	00002bcb 	andeq	r2, r0, fp, asr #23
    6510:	01033601 	tsteq	r3, r1, lsl #12
    6514:	00000089 	andeq	r0, r0, r9, lsl #1
    6518:	08005d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, ip, lr}
    651c:	08005d64 	stmdaeq	r0, {r2, r5, r6, r8, sl, fp, ip, lr}
    6520:	07a45d01 	streq	r5, [r4, r1, lsl #26]!
    6524:	f0180000 	undefined instruction 0xf0180000
    6528:	0100002a 	tsteq	r0, sl, lsr #32
    652c:	03240335 	teqeq	r4, #-738197504	; 0xd4000000
    6530:	2a3e0000 	bcs	f86538 <__Stack_Size+0xf86138>
    6534:	40160000 	andsmi	r0, r6, r0
    6538:	0100002a 	tsteq	r0, sl, lsr #32
    653c:	004c0335 	subeq	r0, ip, r5, lsr r3
    6540:	51010000 	tstpl	r1, r0
    6544:	0010d819 	andseq	sp, r0, r9, lsl r8
    6548:	03370100 	teqeq	r7, #0	; 0x0
    654c:	00000089 	andeq	r0, r0, r9, lsl #1
    6550:	30011300 	andcc	r1, r1, r0, lsl #6
    6554:	0100002b 	tsteq	r0, fp, lsr #32
    6558:	6401036a 	strvs	r0, [r1], #-874
    655c:	6e08005d 	mcrvs	0, 0, r0, cr8, cr13, {2}
    6560:	0108005d 	qaddeq	r0, sp, r8
    6564:	0007db5d 	andeq	sp, r7, sp, asr fp
    6568:	2af01600 	bcs	ffc0bd70 <SCS_BASE+0x1fbfdd70>
    656c:	69010000 	stmdbvs	r1, {}
    6570:	00032403 	andeq	r2, r3, r3, lsl #8
    6574:	18500100 	ldmdane	r0, {r8}^
    6578:	00002a40 	andeq	r2, r0, r0, asr #20
    657c:	4c036901 	stcmi	9, cr6, [r3], {1}
    6580:	51000000 	tstpl	r0, r0
    6584:	0000002a 	andeq	r0, r0, sl, lsr #32
    6588:	2b40011b 	blcs	10069fc <__Stack_Size+0x10065fc>
    658c:	8b010000 	blhi	46594 <__Stack_Size+0x46194>
    6590:	00940103 	addseq	r0, r4, r3, lsl #2
    6594:	5d700000 	ldclpl	0, cr0, [r0]
    6598:	5dba0800 	ldcpl	8, cr0, [sl]
    659c:	5d010800 	stcpl	8, cr0, [r1]
    65a0:	00000852 	andeq	r0, r0, r2, asr r8
    65a4:	002af018 	eoreq	pc, sl, r8, lsl r0
    65a8:	038a0100 	orreq	r0, sl, #0	; 0x0
    65ac:	00000324 	andeq	r0, r0, r4, lsr #6
    65b0:	00002a64 	andeq	r2, r0, r4, ror #20
    65b4:	002bdf18 	eoreq	sp, fp, r8, lsl pc
    65b8:	038a0100 	orreq	r0, sl, #0	; 0x0
    65bc:	0000004c 	andeq	r0, r0, ip, asr #32
    65c0:	00002a77 	andeq	r2, r0, r7, ror sl
    65c4:	002b2915 	eoreq	r2, fp, r5, lsl r9
    65c8:	038c0100 	orreq	r0, ip, #0	; 0x0
    65cc:	0000003a 	andeq	r0, r0, sl, lsr r0
    65d0:	381a5201 	ldmdacc	sl, {r0, r9, ip, lr}
    65d4:	0100002c 	tsteq	r0, ip, lsr #32
    65d8:	003a038c 	eorseq	r0, sl, ip, lsl #7
    65dc:	2aa00000 	bcs	fe8065e4 <SCS_BASE+0x1e7f85e4>
    65e0:	631a0000 	tstvs	sl, #0	; 0x0
    65e4:	0100002c 	tsteq	r0, ip, lsr #32
    65e8:	003a038c 	eorseq	r0, sl, ip, lsl #7
    65ec:	2abe0000 	bcs	fef865f4 <SCS_BASE+0x1ef785f4>
    65f0:	d8190000 	ldmdale	r9, {}
    65f4:	01000010 	tsteq	r0, r0, lsl r0
    65f8:	0094038d 	addseq	r0, r4, sp, lsl #7
    65fc:	13000000 	movwne	r0, #0	; 0x0
    6600:	0029f701 	eoreq	pc, r9, r1, lsl #14
    6604:	03db0100 	bicseq	r0, fp, #0	; 0x0
    6608:	005dbc01 	subseq	fp, sp, r1, lsl #24
    660c:	005dcc08 	subseq	ip, sp, r8, lsl #24
    6610:	a15d0108 	cmpge	sp, r8, lsl #2
    6614:	16000008 	strne	r0, [r0], -r8
    6618:	00002af0 	strdeq	r2, [r0], -r0
    661c:	2403da01 	strcs	sp, [r3], #-2561
    6620:	01000003 	tsteq	r0, r3
    6624:	2bdf1850 	blcs	ff7cc76c <SCS_BASE+0x1f7be76c>
    6628:	da010000 	ble	46630 <__Stack_Size+0x46230>
    662c:	00004c03 	andeq	r4, r0, r3, lsl #24
    6630:	002ad100 	eoreq	sp, sl, r0, lsl #2
    6634:	2b291900 	blcs	a4ca3c <__Stack_Size+0xa4c63c>
    6638:	dc010000 	stcle	0, cr0, [r1], {0}
    663c:	00004c03 	andeq	r4, r0, r3, lsl #24
    6640:	2c381900 	ldccs	9, cr1, [r8]
    6644:	dc010000 	stcle	0, cr0, [r1], {0}
    6648:	00004c03 	andeq	r4, r0, r3, lsl #24
    664c:	011c0000 	tsteq	ip, r0
    6650:	0000293f 	andeq	r2, r0, pc, lsr r9
    6654:	cc018d01 	stcgt	13, cr8, [r1], {1}
    6658:	6808005d 	stmdavs	r8, {r0, r2, r3, r4, r6}
    665c:	e408005e 	str	r0, [r8], #-94
    6660:	2a00002a 	bcs	6710 <__Stack_Size+0x6310>
    6664:	14000009 	strne	r0, [r0], #-9
    6668:	00002af0 	strdeq	r2, [r0], -r0
    666c:	03248c01 	teqeq	r4, #256	; 0x100
    6670:	2b0f0000 	blcs	3c6678 <__Stack_Size+0x3c6278>
    6674:	0a140000 	beq	50667c <__Stack_Size+0x50627c>
    6678:	0100002b 	tsteq	r0, fp, lsr #32
    667c:	0002db8c 	andeq	sp, r2, ip, lsl #23
    6680:	002b2e00 	eoreq	r2, fp, r0, lsl #28
    6684:	14281d00 	strtne	r1, [r8], #-3328
    6688:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    668c:	0000003a 	andeq	r0, r0, sl, lsr r0
    6690:	00002b4c 	andeq	r2, r0, ip, asr #22
    6694:	0029ee1d 	eoreq	lr, r9, sp, lsl lr
    6698:	3a8e0100 	bcc	fe386aa0 <SCS_BASE+0x1e378aa0>
    669c:	75000000 	strvc	r0, [r0]
    66a0:	1e00002b 	cdpne	0, 0, cr0, cr0, cr11, {1}
    66a4:	00002912 	andeq	r2, r0, r2, lsl r9
    66a8:	003a8f01 	eorseq	r8, sl, r1, lsl #30
    66ac:	51010000 	tstpl	r1, r0
    66b0:	002ba21f 	eoreq	sl, fp, pc, lsl r2
    66b4:	3a900100 	bcc	fe406abc <SCS_BASE+0x1e3f8abc>
    66b8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    66bc:	00002a91 	muleq	r0, r1, sl
    66c0:	003a9101 	eorseq	r9, sl, r1, lsl #2
    66c4:	54010000 	strpl	r0, [r1]
    66c8:	002a9c1e 	eoreq	r9, sl, lr, lsl ip
    66cc:	ab920100 	blge	fe486ad4 <SCS_BASE+0x1e478ad4>
    66d0:	02000002 	andeq	r0, r0, #2	; 0x2
    66d4:	20005c91 	mulcs	r0, r1, ip
    66d8:	002a4b01 	eoreq	r4, sl, r1, lsl #22
    66dc:	015b0100 	cmpeq	fp, r0, lsl #2
    66e0:	08005e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, ip, lr}
    66e4:	08005efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, lr}
    66e8:	00002b88 	andeq	r2, r0, r8, lsl #23
    66ec:	002af014 	eoreq	pc, sl, r4, lsl r0
    66f0:	245a0100 	ldrbcs	r0, [sl], #-256
    66f4:	b3000003 	movwlt	r0, #3	; 0x3
    66f8:	0000002b 	andeq	r0, r0, fp, lsr #32
    66fc:	00008d00 	andeq	r8, r0, r0, lsl #26
    6700:	7d000200 	sfmvc	f0, 4, [r0]
    6704:	04000015 	streq	r0, [r0], #-21
    6708:	00169201 	andseq	r9, r6, r1, lsl #4
    670c:	005efc00 	subseq	pc, lr, r0, lsl #24
    6710:	005f6a08 	subseq	r6, pc, r8, lsl #20
    6714:	6d747308 	ldclvs	3, cr7, [r4, #-32]!
    6718:	31663233 	cmncc	r6, r3, lsr r2
    671c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    6720:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    6724:	632f6372 	teqvs	pc, #-939524095	; 0xc8000001
    6728:	6574726f 	ldrbvs	r7, [r4, #-623]!
    672c:	5f336d78 	svcpl	0x00336d78
    6730:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
    6734:	00732e6f 	rsbseq	r2, r3, pc, ror #28
    6738:	555c3a43 	ldrbpl	r3, [ip, #-2627]
    673c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    6740:	72614d5c 	rsbvc	r4, r1, #5888	; 0x1700
    6744:	6f445c63 	svcvs	0x00445c63
    6748:	656d7563 	strbvs	r7, [sp, #-1379]!
    674c:	5c73746e 	cfldrdpl	mvd7, [r3], #-440
    6750:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
    6754:	435c6275 	cmpmi	ip, #1342177287	; 0x50000007
    6758:	745f336d 	ldrbvc	r3, [pc], #877	; 6760 <__Stack_Size+0x6360>
    675c:	316b7361 	cmncc	fp, r1, ror #6
    6760:	6568575c 	strbvs	r5, [r8, #-1884]!
    6764:	64656c65 	strbtvs	r6, [r5], #-3173
    6768:	6f626f52 	svcvs	0x00626f52
    676c:	6d655274 	sfmvs	f5, 2, [r5, #-464]!
    6770:	4365746f 	cmnmi	r5, #1862270976	; 0x6f000000
    6774:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    6778:	31566c6f 	cmpcc	r6, pc, ror #24
    677c:	554e4700 	strbpl	r4, [lr, #-1792]
    6780:	20534120 	subscs	r4, r3, r0, lsr #2
    6784:	38312e32 	ldmdacc	r1!, {r1, r4, r5, r9, sl, fp, sp}
    6788:	0030352e 	eorseq	r3, r0, lr, lsr #10
    678c:	01028001 	tsteq	r2, r1
    6790:	00020000 	andeq	r0, r2, r0
    6794:	00001591 	muleq	r0, r1, r5
    6798:	04880104 	streq	r0, [r8], #260
    679c:	b7010000 	strlt	r0, [r1, -r0]
    67a0:	8e00002c 	cdphi	0, 0, cr0, cr0, cr12, {1}
    67a4:	6c000000 	stcvs	0, cr0, [r0], {0}
    67a8:	c008005f 	andgt	r0, r8, pc, asr r0
    67ac:	3608005f 	undefined
    67b0:	02000017 	andeq	r0, r0, #23	; 0x17
    67b4:	2cfb0504 	cfldr64cs	mvdx0, [fp], #16
    67b8:	02020000 	andeq	r0, r2, #0	; 0x0
    67bc:	00050f05 	andeq	r0, r5, r5, lsl #30
    67c0:	06010200 	streq	r0, [r1], -r0, lsl #4
    67c4:	000005d4 	ldrdeq	r0, [r0], -r4
    67c8:	75070402 	strvc	r0, [r7, #-1026]
    67cc:	0200002d 	andeq	r0, r0, #45	; 0x2d
    67d0:	07120702 	ldreq	r0, [r2, -r2, lsl #14]
    67d4:	01020000 	tsteq	r2, r0
    67d8:	0005d208 	andeq	sp, r5, r8, lsl #4
    67dc:	07040300 	streq	r0, [r4, -r0, lsl #6]
    67e0:	2c8c0104 	stfcss	f0, [ip], {4}
    67e4:	92010000 	andls	r0, r1, #0	; 0x0
    67e8:	005f6c01 	subseq	r6, pc, r1, lsl #24
    67ec:	005fc008 	subseq	ip, pc, r8
    67f0:	002bd208 	eoreq	sp, fp, r8, lsl #4
    67f4:	00008600 	andeq	r8, r0, r0, lsl #12
    67f8:	2ce90500 	cfstr64cs	mvdx0, [r9]
    67fc:	93010000 	movwls	r0, #4096	; 0x1000
    6800:	00000086 	andeq	r0, r0, r6, lsl #1
    6804:	002c9a06 	eoreq	r9, ip, r6, lsl #20
    6808:	86930100 	ldrhi	r0, [r3], r0, lsl #2
    680c:	f1000000 	cps	#0
    6810:	0000002b 	andeq	r0, r0, fp, lsr #32
    6814:	003a0407 	eorseq	r0, sl, r7, lsl #8
    6818:	a2080000 	andge	r0, r8, #0	; 0x0
    681c:	0100002c 	tsteq	r0, ip, lsr #32
    6820:	00003a19 	andeq	r3, r0, r9, lsl sl
    6824:	08010100 	stmdaeq	r1, {r8}
    6828:	00002c85 	andeq	r2, r0, r5, lsl #25
    682c:	003a1b01 	eorseq	r1, sl, r1, lsl #22
    6830:	01010000 	tsteq	r1, r0
    6834:	002cb008 	eoreq	fp, ip, r8
    6838:	3a1d0100 	bcc	746c40 <__Stack_Size+0x746840>
    683c:	01000000 	tsteq	r0, r0
    6840:	2cf00801 	ldclcs	8, cr0, [r0], #4
    6844:	20010000 	andcs	r0, r1, r0
    6848:	0000003a 	andeq	r0, r0, sl, lsr r0
    684c:	aa080101 	bge	206c58 <__Stack_Size+0x206858>
    6850:	0100002c 	tsteq	r0, ip, lsr #32
    6854:	00003a22 	andeq	r3, r0, r2, lsr #20
    6858:	09010100 	stmdbeq	r1, {r8}
    685c:	00002c7d 	andeq	r2, r0, sp, ror ip
    6860:	01012501 	tsteq	r1, r1, lsl #10
    6864:	0000e80a 	andeq	lr, r0, sl, lsl #16
    6868:	0000e600 	andeq	lr, r0, r0, lsl #12
    686c:	004f0b00 	subeq	r0, pc, r0, lsl #22
    6870:	004c0000 	subeq	r0, ip, r0
    6874:	0407010c 	streq	r0, [r7], #-268
    6878:	000000e6 	andeq	r0, r0, r6, ror #1
    687c:	002cdc0d 	eoreq	sp, ip, sp, lsl #24
    6880:	00390100 	eorseq	r0, r9, r0, lsl #2
    6884:	01000001 	tsteq	r0, r1
    6888:	30000305 	andcc	r0, r0, r5, lsl #6
    688c:	d60e0800 	strle	r0, [lr], -r0, lsl #16
    6890:	00000000 	andeq	r0, r0, r0
    6894:	000000c1 	andeq	r0, r0, r1, asr #1
    6898:	16460002 	strbne	r0, [r6], -r2
    689c:	01040000 	tsteq	r4, r0
    68a0:	00000488 	andeq	r0, r0, r8, lsl #9
    68a4:	002d3b01 	eoreq	r3, sp, r1, lsl #22
    68a8:	002d0400 	eoreq	r0, sp, r0, lsl #8
	...
    68b4:	00179400 	andseq	r9, r7, r0, lsl #8
    68b8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    68bc:	00002d7a 	andeq	r2, r0, sl, ror sp
    68c0:	d4060102 	strle	r0, [r6], #-258
    68c4:	02000005 	andeq	r0, r0, #5	; 0x5
    68c8:	05d20801 	ldrbeq	r0, [r2, #2049]
    68cc:	02020000 	andeq	r0, r2, #0	; 0x0
    68d0:	00050f05 	andeq	r0, r5, r5, lsl #30
    68d4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    68d8:	00000712 	andeq	r0, r0, r2, lsl r7
    68dc:	69050403 	stmdbvs	r5, {r0, r1, sl}
    68e0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    68e4:	2cf60508 	cfldr64cs	mvdx0, [r6], #32
    68e8:	08020000 	stmdaeq	r2, {}
    68ec:	002d7007 	eoreq	r7, sp, r7
    68f0:	05040200 	streq	r0, [r4, #-512]
    68f4:	00002cfb 	strdeq	r2, [r0], -fp
    68f8:	02070404 	andeq	r0, r7, #67108864	; 0x4000000
    68fc:	2d750704 	ldclcs	7, cr0, [r5, #-16]!
    6900:	01050000 	tsteq	r5, r0
    6904:	006e0406 	rsbeq	r0, lr, r6, lsl #8
    6908:	01020000 	tsteq	r2, r0
    690c:	0005db08 	andeq	sp, r5, r8, lsl #22
    6910:	2d9c0700 	ldccs	7, cr0, [ip]
    6914:	02010000 	andeq	r0, r1, #0	; 0x0
    6918:	00009c06 	andeq	r9, r0, r6, lsl #24
    691c:	2dab0800 	stccs	8, cr0, [fp]
    6920:	08000000 	stmdaeq	r0, {}
    6924:	00002d90 	muleq	r0, r0, sp
    6928:	2d870801 	stccs	8, cr0, [r7, #4]
    692c:	00020000 	andeq	r0, r2, r0
    6930:	2db00109 	ldfcss	f0, [r0, #36]!
    6934:	40010000 	andmi	r0, r1, r0
    6938:	00004801 	andeq	r4, r0, r1, lsl #16
	...
    6944:	002c0400 	eoreq	r0, ip, r0, lsl #8
    6948:	6e660a00 	fmulsvs	s1, s12, s0
    694c:	703d0100 	eorsvc	r0, sp, r0, lsl #2
    6950:	2f000000 	svccs	0x00000000
    6954:	0000002c 	andeq	r0, r0, ip, lsr #32
    6958:	00093600 	andeq	r3, r9, r0, lsl #12
    695c:	c7000200 	strgt	r0, [r0, -r0, lsl #4]
    6960:	04000016 	streq	r0, [r0], #-22
    6964:	00048801 	andeq	r8, r4, r1, lsl #16
    6968:	2dc30100 	stfcse	f0, [r3]
    696c:	2d040000 	stccs	0, cr0, [r4]
	...
    6978:	18080000 	stmdane	r8, {}
    697c:	04020000 	streq	r0, [r2]
    6980:	002d7a07 	eoreq	r7, sp, r7, lsl #20
    6984:	06010200 	streq	r0, [r1], -r0, lsl #4
    6988:	000005d4 	ldrdeq	r0, [r0], -r4
    698c:	d2080102 	andle	r0, r8, #-2147483648	; 0x80000000
    6990:	02000005 	andeq	r0, r0, #5	; 0x5
    6994:	050f0502 	streq	r0, [pc, #-1282]	; 649a <__Stack_Size+0x609a>
    6998:	02020000 	andeq	r0, r2, #0	; 0x0
    699c:	00071207 	andeq	r1, r7, r7, lsl #4
    69a0:	05040300 	streq	r0, [r4, #-768]
    69a4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    69a8:	f6050802 	undefined instruction 0xf6050802
    69ac:	0200002c 	andeq	r0, r0, #44	; 0x2c
    69b0:	2d700708 	ldclcs	7, cr0, [r0, #-32]!
    69b4:	ca040000 	bgt	1069bc <__Stack_Size+0x1065bc>
    69b8:	0200002f 	andeq	r0, r0, #47	; 0x2f
    69bc:	00004807 	andeq	r4, r0, r7, lsl #16
    69c0:	05040200 	streq	r0, [r4, #-512]
    69c4:	00002cfb 	strdeq	r2, [r0], -fp
    69c8:	00307904 	eorseq	r7, r0, r4, lsl #18
    69cc:	682c0300 	stmdavs	ip!, {r8, r9}
    69d0:	05000000 	streq	r0, [r0]
    69d4:	00002f72 	andeq	r2, r0, r2, ror pc
    69d8:	25016304 	strcs	r6, [r1, #-772]
    69dc:	06000000 	streq	r0, [r0], -r0
    69e0:	a5470304 	strbge	r0, [r7, #-772]
    69e4:	07000000 	streq	r0, [r0, -r0]
    69e8:	00002f6c 	andeq	r2, r0, ip, ror #30
    69ec:	007a4803 	rsbseq	r4, sl, r3, lsl #16
    69f0:	26070000 	strcs	r0, [r7], -r0
    69f4:	0300002f 	movweq	r0, #47	; 0x2f
    69f8:	0000a549 	andeq	sl, r0, r9, asr #10
    69fc:	33080000 	movwcc	r0, #32768	; 0x8000
    6a00:	b5000000 	strlt	r0, [r0]
    6a04:	09000000 	stmdbeq	r0, {}
    6a08:	000000b5 	strheq	r0, [r0], -r5
    6a0c:	040a0003 	streq	r0, [sl], #-3
    6a10:	03080b07 	movweq	r0, #35591	; 0x8b07
    6a14:	0000dd44 	andeq	sp, r0, r4, asr #26
    6a18:	30630c00 	rsbcc	r0, r3, r0, lsl #24
    6a1c:	45030000 	strmi	r0, [r3]
    6a20:	00000048 	andeq	r0, r0, r8, asr #32
    6a24:	0c002302 	stceq	3, cr2, [r0], {2}
    6a28:	0000306b 	andeq	r3, r0, fp, rrx
    6a2c:	00864a03 	addeq	r4, r6, r3, lsl #20
    6a30:	23020000 	movwcs	r0, #8192	; 0x2000
    6a34:	ff040004 	undefined instruction 0xff040004
    6a38:	0300002f 	movweq	r0, #47	; 0x2f
    6a3c:	0000b84b 	andeq	fp, r0, fp, asr #16
    6a40:	2ef80400 	cdpcs	4, 15, cr0, cr8, cr0, {0}
    6a44:	4f030000 	svcmi	0x00030000
    6a48:	0000005d 	andeq	r0, r0, sp, asr r0
    6a4c:	ac04040d 	cfstrsge	mvf0, [r4], {13}
    6a50:	05000030 	streq	r0, [r0, #-48]
    6a54:	00010015 	andeq	r0, r1, r5, lsl r0
    6a58:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6a5c:	00002d75 	andeq	r2, r0, r5, ror sp
    6a60:	002f090e 	eoreq	r0, pc, lr, lsl #18
    6a64:	2d051800 	stccs	8, cr1, [r5]
    6a68:	00000166 	andeq	r0, r0, r6, ror #2
    6a6c:	0030170c 	eorseq	r1, r0, ip, lsl #14
    6a70:	662e0500 	strtvs	r0, [lr], -r0, lsl #10
    6a74:	02000001 	andeq	r0, r0, #1	; 0x1
    6a78:	5f0f0023 	svcpl	0x000f0023
    6a7c:	2f05006b 	svccs	0x0005006b
    6a80:	00000048 	andeq	r0, r0, r8, asr #32
    6a84:	0c042302 	stceq	3, cr2, [r4], {2}
    6a88:	0000304e 	andeq	r3, r0, lr, asr #32
    6a8c:	00482f05 	subeq	r2, r8, r5, lsl #30
    6a90:	23020000 	movwcs	r0, #8192	; 0x2000
    6a94:	2ef20c08 	cdpcs	12, 15, cr0, cr2, cr8, {0}
    6a98:	2f050000 	svccs	0x00050000
    6a9c:	00000048 	andeq	r0, r0, r8, asr #32
    6aa0:	0c0c2302 	stceq	3, cr2, [ip], {2}
    6aa4:	000030f8 	strdeq	r3, [r0], -r8
    6aa8:	00482f05 	subeq	r2, r8, r5, lsl #30
    6aac:	23020000 	movwcs	r0, #8192	; 0x2000
    6ab0:	785f0f10 	ldmdavc	pc, {r4, r8, r9, sl, fp}^
    6ab4:	6c300500 	cfldr32vs	mvfx0, [r0]
    6ab8:	02000001 	andeq	r0, r0, #1	; 0x1
    6abc:	10001423 	andne	r1, r0, r3, lsr #8
    6ac0:	00010704 	andeq	r0, r1, r4, lsl #14
    6ac4:	00f50800 	rscseq	r0, r5, r0, lsl #16
    6ac8:	017c0000 	cmneq	ip, r0
    6acc:	b5090000 	strlt	r0, [r9]
    6ad0:	00000000 	andeq	r0, r0, r0
    6ad4:	2f210e00 	svccs	0x00210e00
    6ad8:	05240000 	streq	r0, [r4]!
    6adc:	00020735 	andeq	r0, r2, r5, lsr r7
    6ae0:	2e550c00 	cdpcs	12, 5, cr0, cr5, cr0, {0}
    6ae4:	36050000 	strcc	r0, [r5], -r0
    6ae8:	00000048 	andeq	r0, r0, r8, asr #32
    6aec:	0c002302 	stceq	3, cr2, [r0], {2}
    6af0:	00003088 	andeq	r3, r0, r8, lsl #1
    6af4:	00483705 	subeq	r3, r8, r5, lsl #14
    6af8:	23020000 	movwcs	r0, #8192	; 0x2000
    6afc:	2e6a0c04 	cdpcs	12, 6, cr0, cr10, cr4, {0}
    6b00:	38050000 	stmdacc	r5, {}
    6b04:	00000048 	andeq	r0, r0, r8, asr #32
    6b08:	0c082302 	stceq	3, cr2, [r8], {2}
    6b0c:	0000316a 	andeq	r3, r0, sl, ror #2
    6b10:	00483905 	subeq	r3, r8, r5, lsl #18
    6b14:	23020000 	movwcs	r0, #8192	; 0x2000
    6b18:	2f9d0c0c 	svccs	0x009d0c0c
    6b1c:	3a050000 	bcc	146b24 <__Stack_Size+0x146724>
    6b20:	00000048 	andeq	r0, r0, r8, asr #32
    6b24:	0c102302 	ldceq	3, cr2, [r0], {2}
    6b28:	00002f8c 	andeq	r2, r0, ip, lsl #31
    6b2c:	00483b05 	subeq	r3, r8, r5, lsl #22
    6b30:	23020000 	movwcs	r0, #8192	; 0x2000
    6b34:	30fd0c14 	rscscc	r0, sp, r4, lsl ip
    6b38:	3c050000 	stccc	0, cr0, [r5], {0}
    6b3c:	00000048 	andeq	r0, r0, r8, asr #32
    6b40:	0c182302 	ldceq	3, cr2, [r8], {2}
    6b44:	00002fe1 	andeq	r2, r0, r1, ror #31
    6b48:	00483d05 	subeq	r3, r8, r5, lsl #26
    6b4c:	23020000 	movwcs	r0, #8192	; 0x2000
    6b50:	31380c1c 	teqcc	r8, ip, lsl ip
    6b54:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
    6b58:	00000048 	andeq	r0, r0, r8, asr #32
    6b5c:	00202302 	eoreq	r2, r0, r2, lsl #6
    6b60:	002e7911 	eoreq	r7, lr, r1, lsl r9
    6b64:	05010800 	streq	r0, [r1, #-2048]
    6b68:	00025047 	andeq	r5, r2, r7, asr #32
    6b6c:	2ee50c00 	cdpcs	12, 14, cr0, cr5, cr0, {0}
    6b70:	48050000 	stmdami	r5, {}
    6b74:	00000250 	andeq	r0, r0, r0, asr r2
    6b78:	0c002302 	stceq	3, cr2, [r0], {2}
    6b7c:	00002db7 	strheq	r2, [r0], -r7
    6b80:	02504905 	subseq	r4, r0, #81920	; 0x14000
    6b84:	23030000 	movwcs	r0, #12288	; 0x3000
    6b88:	9e0c0180 	adfls<illegal precision>	f0, f4, f0
    6b8c:	05000030 	streq	r0, [r0, #-48]
    6b90:	0000f54b 	andeq	pc, r0, fp, asr #10
    6b94:	80230300 	eorhi	r0, r3, r0, lsl #6
    6b98:	2e9e0c02 	cdpcs	12, 9, cr0, cr14, cr2, {0}
    6b9c:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
    6ba0:	000000f5 	strdeq	r0, [r0], -r5
    6ba4:	02842303 	addeq	r2, r4, #201326592	; 0xc000000
    6ba8:	00f30800 	rscseq	r0, r3, r0, lsl #16
    6bac:	02600000 	rsbeq	r0, r0, #0	; 0x0
    6bb0:	b5090000 	strlt	r0, [r9]
    6bb4:	1f000000 	svcne	0x00000000
    6bb8:	2daf1100 	stfcss	f1, [pc]
    6bbc:	01900000 	orrseq	r0, r0, r0
    6bc0:	02a75905 	adceq	r5, r7, #81920	; 0x14000
    6bc4:	170c0000 	strne	r0, [ip, -r0]
    6bc8:	05000030 	streq	r0, [r0, #-48]
    6bcc:	0002a75a 	andeq	sl, r2, sl, asr r7
    6bd0:	00230200 	eoreq	r0, r3, r0, lsl #4
    6bd4:	00302f0c 	eorseq	r2, r0, ip, lsl #30
    6bd8:	485b0500 	ldmdami	fp, {r8, sl}^
    6bdc:	02000000 	andeq	r0, r0, #0	; 0x0
    6be0:	ed0c0423 	cfstrs	mvf0, [ip, #-140]
    6be4:	0500002e 	streq	r0, [r0, #-46]
    6be8:	0002ad5d 	andeq	sl, r2, sp, asr sp
    6bec:	08230200 	stmdaeq	r3!, {r9}
    6bf0:	002e790c 	eoreq	r7, lr, ip, lsl #18
    6bf4:	075e0500 	ldrbeq	r0, [lr, -r0, lsl #10]
    6bf8:	03000002 	movweq	r0, #2	; 0x2
    6bfc:	00018823 	andeq	r8, r1, r3, lsr #16
    6c00:	02600410 	rsbeq	r0, r0, #268435456	; 0x10000000
    6c04:	bf080000 	svclt	0x00080000
    6c08:	bd000002 	stclt	0, cr0, [r0, #-8]
    6c0c:	09000002 	stmdbeq	r0, {r1}
    6c10:	000000b5 	strheq	r0, [r0], -r5
    6c14:	0112001f 	tsteq	r2, pc, lsl r0
    6c18:	02bd0410 	adcseq	r0, sp, #268435456	; 0x10000000
    6c1c:	eb0e0000 	bl	386c24 <__Stack_Size+0x386824>
    6c20:	0800002f 	stmdaeq	r0, {r0, r1, r2, r3, r5}
    6c24:	02ee6905 	rsceq	r6, lr, #81920	; 0x14000
    6c28:	640c0000 	strvs	r0, [ip]
    6c2c:	0500002e 	streq	r0, [r0, #-46]
    6c30:	0002ee6a 	andeq	lr, r2, sl, ror #28
    6c34:	00230200 	eoreq	r0, r3, r0, lsl #4
    6c38:	002df60c 	eoreq	pc, sp, ip, lsl #12
    6c3c:	486b0500 	stmdami	fp!, {r8, sl}^
    6c40:	02000000 	andeq	r0, r0, #0	; 0x0
    6c44:	10000423 	andne	r0, r0, r3, lsr #8
    6c48:	00003304 	andeq	r3, r0, r4, lsl #6
    6c4c:	300a0e00 	andcc	r0, sl, r0, lsl #28
    6c50:	055c0000 	ldrbeq	r0, [ip]
    6c54:	000432a9 	andeq	r3, r4, r9, lsr #5
    6c58:	705f0f00 	subsvc	r0, pc, r0, lsl #30
    6c5c:	eeaa0500 	cdp	5, 10, cr0, cr10, cr0, {0}
    6c60:	02000002 	andeq	r0, r0, #2	; 0x2
    6c64:	5f0f0023 	svcpl	0x000f0023
    6c68:	ab050072 	blge	146e38 <__Stack_Size+0x146a38>
    6c6c:	00000048 	andeq	r0, r0, r8, asr #32
    6c70:	0f042302 	svceq	0x00042302
    6c74:	0500775f 	streq	r7, [r0, #-1887]
    6c78:	000048ac 	andeq	r4, r0, ip, lsr #17
    6c7c:	08230200 	stmdaeq	r3!, {r9}
    6c80:	002e970c 	eoreq	r9, lr, ip, lsl #14
    6c84:	3aad0500 	bcc	feb4808c <SCS_BASE+0x1eb3a08c>
    6c88:	02000000 	andeq	r0, r0, #0	; 0x0
    6c8c:	3d0c0c23 	stccc	12, cr0, [ip, #-140]
    6c90:	0500002f 	streq	r0, [r0, #-47]
    6c94:	00003aae 	andeq	r3, r0, lr, lsr #21
    6c98:	0e230200 	cdpeq	2, 2, cr0, cr3, cr0, {0}
    6c9c:	66625f0f 	strbtvs	r5, [r2], -pc, lsl #30
    6ca0:	c5af0500 	strgt	r0, [pc, #1280]!	; 71a8 <__Stack_Size+0x6da8>
    6ca4:	02000002 	andeq	r0, r0, #2	; 0x2
    6ca8:	2f0c1023 	svccs	0x000c1023
    6cac:	0500002e 	streq	r0, [r0, #-46]
    6cb0:	000048b0 	strheq	r4, [r0], -r0
    6cb4:	18230200 	stmdane	r3!, {r9}
    6cb8:	002e870c 	eoreq	r8, lr, ip, lsl #14
    6cbc:	f3b70500 	vabal.u<illegal width 64>	q0, d7, d0
    6cc0:	02000000 	andeq	r0, r0, #0	; 0x0
    6cc4:	110c1c23 	tstne	ip, r3, lsr #24
    6cc8:	0500002f 	streq	r0, [r0, #-47]
    6ccc:	0005c1b9 	strheq	ip, [r5], -r9
    6cd0:	20230200 	eorcs	r0, r3, r0, lsl #4
    6cd4:	002f850c 	eoreq	r8, pc, ip, lsl #10
    6cd8:	f1bb0500 	undefined instruction 0xf1bb0500
    6cdc:	02000005 	andeq	r0, r0, #5	; 0x5
    6ce0:	730c2423 	movwvc	r2, #50211	; 0xc423
    6ce4:	05000030 	streq	r0, [r0, #-48]
    6ce8:	000616bd 	strheq	r1, [r6], -sp
    6cec:	28230200 	stmdacs	r3!, {r9}
    6cf0:	000d600c 	andeq	r6, sp, ip
    6cf4:	31be0500 	undefined instruction 0x31be0500
    6cf8:	02000006 	andeq	r0, r0, #6	; 0x6
    6cfc:	5f0f2c23 	svcpl	0x000f2c23
    6d00:	05006275 	streq	r6, [r0, #-629]
    6d04:	0002c5c1 	andeq	ip, r2, r1, asr #11
    6d08:	30230200 	eorcc	r0, r3, r0, lsl #4
    6d0c:	70755f0f 	rsbsvc	r5, r5, pc, lsl #30
    6d10:	eec20500 	cdp	5, 12, cr0, cr2, cr0, {0}
    6d14:	02000002 	andeq	r0, r0, #2	; 0x2
    6d18:	5f0f3823 	svcpl	0x000f3823
    6d1c:	05007275 	streq	r7, [r0, #-629]
    6d20:	000048c3 	andeq	r4, r0, r3, asr #17
    6d24:	3c230200 	sfmcc	f0, 4, [r3]
    6d28:	002e5e0c 	eoreq	r5, lr, ip, lsl #28
    6d2c:	37c60500 	strbcc	r0, [r6, r0, lsl #10]
    6d30:	02000006 	andeq	r0, r0, #6	; 0x6
    6d34:	2a0c4023 	bcs	316dc8 <__Stack_Size+0x3169c8>
    6d38:	05000031 	streq	r0, [r0, #-49]
    6d3c:	000647c7 	andeq	r4, r6, r7, asr #15
    6d40:	43230200 	teqmi	r3, #0	; 0x0
    6d44:	626c5f0f 	rsbvs	r5, ip, #60	; 0x3c
    6d48:	c5ca0500 	strbgt	r0, [sl, #1280]
    6d4c:	02000002 	andeq	r0, r0, #2	; 0x2
    6d50:	ad0c4423 	cfstrsge	mvf4, [ip, #-140]
    6d54:	0500002e 	streq	r0, [r0, #-46]
    6d58:	000048cd 	andeq	r4, r0, sp, asr #17
    6d5c:	4c230200 	sfmmi	f0, 4, [r3]
    6d60:	002ebe0c 	eoreq	fp, lr, ip, lsl #28
    6d64:	48ce0500 	stmiami	lr, {r8, sl}^
    6d68:	02000000 	andeq	r0, r0, #0	; 0x0
    6d6c:	7a0c5023 	bvc	31ae00 <__Stack_Size+0x31aa00>
    6d70:	05000031 	streq	r0, [r0, #-49]
    6d74:	000451d1 	ldrdeq	r5, [r4], -r1
    6d78:	54230200 	strtpl	r0, [r3], #-512
    6d7c:	002f790c 	eoreq	r7, pc, ip, lsl #18
    6d80:	e8d50500 	ldm	r5, {r8, sl}^
    6d84:	02000000 	andeq	r0, r0, #0	; 0x0
    6d88:	13005823 	movwne	r5, #2083	; 0x823
    6d8c:	00004801 	andeq	r4, r0, r1, lsl #16
    6d90:	00045100 	andeq	r5, r4, r0, lsl #2
    6d94:	04511400 	ldrbeq	r1, [r1], #-1024
    6d98:	f3140000 	vhadd.u16	d0, d4, d0
    6d9c:	14000000 	strne	r0, [r0]
    6da0:	000005b4 	strheq	r0, [r0], -r4
    6da4:	00004814 	andeq	r4, r0, r4, lsl r8
    6da8:	04100000 	ldreq	r0, [r0]
    6dac:	00000457 	andeq	r0, r0, r7, asr r4
    6db0:	00305611 	eorseq	r5, r0, r1, lsl r6
    6db4:	05040000 	streq	r0, [r4]
    6db8:	0005b425 	andeq	fp, r5, r5, lsr #8
    6dbc:	30811500 	addcc	r1, r1, r0, lsl #10
    6dc0:	41050000 	tstmi	r5, r0
    6dc4:	00004802 	andeq	r4, r0, r2, lsl #16
    6dc8:	00230200 	eoreq	r0, r3, r0, lsl #4
    6dcc:	002ea615 	eoreq	sl, lr, r5, lsl r6
    6dd0:	02460500 	subeq	r0, r6, #0	; 0x0
    6dd4:	000006a4 	andeq	r0, r0, r4, lsr #13
    6dd8:	15042302 	strne	r2, [r4, #-770]
    6ddc:	00002f2d 	andeq	r2, r0, sp, lsr #30
    6de0:	a4024605 	strge	r4, [r2], #-1541
    6de4:	02000006 	andeq	r0, r0, #6	; 0x6
    6de8:	01150823 	tsteq	r5, r3, lsr #16
    6dec:	0500002f 	streq	r0, [r0, #-47]
    6df0:	06a40246 	strteq	r0, [r4], r6, asr #4
    6df4:	23020000 	movwcs	r0, #8192	; 0x2000
    6df8:	302a150c 	eorcc	r1, sl, ip, lsl #10
    6dfc:	48050000 	stmdami	r5, {}
    6e00:	00004802 	andeq	r4, r0, r2, lsl #16
    6e04:	10230200 	eorne	r0, r3, r0, lsl #4
    6e08:	002e0415 	eoreq	r0, lr, r5, lsl r4
    6e0c:	02490500 	subeq	r0, r9, #0	; 0x0
    6e10:	000008af 	andeq	r0, r0, pc, lsr #17
    6e14:	15142302 	ldrne	r2, [r4, #-770]
    6e18:	000030d4 	ldrdeq	r3, [r0], -r4
    6e1c:	48024b05 	stmdami	r2, {r0, r2, r8, r9, fp, lr}
    6e20:	02000000 	andeq	r0, r0, #0	; 0x0
    6e24:	34153023 	ldrcc	r3, [r5], #-35
    6e28:	05000030 	streq	r0, [r0, #-48]
    6e2c:	05e6024c 	strbeq	r0, [r6, #588]!
    6e30:	23020000 	movwcs	r0, #8192	; 0x2000
    6e34:	2fa61534 	svccs	0x00a61534
    6e38:	4e050000 	cdpmi	0, 0, cr0, cr5, cr0, {0}
    6e3c:	00004802 	andeq	r4, r0, r2, lsl #16
    6e40:	38230200 	stmdacc	r3!, {r9}
    6e44:	00304415 	eorseq	r4, r0, r5, lsl r4
    6e48:	02500500 	subseq	r0, r0, #0	; 0x0
    6e4c:	000008cb 	andeq	r0, r0, fp, asr #17
    6e50:	153c2302 	ldrne	r2, [ip, #-770]!
    6e54:	00000ecb 	andeq	r0, r0, fp, asr #29
    6e58:	66025305 	strvs	r5, [r2], -r5, lsl #6
    6e5c:	02000001 	andeq	r0, r0, #1	; 0x1
    6e60:	17154023 	ldrne	r4, [r5, -r3, lsr #32]
    6e64:	0500002f 	streq	r0, [r0, #-47]
    6e68:	00480254 	subeq	r0, r8, r4, asr r2
    6e6c:	23020000 	movwcs	r0, #8192	; 0x2000
    6e70:	31651544 	cmncc	r5, r4, asr #10
    6e74:	55050000 	strpl	r0, [r5]
    6e78:	00016602 	andeq	r6, r1, r2, lsl #12
    6e7c:	48230200 	stmdami	r3!, {r9}
    6e80:	002fc015 	eoreq	ip, pc, r5, lsl r0
    6e84:	02560500 	subseq	r0, r6, #0	; 0x0
    6e88:	000008d1 	ldrdeq	r0, [r0], -r1
    6e8c:	154c2302 	strbne	r2, [ip, #-770]
    6e90:	00002f35 	andeq	r2, r0, r5, lsr pc
    6e94:	48025905 	stmdami	r2, {r0, r2, r8, fp, ip, lr}
    6e98:	02000000 	andeq	r0, r0, #0	; 0x0
    6e9c:	b6155023 	ldrlt	r5, [r5], -r3, lsr #32
    6ea0:	0500002e 	streq	r0, [r0, #-46]
    6ea4:	05b4025a 	ldreq	r0, [r4, #602]!
    6ea8:	23020000 	movwcs	r0, #8192	; 0x2000
    6eac:	2fdc1554 	svccs	0x00dc1554
    6eb0:	7c050000 	stcvc	0, cr0, [r5], {0}
    6eb4:	00088d02 	andeq	r8, r8, r2, lsl #26
    6eb8:	58230200 	stmdapl	r3!, {r9}
    6ebc:	002daf15 	eoreq	sl, sp, r5, lsl pc
    6ec0:	027f0500 	rsbseq	r0, pc, #0	; 0x0
    6ec4:	000002a7 	andeq	r0, r0, r7, lsr #5
    6ec8:	02c82303 	sbceq	r2, r8, #201326592	; 0xc000000
    6ecc:	002f4a15 	eoreq	r4, pc, r5, lsl sl
    6ed0:	02800500 	addeq	r0, r0, #0	; 0x0
    6ed4:	00000260 	andeq	r0, r0, r0, ror #4
    6ed8:	02cc2303 	sbceq	r2, ip, #201326592	; 0xc000000
    6edc:	00312015 	eorseq	r2, r1, r5, lsl r0
    6ee0:	02830500 	addeq	r0, r3, #0	; 0x0
    6ee4:	000008e3 	andeq	r0, r0, r3, ror #17
    6ee8:	05dc2303 	ldrbeq	r2, [ip, #771]
    6eec:	002e8f15 	eoreq	r8, lr, r5, lsl pc
    6ef0:	02880500 	addeq	r0, r8, #0	; 0x0
    6ef4:	00000663 	andeq	r0, r0, r3, ror #12
    6ef8:	05e02303 	strbeq	r2, [r0, #771]!
    6efc:	002e7415 	eoreq	r7, lr, r5, lsl r4
    6f00:	02890500 	addeq	r0, r9, #0	; 0x0
    6f04:	000008ef 	andeq	r0, r0, pc, ror #17
    6f08:	05ec2303 	strbeq	r2, [ip, #771]!
    6f0c:	ba041000 	blt	10af14 <__Stack_Size+0x10ab14>
    6f10:	02000005 	andeq	r0, r0, #5	; 0x5
    6f14:	05db0801 	ldrbeq	r0, [fp, #2049]
    6f18:	04100000 	ldreq	r0, [r0]
    6f1c:	00000432 	andeq	r0, r0, r2, lsr r4
    6f20:	00480113 	subeq	r0, r8, r3, lsl r1
    6f24:	05e60000 	strbeq	r0, [r6]!
    6f28:	51140000 	tstpl	r4, r0
    6f2c:	14000004 	strne	r0, [r0], #-4
    6f30:	000000f3 	strdeq	r0, [r0], -r3
    6f34:	0005e614 	andeq	lr, r5, r4, lsl r6
    6f38:	00481400 	subeq	r1, r8, r0, lsl #8
    6f3c:	10000000 	andne	r0, r0, r0
    6f40:	0005ec04 	andeq	lr, r5, r4, lsl #24
    6f44:	05ba1600 	ldreq	r1, [sl, #1536]!
    6f48:	04100000 	ldreq	r0, [r0]
    6f4c:	000005c7 	andeq	r0, r0, r7, asr #11
    6f50:	006f0113 	rsbeq	r0, pc, r3, lsl r1
    6f54:	06160000 	ldreq	r0, [r6], -r0
    6f58:	51140000 	tstpl	r4, r0
    6f5c:	14000004 	strne	r0, [r0], #-4
    6f60:	000000f3 	strdeq	r0, [r0], -r3
    6f64:	00006f14 	andeq	r6, r0, r4, lsl pc
    6f68:	00481400 	subeq	r1, r8, r0, lsl #8
    6f6c:	10000000 	andne	r0, r0, r0
    6f70:	0005f704 	andeq	pc, r5, r4, lsl #14
    6f74:	48011300 	stmdami	r1, {r8, r9, ip}
    6f78:	31000000 	tstcc	r0, r0
    6f7c:	14000006 	strne	r0, [r0], #-6
    6f80:	00000451 	andeq	r0, r0, r1, asr r4
    6f84:	0000f314 	andeq	pc, r0, r4, lsl r3
    6f88:	04100000 	ldreq	r0, [r0]
    6f8c:	0000061c 	andeq	r0, r0, ip, lsl r6
    6f90:	00003308 	andeq	r3, r0, r8, lsl #6
    6f94:	00064700 	andeq	r4, r6, r0, lsl #14
    6f98:	00b50900 	adcseq	r0, r5, r0, lsl #18
    6f9c:	00020000 	andeq	r0, r2, r0
    6fa0:	00003308 	andeq	r3, r0, r8, lsl #6
    6fa4:	00065700 	andeq	r5, r6, r0, lsl #14
    6fa8:	00b50900 	adcseq	r0, r5, r0, lsl #18
    6fac:	00000000 	andeq	r0, r0, r0
    6fb0:	002ff805 	eoreq	pc, pc, r5, lsl #16
    6fb4:	010e0500 	tsteq	lr, r0, lsl #10
    6fb8:	000002f4 	strdeq	r0, [r0], -r4
    6fbc:	00310717 	eorseq	r0, r1, r7, lsl r7
    6fc0:	13050c00 	movwne	r0, #23552	; 0x5c00
    6fc4:	00069e01 	andeq	r9, r6, r1, lsl #28
    6fc8:	30171500 	andscc	r1, r7, r0, lsl #10
    6fcc:	14050000 	strne	r0, [r5]
    6fd0:	00069e01 	andeq	r9, r6, r1, lsl #28
    6fd4:	00230200 	eoreq	r0, r3, r0, lsl #4
    6fd8:	002f4315 	eoreq	r4, pc, r5, lsl r3
    6fdc:	01150500 	tsteq	r5, r0, lsl #10
    6fe0:	00000048 	andeq	r0, r0, r8, asr #32
    6fe4:	15042302 	strne	r2, [r4, #-770]
    6fe8:	00002ff2 	strdeq	r2, [r0], -r2
    6fec:	a4011605 	strge	r1, [r1], #-1541
    6ff0:	02000006 	andeq	r0, r0, #6	; 0x6
    6ff4:	10000823 	andne	r0, r0, r3, lsr #16
    6ff8:	00066304 	andeq	r6, r6, r4, lsl #6
    6ffc:	57041000 	strpl	r1, [r4, -r0]
    7000:	17000006 	strne	r0, [r0, -r6]
    7004:	00002dfc 	strdeq	r2, [r0], -ip
    7008:	012e050e 	teqeq	lr, lr, lsl #10
    700c:	000006e5 	andeq	r0, r0, r5, ror #13
    7010:	00305d15 	eorseq	r5, r0, r5, lsl sp
    7014:	012f0500 	teqeq	pc, r0, lsl #10
    7018:	000006e5 	andeq	r0, r0, r5, ror #13
    701c:	15002302 	strne	r2, [r0, #-770]
    7020:	00002f7f 	andeq	r2, r0, pc, ror pc
    7024:	e5013005 	str	r3, [r1, #-5]
    7028:	02000006 	andeq	r0, r0, #6	; 0x6
    702c:	a7150623 	ldrge	r0, [r5, -r3, lsr #12]
    7030:	05000030 	streq	r0, [r0, #-48]
    7034:	00410131 	subeq	r0, r1, r1, lsr r1
    7038:	23020000 	movwcs	r0, #8192	; 0x2000
    703c:	4108000c 	tstmi	r8, ip
    7040:	f5000000 	undefined instruction 0xf5000000
    7044:	09000006 	stmdbeq	r0, {r1, r2}
    7048:	000000b5 	strheq	r0, [r0], -r5
    704c:	d0180002 	andsle	r0, r8, r2
    7050:	15025f05 	strne	r5, [r2, #-3845]
    7054:	15000008 	strne	r0, [r0, #-8]
    7058:	000030eb 	andeq	r3, r0, fp, ror #1
    705c:	25026005 	strcs	r6, [r2, #-5]
    7060:	02000000 	andeq	r0, r0, #0	; 0x0
    7064:	91150023 	tstls	r5, r3, lsr #32
    7068:	05000030 	streq	r0, [r0, #-48]
    706c:	05b40261 	ldreq	r0, [r4, #609]!
    7070:	23020000 	movwcs	r0, #8192	; 0x2000
    7074:	2f5f1504 	svccs	0x005f1504
    7078:	62050000 	andvs	r0, r5, #0	; 0x0
    707c:	00081502 	andeq	r1, r8, r2, lsl #10
    7080:	08230200 	stmdaeq	r3!, {r9}
    7084:	00314315 	eorseq	r4, r1, r5, lsl r3
    7088:	02630500 	rsbeq	r0, r3, #0	; 0x0
    708c:	0000017c 	andeq	r0, r0, ip, ror r1
    7090:	15242302 	strne	r2, [r4, #-770]!
    7094:	00002fb1 	strheq	r2, [r0], -r1
    7098:	48026405 	stmdami	r2, {r0, r2, sl, sp, lr}
    709c:	02000000 	andeq	r0, r0, #0	; 0x0
    70a0:	12154823 	andsne	r4, r5, #2293760	; 0x230000
    70a4:	05000030 	streq	r0, [r0, #-48]
    70a8:	00560265 	subseq	r0, r6, r5, ror #4
    70ac:	23020000 	movwcs	r0, #8192	; 0x2000
    70b0:	31521550 	cmpcc	r2, r0, asr r5
    70b4:	66050000 	strvs	r0, [r5], -r0
    70b8:	0006aa02 	andeq	sl, r6, r2, lsl #20
    70bc:	58230200 	stmdapl	r3!, {r9}
    70c0:	00301d15 	eorseq	r1, r0, r5, lsl sp
    70c4:	02670500 	rsbeq	r0, r7, #0	; 0x0
    70c8:	000000dd 	ldrdeq	r0, [r0], -sp
    70cc:	15682302 	strbne	r2, [r8, #-770]!
    70d0:	00003157 	andeq	r3, r0, r7, asr r1
    70d4:	dd026805 	stcle	8, cr6, [r2, #-20]
    70d8:	02000000 	andeq	r0, r0, #0	; 0x0
    70dc:	47157023 	ldrmi	r7, [r5, -r3, lsr #32]
    70e0:	0500002e 	streq	r0, [r0, #-46]
    70e4:	00dd0269 	sbcseq	r0, sp, r9, ror #4
    70e8:	23020000 	movwcs	r0, #8192	; 0x2000
    70ec:	31161578 	tstcc	r6, r8, ror r5
    70f0:	6a050000 	bvs	1470f8 <__Stack_Size+0x146cf8>
    70f4:	00082502 	andeq	r2, r8, r2, lsl #10
    70f8:	80230300 	eorhi	r0, r3, r0, lsl #6
    70fc:	2f531501 	svccs	0x00531501
    7100:	6b050000 	blvs	147108 <__Stack_Size+0x146d08>
    7104:	00083502 	andeq	r3, r8, r2, lsl #10
    7108:	88230300 	stmdahi	r3!, {r8, r9}
    710c:	30b41501 	adcscc	r1, r4, r1, lsl #10
    7110:	6c050000 	stcvs	0, cr0, [r5], {0}
    7114:	00004802 	andeq	r4, r0, r2, lsl #16
    7118:	a0230300 	eorge	r0, r3, r0, lsl #6
    711c:	2ed71501 	cdpcs	5, 13, cr1, cr7, cr1, {0}
    7120:	6d050000 	stcvs	0, cr0, [r5]
    7124:	0000dd02 	andeq	sp, r0, r2, lsl #26
    7128:	a4230300 	strtge	r0, [r3], #-768
    712c:	2e381501 	cdpcs	5, 3, cr1, cr8, cr1, {0}
    7130:	6e050000 	cdpvs	0, 0, cr0, cr5, cr0, {0}
    7134:	0000dd02 	andeq	sp, r0, r2, lsl #26
    7138:	ac230300 	stcge	3, cr0, [r3]
    713c:	2ec61501 	cdpcs	5, 12, cr1, cr6, cr1, {0}
    7140:	6f050000 	svcvs	0x00050000
    7144:	0000dd02 	andeq	sp, r0, r2, lsl #26
    7148:	b4230300 	strtlt	r0, [r3], #-768
    714c:	2e0f1501 	cfsh32cs	mvfx1, mvfx15, #1
    7150:	70050000 	andvc	r0, r5, r0
    7154:	0000dd02 	andeq	sp, r0, r2, lsl #26
    7158:	bc230300 	stclt	3, cr0, [r3]
    715c:	2e1e1501 	cfmul32cs	mvfx1, mvfx14, mvfx1
    7160:	71050000 	tstvc	r5, r0
    7164:	0000dd02 	andeq	sp, r0, r2, lsl #26
    7168:	c4230300 	strtgt	r0, [r3], #-768
    716c:	ba080001 	blt	207178 <__Stack_Size+0x206d78>
    7170:	25000005 	strcs	r0, [r0, #-5]
    7174:	09000008 	stmdbeq	r0, {r3}
    7178:	000000b5 	strheq	r0, [r0], -r5
    717c:	ba080019 	blt	2071e8 <__Stack_Size+0x206de8>
    7180:	35000005 	strcc	r0, [r0, #-5]
    7184:	09000008 	stmdbeq	r0, {r3}
    7188:	000000b5 	strheq	r0, [r0], -r5
    718c:	ba080007 	blt	2071b0 <__Stack_Size+0x206db0>
    7190:	45000005 	strmi	r0, [r0, #-5]
    7194:	09000008 	stmdbeq	r0, {r3}
    7198:	000000b5 	strheq	r0, [r0], -r5
    719c:	f0180017 	undefined instruction 0xf0180017
    71a0:	6d027705 	stcvs	7, cr7, [r2, #-20]
    71a4:	15000008 	strne	r0, [r0, #-8]
    71a8:	00002f96 	muleq	r0, r6, pc
    71ac:	6d027905 	stcvs	9, cr7, [r2, #-20]
    71b0:	02000008 	andeq	r0, r0, #8	; 0x8
    71b4:	0d150023 	ldceq	0, cr0, [r5, #-140]
    71b8:	05000031 	streq	r0, [r0, #-49]
    71bc:	087d027a 	ldmdaeq	sp!, {r1, r3, r4, r5, r6, r9}^
    71c0:	23020000 	movwcs	r0, #8192	; 0x2000
    71c4:	ee080078 	mcr	0, 0, r0, cr8, cr8, {3}
    71c8:	7d000002 	stcvc	0, cr0, [r0, #-8]
    71cc:	09000008 	stmdbeq	r0, {r3}
    71d0:	000000b5 	strheq	r0, [r0], -r5
    71d4:	2508001d 	strcs	r0, [r8, #-29]
    71d8:	8d000000 	stchi	0, cr0, [r0]
    71dc:	09000008 	stmdbeq	r0, {r3}
    71e0:	000000b5 	strheq	r0, [r0], -r5
    71e4:	f019001d 	undefined instruction 0xf019001d
    71e8:	af025d05 	svcge	0x00025d05
    71ec:	1a000008 	bne	7214 <__Stack_Size+0x6e14>
    71f0:	00003056 	andeq	r3, r0, r6, asr r0
    71f4:	f5027205 	undefined instruction 0xf5027205
    71f8:	1a000006 	bne	7218 <__Stack_Size+0x6e18>
    71fc:	00003130 	andeq	r3, r0, r0, lsr r1
    7200:	45027b05 	strmi	r7, [r2, #-2821]
    7204:	00000008 	andeq	r0, r0, r8
    7208:	0005ba08 	andeq	fp, r5, r8, lsl #20
    720c:	0008bf00 	andeq	fp, r8, r0, lsl #30
    7210:	00b50900 	adcseq	r0, r5, r0, lsl #18
    7214:	00180000 	andseq	r0, r8, r0
    7218:	08cb011b 	stmiaeq	fp, {r0, r1, r3, r4, r8}^
    721c:	51140000 	tstpl	r4, r0
    7220:	00000004 	andeq	r0, r0, r4
    7224:	08bf0410 	ldmeq	pc!, {r4, sl}
    7228:	04100000 	ldreq	r0, [r0]
    722c:	00000166 	andeq	r0, r0, r6, ror #2
    7230:	08e3011b 	stmiaeq	r3!, {r0, r1, r3, r4, r8}^
    7234:	48140000 	ldmdami	r4, {}
    7238:	00000000 	andeq	r0, r0, r0
    723c:	08e90410 	stmiaeq	r9!, {r4, sl}^
    7240:	04100000 	ldreq	r0, [r0]
    7244:	000008d7 	ldrdeq	r0, [r0], -r7
    7248:	00065708 	andeq	r5, r6, r8, lsl #14
    724c:	0008ff00 	andeq	pc, r8, r0, lsl #30
    7250:	00b50900 	adcseq	r0, r5, r0, lsl #18
    7254:	00020000 	andeq	r0, r2, r0
    7258:	2d97011c 	ldfcss	f0, [r7, #112]
    725c:	3c010000 	stccc	0, cr0, [r1], {0}
    7260:	00000001 	andeq	r0, r0, r1
    7264:	00000000 	andeq	r0, r0, r0
    7268:	265d0100 	ldrbcs	r0, [sp], -r0, lsl #2
    726c:	1d000009 	stcne	0, cr0, [r0, #-36]
    7270:	000030e6 	andeq	r3, r0, r6, ror #1
    7274:	00483a01 	subeq	r3, r8, r1, lsl #20
    7278:	2c4d0000 	marcs	acc0, r0, sp
    727c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    7280:	000030c1 	andeq	r3, r0, r1, asr #1
    7284:	34032805 	strcc	r2, [r3], #-2053
    7288:	01000009 	tsteq	r0, r9
    728c:	04511601 	ldrbeq	r1, [r1], #-1537
    7290:	36000000 	strcc	r0, [r0], -r0
    7294:	02000009 	.word	0x02000009
    7298:	00183e00 	.word	0x00183e00
    729c:	88010400 	.word	0x88010400
    72a0:	01000004 	.word	0x01000004
    72a4:	00003180 	.word	0x00003180
    72a8:	000031b4 	.word	0x000031b4
	...
    72b4:	000018f7 	.word	0x000018f7
    72b8:	d4060102 	.word	0xd4060102
    72bc:	02000005 	.word	0x02000005
    72c0:	05d20801 	.word	0x05d20801
    72c4:	02020000 	.word	0x02020000
    72c8:	00050f05 	.word	0x00050f05
    72cc:	07020200 	.word	0x07020200
    72d0:	00000712 	.word	0x00000712
    72d4:	69050403 	.word	0x69050403
    72d8:	0200746e 	.word	0x0200746e
    72dc:	2d7a0704 	.word	0x2d7a0704
    72e0:	08020000 	.word	0x08020000
    72e4:	002cf605 	.word	0x002cf605
    72e8:	07080200 	.word	0x07080200
    72ec:	00002d70 	.word	0x00002d70
    72f0:	002fca04 	.word	0x002fca04
    72f4:	41070100 	.word	0x41070100
    72f8:	02000000 	.word	0x02000000
    72fc:	2cfb0504 	.word	0x2cfb0504
    7300:	79040000 	.word	0x79040000
    7304:	02000030 	.word	0x02000030
    7308:	0000682c 	.word	0x0000682c
    730c:	2f720500 	.word	0x2f720500
    7310:	63030000 	.word	0x63030000
    7314:	00004801 	.word	0x00004801
    7318:	02040600 	.word	0x02040600
    731c:	0000a547 	.word	0x0000a547
    7320:	2f6c0700 	.word	0x2f6c0700
    7324:	48020000 	.word	0x48020000
    7328:	0000007a 	.word	0x0000007a
    732c:	002f2607 	.word	0x002f2607
    7330:	a5490200 	.word	0xa5490200
    7334:	00000000 	.word	0x00000000
    7338:	00002c08 	.word	0x00002c08
    733c:	0000b500 	.word	0x0000b500
    7340:	00b50900 	.word	0x00b50900
    7344:	00030000 	.word	0x00030000
    7348:	0b07040a 	.word	0x0b07040a
    734c:	dd440208 	.word	0xdd440208
    7350:	0c000000 	.word	0x0c000000
    7354:	00003063 	.word	0x00003063
    7358:	00414502 	.word	0x00414502
    735c:	23020000 	.word	0x23020000
    7360:	306b0c00 	.word	0x306b0c00
    7364:	4a020000 	.word	0x4a020000
    7368:	00000086 	.word	0x00000086
    736c:	00042302 	.word	0x00042302
    7370:	002fff04 	.word	0x002fff04
    7374:	b84b0200 	.word	0xb84b0200
    7378:	04000000 	.word	0x04000000
    737c:	00002ef8 	.word	0x00002ef8
    7380:	005d4f02 	.word	0x005d4f02
    7384:	040d0000 	.word	0x040d0000
    7388:	0030ac04 	.word	0x0030ac04
    738c:	00150400 	.word	0x00150400
    7390:	02000001 	.word	0x02000001
    7394:	2d750704 	.word	0x2d750704
    7398:	090e0000 	.word	0x090e0000
    739c:	1800002f 	.word	0x1800002f
    73a0:	01662d04 	.word	0x01662d04
    73a4:	170c0000 	.word	0x170c0000
    73a8:	04000030 	.word	0x04000030
    73ac:	0001662e 	.word	0x0001662e
    73b0:	00230200 	.word	0x00230200
    73b4:	006b5f0f 	.word	0x006b5f0f
    73b8:	00412f04 	.word	0x00412f04
    73bc:	23020000 	.word	0x23020000
    73c0:	304e0c04 	.word	0x304e0c04
    73c4:	2f040000 	.word	0x2f040000
    73c8:	00000041 	.word	0x00000041
    73cc:	0c082302 	.word	0x0c082302
    73d0:	00002ef2 	.word	0x00002ef2
    73d4:	00412f04 	.word	0x00412f04
    73d8:	23020000 	.word	0x23020000
    73dc:	30f80c0c 	.word	0x30f80c0c
    73e0:	2f040000 	.word	0x2f040000
    73e4:	00000041 	.word	0x00000041
    73e8:	0f102302 	.word	0x0f102302
    73ec:	0400785f 	.word	0x0400785f
    73f0:	00016c30 	.word	0x00016c30
    73f4:	14230200 	.word	0x14230200
    73f8:	07041000 	.word	0x07041000
    73fc:	08000001 	.word	0x08000001
    7400:	000000f5 	.word	0x000000f5
    7404:	0000017c 	.word	0x0000017c
    7408:	0000b509 	.word	0x0000b509
    740c:	0e000000 	.word	0x0e000000
    7410:	00002f21 	.word	0x00002f21
    7414:	07350424 	.word	0x07350424
    7418:	0c000002 	.word	0x0c000002
    741c:	00002e55 	.word	0x00002e55
    7420:	00413604 	.word	0x00413604
    7424:	23020000 	.word	0x23020000
    7428:	30880c00 	.word	0x30880c00
    742c:	37040000 	.word	0x37040000
    7430:	00000041 	.word	0x00000041
    7434:	0c042302 	.word	0x0c042302
    7438:	00002e6a 	.word	0x00002e6a
    743c:	00413804 	.word	0x00413804
    7440:	23020000 	.word	0x23020000
    7444:	316a0c08 	.word	0x316a0c08
    7448:	39040000 	.word	0x39040000
    744c:	00000041 	.word	0x00000041
    7450:	0c0c2302 	.word	0x0c0c2302
    7454:	00002f9d 	.word	0x00002f9d
    7458:	00413a04 	.word	0x00413a04
    745c:	23020000 	.word	0x23020000
    7460:	2f8c0c10 	.word	0x2f8c0c10
    7464:	3b040000 	.word	0x3b040000
    7468:	00000041 	.word	0x00000041
    746c:	0c142302 	.word	0x0c142302
    7470:	000030fd 	.word	0x000030fd
    7474:	00413c04 	.word	0x00413c04
    7478:	23020000 	.word	0x23020000
    747c:	2fe10c18 	.word	0x2fe10c18
    7480:	3d040000 	.word	0x3d040000
    7484:	00000041 	.word	0x00000041
    7488:	0c1c2302 	.word	0x0c1c2302
    748c:	00003138 	.word	0x00003138
    7490:	00413e04 	.word	0x00413e04
    7494:	23020000 	.word	0x23020000
    7498:	79110020 	.word	0x79110020
    749c:	0800002e 	.word	0x0800002e
    74a0:	50470401 	.word	0x50470401
    74a4:	0c000002 	.word	0x0c000002
    74a8:	00002ee5 	.word	0x00002ee5
    74ac:	02504804 	.word	0x02504804
    74b0:	23020000 	.word	0x23020000
    74b4:	2db70c00 	.word	0x2db70c00
    74b8:	49040000 	.word	0x49040000
    74bc:	00000250 	.word	0x00000250
    74c0:	01802303 	.word	0x01802303
    74c4:	00309e0c 	.word	0x00309e0c
    74c8:	f54b0400 	.word	0xf54b0400
    74cc:	03000000 	.word	0x03000000
    74d0:	0c028023 	.word	0x0c028023
    74d4:	00002e9e 	.word	0x00002e9e
    74d8:	00f54e04 	.word	0x00f54e04
    74dc:	23030000 	.word	0x23030000
    74e0:	08000284 	.word	0x08000284
    74e4:	000000f3 	.word	0x000000f3
    74e8:	00000260 	.word	0x00000260
    74ec:	0000b509 	.word	0x0000b509
    74f0:	11001f00 	.word	0x11001f00
    74f4:	00002daf 	.word	0x00002daf
    74f8:	59040190 	.word	0x59040190
    74fc:	000002a7 	.word	0x000002a7
    7500:	0030170c 	.word	0x0030170c
    7504:	a75a0400 	.word	0xa75a0400
    7508:	02000002 	.word	0x02000002
    750c:	2f0c0023 	.word	0x2f0c0023
    7510:	04000030 	.word	0x04000030
    7514:	0000415b 	.word	0x0000415b
    7518:	04230200 	.word	0x04230200
    751c:	002eed0c 	.word	0x002eed0c
    7520:	ad5d0400 	.word	0xad5d0400
    7524:	02000002 	.word	0x02000002
    7528:	790c0823 	.word	0x790c0823
    752c:	0400002e 	.word	0x0400002e
    7530:	0002075e 	.word	0x0002075e
    7534:	88230300 	.word	0x88230300
    7538:	04100001 	.word	0x04100001
    753c:	00000260 	.word	0x00000260
    7540:	0002bf08 	.word	0x0002bf08
    7544:	0002bd00 	.word	0x0002bd00
    7548:	00b50900 	.word	0x00b50900
    754c:	001f0000 	.word	0x001f0000
    7550:	04100112 	.word	0x04100112
    7554:	000002bd 	.word	0x000002bd
    7558:	002feb0e 	.word	0x002feb0e
    755c:	69040800 	.word	0x69040800
    7560:	000002ee 	.word	0x000002ee
    7564:	002e640c 	.word	0x002e640c
    7568:	ee6a0400 	.word	0xee6a0400
    756c:	02000002 	.word	0x02000002
    7570:	f60c0023 	.word	0xf60c0023
    7574:	0400002d 	.word	0x0400002d
    7578:	0000416b 	.word	0x0000416b
    757c:	04230200 	.word	0x04230200
    7580:	2c041000 	.word	0x2c041000
    7584:	0e000000 	.word	0x0e000000
    7588:	0000300a 	.word	0x0000300a
    758c:	32a9045c 	.word	0x32a9045c
    7590:	0f000004 	.word	0x0f000004
    7594:	0400705f 	.word	0x0400705f
    7598:	0002eeaa 	.word	0x0002eeaa
    759c:	00230200 	.word	0x00230200
    75a0:	00725f0f 	.word	0x00725f0f
    75a4:	0041ab04 	.word	0x0041ab04
    75a8:	23020000 	.word	0x23020000
    75ac:	775f0f04 	.word	0x775f0f04
    75b0:	41ac0400 	.word	0x41ac0400
    75b4:	02000000 	.word	0x02000000
    75b8:	970c0823 	.word	0x970c0823
    75bc:	0400002e 	.word	0x0400002e
    75c0:	000033ad 	.word	0x000033ad
    75c4:	0c230200 	.word	0x0c230200
    75c8:	002f3d0c 	.word	0x002f3d0c
    75cc:	33ae0400 	.word	0x33ae0400
    75d0:	02000000 	.word	0x02000000
    75d4:	5f0f0e23 	.word	0x5f0f0e23
    75d8:	04006662 	.word	0x04006662
    75dc:	0002c5af 	.word	0x0002c5af
    75e0:	10230200 	.word	0x10230200
    75e4:	002e2f0c 	.word	0x002e2f0c
    75e8:	41b00400 	.word	0x41b00400
    75ec:	02000000 	.word	0x02000000
    75f0:	870c1823 	.word	0x870c1823
    75f4:	0400002e 	.word	0x0400002e
    75f8:	0000f3b7 	.word	0x0000f3b7
    75fc:	1c230200 	.word	0x1c230200
    7600:	002f110c 	.word	0x002f110c
    7604:	c1b90400 	.word	0xc1b90400
    7608:	02000005 	.word	0x02000005
    760c:	850c2023 	.word	0x850c2023
    7610:	0400002f 	.word	0x0400002f
    7614:	0005f1bb 	.word	0x0005f1bb
    7618:	24230200 	.word	0x24230200
    761c:	0030730c 	.word	0x0030730c
    7620:	16bd0400 	.word	0x16bd0400
    7624:	02000006 	.word	0x02000006
    7628:	600c2823 	.word	0x600c2823
    762c:	0400000d 	.word	0x0400000d
    7630:	000631be 	.word	0x000631be
    7634:	2c230200 	.word	0x2c230200
    7638:	62755f0f 	.word	0x62755f0f
    763c:	c5c10400 	.word	0xc5c10400
    7640:	02000002 	.word	0x02000002
    7644:	5f0f3023 	.word	0x5f0f3023
    7648:	04007075 	.word	0x04007075
    764c:	0002eec2 	.word	0x0002eec2
    7650:	38230200 	.word	0x38230200
    7654:	72755f0f 	.word	0x72755f0f
    7658:	41c30400 	.word	0x41c30400
    765c:	02000000 	.word	0x02000000
    7660:	5e0c3c23 	.word	0x5e0c3c23
    7664:	0400002e 	.word	0x0400002e
    7668:	000637c6 	.word	0x000637c6
    766c:	40230200 	.word	0x40230200
    7670:	00312a0c 	.word	0x00312a0c
    7674:	47c70400 	.word	0x47c70400
    7678:	02000006 	.word	0x02000006
    767c:	5f0f4323 	.word	0x5f0f4323
    7680:	0400626c 	.word	0x0400626c
    7684:	0002c5ca 	.word	0x0002c5ca
    7688:	44230200 	.word	0x44230200
    768c:	002ead0c 	.word	0x002ead0c
    7690:	41cd0400 	.word	0x41cd0400
    7694:	02000000 	.word	0x02000000
    7698:	be0c4c23 	.word	0xbe0c4c23
    769c:	0400002e 	.word	0x0400002e
    76a0:	000041ce 	.word	0x000041ce
    76a4:	50230200 	.word	0x50230200
    76a8:	00317a0c 	.word	0x00317a0c
    76ac:	51d10400 	.word	0x51d10400
    76b0:	02000004 	.word	0x02000004
    76b4:	790c5423 	.word	0x790c5423
    76b8:	0400002f 	.word	0x0400002f
    76bc:	0000e8d5 	.word	0x0000e8d5
    76c0:	58230200 	.word	0x58230200
    76c4:	41011300 	.word	0x41011300
    76c8:	51000000 	.word	0x51000000
    76cc:	14000004 	.word	0x14000004
    76d0:	00000451 	.word	0x00000451
    76d4:	0000f314 	.word	0x0000f314
    76d8:	05b41400 	.word	0x05b41400
    76dc:	41140000 	.word	0x41140000
    76e0:	00000000 	.word	0x00000000
    76e4:	04570410 	.word	0x04570410
    76e8:	56110000 	.word	0x56110000
    76ec:	00000030 	.word	0x00000030
    76f0:	b4250404 	.word	0xb4250404
    76f4:	15000005 	.word	0x15000005
    76f8:	00003081 	.word	0x00003081
    76fc:	41024104 	.word	0x41024104
    7700:	02000000 	.word	0x02000000
    7704:	a6150023 	.word	0xa6150023
    7708:	0400002e 	.word	0x0400002e
    770c:	06a40246 	.word	0x06a40246
    7710:	23020000 	.word	0x23020000
    7714:	2f2d1504 	.word	0x2f2d1504
    7718:	46040000 	.word	0x46040000
    771c:	0006a402 	.word	0x0006a402
    7720:	08230200 	.word	0x08230200
    7724:	002f0115 	.word	0x002f0115
    7728:	02460400 	.word	0x02460400
    772c:	000006a4 	.word	0x000006a4
    7730:	150c2302 	.word	0x150c2302
    7734:	0000302a 	.word	0x0000302a
    7738:	41024804 	.word	0x41024804
    773c:	02000000 	.word	0x02000000
    7740:	04151023 	.word	0x04151023
    7744:	0400002e 	.word	0x0400002e
    7748:	08af0249 	.word	0x08af0249
    774c:	23020000 	.word	0x23020000
    7750:	30d41514 	.word	0x30d41514
    7754:	4b040000 	.word	0x4b040000
    7758:	00004102 	.word	0x00004102
    775c:	30230200 	.word	0x30230200
    7760:	00303415 	.word	0x00303415
    7764:	024c0400 	.word	0x024c0400
    7768:	000005e6 	.word	0x000005e6
    776c:	15342302 	.word	0x15342302
    7770:	00002fa6 	.word	0x00002fa6
    7774:	41024e04 	.word	0x41024e04
    7778:	02000000 	.word	0x02000000
    777c:	44153823 	.word	0x44153823
    7780:	04000030 	.word	0x04000030
    7784:	08cb0250 	.word	0x08cb0250
    7788:	23020000 	.word	0x23020000
    778c:	0ecb153c 	.word	0x0ecb153c
    7790:	53040000 	.word	0x53040000
    7794:	00016602 	.word	0x00016602
    7798:	40230200 	.word	0x40230200
    779c:	002f1715 	.word	0x002f1715
    77a0:	02540400 	.word	0x02540400
    77a4:	00000041 	.word	0x00000041
    77a8:	15442302 	.word	0x15442302
    77ac:	00003165 	.word	0x00003165
    77b0:	66025504 	.word	0x66025504
    77b4:	02000001 	.word	0x02000001
    77b8:	c0154823 	.word	0xc0154823
    77bc:	0400002f 	.word	0x0400002f
    77c0:	08d10256 	.word	0x08d10256
    77c4:	23020000 	.word	0x23020000
    77c8:	2f35154c 	.word	0x2f35154c
    77cc:	59040000 	.word	0x59040000
    77d0:	00004102 	.word	0x00004102
    77d4:	50230200 	.word	0x50230200
    77d8:	002eb615 	.word	0x002eb615
    77dc:	025a0400 	.word	0x025a0400
    77e0:	000005b4 	.word	0x000005b4
    77e4:	15542302 	.word	0x15542302
    77e8:	00002fdc 	.word	0x00002fdc
    77ec:	8d027c04 	.word	0x8d027c04
    77f0:	02000008 	.word	0x02000008
    77f4:	af155823 	.word	0xaf155823
    77f8:	0400002d 	.word	0x0400002d
    77fc:	02a7027f 	.word	0x02a7027f
    7800:	23030000 	.word	0x23030000
    7804:	4a1502c8 	.word	0x4a1502c8
    7808:	0400002f 	.word	0x0400002f
    780c:	02600280 	.word	0x02600280
    7810:	23030000 	.word	0x23030000
    7814:	201502cc 	.word	0x201502cc
    7818:	04000031 	.word	0x04000031
    781c:	08e30283 	.word	0x08e30283
    7820:	23030000 	.word	0x23030000
    7824:	8f1505dc 	.word	0x8f1505dc
    7828:	0400002e 	.word	0x0400002e
    782c:	06630288 	.word	0x06630288
    7830:	23030000 	.word	0x23030000
    7834:	741505e0 	.word	0x741505e0
    7838:	0400002e 	.word	0x0400002e
    783c:	08ef0289 	.word	0x08ef0289
    7840:	23030000 	.word	0x23030000
    7844:	100005ec 	.word	0x100005ec
    7848:	0005ba04 	.word	0x0005ba04
    784c:	08010200 	.word	0x08010200
    7850:	000005db 	.word	0x000005db
    7854:	04320410 	.word	0x04320410
    7858:	01130000 	.word	0x01130000
    785c:	00000041 	.word	0x00000041
    7860:	000005e6 	.word	0x000005e6
    7864:	00045114 	.word	0x00045114
    7868:	00f31400 	.word	0x00f31400
    786c:	e6140000 	.word	0xe6140000
    7870:	14000005 	.word	0x14000005
    7874:	00000041 	.word	0x00000041
    7878:	ec041000 	.word	0xec041000
    787c:	16000005 	.word	0x16000005
    7880:	000005ba 	.word	0x000005ba
    7884:	05c70410 	.word	0x05c70410
    7888:	01130000 	.word	0x01130000
    788c:	0000006f 	.word	0x0000006f
    7890:	00000616 	.word	0x00000616
    7894:	00045114 	.word	0x00045114
    7898:	00f31400 	.word	0x00f31400
    789c:	6f140000 	.word	0x6f140000
    78a0:	14000000 	.word	0x14000000
    78a4:	00000041 	.word	0x00000041
    78a8:	f7041000 	.word	0xf7041000
    78ac:	13000005 	.word	0x13000005
    78b0:	00004101 	.word	0x00004101
    78b4:	00063100 	.word	0x00063100
    78b8:	04511400 	.word	0x04511400
    78bc:	f3140000 	.word	0xf3140000
    78c0:	00000000 	.word	0x00000000
    78c4:	061c0410 	.word	0x061c0410
    78c8:	2c080000 	.word	0x2c080000
    78cc:	47000000 	.word	0x47000000
    78d0:	09000006 	.word	0x09000006
    78d4:	000000b5 	.word	0x000000b5
    78d8:	2c080002 	.word	0x2c080002
    78dc:	57000000 	.word	0x57000000
    78e0:	09000006 	.word	0x09000006
    78e4:	000000b5 	.word	0x000000b5
    78e8:	f8050000 	.word	0xf8050000
    78ec:	0400002f 	.word	0x0400002f
    78f0:	02f4010e 	.word	0x02f4010e
    78f4:	07170000 	.word	0x07170000
    78f8:	0c000031 	.word	0x0c000031
    78fc:	9e011304 	.word	0x9e011304
    7900:	15000006 	.word	0x15000006
    7904:	00003017 	.word	0x00003017
    7908:	9e011404 	.word	0x9e011404
    790c:	02000006 	.word	0x02000006
    7910:	43150023 	.word	0x43150023
    7914:	0400002f 	.word	0x0400002f
    7918:	00410115 	.word	0x00410115
    791c:	23020000 	.word	0x23020000
    7920:	2ff21504 	.word	0x2ff21504
    7924:	16040000 	.word	0x16040000
    7928:	0006a401 	.word	0x0006a401
    792c:	08230200 	.word	0x08230200
    7930:	63041000 	.word	0x63041000
    7934:	10000006 	.word	0x10000006
    7938:	00065704 	.word	0x00065704
    793c:	2dfc1700 	.word	0x2dfc1700
    7940:	040e0000 	.word	0x040e0000
    7944:	06e5012e 	.word	0x06e5012e
    7948:	5d150000 	.word	0x5d150000
    794c:	04000030 	.word	0x04000030
    7950:	06e5012f 	.word	0x06e5012f
    7954:	23020000 	.word	0x23020000
    7958:	2f7f1500 	.word	0x2f7f1500
    795c:	30040000 	.word	0x30040000
    7960:	0006e501 	.word	0x0006e501
    7964:	06230200 	.word	0x06230200
    7968:	0030a715 	.word	0x0030a715
    796c:	01310400 	.word	0x01310400
    7970:	0000003a 	.word	0x0000003a
    7974:	000c2302 	.word	0x000c2302
    7978:	00003a08 	.word	0x00003a08
    797c:	0006f500 	.word	0x0006f500
    7980:	00b50900 	.word	0x00b50900
    7984:	00020000 	.word	0x00020000
    7988:	5f04d018 	.word	0x5f04d018
    798c:	00081502 	.word	0x00081502
    7990:	30eb1500 	.word	0x30eb1500
    7994:	60040000 	.word	0x60040000
    7998:	00004802 	.word	0x00004802
    799c:	00230200 	.word	0x00230200
    79a0:	00309115 	.word	0x00309115
    79a4:	02610400 	.word	0x02610400
    79a8:	000005b4 	.word	0x000005b4
    79ac:	15042302 	.word	0x15042302
    79b0:	00002f5f 	.word	0x00002f5f
    79b4:	15026204 	.word	0x15026204
    79b8:	02000008 	.word	0x02000008
    79bc:	43150823 	.word	0x43150823
    79c0:	04000031 	.word	0x04000031
    79c4:	017c0263 	.word	0x017c0263
    79c8:	23020000 	.word	0x23020000
    79cc:	2fb11524 	.word	0x2fb11524
    79d0:	64040000 	.word	0x64040000
    79d4:	00004102 	.word	0x00004102
    79d8:	48230200 	.word	0x48230200
    79dc:	00301215 	.word	0x00301215
    79e0:	02650400 	.word	0x02650400
    79e4:	00000056 	.word	0x00000056
    79e8:	15502302 	.word	0x15502302
    79ec:	00003152 	.word	0x00003152
    79f0:	aa026604 	.word	0xaa026604
    79f4:	02000006 	.word	0x02000006
    79f8:	1d155823 	.word	0x1d155823
    79fc:	04000030 	.word	0x04000030
    7a00:	00dd0267 	.word	0x00dd0267
    7a04:	23020000 	.word	0x23020000
    7a08:	31571568 	.word	0x31571568
    7a0c:	68040000 	.word	0x68040000
    7a10:	0000dd02 	.word	0x0000dd02
    7a14:	70230200 	.word	0x70230200
    7a18:	002e4715 	.word	0x002e4715
    7a1c:	02690400 	.word	0x02690400
    7a20:	000000dd 	.word	0x000000dd
    7a24:	15782302 	.word	0x15782302
    7a28:	00003116 	.word	0x00003116
    7a2c:	25026a04 	.word	0x25026a04
    7a30:	03000008 	.word	0x03000008
    7a34:	15018023 	.word	0x15018023
    7a38:	00002f53 	.word	0x00002f53
    7a3c:	35026b04 	.word	0x35026b04
    7a40:	03000008 	.word	0x03000008
    7a44:	15018823 	.word	0x15018823
    7a48:	000030b4 	.word	0x000030b4
    7a4c:	41026c04 	.word	0x41026c04
    7a50:	03000000 	.word	0x03000000
    7a54:	1501a023 	.word	0x1501a023
    7a58:	00002ed7 	.word	0x00002ed7
    7a5c:	dd026d04 	.word	0xdd026d04
    7a60:	03000000 	.word	0x03000000
    7a64:	1501a423 	.word	0x1501a423
    7a68:	00002e38 	.word	0x00002e38
    7a6c:	dd026e04 	.word	0xdd026e04
    7a70:	03000000 	.word	0x03000000
    7a74:	1501ac23 	.word	0x1501ac23
    7a78:	00002ec6 	.word	0x00002ec6
    7a7c:	dd026f04 	.word	0xdd026f04
    7a80:	03000000 	.word	0x03000000
    7a84:	1501b423 	.word	0x1501b423
    7a88:	00002e0f 	.word	0x00002e0f
    7a8c:	dd027004 	.word	0xdd027004
    7a90:	03000000 	.word	0x03000000
    7a94:	1501bc23 	.word	0x1501bc23
    7a98:	00002e1e 	.word	0x00002e1e
    7a9c:	dd027104 	.word	0xdd027104
    7aa0:	03000000 	.word	0x03000000
    7aa4:	0001c423 	.word	0x0001c423
    7aa8:	0005ba08 	.word	0x0005ba08
    7aac:	00082500 	.word	0x00082500
    7ab0:	00b50900 	.word	0x00b50900
    7ab4:	00190000 	.word	0x00190000
    7ab8:	0005ba08 	.word	0x0005ba08
    7abc:	00083500 	.word	0x00083500
    7ac0:	00b50900 	.word	0x00b50900
    7ac4:	00070000 	.word	0x00070000
    7ac8:	0005ba08 	.word	0x0005ba08
    7acc:	00084500 	.word	0x00084500
    7ad0:	00b50900 	.word	0x00b50900
    7ad4:	00170000 	.word	0x00170000
    7ad8:	7704f018 	.word	0x7704f018
    7adc:	00086d02 	.word	0x00086d02
    7ae0:	2f961500 	.word	0x2f961500
    7ae4:	79040000 	.word	0x79040000
    7ae8:	00086d02 	.word	0x00086d02
    7aec:	00230200 	.word	0x00230200
    7af0:	00310d15 	.word	0x00310d15
    7af4:	027a0400 	.word	0x027a0400
    7af8:	0000087d 	.word	0x0000087d
    7afc:	00782302 	.word	0x00782302
    7b00:	0002ee08 	.word	0x0002ee08
    7b04:	00087d00 	.word	0x00087d00
    7b08:	00b50900 	.word	0x00b50900
    7b0c:	001d0000 	.word	0x001d0000
    7b10:	00004808 	.word	0x00004808
    7b14:	00088d00 	.word	0x00088d00
    7b18:	00b50900 	.word	0x00b50900
    7b1c:	001d0000 	.word	0x001d0000
    7b20:	5d04f019 	.word	0x5d04f019
    7b24:	0008af02 	.word	0x0008af02
    7b28:	30561a00 	.word	0x30561a00
    7b2c:	72040000 	.word	0x72040000
    7b30:	0006f502 	.word	0x0006f502
    7b34:	31301a00 	.word	0x31301a00
    7b38:	7b040000 	.word	0x7b040000
    7b3c:	00084502 	.word	0x00084502
    7b40:	ba080000 	.word	0xba080000
    7b44:	bf000005 	.word	0xbf000005
    7b48:	09000008 	.word	0x09000008
    7b4c:	000000b5 	.word	0x000000b5
    7b50:	011b0018 	.word	0x011b0018
    7b54:	000008cb 	.word	0x000008cb
    7b58:	00045114 	.word	0x00045114
    7b5c:	04100000 	.word	0x04100000
    7b60:	000008bf 	.word	0x000008bf
    7b64:	01660410 	.word	0x01660410
    7b68:	011b0000 	.word	0x011b0000
    7b6c:	000008e3 	.word	0x000008e3
    7b70:	00004114 	.word	0x00004114
    7b74:	04100000 	.word	0x04100000
    7b78:	000008e9 	.word	0x000008e9
    7b7c:	08d70410 	.word	0x08d70410
    7b80:	57080000 	.word	0x57080000
    7b84:	ff000006 	.word	0xff000006
    7b88:	09000008 	.word	0x09000008
    7b8c:	000000b5 	.word	0x000000b5
    7b90:	741c0002 	.word	0x741c0002
    7b94:	05000031 	.word	0x05000031
    7b98:	0004570c 	.word	0x0004570c
    7b9c:	00030500 	.word	0x00030500
    7ba0:	1d000000 	.word	0x1d000000
    7ba4:	000030c8 	.word	0x000030c8
    7ba8:	04511005 	.word	0x04511005
    7bac:	05010000 	.word	0x05010000
    7bb0:	00000003 	.word	0x00000003
    7bb4:	30c11d00 	.word	0x30c11d00
    7bb8:	11050000 	.word	0x11050000
    7bbc:	00000934 	.word	0x00000934
    7bc0:	00030501 	.word	0x00030501
    7bc4:	16000000 	.word	0x16000000
    7bc8:	00000451 	.word	0x00000451
    7bcc:	00014200 	.word	0x00014200
    7bd0:	9e000200 	.word	0x9e000200
    7bd4:	04000019 	.word	0x04000019
    7bd8:	00048801 	.word	0x00048801
    7bdc:	32290100 	.word	0x32290100
    7be0:	327d0000 	.word	0x327d0000
	...
    7bec:	19d20000 	.word	0x19d20000
    7bf0:	01020000 	.word	0x01020000
    7bf4:	0005d406 	.word	0x0005d406
    7bf8:	08010200 	.word	0x08010200
    7bfc:	000005d2 	.word	0x000005d2
    7c00:	0f050202 	.word	0x0f050202
    7c04:	02000005 	.word	0x02000005
    7c08:	07120702 	.word	0x07120702
    7c0c:	04030000 	.word	0x04030000
    7c10:	746e6905 	.word	0x746e6905
    7c14:	07040200 	.word	0x07040200
    7c18:	00002d7a 	.word	0x00002d7a
    7c1c:	f6050802 	.word	0xf6050802
    7c20:	0200002c 	.word	0x0200002c
    7c24:	2d700708 	.word	0x2d700708
    7c28:	04020000 	.word	0x04020000
    7c2c:	002cfb05 	.word	0x002cfb05
    7c30:	07040400 	.word	0x07040400
    7c34:	0031fd05 	.word	0x0031fd05
    7c38:	48d60200 	.word	0x48d60200
    7c3c:	02000000 	.word	0x02000000
    7c40:	2d750704 	.word	0x2d750704
    7c44:	01020000 	.word	0x01020000
    7c48:	0005db08 	.word	0x0005db08
    7c4c:	b2010600 	.word	0xb2010600
    7c50:	01000032 	.word	0x01000032
    7c54:	00000132 	.word	0x00000132
    7c58:	00000000 	.word	0x00000000
    7c5c:	2c6b0000 	.word	0x2c6b0000
    7c60:	00b20000 	.word	0x00b20000
    7c64:	65070000 	.word	0x65070000
    7c68:	01000030 	.word	0x01000030
    7c6c:	00006733 	.word	0x00006733
    7c70:	08550100 	.word	0x08550100
    7c74:	34010069 	.word	0x34010069
    7c78:	00000067 	.word	0x00000067
    7c7c:	06005401 	.word	0x06005401
    7c80:	00326b01 	.word	0x00326b01
    7c84:	01200100 	.word	0x01200100
	...
    7c90:	00002c8a 	.word	0x00002c8a
    7c94:	000000e4 	.word	0x000000e4
    7c98:	00306507 	.word	0x00306507
    7c9c:	67210100 	.word	0x67210100
    7ca0:	01000000 	.word	0x01000000
    7ca4:	00690855 	.word	0x00690855
    7ca8:	00672201 	.word	0x00672201
    7cac:	54010000 	.word	0x54010000
    7cb0:	00f10900 	.word	0x00f10900
    7cb4:	00ef0000 	.word	0x00ef0000
    7cb8:	000a0000 	.word	0x000a0000
    7cbc:	040c010b 	.word	0x040c010b
    7cc0:	000000ef 	.word	0x000000ef
    7cc4:	0032c40d 	.word	0x0032c40d
    7cc8:	e4130100 	.word	0xe4130100
    7ccc:	01000000 	.word	0x01000000
    7cd0:	32150d01 	.word	0x32150d01
    7cd4:	14010000 	.word	0x14010000
    7cd8:	000000e4 	.word	0x000000e4
    7cdc:	da0d0101 	.word	0xda0d0101
    7ce0:	01000032 	.word	0x01000032
    7ce4:	0000e415 	.word	0x0000e415
    7ce8:	0d010100 	.word	0x0d010100
    7cec:	0000325a 	.word	0x0000325a
    7cf0:	00e41601 	.word	0x00e41601
    7cf4:	01010000 	.word	0x01010000
    7cf8:	0031ea0d 	.word	0x0031ea0d
    7cfc:	e4170100 	.word	0xe4170100
    7d00:	01000000 	.word	0x01000000
    7d04:	32040d01 	.word	0x32040d01
    7d08:	18010000 	.word	0x18010000
    7d0c:	000000e4 	.word	0x000000e4
    7d10:	0f000101 	.word	0x0f000101
    7d14:	02000001 	.word	0x02000001
    7d18:	001a4200 	.word	0x001a4200
    7d1c:	88010400 	.word	0x88010400
    7d20:	01000004 	.word	0x01000004
    7d24:	00003331 	.word	0x00003331
    7d28:	000032fa 	.word	0x000032fa
	...
    7d34:	00001a78 	.word	0x00001a78
    7d38:	d4060102 	.word	0xd4060102
    7d3c:	02000005 	.word	0x02000005
    7d40:	05d20801 	.word	0x05d20801
    7d44:	02020000 	.word	0x02020000
    7d48:	00050f05 	.word	0x00050f05
    7d4c:	07020200 	.word	0x07020200
    7d50:	00000712 	.word	0x00000712
    7d54:	69050403 	.word	0x69050403
    7d58:	0200746e 	.word	0x0200746e
    7d5c:	2d7a0704 	.word	0x2d7a0704
    7d60:	08020000 	.word	0x08020000
    7d64:	002cf605 	.word	0x002cf605
    7d68:	07080200 	.word	0x07080200
    7d6c:	00002d70 	.word	0x00002d70
    7d70:	fb050402 	.word	0xfb050402
    7d74:	0400002c 	.word	0x0400002c
    7d78:	04050704 	.word	0x04050704
    7d7c:	75070402 	.word	0x75070402
    7d80:	0600002d 	.word	0x0600002d
    7d84:	00007604 	.word	0x00007604
    7d88:	08010200 	.word	0x08010200
    7d8c:	000005db 	.word	0x000005db
    7d90:	0031fd07 	.word	0x0031fd07
    7d94:	48d60200 	.word	0x48d60200
    7d98:	08000000 	.word	0x08000000
    7d9c:	00336601 	.word	0x00336601
    7da0:	012f0100 	.word	0x012f0100
    7da4:	00000067 	.word	0x00000067
	...
    7db0:	00002ca9 	.word	0x00002ca9
    7db4:	0000010c 	.word	0x0000010c
    7db8:	01006d09 	.word	0x01006d09
    7dbc:	0000672b 	.word	0x0000672b
    7dc0:	002cc800 	.word	0x002cc800
    7dc4:	00630900 	.word	0x00630900
    7dc8:	00412b01 	.word	0x00412b01
    7dcc:	2cfc0000 	.word	0x2cfc0000
    7dd0:	6e090000 	.word	0x6e090000
    7dd4:	7d2b0100 	.word	0x7d2b0100
    7dd8:	25000000 	.word	0x25000000
    7ddc:	0a00002d 	.word	0x0a00002d
    7de0:	3a010073 	.word	0x3a010073
    7de4:	00000070 	.word	0x00000070
    7de8:	00002d59 	.word	0x00002d59
    7dec:	0100690b 	.word	0x0100690b
    7df0:	0000413b 	.word	0x0000413b
    7df4:	336d0c00 	.word	0x336d0c00
    7df8:	3c010000 	.word	0x3c010000
    7dfc:	00000069 	.word	0x00000069
    7e00:	00002d77 	.word	0x00002d77
    7e04:	0032ed0c 	.word	0x0032ed0c
    7e08:	0c3d0100 	.word	0x0c3d0100
    7e0c:	a0000001 	.word	0xa0000001
    7e10:	0d00002d 	.word	0x0d00002d
    7e14:	3e010064 	.word	0x3e010064
    7e18:	00000048 	.word	0x00000048
    7e1c:	06005501 	.word	0x06005501
    7e20:	00006904 	.word	0x00006904
    7e24:	09a10000 	.word	0x09a10000
    7e28:	00020000 	.word	0x00020000
    7e2c:	00001af4 	.word	0x00001af4
    7e30:	04880104 	.word	0x04880104
    7e34:	74010000 	.word	0x74010000
    7e38:	04000033 	.word	0x04000033
    7e3c:	0000002d 	.word	0x0000002d
    7e40:	00000000 	.word	0x00000000
    7e44:	54000000 	.word	0x54000000
    7e48:	0200001b 	.word	0x0200001b
    7e4c:	6e690504 	.word	0x6e690504
    7e50:	04030074 	.word	0x04030074
    7e54:	002d7a07 	.word	0x002d7a07
    7e58:	06010300 	.word	0x06010300
    7e5c:	000005d4 	.word	0x000005d4
    7e60:	d2080103 	.word	0xd2080103
    7e64:	03000005 	.word	0x03000005
    7e68:	050f0502 	.word	0x050f0502
    7e6c:	02030000 	.word	0x02030000
    7e70:	00071207 	.word	0x00071207
    7e74:	05080300 	.word	0x05080300
    7e78:	00002cf6 	.word	0x00002cf6
    7e7c:	70070803 	.word	0x70070803
    7e80:	0400002d 	.word	0x0400002d
    7e84:	00002fca 	.word	0x00002fca
    7e88:	00250702 	.word	0x00250702
    7e8c:	04030000 	.word	0x04030000
    7e90:	002cfb05 	.word	0x002cfb05
    7e94:	30790400 	.word	0x30790400
    7e98:	2c030000 	.word	0x2c030000
    7e9c:	00000068 	.word	0x00000068
    7ea0:	002f7205 	.word	0x002f7205
    7ea4:	01630400 	.word	0x01630400
    7ea8:	0000002c 	.word	0x0000002c
    7eac:	47030406 	.word	0x47030406
    7eb0:	000000a5 	.word	0x000000a5
    7eb4:	002f6c07 	.word	0x002f6c07
    7eb8:	7a480300 	.word	0x7a480300
    7ebc:	07000000 	.word	0x07000000
    7ec0:	00002f26 	.word	0x00002f26
    7ec4:	00a54903 	.word	0x00a54903
    7ec8:	08000000 	.word	0x08000000
    7ecc:	0000003a 	.word	0x0000003a
    7ed0:	000000b5 	.word	0x000000b5
    7ed4:	0000b509 	.word	0x0000b509
    7ed8:	0a000300 	.word	0x0a000300
    7edc:	080b0704 	.word	0x080b0704
    7ee0:	00dd4403 	.word	0x00dd4403
    7ee4:	630c0000 	.word	0x630c0000
    7ee8:	03000030 	.word	0x03000030
    7eec:	00002545 	.word	0x00002545
    7ef0:	00230200 	.word	0x00230200
    7ef4:	00306b0c 	.word	0x00306b0c
    7ef8:	864a0300 	.word	0x864a0300
    7efc:	02000000 	.word	0x02000000
    7f00:	04000423 	.word	0x04000423
    7f04:	00002fff 	.word	0x00002fff
    7f08:	00b84b03 	.word	0x00b84b03
    7f0c:	f8040000 	.word	0xf8040000
    7f10:	0300002e 	.word	0x0300002e
    7f14:	00005d4f 	.word	0x00005d4f
    7f18:	04040d00 	.word	0x04040d00
    7f1c:	000030ac 	.word	0x000030ac
    7f20:	01001505 	.word	0x01001505
    7f24:	04030000 	.word	0x04030000
    7f28:	002d7507 	.word	0x002d7507
    7f2c:	2f090e00 	.word	0x2f090e00
    7f30:	05180000 	.word	0x05180000
    7f34:	0001662d 	.word	0x0001662d
    7f38:	30170c00 	.word	0x30170c00
    7f3c:	2e050000 	.word	0x2e050000
    7f40:	00000166 	.word	0x00000166
    7f44:	0f002302 	.word	0x0f002302
    7f48:	05006b5f 	.word	0x05006b5f
    7f4c:	0000252f 	.word	0x0000252f
    7f50:	04230200 	.word	0x04230200
    7f54:	00304e0c 	.word	0x00304e0c
    7f58:	252f0500 	.word	0x252f0500
    7f5c:	02000000 	.word	0x02000000
    7f60:	f20c0823 	.word	0xf20c0823
    7f64:	0500002e 	.word	0x0500002e
    7f68:	0000252f 	.word	0x0000252f
    7f6c:	0c230200 	.word	0x0c230200
    7f70:	0030f80c 	.word	0x0030f80c
    7f74:	252f0500 	.word	0x252f0500
    7f78:	02000000 	.word	0x02000000
    7f7c:	5f0f1023 	.word	0x5f0f1023
    7f80:	30050078 	.word	0x30050078
    7f84:	0000016c 	.word	0x0000016c
    7f88:	00142302 	.word	0x00142302
    7f8c:	01070410 	.word	0x01070410
    7f90:	f5080000 	.word	0xf5080000
    7f94:	7c000000 	.word	0x7c000000
    7f98:	09000001 	.word	0x09000001
    7f9c:	000000b5 	.word	0x000000b5
    7fa0:	210e0000 	.word	0x210e0000
    7fa4:	2400002f 	.word	0x2400002f
    7fa8:	02073505 	.word	0x02073505
    7fac:	550c0000 	.word	0x550c0000
    7fb0:	0500002e 	.word	0x0500002e
    7fb4:	00002536 	.word	0x00002536
    7fb8:	00230200 	.word	0x00230200
    7fbc:	0030880c 	.word	0x0030880c
    7fc0:	25370500 	.word	0x25370500
    7fc4:	02000000 	.word	0x02000000
    7fc8:	6a0c0423 	.word	0x6a0c0423
    7fcc:	0500002e 	.word	0x0500002e
    7fd0:	00002538 	.word	0x00002538
    7fd4:	08230200 	.word	0x08230200
    7fd8:	00316a0c 	.word	0x00316a0c
    7fdc:	25390500 	.word	0x25390500
    7fe0:	02000000 	.word	0x02000000
    7fe4:	9d0c0c23 	.word	0x9d0c0c23
    7fe8:	0500002f 	.word	0x0500002f
    7fec:	0000253a 	.word	0x0000253a
    7ff0:	10230200 	.word	0x10230200
    7ff4:	002f8c0c 	.word	0x002f8c0c
    7ff8:	253b0500 	.word	0x253b0500
    7ffc:	02000000 	.word	0x02000000
    8000:	fd0c1423 	.word	0xfd0c1423
    8004:	05000030 	.word	0x05000030
    8008:	0000253c 	.word	0x0000253c
    800c:	18230200 	.word	0x18230200
    8010:	002fe10c 	.word	0x002fe10c
    8014:	253d0500 	.word	0x253d0500
    8018:	02000000 	.word	0x02000000
    801c:	380c1c23 	.word	0x380c1c23
    8020:	05000031 	.word	0x05000031
    8024:	0000253e 	.word	0x0000253e
    8028:	20230200 	.word	0x20230200
    802c:	2e791100 	.word	0x2e791100
    8030:	01080000 	.word	0x01080000
    8034:	02504705 	.word	0x02504705
    8038:	e50c0000 	.word	0xe50c0000
    803c:	0500002e 	.word	0x0500002e
    8040:	00025048 	.word	0x00025048
    8044:	00230200 	.word	0x00230200
    8048:	002db70c 	.word	0x002db70c
    804c:	50490500 	.word	0x50490500
    8050:	03000002 	.word	0x03000002
    8054:	0c018023 	.word	0x0c018023
    8058:	0000309e 	.word	0x0000309e
    805c:	00f54b05 	.word	0x00f54b05
    8060:	23030000 	.word	0x23030000
    8064:	9e0c0280 	.word	0x9e0c0280
    8068:	0500002e 	.word	0x0500002e
    806c:	0000f54e 	.word	0x0000f54e
    8070:	84230300 	.word	0x84230300
    8074:	f3080002 	.word	0xf3080002
    8078:	60000000 	.word	0x60000000
    807c:	09000002 	.word	0x09000002
    8080:	000000b5 	.word	0x000000b5
    8084:	af11001f 	.word	0xaf11001f
    8088:	9000002d 	.word	0x9000002d
    808c:	a7590501 	.word	0xa7590501
    8090:	0c000002 	.word	0x0c000002
    8094:	00003017 	.word	0x00003017
    8098:	02a75a05 	.word	0x02a75a05
    809c:	23020000 	.word	0x23020000
    80a0:	302f0c00 	.word	0x302f0c00
    80a4:	5b050000 	.word	0x5b050000
    80a8:	00000025 	.word	0x00000025
    80ac:	0c042302 	.word	0x0c042302
    80b0:	00002eed 	.word	0x00002eed
    80b4:	02ad5d05 	.word	0x02ad5d05
    80b8:	23020000 	.word	0x23020000
    80bc:	2e790c08 	.word	0x2e790c08
    80c0:	5e050000 	.word	0x5e050000
    80c4:	00000207 	.word	0x00000207
    80c8:	01882303 	.word	0x01882303
    80cc:	60041000 	.word	0x60041000
    80d0:	08000002 	.word	0x08000002
    80d4:	000002bf 	.word	0x000002bf
    80d8:	000002bd 	.word	0x000002bd
    80dc:	0000b509 	.word	0x0000b509
    80e0:	12001f00 	.word	0x12001f00
    80e4:	bd041001 	.word	0xbd041001
    80e8:	0e000002 	.word	0x0e000002
    80ec:	00002feb 	.word	0x00002feb
    80f0:	ee690508 	.word	0xee690508
    80f4:	0c000002 	.word	0x0c000002
    80f8:	00002e64 	.word	0x00002e64
    80fc:	02ee6a05 	.word	0x02ee6a05
    8100:	23020000 	.word	0x23020000
    8104:	2df60c00 	.word	0x2df60c00
    8108:	6b050000 	.word	0x6b050000
    810c:	00000025 	.word	0x00000025
    8110:	00042302 	.word	0x00042302
    8114:	003a0410 	.word	0x003a0410
    8118:	0a0e0000 	.word	0x0a0e0000
    811c:	5c000030 	.word	0x5c000030
    8120:	0432a905 	.word	0x0432a905
    8124:	5f0f0000 	.word	0x5f0f0000
    8128:	aa050070 	.word	0xaa050070
    812c:	000002ee 	.word	0x000002ee
    8130:	0f002302 	.word	0x0f002302
    8134:	0500725f 	.word	0x0500725f
    8138:	000025ab 	.word	0x000025ab
    813c:	04230200 	.word	0x04230200
    8140:	00775f0f 	.word	0x00775f0f
    8144:	0025ac05 	.word	0x0025ac05
    8148:	23020000 	.word	0x23020000
    814c:	2e970c08 	.word	0x2e970c08
    8150:	ad050000 	.word	0xad050000
    8154:	00000041 	.word	0x00000041
    8158:	0c0c2302 	.word	0x0c0c2302
    815c:	00002f3d 	.word	0x00002f3d
    8160:	0041ae05 	.word	0x0041ae05
    8164:	23020000 	.word	0x23020000
    8168:	625f0f0e 	.word	0x625f0f0e
    816c:	af050066 	.word	0xaf050066
    8170:	000002c5 	.word	0x000002c5
    8174:	0c102302 	.word	0x0c102302
    8178:	00002e2f 	.word	0x00002e2f
    817c:	0025b005 	.word	0x0025b005
    8180:	23020000 	.word	0x23020000
    8184:	2e870c18 	.word	0x2e870c18
    8188:	b7050000 	.word	0xb7050000
    818c:	000000f3 	.word	0x000000f3
    8190:	0c1c2302 	.word	0x0c1c2302
    8194:	00002f11 	.word	0x00002f11
    8198:	05c1b905 	.word	0x05c1b905
    819c:	23020000 	.word	0x23020000
    81a0:	2f850c20 	.word	0x2f850c20
    81a4:	bb050000 	.word	0xbb050000
    81a8:	000005f1 	.word	0x000005f1
    81ac:	0c242302 	.word	0x0c242302
    81b0:	00003073 	.word	0x00003073
    81b4:	0616bd05 	.word	0x0616bd05
    81b8:	23020000 	.word	0x23020000
    81bc:	0d600c28 	.word	0x0d600c28
    81c0:	be050000 	.word	0xbe050000
    81c4:	00000631 	.word	0x00000631
    81c8:	0f2c2302 	.word	0x0f2c2302
    81cc:	0062755f 	.word	0x0062755f
    81d0:	02c5c105 	.word	0x02c5c105
    81d4:	23020000 	.word	0x23020000
    81d8:	755f0f30 	.word	0x755f0f30
    81dc:	c2050070 	.word	0xc2050070
    81e0:	000002ee 	.word	0x000002ee
    81e4:	0f382302 	.word	0x0f382302
    81e8:	0072755f 	.word	0x0072755f
    81ec:	0025c305 	.word	0x0025c305
    81f0:	23020000 	.word	0x23020000
    81f4:	2e5e0c3c 	.word	0x2e5e0c3c
    81f8:	c6050000 	.word	0xc6050000
    81fc:	00000637 	.word	0x00000637
    8200:	0c402302 	.word	0x0c402302
    8204:	0000312a 	.word	0x0000312a
    8208:	0647c705 	.word	0x0647c705
    820c:	23020000 	.word	0x23020000
    8210:	6c5f0f43 	.word	0x6c5f0f43
    8214:	ca050062 	.word	0xca050062
    8218:	000002c5 	.word	0x000002c5
    821c:	0c442302 	.word	0x0c442302
    8220:	00002ead 	.word	0x00002ead
    8224:	0025cd05 	.word	0x0025cd05
    8228:	23020000 	.word	0x23020000
    822c:	2ebe0c4c 	.word	0x2ebe0c4c
    8230:	ce050000 	.word	0xce050000
    8234:	00000025 	.word	0x00000025
    8238:	0c502302 	.word	0x0c502302
    823c:	0000317a 	.word	0x0000317a
    8240:	0451d105 	.word	0x0451d105
    8244:	23020000 	.word	0x23020000
    8248:	2f790c54 	.word	0x2f790c54
    824c:	d5050000 	.word	0xd5050000
    8250:	000000e8 	.word	0x000000e8
    8254:	00582302 	.word	0x00582302
    8258:	00250113 	.word	0x00250113
    825c:	04510000 	.word	0x04510000
    8260:	51140000 	.word	0x51140000
    8264:	14000004 	.word	0x14000004
    8268:	000000f3 	.word	0x000000f3
    826c:	0005b414 	.word	0x0005b414
    8270:	00251400 	.word	0x00251400
    8274:	10000000 	.word	0x10000000
    8278:	00045704 	.word	0x00045704
    827c:	30561100 	.word	0x30561100
    8280:	04000000 	.word	0x04000000
    8284:	05b42505 	.word	0x05b42505
    8288:	81150000 	.word	0x81150000
    828c:	05000030 	.word	0x05000030
    8290:	00250241 	.word	0x00250241
    8294:	23020000 	.word	0x23020000
    8298:	2ea61500 	.word	0x2ea61500
    829c:	46050000 	.word	0x46050000
    82a0:	0006a402 	.word	0x0006a402
    82a4:	04230200 	.word	0x04230200
    82a8:	002f2d15 	.word	0x002f2d15
    82ac:	02460500 	.word	0x02460500
    82b0:	000006a4 	.word	0x000006a4
    82b4:	15082302 	.word	0x15082302
    82b8:	00002f01 	.word	0x00002f01
    82bc:	a4024605 	.word	0xa4024605
    82c0:	02000006 	.word	0x02000006
    82c4:	2a150c23 	.word	0x2a150c23
    82c8:	05000030 	.word	0x05000030
    82cc:	00250248 	.word	0x00250248
    82d0:	23020000 	.word	0x23020000
    82d4:	2e041510 	.word	0x2e041510
    82d8:	49050000 	.word	0x49050000
    82dc:	0008af02 	.word	0x0008af02
    82e0:	14230200 	.word	0x14230200
    82e4:	0030d415 	.word	0x0030d415
    82e8:	024b0500 	.word	0x024b0500
    82ec:	00000025 	.word	0x00000025
    82f0:	15302302 	.word	0x15302302
    82f4:	00003034 	.word	0x00003034
    82f8:	e6024c05 	.word	0xe6024c05
    82fc:	02000005 	.word	0x02000005
    8300:	a6153423 	.word	0xa6153423
    8304:	0500002f 	.word	0x0500002f
    8308:	0025024e 	.word	0x0025024e
    830c:	23020000 	.word	0x23020000
    8310:	30441538 	.word	0x30441538
    8314:	50050000 	.word	0x50050000
    8318:	0008cb02 	.word	0x0008cb02
    831c:	3c230200 	.word	0x3c230200
    8320:	000ecb15 	.word	0x000ecb15
    8324:	02530500 	.word	0x02530500
    8328:	00000166 	.word	0x00000166
    832c:	15402302 	.word	0x15402302
    8330:	00002f17 	.word	0x00002f17
    8334:	25025405 	.word	0x25025405
    8338:	02000000 	.word	0x02000000
    833c:	65154423 	.word	0x65154423
    8340:	05000031 	.word	0x05000031
    8344:	01660255 	.word	0x01660255
    8348:	23020000 	.word	0x23020000
    834c:	2fc01548 	.word	0x2fc01548
    8350:	56050000 	.word	0x56050000
    8354:	0008d102 	.word	0x0008d102
    8358:	4c230200 	.word	0x4c230200
    835c:	002f3515 	.word	0x002f3515
    8360:	02590500 	.word	0x02590500
    8364:	00000025 	.word	0x00000025
    8368:	15502302 	.word	0x15502302
    836c:	00002eb6 	.word	0x00002eb6
    8370:	b4025a05 	.word	0xb4025a05
    8374:	02000005 	.word	0x02000005
    8378:	dc155423 	.word	0xdc155423
    837c:	0500002f 	.word	0x0500002f
    8380:	088d027c 	.word	0x088d027c
    8384:	23020000 	.word	0x23020000
    8388:	2daf1558 	.word	0x2daf1558
    838c:	7f050000 	.word	0x7f050000
    8390:	0002a702 	.word	0x0002a702
    8394:	c8230300 	.word	0xc8230300
    8398:	2f4a1502 	.word	0x2f4a1502
    839c:	80050000 	.word	0x80050000
    83a0:	00026002 	.word	0x00026002
    83a4:	cc230300 	.word	0xcc230300
    83a8:	31201502 	.word	0x31201502
    83ac:	83050000 	.word	0x83050000
    83b0:	0008e302 	.word	0x0008e302
    83b4:	dc230300 	.word	0xdc230300
    83b8:	2e8f1505 	.word	0x2e8f1505
    83bc:	88050000 	.word	0x88050000
    83c0:	00066302 	.word	0x00066302
    83c4:	e0230300 	.word	0xe0230300
    83c8:	2e741505 	.word	0x2e741505
    83cc:	89050000 	.word	0x89050000
    83d0:	0008ef02 	.word	0x0008ef02
    83d4:	ec230300 	.word	0xec230300
    83d8:	04100005 	.word	0x04100005
    83dc:	000005ba 	.word	0x000005ba
    83e0:	db080103 	.word	0xdb080103
    83e4:	10000005 	.word	0x10000005
    83e8:	00043204 	.word	0x00043204
    83ec:	25011300 	.word	0x25011300
    83f0:	e6000000 	.word	0xe6000000
    83f4:	14000005 	.word	0x14000005
    83f8:	00000451 	.word	0x00000451
    83fc:	0000f314 	.word	0x0000f314
    8400:	05e61400 	.word	0x05e61400
    8404:	25140000 	.word	0x25140000
    8408:	00000000 	.word	0x00000000
    840c:	05ec0410 	.word	0x05ec0410
    8410:	ba160000 	.word	0xba160000
    8414:	10000005 	.word	0x10000005
    8418:	0005c704 	.word	0x0005c704
    841c:	6f011300 	.word	0x6f011300
    8420:	16000000 	.word	0x16000000
    8424:	14000006 	.word	0x14000006
    8428:	00000451 	.word	0x00000451
    842c:	0000f314 	.word	0x0000f314
    8430:	006f1400 	.word	0x006f1400
    8434:	25140000 	.word	0x25140000
    8438:	00000000 	.word	0x00000000
    843c:	05f70410 	.word	0x05f70410
    8440:	01130000 	.word	0x01130000
    8444:	00000025 	.word	0x00000025
    8448:	00000631 	.word	0x00000631
    844c:	00045114 	.word	0x00045114
    8450:	00f31400 	.word	0x00f31400
    8454:	10000000 	.word	0x10000000
    8458:	00061c04 	.word	0x00061c04
    845c:	003a0800 	.word	0x003a0800
    8460:	06470000 	.word	0x06470000
    8464:	b5090000 	.word	0xb5090000
    8468:	02000000 	.word	0x02000000
    846c:	003a0800 	.word	0x003a0800
    8470:	06570000 	.word	0x06570000
    8474:	b5090000 	.word	0xb5090000
    8478:	00000000 	.word	0x00000000
    847c:	2ff80500 	.word	0x2ff80500
    8480:	0e050000 	.word	0x0e050000
    8484:	0002f401 	.word	0x0002f401
    8488:	31071700 	.word	0x31071700
    848c:	050c0000 	.word	0x050c0000
    8490:	069e0113 	.word	0x069e0113
    8494:	17150000 	.word	0x17150000
    8498:	05000030 	.word	0x05000030
    849c:	069e0114 	.word	0x069e0114
    84a0:	23020000 	.word	0x23020000
    84a4:	2f431500 	.word	0x2f431500
    84a8:	15050000 	.word	0x15050000
    84ac:	00002501 	.word	0x00002501
    84b0:	04230200 	.word	0x04230200
    84b4:	002ff215 	.word	0x002ff215
    84b8:	01160500 	.word	0x01160500
    84bc:	000006a4 	.word	0x000006a4
    84c0:	00082302 	.word	0x00082302
    84c4:	06630410 	.word	0x06630410
    84c8:	04100000 	.word	0x04100000
    84cc:	00000657 	.word	0x00000657
    84d0:	002dfc17 	.word	0x002dfc17
    84d4:	2e050e00 	.word	0x2e050e00
    84d8:	0006e501 	.word	0x0006e501
    84dc:	305d1500 	.word	0x305d1500
    84e0:	2f050000 	.word	0x2f050000
    84e4:	0006e501 	.word	0x0006e501
    84e8:	00230200 	.word	0x00230200
    84ec:	002f7f15 	.word	0x002f7f15
    84f0:	01300500 	.word	0x01300500
    84f4:	000006e5 	.word	0x000006e5
    84f8:	15062302 	.word	0x15062302
    84fc:	000030a7 	.word	0x000030a7
    8500:	48013105 	.word	0x48013105
    8504:	02000000 	.word	0x02000000
    8508:	08000c23 	.word	0x08000c23
    850c:	00000048 	.word	0x00000048
    8510:	000006f5 	.word	0x000006f5
    8514:	0000b509 	.word	0x0000b509
    8518:	18000200 	.word	0x18000200
    851c:	025f05d0 	.word	0x025f05d0
    8520:	00000815 	.word	0x00000815
    8524:	0030eb15 	.word	0x0030eb15
    8528:	02600500 	.word	0x02600500
    852c:	0000002c 	.word	0x0000002c
    8530:	15002302 	.word	0x15002302
    8534:	00003091 	.word	0x00003091
    8538:	b4026105 	.word	0xb4026105
    853c:	02000005 	.word	0x02000005
    8540:	5f150423 	.word	0x5f150423
    8544:	0500002f 	.word	0x0500002f
    8548:	08150262 	.word	0x08150262
    854c:	23020000 	.word	0x23020000
    8550:	31431508 	.word	0x31431508
    8554:	63050000 	.word	0x63050000
    8558:	00017c02 	.word	0x00017c02
    855c:	24230200 	.word	0x24230200
    8560:	002fb115 	.word	0x002fb115
    8564:	02640500 	.word	0x02640500
    8568:	00000025 	.word	0x00000025
    856c:	15482302 	.word	0x15482302
    8570:	00003012 	.word	0x00003012
    8574:	56026505 	.word	0x56026505
    8578:	02000000 	.word	0x02000000
    857c:	52155023 	.word	0x52155023
    8580:	05000031 	.word	0x05000031
    8584:	06aa0266 	.word	0x06aa0266
    8588:	23020000 	.word	0x23020000
    858c:	301d1558 	.word	0x301d1558
    8590:	67050000 	.word	0x67050000
    8594:	0000dd02 	.word	0x0000dd02
    8598:	68230200 	.word	0x68230200
    859c:	00315715 	.word	0x00315715
    85a0:	02680500 	.word	0x02680500
    85a4:	000000dd 	.word	0x000000dd
    85a8:	15702302 	.word	0x15702302
    85ac:	00002e47 	.word	0x00002e47
    85b0:	dd026905 	.word	0xdd026905
    85b4:	02000000 	.word	0x02000000
    85b8:	16157823 	.word	0x16157823
    85bc:	05000031 	.word	0x05000031
    85c0:	0825026a 	.word	0x0825026a
    85c4:	23030000 	.word	0x23030000
    85c8:	53150180 	.word	0x53150180
    85cc:	0500002f 	.word	0x0500002f
    85d0:	0835026b 	.word	0x0835026b
    85d4:	23030000 	.word	0x23030000
    85d8:	b4150188 	.word	0xb4150188
    85dc:	05000030 	.word	0x05000030
    85e0:	0025026c 	.word	0x0025026c
    85e4:	23030000 	.word	0x23030000
    85e8:	d71501a0 	.word	0xd71501a0
    85ec:	0500002e 	.word	0x0500002e
    85f0:	00dd026d 	.word	0x00dd026d
    85f4:	23030000 	.word	0x23030000
    85f8:	381501a4 	.word	0x381501a4
    85fc:	0500002e 	.word	0x0500002e
    8600:	00dd026e 	.word	0x00dd026e
    8604:	23030000 	.word	0x23030000
    8608:	c61501ac 	.word	0xc61501ac
    860c:	0500002e 	.word	0x0500002e
    8610:	00dd026f 	.word	0x00dd026f
    8614:	23030000 	.word	0x23030000
    8618:	0f1501b4 	.word	0x0f1501b4
    861c:	0500002e 	.word	0x0500002e
    8620:	00dd0270 	.word	0x00dd0270
    8624:	23030000 	.word	0x23030000
    8628:	1e1501bc 	.word	0x1e1501bc
    862c:	0500002e 	.word	0x0500002e
    8630:	00dd0271 	.word	0x00dd0271
    8634:	23030000 	.word	0x23030000
    8638:	080001c4 	.word	0x080001c4
    863c:	000005ba 	.word	0x000005ba
    8640:	00000825 	.word	0x00000825
    8644:	0000b509 	.word	0x0000b509
    8648:	08001900 	.word	0x08001900
    864c:	000005ba 	.word	0x000005ba
    8650:	00000835 	.word	0x00000835
    8654:	0000b509 	.word	0x0000b509
    8658:	08000700 	.word	0x08000700
    865c:	000005ba 	.word	0x000005ba
    8660:	00000845 	.word	0x00000845
    8664:	0000b509 	.word	0x0000b509
    8668:	18001700 	.word	0x18001700
    866c:	027705f0 	.word	0x027705f0
    8670:	0000086d 	.word	0x0000086d
    8674:	002f9615 	.word	0x002f9615
    8678:	02790500 	.word	0x02790500
    867c:	0000086d 	.word	0x0000086d
    8680:	15002302 	.word	0x15002302
    8684:	0000310d 	.word	0x0000310d
    8688:	7d027a05 	.word	0x7d027a05
    868c:	02000008 	.word	0x02000008
    8690:	08007823 	.word	0x08007823
    8694:	000002ee 	.word	0x000002ee
    8698:	0000087d 	.word	0x0000087d
    869c:	0000b509 	.word	0x0000b509
    86a0:	08001d00 	.word	0x08001d00
    86a4:	0000002c 	.word	0x0000002c
    86a8:	0000088d 	.word	0x0000088d
    86ac:	0000b509 	.word	0x0000b509
    86b0:	19001d00 	.word	0x19001d00
    86b4:	025d05f0 	.word	0x025d05f0
    86b8:	000008af 	.word	0x000008af
    86bc:	0030561a 	.word	0x0030561a
    86c0:	02720500 	.word	0x02720500
    86c4:	000006f5 	.word	0x000006f5
    86c8:	0031301a 	.word	0x0031301a
    86cc:	027b0500 	.word	0x027b0500
    86d0:	00000845 	.word	0x00000845
    86d4:	05ba0800 	.word	0x05ba0800
    86d8:	08bf0000 	.word	0x08bf0000
    86dc:	b5090000 	.word	0xb5090000
    86e0:	18000000 	.word	0x18000000
    86e4:	cb011b00 	.word	0xcb011b00
    86e8:	14000008 	.word	0x14000008
    86ec:	00000451 	.word	0x00000451
    86f0:	bf041000 	.word	0xbf041000
    86f4:	10000008 	.word	0x10000008
    86f8:	00016604 	.word	0x00016604
    86fc:	e3011b00 	.word	0xe3011b00
    8700:	14000008 	.word	0x14000008
    8704:	00000025 	.word	0x00000025
    8708:	e9041000 	.word	0xe9041000
    870c:	10000008 	.word	0x10000008
    8710:	0008d704 	.word	0x0008d704
    8714:	06570800 	.word	0x06570800
    8718:	08ff0000 	.word	0x08ff0000
    871c:	b5090000 	.word	0xb5090000
    8720:	02000000 	.word	0x02000000
    8724:	2d9c1c00 	.word	0x2d9c1c00
    8728:	06010000 	.word	0x06010000
    872c:	00091e06 	.word	0x00091e06
    8730:	2dab1d00 	.word	0x2dab1d00
    8734:	1d000000 	.word	0x1d000000
    8738:	00002d90 	.word	0x00002d90
    873c:	2d871d01 	.word	0x2d871d01
    8740:	00020000 	.word	0x00020000
    8744:	33b0011e 	.word	0x33b0011e
    8748:	17010000 	.word	0x17010000
    874c:	00002501 	.word	0x00002501
	...
    8758:	002dd400 	.word	0x002dd400
    875c:	00098b00 	.word	0x00098b00
    8760:	33ab1f00 	.word	0x33ab1f00
    8764:	11010000 	.word	0x11010000
    8768:	00000025 	.word	0x00000025
    876c:	00002df3 	.word	0x00002df3
    8770:	006e6620 	.word	0x006e6620
    8774:	02bf1101 	.word	0x02bf1101
    8778:	2e110000 	.word	0x2e110000
    877c:	61200000 	.word	0x61200000
    8780:	01006772 	.word	0x01006772
    8784:	0000f311 	.word	0x0000f311
    8788:	002e2f00 	.word	0x002e2f00
    878c:	00642000 	.word	0x00642000
    8790:	00f31101 	.word	0x00f31101
    8794:	2e4d0000 	.word	0x2e4d0000
    8798:	82210000 	.word	0x82210000
    879c:	0100002e 	.word	0x0100002e
    87a0:	00098b18 	.word	0x00098b18
    87a4:	00702200 	.word	0x00702200
    87a8:	02a71901 	.word	0x02a71901
    87ac:	5c010000 	.word	0x5c010000
    87b0:	07041000 	.word	0x07041000
    87b4:	23000002 	.word	0x23000002
    87b8:	000030c1 	.word	0x000030c1
    87bc:	9f032805 	.word	0x9f032805
    87c0:	01000009 	.word	0x01000009
    87c4:	04511601 	.word	0x04511601
    87c8:	ae000000 	.word	0xae000000
    87cc:	02000009 	.word	0x02000009
    87d0:	001cb000 	.word	0x001cb000
    87d4:	88010400 	.word	0x88010400
    87d8:	01000004 	.word	0x01000004
    87dc:	000033d5 	.word	0x000033d5
    87e0:	00002d04 	.word	0x00002d04
	...
    87ec:	00001c7b 	.word	0x00001c7b
    87f0:	7a070402 	.word	0x7a070402
    87f4:	0200002d 	.word	0x0200002d
    87f8:	05d40601 	.word	0x05d40601
    87fc:	01020000 	.word	0x01020000
    8800:	0005d208 	.word	0x0005d208
    8804:	05020200 	.word	0x05020200
    8808:	0000050f 	.word	0x0000050f
    880c:	12070202 	.word	0x12070202
    8810:	03000007 	.word	0x03000007
    8814:	6e690504 	.word	0x6e690504
    8818:	08020074 	.word	0x08020074
    881c:	002cf605 	.word	0x002cf605
    8820:	07080200 	.word	0x07080200
    8824:	00002d70 	.word	0x00002d70
    8828:	002fca04 	.word	0x002fca04
    882c:	48070200 	.word	0x48070200
    8830:	02000000 	.word	0x02000000
    8834:	2cfb0504 	.word	0x2cfb0504
    8838:	79040000 	.word	0x79040000
    883c:	03000030 	.word	0x03000030
    8840:	0000682c 	.word	0x0000682c
    8844:	2f720500 	.word	0x2f720500
    8848:	63040000 	.word	0x63040000
    884c:	00002501 	.word	0x00002501
    8850:	03040600 	.word	0x03040600
    8854:	0000a547 	.word	0x0000a547
    8858:	2f6c0700 	.word	0x2f6c0700
    885c:	48030000 	.word	0x48030000
    8860:	0000007a 	.word	0x0000007a
    8864:	002f2607 	.word	0x002f2607
    8868:	a5490300 	.word	0xa5490300
    886c:	00000000 	.word	0x00000000
    8870:	00003308 	.word	0x00003308
    8874:	0000b500 	.word	0x0000b500
    8878:	00b50900 	.word	0x00b50900
    887c:	00030000 	.word	0x00030000
    8880:	0b07040a 	.word	0x0b07040a
    8884:	dd440308 	.word	0xdd440308
    8888:	0c000000 	.word	0x0c000000
    888c:	00003063 	.word	0x00003063
    8890:	00484503 	.word	0x00484503
    8894:	23020000 	.word	0x23020000
    8898:	306b0c00 	.word	0x306b0c00
    889c:	4a030000 	.word	0x4a030000
    88a0:	00000086 	.word	0x00000086
    88a4:	00042302 	.word	0x00042302
    88a8:	002fff04 	.word	0x002fff04
    88ac:	b84b0300 	.word	0xb84b0300
    88b0:	04000000 	.word	0x04000000
    88b4:	00002ef8 	.word	0x00002ef8
    88b8:	005d4f03 	.word	0x005d4f03
    88bc:	040d0000 	.word	0x040d0000
    88c0:	0030ac04 	.word	0x0030ac04
    88c4:	00150500 	.word	0x00150500
    88c8:	02000001 	.word	0x02000001
    88cc:	2d750704 	.word	0x2d750704
    88d0:	090e0000 	.word	0x090e0000
    88d4:	1800002f 	.word	0x1800002f
    88d8:	01662d05 	.word	0x01662d05
    88dc:	170c0000 	.word	0x170c0000
    88e0:	05000030 	.word	0x05000030
    88e4:	0001662e 	.word	0x0001662e
    88e8:	00230200 	.word	0x00230200
    88ec:	006b5f0f 	.word	0x006b5f0f
    88f0:	00482f05 	.word	0x00482f05
    88f4:	23020000 	.word	0x23020000
    88f8:	304e0c04 	.word	0x304e0c04
    88fc:	2f050000 	.word	0x2f050000
    8900:	00000048 	.word	0x00000048
    8904:	0c082302 	.word	0x0c082302
    8908:	00002ef2 	.word	0x00002ef2
    890c:	00482f05 	.word	0x00482f05
    8910:	23020000 	.word	0x23020000
    8914:	30f80c0c 	.word	0x30f80c0c
    8918:	2f050000 	.word	0x2f050000
    891c:	00000048 	.word	0x00000048
    8920:	0f102302 	.word	0x0f102302
    8924:	0500785f 	.word	0x0500785f
    8928:	00016c30 	.word	0x00016c30
    892c:	14230200 	.word	0x14230200
    8930:	07041000 	.word	0x07041000
    8934:	08000001 	.word	0x08000001
    8938:	000000f5 	.word	0x000000f5
    893c:	0000017c 	.word	0x0000017c
    8940:	0000b509 	.word	0x0000b509
    8944:	0e000000 	.word	0x0e000000
    8948:	00002f21 	.word	0x00002f21
    894c:	07350524 	.word	0x07350524
    8950:	0c000002 	.word	0x0c000002
    8954:	00002e55 	.word	0x00002e55
    8958:	00483605 	.word	0x00483605
    895c:	23020000 	.word	0x23020000
    8960:	30880c00 	.word	0x30880c00
    8964:	37050000 	.word	0x37050000
    8968:	00000048 	.word	0x00000048
    896c:	0c042302 	.word	0x0c042302
    8970:	00002e6a 	.word	0x00002e6a
    8974:	00483805 	.word	0x00483805
    8978:	23020000 	.word	0x23020000
    897c:	316a0c08 	.word	0x316a0c08
    8980:	39050000 	.word	0x39050000
    8984:	00000048 	.word	0x00000048
    8988:	0c0c2302 	.word	0x0c0c2302
    898c:	00002f9d 	.word	0x00002f9d
    8990:	00483a05 	.word	0x00483a05
    8994:	23020000 	.word	0x23020000
    8998:	2f8c0c10 	.word	0x2f8c0c10
    899c:	3b050000 	.word	0x3b050000
    89a0:	00000048 	.word	0x00000048
    89a4:	0c142302 	.word	0x0c142302
    89a8:	000030fd 	.word	0x000030fd
    89ac:	00483c05 	.word	0x00483c05
    89b0:	23020000 	.word	0x23020000
    89b4:	2fe10c18 	.word	0x2fe10c18
    89b8:	3d050000 	.word	0x3d050000
    89bc:	00000048 	.word	0x00000048
    89c0:	0c1c2302 	.word	0x0c1c2302
    89c4:	00003138 	.word	0x00003138
    89c8:	00483e05 	.word	0x00483e05
    89cc:	23020000 	.word	0x23020000
    89d0:	79110020 	.word	0x79110020
    89d4:	0800002e 	.word	0x0800002e
    89d8:	50470501 	.word	0x50470501
    89dc:	0c000002 	.word	0x0c000002
    89e0:	00002ee5 	.word	0x00002ee5
    89e4:	02504805 	.word	0x02504805
    89e8:	23020000 	.word	0x23020000
    89ec:	2db70c00 	.word	0x2db70c00
    89f0:	49050000 	.word	0x49050000
    89f4:	00000250 	.word	0x00000250
    89f8:	01802303 	.word	0x01802303
    89fc:	00309e0c 	.word	0x00309e0c
    8a00:	f54b0500 	.word	0xf54b0500
    8a04:	03000000 	.word	0x03000000
    8a08:	0c028023 	.word	0x0c028023
    8a0c:	00002e9e 	.word	0x00002e9e
    8a10:	00f54e05 	.word	0x00f54e05
    8a14:	23030000 	.word	0x23030000
    8a18:	08000284 	.word	0x08000284
    8a1c:	000000f3 	.word	0x000000f3
    8a20:	00000260 	.word	0x00000260
    8a24:	0000b509 	.word	0x0000b509
    8a28:	11001f00 	.word	0x11001f00
    8a2c:	00002daf 	.word	0x00002daf
    8a30:	59050190 	.word	0x59050190
    8a34:	000002a7 	.word	0x000002a7
    8a38:	0030170c 	.word	0x0030170c
    8a3c:	a75a0500 	.word	0xa75a0500
    8a40:	02000002 	.word	0x02000002
    8a44:	2f0c0023 	.word	0x2f0c0023
    8a48:	05000030 	.word	0x05000030
    8a4c:	0000485b 	.word	0x0000485b
    8a50:	04230200 	.word	0x04230200
    8a54:	002eed0c 	.word	0x002eed0c
    8a58:	ad5d0500 	.word	0xad5d0500
    8a5c:	02000002 	.word	0x02000002
    8a60:	790c0823 	.word	0x790c0823
    8a64:	0500002e 	.word	0x0500002e
    8a68:	0002075e 	.word	0x0002075e
    8a6c:	88230300 	.word	0x88230300
    8a70:	04100001 	.word	0x04100001
    8a74:	00000260 	.word	0x00000260
    8a78:	0002bf08 	.word	0x0002bf08
    8a7c:	0002bd00 	.word	0x0002bd00
    8a80:	00b50900 	.word	0x00b50900
    8a84:	001f0000 	.word	0x001f0000
    8a88:	04100112 	.word	0x04100112
    8a8c:	000002bd 	.word	0x000002bd
    8a90:	002feb0e 	.word	0x002feb0e
    8a94:	69050800 	.word	0x69050800
    8a98:	000002ee 	.word	0x000002ee
    8a9c:	002e640c 	.word	0x002e640c
    8aa0:	ee6a0500 	.word	0xee6a0500
    8aa4:	02000002 	.word	0x02000002
    8aa8:	f60c0023 	.word	0xf60c0023
    8aac:	0500002d 	.word	0x0500002d
    8ab0:	0000486b 	.word	0x0000486b
    8ab4:	04230200 	.word	0x04230200
    8ab8:	33041000 	.word	0x33041000
    8abc:	0e000000 	.word	0x0e000000
    8ac0:	0000300a 	.word	0x0000300a
    8ac4:	32a9055c 	.word	0x32a9055c
    8ac8:	0f000004 	.word	0x0f000004
    8acc:	0500705f 	.word	0x0500705f
    8ad0:	0002eeaa 	.word	0x0002eeaa
    8ad4:	00230200 	.word	0x00230200
    8ad8:	00725f0f 	.word	0x00725f0f
    8adc:	0048ab05 	.word	0x0048ab05
    8ae0:	23020000 	.word	0x23020000
    8ae4:	775f0f04 	.word	0x775f0f04
    8ae8:	48ac0500 	.word	0x48ac0500
    8aec:	02000000 	.word	0x02000000
    8af0:	970c0823 	.word	0x970c0823
    8af4:	0500002e 	.word	0x0500002e
    8af8:	00003aad 	.word	0x00003aad
    8afc:	0c230200 	.word	0x0c230200
    8b00:	002f3d0c 	.word	0x002f3d0c
    8b04:	3aae0500 	.word	0x3aae0500
    8b08:	02000000 	.word	0x02000000
    8b0c:	5f0f0e23 	.word	0x5f0f0e23
    8b10:	05006662 	.word	0x05006662
    8b14:	0002c5af 	.word	0x0002c5af
    8b18:	10230200 	.word	0x10230200
    8b1c:	002e2f0c 	.word	0x002e2f0c
    8b20:	48b00500 	.word	0x48b00500
    8b24:	02000000 	.word	0x02000000
    8b28:	870c1823 	.word	0x870c1823
    8b2c:	0500002e 	.word	0x0500002e
    8b30:	0000f3b7 	.word	0x0000f3b7
    8b34:	1c230200 	.word	0x1c230200
    8b38:	002f110c 	.word	0x002f110c
    8b3c:	c1b90500 	.word	0xc1b90500
    8b40:	02000005 	.word	0x02000005
    8b44:	850c2023 	.word	0x850c2023
    8b48:	0500002f 	.word	0x0500002f
    8b4c:	0005f1bb 	.word	0x0005f1bb
    8b50:	24230200 	.word	0x24230200
    8b54:	0030730c 	.word	0x0030730c
    8b58:	16bd0500 	.word	0x16bd0500
    8b5c:	02000006 	.word	0x02000006
    8b60:	600c2823 	.word	0x600c2823
    8b64:	0500000d 	.word	0x0500000d
    8b68:	000631be 	.word	0x000631be
    8b6c:	2c230200 	.word	0x2c230200
    8b70:	62755f0f 	.word	0x62755f0f
    8b74:	c5c10500 	.word	0xc5c10500
    8b78:	02000002 	.word	0x02000002
    8b7c:	5f0f3023 	.word	0x5f0f3023
    8b80:	05007075 	.word	0x05007075
    8b84:	0002eec2 	.word	0x0002eec2
    8b88:	38230200 	.word	0x38230200
    8b8c:	72755f0f 	.word	0x72755f0f
    8b90:	48c30500 	.word	0x48c30500
    8b94:	02000000 	.word	0x02000000
    8b98:	5e0c3c23 	.word	0x5e0c3c23
    8b9c:	0500002e 	.word	0x0500002e
    8ba0:	000637c6 	.word	0x000637c6
    8ba4:	40230200 	.word	0x40230200
    8ba8:	00312a0c 	.word	0x00312a0c
    8bac:	47c70500 	.word	0x47c70500
    8bb0:	02000006 	.word	0x02000006
    8bb4:	5f0f4323 	.word	0x5f0f4323
    8bb8:	0500626c 	.word	0x0500626c
    8bbc:	0002c5ca 	.word	0x0002c5ca
    8bc0:	44230200 	.word	0x44230200
    8bc4:	002ead0c 	.word	0x002ead0c
    8bc8:	48cd0500 	.word	0x48cd0500
    8bcc:	02000000 	.word	0x02000000
    8bd0:	be0c4c23 	.word	0xbe0c4c23
    8bd4:	0500002e 	.word	0x0500002e
    8bd8:	000048ce 	.word	0x000048ce
    8bdc:	50230200 	.word	0x50230200
    8be0:	00317a0c 	.word	0x00317a0c
    8be4:	51d10500 	.word	0x51d10500
    8be8:	02000004 	.word	0x02000004
    8bec:	790c5423 	.word	0x790c5423
    8bf0:	0500002f 	.word	0x0500002f
    8bf4:	0000e8d5 	.word	0x0000e8d5
    8bf8:	58230200 	.word	0x58230200
    8bfc:	48011300 	.word	0x48011300
    8c00:	51000000 	.word	0x51000000
    8c04:	14000004 	.word	0x14000004
    8c08:	00000451 	.word	0x00000451
    8c0c:	0000f314 	.word	0x0000f314
    8c10:	05b41400 	.word	0x05b41400
    8c14:	48140000 	.word	0x48140000
    8c18:	00000000 	.word	0x00000000
    8c1c:	04570410 	.word	0x04570410
    8c20:	56110000 	.word	0x56110000
    8c24:	00000030 	.word	0x00000030
    8c28:	b4250504 	.word	0xb4250504
    8c2c:	15000005 	.word	0x15000005
    8c30:	00003081 	.word	0x00003081
    8c34:	48024105 	.word	0x48024105
    8c38:	02000000 	.word	0x02000000
    8c3c:	a6150023 	.word	0xa6150023
    8c40:	0500002e 	.word	0x0500002e
    8c44:	06a40246 	.word	0x06a40246
    8c48:	23020000 	.word	0x23020000
    8c4c:	2f2d1504 	.word	0x2f2d1504
    8c50:	46050000 	.word	0x46050000
    8c54:	0006a402 	.word	0x0006a402
    8c58:	08230200 	.word	0x08230200
    8c5c:	002f0115 	.word	0x002f0115
    8c60:	02460500 	.word	0x02460500
    8c64:	000006a4 	.word	0x000006a4
    8c68:	150c2302 	.word	0x150c2302
    8c6c:	0000302a 	.word	0x0000302a
    8c70:	48024805 	.word	0x48024805
    8c74:	02000000 	.word	0x02000000
    8c78:	04151023 	.word	0x04151023
    8c7c:	0500002e 	.word	0x0500002e
    8c80:	08af0249 	.word	0x08af0249
    8c84:	23020000 	.word	0x23020000
    8c88:	30d41514 	.word	0x30d41514
    8c8c:	4b050000 	.word	0x4b050000
    8c90:	00004802 	.word	0x00004802
    8c94:	30230200 	.word	0x30230200
    8c98:	00303415 	.word	0x00303415
    8c9c:	024c0500 	.word	0x024c0500
    8ca0:	000005e6 	.word	0x000005e6
    8ca4:	15342302 	.word	0x15342302
    8ca8:	00002fa6 	.word	0x00002fa6
    8cac:	48024e05 	.word	0x48024e05
    8cb0:	02000000 	.word	0x02000000
    8cb4:	44153823 	.word	0x44153823
    8cb8:	05000030 	.word	0x05000030
    8cbc:	08cb0250 	.word	0x08cb0250
    8cc0:	23020000 	.word	0x23020000
    8cc4:	0ecb153c 	.word	0x0ecb153c
    8cc8:	53050000 	.word	0x53050000
    8ccc:	00016602 	.word	0x00016602
    8cd0:	40230200 	.word	0x40230200
    8cd4:	002f1715 	.word	0x002f1715
    8cd8:	02540500 	.word	0x02540500
    8cdc:	00000048 	.word	0x00000048
    8ce0:	15442302 	.word	0x15442302
    8ce4:	00003165 	.word	0x00003165
    8ce8:	66025505 	.word	0x66025505
    8cec:	02000001 	.word	0x02000001
    8cf0:	c0154823 	.word	0xc0154823
    8cf4:	0500002f 	.word	0x0500002f
    8cf8:	08d10256 	.word	0x08d10256
    8cfc:	23020000 	.word	0x23020000
    8d00:	2f35154c 	.word	0x2f35154c
    8d04:	59050000 	.word	0x59050000
    8d08:	00004802 	.word	0x00004802
    8d0c:	50230200 	.word	0x50230200
    8d10:	002eb615 	.word	0x002eb615
    8d14:	025a0500 	.word	0x025a0500
    8d18:	000005b4 	.word	0x000005b4
    8d1c:	15542302 	.word	0x15542302
    8d20:	00002fdc 	.word	0x00002fdc
    8d24:	8d027c05 	.word	0x8d027c05
    8d28:	02000008 	.word	0x02000008
    8d2c:	af155823 	.word	0xaf155823
    8d30:	0500002d 	.word	0x0500002d
    8d34:	02a7027f 	.word	0x02a7027f
    8d38:	23030000 	.word	0x23030000
    8d3c:	4a1502c8 	.word	0x4a1502c8
    8d40:	0500002f 	.word	0x0500002f
    8d44:	02600280 	.word	0x02600280
    8d48:	23030000 	.word	0x23030000
    8d4c:	201502cc 	.word	0x201502cc
    8d50:	05000031 	.word	0x05000031
    8d54:	08e30283 	.word	0x08e30283
    8d58:	23030000 	.word	0x23030000
    8d5c:	8f1505dc 	.word	0x8f1505dc
    8d60:	0500002e 	.word	0x0500002e
    8d64:	06630288 	.word	0x06630288
    8d68:	23030000 	.word	0x23030000
    8d6c:	741505e0 	.word	0x741505e0
    8d70:	0500002e 	.word	0x0500002e
    8d74:	08ef0289 	.word	0x08ef0289
    8d78:	23030000 	.word	0x23030000
    8d7c:	100005ec 	.word	0x100005ec
    8d80:	0005ba04 	.word	0x0005ba04
    8d84:	08010200 	.word	0x08010200
    8d88:	000005db 	.word	0x000005db
    8d8c:	04320410 	.word	0x04320410
    8d90:	01130000 	.word	0x01130000
    8d94:	00000048 	.word	0x00000048
    8d98:	000005e6 	.word	0x000005e6
    8d9c:	00045114 	.word	0x00045114
    8da0:	00f31400 	.word	0x00f31400
    8da4:	e6140000 	.word	0xe6140000
    8da8:	14000005 	.word	0x14000005
    8dac:	00000048 	.word	0x00000048
    8db0:	ec041000 	.word	0xec041000
    8db4:	16000005 	.word	0x16000005
    8db8:	000005ba 	.word	0x000005ba
    8dbc:	05c70410 	.word	0x05c70410
    8dc0:	01130000 	.word	0x01130000
    8dc4:	0000006f 	.word	0x0000006f
    8dc8:	00000616 	.word	0x00000616
    8dcc:	00045114 	.word	0x00045114
    8dd0:	00f31400 	.word	0x00f31400
    8dd4:	6f140000 	.word	0x6f140000
    8dd8:	14000000 	.word	0x14000000
    8ddc:	00000048 	.word	0x00000048
    8de0:	f7041000 	.word	0xf7041000
    8de4:	13000005 	.word	0x13000005
    8de8:	00004801 	.word	0x00004801
    8dec:	00063100 	.word	0x00063100
    8df0:	04511400 	.word	0x04511400
    8df4:	f3140000 	.word	0xf3140000
    8df8:	00000000 	.word	0x00000000
    8dfc:	061c0410 	.word	0x061c0410
    8e00:	33080000 	.word	0x33080000
    8e04:	47000000 	.word	0x47000000
    8e08:	09000006 	.word	0x09000006
    8e0c:	000000b5 	.word	0x000000b5
    8e10:	33080002 	.word	0x33080002
    8e14:	57000000 	.word	0x57000000
    8e18:	09000006 	.word	0x09000006
    8e1c:	000000b5 	.word	0x000000b5
    8e20:	f8050000 	.word	0xf8050000
    8e24:	0500002f 	.word	0x0500002f
    8e28:	02f4010e 	.word	0x02f4010e
    8e2c:	07170000 	.word	0x07170000
    8e30:	0c000031 	.word	0x0c000031
    8e34:	9e011305 	.word	0x9e011305
    8e38:	15000006 	.word	0x15000006
    8e3c:	00003017 	.word	0x00003017
    8e40:	9e011405 	.word	0x9e011405
    8e44:	02000006 	.word	0x02000006
    8e48:	43150023 	.word	0x43150023
    8e4c:	0500002f 	.word	0x0500002f
    8e50:	00480115 	.word	0x00480115
    8e54:	23020000 	.word	0x23020000
    8e58:	2ff21504 	.word	0x2ff21504
    8e5c:	16050000 	.word	0x16050000
    8e60:	0006a401 	.word	0x0006a401
    8e64:	08230200 	.word	0x08230200
    8e68:	63041000 	.word	0x63041000
    8e6c:	10000006 	.word	0x10000006
    8e70:	00065704 	.word	0x00065704
    8e74:	2dfc1700 	.word	0x2dfc1700
    8e78:	050e0000 	.word	0x050e0000
    8e7c:	06e5012e 	.word	0x06e5012e
    8e80:	5d150000 	.word	0x5d150000
    8e84:	05000030 	.word	0x05000030
    8e88:	06e5012f 	.word	0x06e5012f
    8e8c:	23020000 	.word	0x23020000
    8e90:	2f7f1500 	.word	0x2f7f1500
    8e94:	30050000 	.word	0x30050000
    8e98:	0006e501 	.word	0x0006e501
    8e9c:	06230200 	.word	0x06230200
    8ea0:	0030a715 	.word	0x0030a715
    8ea4:	01310500 	.word	0x01310500
    8ea8:	00000041 	.word	0x00000041
    8eac:	000c2302 	.word	0x000c2302
    8eb0:	00004108 	.word	0x00004108
    8eb4:	0006f500 	.word	0x0006f500
    8eb8:	00b50900 	.word	0x00b50900
    8ebc:	00020000 	.word	0x00020000
    8ec0:	5f05d018 	.word	0x5f05d018
    8ec4:	00081502 	.word	0x00081502
    8ec8:	30eb1500 	.word	0x30eb1500
    8ecc:	60050000 	.word	0x60050000
    8ed0:	00002502 	.word	0x00002502
    8ed4:	00230200 	.word	0x00230200
    8ed8:	00309115 	.word	0x00309115
    8edc:	02610500 	.word	0x02610500
    8ee0:	000005b4 	.word	0x000005b4
    8ee4:	15042302 	.word	0x15042302
    8ee8:	00002f5f 	.word	0x00002f5f
    8eec:	15026205 	.word	0x15026205
    8ef0:	02000008 	.word	0x02000008
    8ef4:	43150823 	.word	0x43150823
    8ef8:	05000031 	.word	0x05000031
    8efc:	017c0263 	.word	0x017c0263
    8f00:	23020000 	.word	0x23020000
    8f04:	2fb11524 	.word	0x2fb11524
    8f08:	64050000 	.word	0x64050000
    8f0c:	00004802 	.word	0x00004802
    8f10:	48230200 	.word	0x48230200
    8f14:	00301215 	.word	0x00301215
    8f18:	02650500 	.word	0x02650500
    8f1c:	00000056 	.word	0x00000056
    8f20:	15502302 	.word	0x15502302
    8f24:	00003152 	.word	0x00003152
    8f28:	aa026605 	.word	0xaa026605
    8f2c:	02000006 	.word	0x02000006
    8f30:	1d155823 	.word	0x1d155823
    8f34:	05000030 	.word	0x05000030
    8f38:	00dd0267 	.word	0x00dd0267
    8f3c:	23020000 	.word	0x23020000
    8f40:	31571568 	.word	0x31571568
    8f44:	68050000 	.word	0x68050000
    8f48:	0000dd02 	.word	0x0000dd02
    8f4c:	70230200 	.word	0x70230200
    8f50:	002e4715 	.word	0x002e4715
    8f54:	02690500 	.word	0x02690500
    8f58:	000000dd 	.word	0x000000dd
    8f5c:	15782302 	.word	0x15782302
    8f60:	00003116 	.word	0x00003116
    8f64:	25026a05 	.word	0x25026a05
    8f68:	03000008 	.word	0x03000008
    8f6c:	15018023 	.word	0x15018023
    8f70:	00002f53 	.word	0x00002f53
    8f74:	35026b05 	.word	0x35026b05
    8f78:	03000008 	.word	0x03000008
    8f7c:	15018823 	.word	0x15018823
    8f80:	000030b4 	.word	0x000030b4
    8f84:	48026c05 	.word	0x48026c05
    8f88:	03000000 	.word	0x03000000
    8f8c:	1501a023 	.word	0x1501a023
    8f90:	00002ed7 	.word	0x00002ed7
    8f94:	dd026d05 	.word	0xdd026d05
    8f98:	03000000 	.word	0x03000000
    8f9c:	1501a423 	.word	0x1501a423
    8fa0:	00002e38 	.word	0x00002e38
    8fa4:	dd026e05 	.word	0xdd026e05
    8fa8:	03000000 	.word	0x03000000
    8fac:	1501ac23 	.word	0x1501ac23
    8fb0:	00002ec6 	.word	0x00002ec6
    8fb4:	dd026f05 	.word	0xdd026f05
    8fb8:	03000000 	.word	0x03000000
    8fbc:	1501b423 	.word	0x1501b423
    8fc0:	00002e0f 	.word	0x00002e0f
    8fc4:	dd027005 	.word	0xdd027005
    8fc8:	03000000 	.word	0x03000000
    8fcc:	1501bc23 	.word	0x1501bc23
    8fd0:	00002e1e 	.word	0x00002e1e
    8fd4:	dd027105 	.word	0xdd027105
    8fd8:	03000000 	.word	0x03000000
    8fdc:	0001c423 	.word	0x0001c423
    8fe0:	0005ba08 	.word	0x0005ba08
    8fe4:	00082500 	.word	0x00082500
    8fe8:	00b50900 	.word	0x00b50900
    8fec:	00190000 	.word	0x00190000
    8ff0:	0005ba08 	.word	0x0005ba08
    8ff4:	00083500 	.word	0x00083500
    8ff8:	00b50900 	.word	0x00b50900
    8ffc:	00070000 	.word	0x00070000
    9000:	0005ba08 	.word	0x0005ba08
    9004:	00084500 	.word	0x00084500
    9008:	00b50900 	.word	0x00b50900
    900c:	00170000 	.word	0x00170000
    9010:	7705f018 	.word	0x7705f018
    9014:	00086d02 	.word	0x00086d02
    9018:	2f961500 	.word	0x2f961500
    901c:	79050000 	.word	0x79050000
    9020:	00086d02 	.word	0x00086d02
    9024:	00230200 	.word	0x00230200
    9028:	00310d15 	.word	0x00310d15
    902c:	027a0500 	.word	0x027a0500
    9030:	0000087d 	.word	0x0000087d
    9034:	00782302 	.word	0x00782302
    9038:	0002ee08 	.word	0x0002ee08
    903c:	00087d00 	.word	0x00087d00
    9040:	00b50900 	.word	0x00b50900
    9044:	001d0000 	.word	0x001d0000
    9048:	00002508 	.word	0x00002508
    904c:	00088d00 	.word	0x00088d00
    9050:	00b50900 	.word	0x00b50900
    9054:	001d0000 	.word	0x001d0000
    9058:	5d05f019 	.word	0x5d05f019
    905c:	0008af02 	.word	0x0008af02
    9060:	30561a00 	.word	0x30561a00
    9064:	72050000 	.word	0x72050000
    9068:	0006f502 	.word	0x0006f502
    906c:	31301a00 	.word	0x31301a00
    9070:	7b050000 	.word	0x7b050000
    9074:	00084502 	.word	0x00084502
    9078:	ba080000 	.word	0xba080000
    907c:	bf000005 	.word	0xbf000005
    9080:	09000008 	.word	0x09000008
    9084:	000000b5 	.word	0x000000b5
    9088:	011b0018 	.word	0x011b0018
    908c:	000008cb 	.word	0x000008cb
    9090:	00045114 	.word	0x00045114
    9094:	04100000 	.word	0x04100000
    9098:	000008bf 	.word	0x000008bf
    909c:	01660410 	.word	0x01660410
    90a0:	011b0000 	.word	0x011b0000
    90a4:	000008e3 	.word	0x000008e3
    90a8:	00004814 	.word	0x00004814
    90ac:	04100000 	.word	0x04100000
    90b0:	000008e9 	.word	0x000008e9
    90b4:	08d70410 	.word	0x08d70410
    90b8:	57080000 	.word	0x57080000
    90bc:	ff000006 	.word	0xff000006
    90c0:	09000008 	.word	0x09000008
    90c4:	000000b5 	.word	0x000000b5
    90c8:	011c0002 	.word	0x011c0002
    90cc:	000033c4 	.word	0x000033c4
    90d0:	00011201 	.word	0x00011201
    90d4:	00000000 	.word	0x00000000
    90d8:	6b000000 	.word	0x6b000000
    90dc:	9200002e 	.word	0x9200002e
    90e0:	1d000009 	.word	0x1d000009
    90e4:	000030e6 	.word	0x000030e6
    90e8:	00481001 	.word	0x00481001
    90ec:	2e960000 	.word	0x2e960000
    90f0:	641e0000 	.word	0x641e0000
    90f4:	f3100100 	.word	0xf3100100
    90f8:	e5000000 	.word	0xe5000000
    90fc:	1f00002e 	.word	0x1f00002e
    9100:	13010070 	.word	0x13010070
    9104:	000002a7 	.word	0x000002a7
    9108:	11205601 	.word	0x11205601
    910c:	01000034 	.word	0x01000034
    9110:	00099214 	.word	0x00099214
    9114:	2e822000 	.word	0x2e822000
    9118:	15010000 	.word	0x15010000
    911c:	00000998 	.word	0x00000998
    9120:	01006e1f 	.word	0x01006e1f
    9124:	00004816 	.word	0x00004816
    9128:	21550100 	.word	0x21550100
    912c:	17010069 	.word	0x17010069
    9130:	00000048 	.word	0x00000048
    9134:	006e6622 	.word	0x006e6622
    9138:	02bf1801 	.word	0x02bf1801
    913c:	2f030000 	.word	0x2f030000
    9140:	17230000 	.word	0x17230000
    9144:	01000034 	.word	0x01000034
    9148:	02082449 	.word	0x02082449
    914c:	691f0000 	.word	0x691f0000
    9150:	0100646e 	.word	0x0100646e
    9154:	00004827 	.word	0x00004827
    9158:	00580100 	.word	0x00580100
    915c:	a7041000 	.word	0xa7041000
    9160:	10000002 	.word	0x10000002
    9164:	00020704 	.word	0x00020704
    9168:	30c12500 	.word	0x30c12500
    916c:	28050000 	.word	0x28050000
    9170:	0009ac03 	.word	0x0009ac03
    9174:	16010100 	.word	0x16010100
    9178:	00000451 	.word	0x00000451
    917c:	00004900 	.word	0x00004900
    9180:	80000200 	.word	0x80000200
    9184:	0400001e 	.word	0x0400001e
    9188:	001d9a01 	.word	0x001d9a01
    918c:	00022800 	.word	0x00022800
    9190:	74726300 	.word	0x74726300
    9194:	73612e6e 	.word	0x73612e6e
    9198:	3a63006d 	.word	0x3a63006d
    919c:	6e69775c 	.word	0x6e69775c
    91a0:	736d7261 	.word	0x736d7261
    91a4:	6975625c 	.word	0x6975625c
    91a8:	675c646c 	.word	0x675c646c
    91ac:	622d6363 	.word	0x622d6363
    91b0:	646c6975 	.word	0x646c6975
    91b4:	6363675c 	.word	0x6363675c
    91b8:	554e4700 	.word	0x554e4700
    91bc:	20534120 	.word	0x20534120
    91c0:	38312e32 	.word	0x38312e32
    91c4:	0030352e 	.word	0x0030352e
    91c8:	Address 0x000091c8 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]
       c:	00051308 	andeq	r1, r5, r8, lsl #6
      10:	11010000 	tstne	r1, r0
      14:	11061000 	tstne	r6, r0
      18:	03011201 	movweq	r1, #4609	; 0x1201
      1c:	25081b08 	strcs	r1, [r8, #-2824]
      20:	00051308 	andeq	r1, r5, r8, lsl #6
      24:	11010000 	tstne	r1, r0
      28:	130e2501 	movwne	r2, #58625	; 0xe501
      2c:	1b0e030b 	blne	380c60 <__Stack_Size+0x380860>
      30:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
      34:	00061001 	andeq	r1, r6, r1
      38:	00160200 	andseq	r0, r6, r0, lsl #4
      3c:	0b3a0803 	bleq	e82050 <__Stack_Size+0xe81c50>
      40:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      44:	24030000 	strcs	r0, [r3]
      48:	3e0b0b00 	fmacdcc	d0, d11, d0
      4c:	000e030b 	andeq	r0, lr, fp, lsl #6
      50:	00350400 	eorseq	r0, r5, r0, lsl #8
      54:	00001349 	andeq	r1, r0, r9, asr #6
      58:	0b010405 	bleq	41074 <__Stack_Size+0x40c74>
      5c:	3b0b3a0b 	blcc	2ce890 <__Stack_Size+0x2ce490>
      60:	0013010b 	andseq	r0, r3, fp, lsl #2
      64:	00280600 	eoreq	r0, r8, r0, lsl #12
      68:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
      6c:	28070000 	stmdacs	r7, {}
      70:	1c080300 	stcne	3, cr0, [r8], {0}
      74:	0800000d 	stmdaeq	r0, {r0, r2, r3}
      78:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      7c:	0b3b0b3a 	bleq	ec2d6c <__Stack_Size+0xec296c>
      80:	00001349 	andeq	r1, r0, r9, asr #6
      84:	0b002409 	bleq	90b0 <__Stack_Size+0x8cb0>
      88:	000b3e0b 	andeq	r3, fp, fp, lsl #28
      8c:	01130a00 	tsteq	r3, r0, lsl #20
      90:	0b3a0b0b 	bleq	e82cc4 <__Stack_Size+0xe828c4>
      94:	1301053b 	movwne	r0, #5435	; 0x153b
      98:	0d0b0000 	stceq	0, cr0, [fp]
      9c:	3a080300 	bcc	200ca4 <__Stack_Size+0x2008a4>
      a0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      a4:	000a3813 	andeq	r3, sl, r3, lsl r8
      a8:	000d0c00 	andeq	r0, sp, r0, lsl #24
      ac:	0b3a0e03 	bleq	e838c0 <__Stack_Size+0xe834c0>
      b0:	1349053b 	movtne	r0, #38203	; 0x953b
      b4:	00000a38 	andeq	r0, r0, r8, lsr sl
      b8:	0b01130d 	bleq	44cf4 <__Stack_Size+0x448f4>
      bc:	3b0b3a0b 	blcc	2ce8f0 <__Stack_Size+0x2ce4f0>
      c0:	0013010b 	andseq	r0, r3, fp, lsl #2
      c4:	000d0e00 	andeq	r0, sp, r0, lsl #28
      c8:	0b3a0e03 	bleq	e838dc <__Stack_Size+0xe834dc>
      cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      d0:	00000a38 	andeq	r0, r0, r8, lsr sl
      d4:	3f002e0f 	svccc	0x00002e0f
      d8:	3a0e030c 	bcc	380d10 <__Stack_Size+0x380910>
      dc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
      e0:	1201110c 	andne	r1, r1, #3	; 0x3
      e4:	000a4001 	andeq	r4, sl, r1
      e8:	002e1000 	eoreq	r1, lr, r0
      ec:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
      f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
      f4:	13490c27 	movtne	r0, #39975	; 0x9c27
      f8:	01120111 	tsteq	r2, r1, lsl r1
      fc:	00000a40 	andeq	r0, r0, r0, asr #20
     100:	3f012e11 	svccc	0x00012e11
     104:	3a0e030c 	bcc	380d3c <__Stack_Size+0x38093c>
     108:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     10c:	1113490c 	tstne	r3, ip, lsl #18
     110:	40011201 	andmi	r1, r1, r1, lsl #4
     114:	0013010a 	andseq	r0, r3, sl, lsl #2
     118:	00341200 	eorseq	r1, r4, r0, lsl #4
     11c:	0b3a0e03 	bleq	e83930 <__Stack_Size+0xe83530>
     120:	1349053b 	movtne	r0, #38203	; 0x953b
     124:	00000a02 	andeq	r0, r0, r2, lsl #20
     128:	3f012e13 	svccc	0x00012e13
     12c:	3a0e030c 	bcc	380d64 <__Stack_Size+0x380964>
     130:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     134:	1201110c 	andne	r1, r1, #3	; 0x3
     138:	010a4001 	tsteq	sl, r1
     13c:	14000013 	strne	r0, [r0], #-19
     140:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     144:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     148:	0a021349 	beq	84e74 <__Stack_Size+0x84a74>
     14c:	2e150000 	wxorcs	wr0, wr5, wr0
     150:	030c3f01 	movweq	r3, #52993	; 0xcf01
     154:	3b0b3a0e 	blcc	2ce994 <__Stack_Size+0x2ce594>
     158:	110c2705 	tstne	ip, r5, lsl #14
     15c:	40011201 	andmi	r1, r1, r1, lsl #4
     160:	00130106 	andseq	r0, r3, r6, lsl #2
     164:	00051600 	andeq	r1, r5, r0, lsl #12
     168:	0b3a0e03 	bleq	e8397c <__Stack_Size+0xe8357c>
     16c:	1349053b 	movtne	r0, #38203	; 0x953b
     170:	00000602 	andeq	r0, r0, r2, lsl #12
     174:	3f002e17 	svccc	0x00002e17
     178:	3a0e030c 	bcc	380db0 <__Stack_Size+0x3809b0>
     17c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     180:	1201110c 	andne	r1, r1, #3	; 0x3
     184:	00064001 	andeq	r4, r6, r1
     188:	00341800 	eorseq	r1, r4, r0, lsl #16
     18c:	0b3a0e03 	bleq	e839a0 <__Stack_Size+0xe835a0>
     190:	1349053b 	movtne	r0, #38203	; 0x953b
     194:	00000602 	andeq	r0, r0, r2, lsl #12
     198:	0b000f19 	bleq	3e04 <__Stack_Size+0x3a04>
     19c:	0013490b 	andseq	r4, r3, fp, lsl #18
     1a0:	00241a00 	eoreq	r1, r4, r0, lsl #20
     1a4:	0b3e0b0b 	bleq	f82dd8 <__Stack_Size+0xf829d8>
     1a8:	00000803 	andeq	r0, r0, r3, lsl #16
     1ac:	3f012e1b 	svccc	0x00012e1b
     1b0:	3a0e030c 	bcc	380de8 <__Stack_Size+0x3809e8>
     1b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     1b8:	1201110c 	andne	r1, r1, #3	; 0x3
     1bc:	01064001 	tsteq	r6, r1
     1c0:	1c000013 	stcne	0, cr0, [r0], {19}
     1c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     1c8:	0b3b0b3a 	bleq	ec2eb8 <__Stack_Size+0xec2ab8>
     1cc:	0a021349 	beq	84ef8 <__Stack_Size+0x84af8>
     1d0:	341d0000 	ldrcc	r0, [sp]
     1d4:	3a0e0300 	bcc	380ddc <__Stack_Size+0x3809dc>
     1d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1dc:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     1e0:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     1e4:	0b3a0e03 	bleq	e839f8 <__Stack_Size+0xe835f8>
     1e8:	0c270b3b 	stceq	11, cr0, [r7], #-236
     1ec:	01111349 	tsteq	r1, r9, asr #6
     1f0:	06400112 	undefined
     1f4:	011f0000 	tsteq	pc, r0
     1f8:	01134901 	tsteq	r3, r1, lsl #18
     1fc:	20000013 	andcs	r0, r0, r3, lsl r0
     200:	13490021 	movtne	r0, #36897	; 0x9021
     204:	00000b2f 	andeq	r0, r0, pc, lsr #22
     208:	03003421 	movweq	r3, #1057	; 0x421
     20c:	3b0b3a0e 	blcc	2cea4c <__Stack_Size+0x2ce64c>
     210:	3f13490b 	svccc	0x0013490b
     214:	000a020c 	andeq	r0, sl, ip, lsl #4
     218:	00342200 	eorseq	r2, r4, r0, lsl #4
     21c:	0b3a0803 	bleq	e82230 <__Stack_Size+0xe81e30>
     220:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     224:	0a020c3f 	beq	83328 <__Stack_Size+0x82f28>
     228:	01000000 	tsteq	r0, r0
     22c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     230:	0e030b13 	vmoveq.32	d3[0], r0
     234:	01110e1b 	tsteq	r1, fp, lsl lr
     238:	06100112 	undefined
     23c:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
     240:	030c3f00 	movweq	r3, #52992	; 0xcf00
     244:	3b0b3a0e 	blcc	2cea84 <__Stack_Size+0x2ce684>
     248:	110c270b 	tstne	ip, fp, lsl #14
     24c:	40011201 	andmi	r1, r1, r1, lsl #4
     250:	0300000a 	movweq	r0, #10	; 0xa
     254:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     258:	0b3a0e03 	bleq	e83a6c <__Stack_Size+0xe8366c>
     25c:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     260:	01120111 	tsteq	r2, r1, lsl r1
     264:	00000a40 	andeq	r0, r0, r0, asr #20
     268:	3f002e04 	svccc	0x00002e04
     26c:	3a0e030c 	bcc	380ea4 <__Stack_Size+0x380aa4>
     270:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     274:	1201110c 	andne	r1, r1, #3	; 0x3
     278:	00064001 	andeq	r4, r6, r1
     27c:	002e0500 	eoreq	r0, lr, r0, lsl #10
     280:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     284:	0b3b0b3a 	bleq	ec2f74 <__Stack_Size+0xec2b74>
     288:	01110c27 	tsteq	r1, r7, lsr #24
     28c:	06400112 	undefined
     290:	01000000 	tsteq	r0, r0
     294:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     298:	0e030b13 	vmoveq.32	d3[0], r0
     29c:	01110e1b 	tsteq	r1, fp, lsl lr
     2a0:	06100112 	undefined
     2a4:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
     2a8:	030c3f00 	movweq	r3, #52992	; 0xcf00
     2ac:	3b0b3a0e 	blcc	2ceaec <__Stack_Size+0x2ce6ec>
     2b0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     2b4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     2b8:	00064001 	andeq	r4, r6, r1
     2bc:	00240300 	eoreq	r0, r4, r0, lsl #6
     2c0:	0b3e0b0b 	bleq	f82ef4 <__Stack_Size+0xf82af4>
     2c4:	00000803 	andeq	r0, r0, r3, lsl #16
     2c8:	3f012e04 	svccc	0x00012e04
     2cc:	3a0e030c 	bcc	380f04 <__Stack_Size+0x380b04>
     2d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     2d4:	1201110c 	andne	r1, r1, #3	; 0x3
     2d8:	01064001 	tsteq	r6, r1
     2dc:	05000013 	streq	r0, [r0, #-19]
     2e0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     2e4:	0b3b0b3a 	bleq	ec2fd4 <__Stack_Size+0xec2bd4>
     2e8:	06021349 	streq	r1, [r2], -r9, asr #6
     2ec:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     2f0:	030c3f01 	movweq	r3, #52993	; 0xcf01
     2f4:	3b0b3a0e 	blcc	2ceb34 <__Stack_Size+0x2ce734>
     2f8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     2fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     300:	01064001 	tsteq	r6, r1
     304:	07000013 	smladeq	r0, r3, r0, r0
     308:	08030034 	stmdaeq	r3, {r2, r4, r5}
     30c:	0b3b0b3a 	bleq	ec2ffc <__Stack_Size+0xec2bfc>
     310:	0a021349 	beq	8503c <__Stack_Size+0x84c3c>
     314:	0f080000 	svceq	0x00080000
     318:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     31c:	09000013 	stmdbeq	r0, {r0, r1, r4}
     320:	0b0b0024 	bleq	2c03b8 <__Stack_Size+0x2bffb8>
     324:	0e030b3e 	vmoveq.16	d3[0], r0
     328:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     32c:	030c3f00 	movweq	r3, #52992	; 0xcf00
     330:	3b0b3a0e 	blcc	2ceb70 <__Stack_Size+0x2ce770>
     334:	110c270b 	tstne	ip, fp, lsl #14
     338:	40011201 	andmi	r1, r1, r1, lsl #4
     33c:	0b000006 	bleq	35c <_Minimum_Stack_Size+0x25c>
     340:	0c3f012e 	ldfeqs	f0, [pc], #-184
     344:	0b3a0e03 	bleq	e83b58 <__Stack_Size+0xe83758>
     348:	0c270b3b 	stceq	11, cr0, [r7], #-236
     34c:	01111349 	tsteq	r1, r9, asr #6
     350:	06400112 	undefined
     354:	01000000 	tsteq	r0, r0
     358:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     35c:	0e030b13 	vmoveq.32	d3[0], r0
     360:	01110e1b 	tsteq	r1, fp, lsl lr
     364:	06100112 	undefined
     368:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
     36c:	030c3f01 	movweq	r3, #52993	; 0xcf01
     370:	3b0b3a0e 	blcc	2cebb0 <__Stack_Size+0x2ce7b0>
     374:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     378:	010b2013 	tsteq	fp, r3, lsl r0
     37c:	03000013 	movweq	r0, #19	; 0x13
     380:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     384:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     388:	00001349 	andeq	r1, r0, r9, asr #6
     38c:	03003404 	movweq	r3, #1028	; 0x404
     390:	3b0b3a0e 	blcc	2cebd0 <__Stack_Size+0x2ce7d0>
     394:	00134905 	andseq	r4, r3, r5, lsl #18
     398:	00240500 	eoreq	r0, r4, r0, lsl #10
     39c:	0b3e0b0b 	bleq	f82fd0 <__Stack_Size+0xf82bd0>
     3a0:	00000803 	andeq	r0, r0, r3, lsl #16
     3a4:	0b002406 	bleq	93c4 <__Stack_Size+0x8fc4>
     3a8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     3ac:	0700000e 	streq	r0, [r0, -lr]
     3b0:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     3b4:	0b3a0e03 	bleq	e83bc8 <__Stack_Size+0xe837c8>
     3b8:	0c270b3b 	stceq	11, cr0, [r7], #-236
     3bc:	01111349 	tsteq	r1, r9, asr #6
     3c0:	0a400112 	beq	1000810 <__Stack_Size+0x1000410>
     3c4:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
     3c8:	030c3f01 	movweq	r3, #52993	; 0xcf01
     3cc:	3b0b3a0e 	blcc	2cec0c <__Stack_Size+0x2ce80c>
     3d0:	110c270b 	tstne	ip, fp, lsl #14
     3d4:	40011201 	andmi	r1, r1, r1, lsl #4
     3d8:	0013010a 	andseq	r0, r3, sl, lsl #2
     3dc:	00050900 	andeq	r0, r5, r0, lsl #18
     3e0:	0b3a0803 	bleq	e823f4 <__Stack_Size+0xe81ff4>
     3e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     3e8:	00000a02 	andeq	r0, r0, r2, lsl #20
     3ec:	0300050a 	movweq	r0, #1290	; 0x50a
     3f0:	3b0b3a0e 	blcc	2cec30 <__Stack_Size+0x2ce830>
     3f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     3f8:	0b00000a 	bleq	428 <__Stack_Size+0x28>
     3fc:	0c3f012e 	ldfeqs	f0, [pc], #-184
     400:	0b3a0e03 	bleq	e83c14 <__Stack_Size+0xe83814>
     404:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     408:	01111349 	tsteq	r1, r9, asr #6
     40c:	0a400112 	beq	100085c <__Stack_Size+0x100045c>
     410:	00001301 	andeq	r1, r0, r1, lsl #6
     414:	0300050c 	movweq	r0, #1292	; 0x50c
     418:	3b0b3a0e 	blcc	2cec58 <__Stack_Size+0x2ce858>
     41c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     420:	0d000006 	stceq	0, cr0, [r0, #-24]
     424:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     428:	0b3a0e03 	bleq	e83c3c <__Stack_Size+0xe8383c>
     42c:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     430:	01111349 	tsteq	r1, r9, asr #6
     434:	0a400112 	beq	1000884 <__Stack_Size+0x1000484>
     438:	050e0000 	streq	r0, [lr]
     43c:	3a0e0300 	bcc	381044 <__Stack_Size+0x380c44>
     440:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     444:	00060213 	andeq	r0, r6, r3, lsl r2
     448:	012e0f00 	teqeq	lr, r0, lsl #30
     44c:	01111331 	tsteq	r1, r1, lsr r3
     450:	0a400112 	beq	10008a0 <__Stack_Size+0x10004a0>
     454:	00001301 	andeq	r1, r0, r1, lsl #6
     458:	31000510 	tstcc	r0, r0, lsl r5
     45c:	00060213 	andeq	r0, r6, r3, lsl r2
     460:	00051100 	andeq	r1, r5, r0, lsl #2
     464:	0a021331 	beq	85130 <__Stack_Size+0x84d30>
     468:	34120000 	ldrcc	r0, [r2]
     46c:	00133100 	andseq	r3, r3, r0, lsl #2
     470:	00341300 	eorseq	r1, r4, r0, lsl #6
     474:	06021331 	undefined
     478:	2e140000 	wxorcs	wr0, wr4, wr0
     47c:	030c3f01 	movweq	r3, #52993	; 0xcf01
     480:	3b0b3a0e 	blcc	2cecc0 <__Stack_Size+0x2ce8c0>
     484:	110c270b 	tstne	ip, fp, lsl #14
     488:	40011201 	andmi	r1, r1, r1, lsl #4
     48c:	00130106 	andseq	r0, r3, r6, lsl #2
     490:	00341500 	eorseq	r1, r4, r0, lsl #10
     494:	0b3a0803 	bleq	e824a8 <__Stack_Size+0xe820a8>
     498:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     49c:	00000602 	andeq	r0, r0, r2, lsl #12
     4a0:	03003416 	movweq	r3, #1046	; 0x416
     4a4:	3b0b3a0e 	blcc	2cece4 <__Stack_Size+0x2ce8e4>
     4a8:	0013490b 	andseq	r4, r3, fp, lsl #18
     4ac:	00341700 	eorseq	r1, r4, r0, lsl #14
     4b0:	0b3a0e03 	bleq	e83cc4 <__Stack_Size+0xe838c4>
     4b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4b8:	00000602 	andeq	r0, r0, r2, lsl #12
     4bc:	03003418 	movweq	r3, #1048	; 0x418
     4c0:	3b0b3a0e 	blcc	2ced00 <__Stack_Size+0x2ce900>
     4c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     4c8:	1900000a 	stmdbne	r0, {r1, r3}
     4cc:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     4d0:	0b3a0e03 	bleq	e83ce4 <__Stack_Size+0xe838e4>
     4d4:	0c270b3b 	stceq	11, cr0, [r7], #-236
     4d8:	01120111 	tsteq	r2, r1, lsl r1
     4dc:	00000640 	andeq	r0, r0, r0, asr #12
     4e0:	3f012e1a 	svccc	0x00012e1a
     4e4:	3a0e030c 	bcc	38111c <__Stack_Size+0x380d1c>
     4e8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     4ec:	1201110c 	andne	r1, r1, #3	; 0x3
     4f0:	01064001 	tsteq	r6, r1
     4f4:	1b000013 	blne	548 <__Stack_Size+0x148>
     4f8:	08030005 	stmdaeq	r3, {r0, r2}
     4fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     500:	06021349 	streq	r1, [r2], -r9, asr #6
     504:	1d1c0000 	ldcne	0, cr0, [ip]
     508:	11133101 	tstne	r3, r1, lsl #2
     50c:	58011201 	stmdapl	r1, {r0, r9, ip}
     510:	0005590b 	andeq	r5, r5, fp, lsl #18
     514:	00051d00 	andeq	r1, r5, r0, lsl #26
     518:	00001331 	andeq	r1, r0, r1, lsr r3
     51c:	11010b1e 	tstne	r1, lr, lsl fp
     520:	00011201 	andeq	r1, r1, r1, lsl #4
     524:	012e1f00 	teqeq	lr, r0, lsl #30
     528:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     52c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     530:	13490c27 	movtne	r0, #39975	; 0x9c27
     534:	01120111 	tsteq	r2, r1, lsl r1
     538:	13010640 	movwne	r0, #5696	; 0x1640
     53c:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     540:	030c3f01 	movweq	r3, #52993	; 0xcf01
     544:	3b0b3a0e 	blcc	2ced84 <__Stack_Size+0x2ce984>
     548:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     54c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     550:	01064001 	tsteq	r6, r1
     554:	21000013 	tstcs	r0, r3, lsl r0
     558:	13490101 	movtne	r0, #37121	; 0x9101
     55c:	00001301 	andeq	r1, r0, r1, lsl #6
     560:	49002122 	stmdbmi	r0, {r1, r5, r8, sp}
     564:	000b2f13 	andeq	r2, fp, r3, lsl pc
     568:	00242300 	eoreq	r2, r4, r0, lsl #6
     56c:	0b3e0b0b 	bleq	f831a0 <__Stack_Size+0xf82da0>
     570:	34240000 	strtcc	r0, [r4]
     574:	3a0e0300 	bcc	38117c <__Stack_Size+0x380d7c>
     578:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     57c:	020c3f13 	andeq	r3, ip, #76	; 0x4c
     580:	0000000a 	andeq	r0, r0, sl
     584:	25011101 	strcs	r1, [r1, #-257]
     588:	030b130e 	movweq	r1, #45838	; 0xb30e
     58c:	110e1b0e 	tstne	lr, lr, lsl #22
     590:	10011201 	andne	r1, r1, r1, lsl #4
     594:	02000006 	andeq	r0, r0, #6	; 0x6
     598:	0b0b0024 	bleq	2c0630 <__Stack_Size+0x2c0230>
     59c:	0e030b3e 	vmoveq.16	d3[0], r0
     5a0:	16030000 	strne	r0, [r3], -r0
     5a4:	3a080300 	bcc	2011ac <__Stack_Size+0x200dac>
     5a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5ac:	04000013 	streq	r0, [r0], #-19
     5b0:	13490035 	movtne	r0, #36917	; 0x9035
     5b4:	04050000 	streq	r0, [r5]
     5b8:	3a0b0b01 	bcc	2c31c4 <__Stack_Size+0x2c2dc4>
     5bc:	010b3b0b 	tsteq	fp, fp, lsl #22
     5c0:	06000013 	undefined
     5c4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     5c8:	00000d1c 	andeq	r0, r0, ip, lsl sp
     5cc:	03002807 	movweq	r2, #2055	; 0x807
     5d0:	000d1c08 	andeq	r1, sp, r8, lsl #24
     5d4:	00160800 	andseq	r0, r6, r0, lsl #16
     5d8:	0b3a0e03 	bleq	e83dec <__Stack_Size+0xe839ec>
     5dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     5e0:	24090000 	strcs	r0, [r9]
     5e4:	3e0b0b00 	fmacdcc	d0, d11, d0
     5e8:	0a00000b 	beq	61c <__Stack_Size+0x21c>
     5ec:	0b0b0113 	bleq	2c0a40 <__Stack_Size+0x2c0640>
     5f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     5f4:	00001301 	andeq	r1, r0, r1, lsl #6
     5f8:	03000d0b 	movweq	r0, #3339	; 0xd0b
     5fc:	3b0b3a08 	blcc	2cee24 <__Stack_Size+0x2cea24>
     600:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     604:	0c00000a 	stceq	0, cr0, [r0], {10}
     608:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     60c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     610:	0a381349 	beq	e0533c <__Stack_Size+0xe04f3c>
     614:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
     618:	030c3f01 	movweq	r3, #52993	; 0xcf01
     61c:	3b0b3a0e 	blcc	2cee5c <__Stack_Size+0x2cea5c>
     620:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     624:	010b2013 	tsteq	fp, r3, lsl r0
     628:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     62c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     630:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     634:	00001349 	andeq	r1, r0, r9, asr #6
     638:	03012e0f 	movweq	r2, #7695	; 0x1e0f
     63c:	3b0b3a0e 	blcc	2cee7c <__Stack_Size+0x2cea7c>
     640:	200c2705 	andcs	r2, ip, r5, lsl #14
     644:	0013010b 	andseq	r0, r3, fp, lsl #2
     648:	00341000 	eorseq	r1, r4, r0
     64c:	0b3a0803 	bleq	e82660 <__Stack_Size+0xe82260>
     650:	1349053b 	movtne	r0, #38203	; 0x953b
     654:	2e110000 	wxorcs	wr0, wr1, wr0
     658:	030c3f01 	movweq	r3, #52993	; 0xcf01
     65c:	3b0b3a0e 	blcc	2cee9c <__Stack_Size+0x2cea9c>
     660:	110c270b 	tstne	ip, fp, lsl #14
     664:	40011201 	andmi	r1, r1, r1, lsl #4
     668:	0013010a 	andseq	r0, r3, sl, lsl #2
     66c:	00051200 	andeq	r1, r5, r0, lsl #4
     670:	0b3a0e03 	bleq	e83e84 <__Stack_Size+0xe83a84>
     674:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     678:	00000602 	andeq	r0, r0, r2, lsl #12
     67c:	3f002e13 	svccc	0x00002e13
     680:	3a0e030c 	bcc	3812b8 <__Stack_Size+0x380eb8>
     684:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     688:	1201110c 	andne	r1, r1, #3	; 0x3
     68c:	000a4001 	andeq	r4, sl, r1
     690:	002e1400 	eoreq	r1, lr, r0, lsl #8
     694:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     698:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     69c:	13490c27 	movtne	r0, #39975	; 0x9c27
     6a0:	01120111 	tsteq	r2, r1, lsl r1
     6a4:	00000a40 	andeq	r0, r0, r0, asr #20
     6a8:	3f012e15 	svccc	0x00012e15
     6ac:	3a0e030c 	bcc	3812e4 <__Stack_Size+0x380ee4>
     6b0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     6b4:	1113490c 	tstne	r3, ip, lsl #18
     6b8:	40011201 	andmi	r1, r1, r1, lsl #4
     6bc:	0013010a 	andseq	r0, r3, sl, lsl #2
     6c0:	012e1600 	teqeq	lr, r0, lsl #12
     6c4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     6c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     6cc:	01110c27 	tsteq	r1, r7, lsr #24
     6d0:	0a400112 	beq	1000b20 <__Stack_Size+0x1000720>
     6d4:	00001301 	andeq	r1, r0, r1, lsl #6
     6d8:	03000517 	movweq	r0, #1303	; 0x517
     6dc:	3b0b3a0e 	blcc	2cef1c <__Stack_Size+0x2ceb1c>
     6e0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     6e4:	1800000a 	stmdane	r0, {r1, r3}
     6e8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     6ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     6f0:	06021349 	streq	r1, [r2], -r9, asr #6
     6f4:	34190000 	ldrcc	r0, [r9]
     6f8:	3a0e0300 	bcc	381300 <__Stack_Size+0x380f00>
     6fc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     700:	00060213 	andeq	r0, r6, r3, lsl r2
     704:	012e1a00 	teqeq	lr, r0, lsl #20
     708:	01111331 	tsteq	r1, r1, lsr r3
     70c:	0a400112 	beq	1000b5c <__Stack_Size+0x100075c>
     710:	00001301 	andeq	r1, r0, r1, lsl #6
     714:	3100341b 	tstcc	r0, fp, lsl r4
     718:	00060213 	andeq	r0, r6, r3, lsl r2
     71c:	012e1c00 	teqeq	lr, r0, lsl #24
     720:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     724:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     728:	13490c27 	movtne	r0, #39975	; 0x9c27
     72c:	01120111 	tsteq	r2, r1, lsl r1
     730:	13010640 	movwne	r0, #5696	; 0x1640
     734:	1d1d0000 	ldcne	0, cr0, [sp]
     738:	55133101 	ldrpl	r3, [r3, #-257]
     73c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     740:	00130105 	andseq	r0, r3, r5, lsl #2
     744:	010b1e00 	tsteq	fp, r0, lsl #28
     748:	00000655 	andeq	r0, r0, r5, asr r6
     74c:	3100341f 	tstcc	r0, pc, lsl r4
     750:	20000013 	andcs	r0, r0, r3, lsl r0
     754:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     758:	0b580655 	bleq	16020b4 <__Stack_Size+0x1601cb4>
     75c:	00000559 	andeq	r0, r0, r9, asr r5
     760:	3f012e21 	svccc	0x00012e21
     764:	3a0e030c 	bcc	38139c <__Stack_Size+0x380f9c>
     768:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     76c:	1113490c 	tstne	r3, ip, lsl #18
     770:	40011201 	andmi	r1, r1, r1, lsl #4
     774:	00130106 	andseq	r0, r3, r6, lsl #2
     778:	00342200 	eorseq	r2, r4, r0, lsl #4
     77c:	0b3a0e03 	bleq	e83f90 <__Stack_Size+0xe83b90>
     780:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     784:	00000602 	andeq	r0, r0, r2, lsl #12
     788:	3f012e23 	svccc	0x00012e23
     78c:	3a0e030c 	bcc	3813c4 <__Stack_Size+0x380fc4>
     790:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     794:	1113490c 	tstne	r3, ip, lsl #18
     798:	40011201 	andmi	r1, r1, r1, lsl #4
     79c:	00000006 	andeq	r0, r0, r6
     7a0:	25011101 	strcs	r1, [r1, #-257]
     7a4:	030b130e 	movweq	r1, #45838	; 0xb30e
     7a8:	110e1b0e 	tstne	lr, lr, lsl #22
     7ac:	10011201 	andne	r1, r1, r1, lsl #4
     7b0:	02000006 	andeq	r0, r0, #6	; 0x6
     7b4:	0b0b0024 	bleq	2c084c <__Stack_Size+0x2c044c>
     7b8:	0e030b3e 	vmoveq.16	d3[0], r0
     7bc:	16030000 	strne	r0, [r3], -r0
     7c0:	3a080300 	bcc	2013c8 <__Stack_Size+0x200fc8>
     7c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7c8:	04000013 	streq	r0, [r0], #-19
     7cc:	13490035 	movtne	r0, #36917	; 0x9035
     7d0:	04050000 	streq	r0, [r5]
     7d4:	3a0b0b01 	bcc	2c33e0 <__Stack_Size+0x2c2fe0>
     7d8:	010b3b0b 	tsteq	fp, fp, lsl #22
     7dc:	06000013 	undefined
     7e0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     7e4:	00000d1c 	andeq	r0, r0, ip, lsl sp
     7e8:	03001607 	movweq	r1, #1543	; 0x607
     7ec:	3b0b3a0e 	blcc	2cf02c <__Stack_Size+0x2cec2c>
     7f0:	0013490b 	andseq	r4, r3, fp, lsl #18
     7f4:	00240800 	eoreq	r0, r4, r0, lsl #16
     7f8:	0b3e0b0b 	bleq	f8342c <__Stack_Size+0xf8302c>
     7fc:	13090000 	movwne	r0, #36864	; 0x9000
     800:	3a0b0b01 	bcc	2c340c <__Stack_Size+0x2c300c>
     804:	01053b0b 	tsteq	r5, fp, lsl #22
     808:	0a000013 	beq	85c <__Stack_Size+0x45c>
     80c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     810:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     814:	0a381349 	beq	e05540 <__Stack_Size+0xe05140>
     818:	0d0b0000 	stceq	0, cr0, [fp]
     81c:	3a0e0300 	bcc	381424 <__Stack_Size+0x381024>
     820:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     824:	000a3813 	andeq	r3, sl, r3, lsl r8
     828:	00160c00 	andseq	r0, r6, r0, lsl #24
     82c:	0b3a0e03 	bleq	e84040 <__Stack_Size+0xe83c40>
     830:	1349053b 	movtne	r0, #38203	; 0x953b
     834:	010d0000 	tsteq	sp, r0
     838:	01134901 	tsteq	r3, r1, lsl #18
     83c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     840:	13490021 	movtne	r0, #36897	; 0x9021
     844:	00000b2f 	andeq	r0, r0, pc, lsr #22
     848:	0b01130f 	bleq	4548c <__Stack_Size+0x4508c>
     84c:	3b0b3a0b 	blcc	2cf080 <__Stack_Size+0x2cec80>
     850:	0013010b 	andseq	r0, r3, fp, lsl #2
     854:	000d1000 	andeq	r1, sp, r0
     858:	0b3a0e03 	bleq	e8406c <__Stack_Size+0xe83c6c>
     85c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     860:	00000a38 	andeq	r0, r0, r8, lsr sl
     864:	3f012e11 	svccc	0x00012e11
     868:	3a0e030c 	bcc	3814a0 <__Stack_Size+0x3810a0>
     86c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     870:	1201110c 	andne	r1, r1, #3	; 0x3
     874:	01064001 	tsteq	r6, r1
     878:	12000013 	andne	r0, r0, #19	; 0x13
     87c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     880:	0b3b0b3a 	bleq	ec3570 <__Stack_Size+0xec3170>
     884:	0a021349 	beq	855b0 <__Stack_Size+0x851b0>
     888:	05130000 	ldreq	r0, [r3]
     88c:	3a0e0300 	bcc	381494 <__Stack_Size+0x381094>
     890:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     894:	00060213 	andeq	r0, r6, r3, lsl r2
     898:	00341400 	eorseq	r1, r4, r0, lsl #8
     89c:	0b3a0e03 	bleq	e840b0 <__Stack_Size+0xe83cb0>
     8a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8a4:	00000a02 	andeq	r0, r0, r2, lsl #20
     8a8:	03003415 	movweq	r3, #1045	; 0x415
     8ac:	3b0b3a08 	blcc	2cf0d4 <__Stack_Size+0x2cecd4>
     8b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     8b4:	16000006 	strne	r0, [r0], -r6
     8b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8bc:	0b3b0b3a 	bleq	ec35ac <__Stack_Size+0xec31ac>
     8c0:	00001349 	andeq	r1, r0, r9, asr #6
     8c4:	0b000f17 	bleq	4528 <__Stack_Size+0x4128>
     8c8:	0013490b 	andseq	r4, r3, fp, lsl #18
     8cc:	012e1800 	teqeq	lr, r0, lsl #16
     8d0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     8d4:	0b3b0b3a 	bleq	ec35c4 <__Stack_Size+0xec31c4>
     8d8:	01110c27 	tsteq	r1, r7, lsr #24
     8dc:	0a400112 	beq	1000d2c <__Stack_Size+0x100092c>
     8e0:	00001301 	andeq	r1, r0, r1, lsl #6
     8e4:	3f012e19 	svccc	0x00012e19
     8e8:	3a0e030c 	bcc	381520 <__Stack_Size+0x381120>
     8ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     8f0:	1113490c 	tstne	r3, ip, lsl #18
     8f4:	40011201 	andmi	r1, r1, r1, lsl #4
     8f8:	0013010a 	andseq	r0, r3, sl, lsl #2
     8fc:	012e1a00 	teqeq	lr, r0, lsl #20
     900:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     904:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     908:	13490c27 	movtne	r0, #39975	; 0x9c27
     90c:	01120111 	tsteq	r2, r1, lsl r1
     910:	13010a40 	movwne	r0, #6720	; 0x1a40
     914:	051b0000 	ldreq	r0, [fp]
     918:	3a0e0300 	bcc	381520 <__Stack_Size+0x381120>
     91c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     920:	00060213 	andeq	r0, r6, r3, lsl r2
     924:	00051c00 	andeq	r1, r5, r0, lsl #24
     928:	0b3a0e03 	bleq	e8413c <__Stack_Size+0xe83d3c>
     92c:	1349053b 	movtne	r0, #38203	; 0x953b
     930:	00000a02 	andeq	r0, r0, r2, lsl #20
     934:	0300341d 	movweq	r3, #1053	; 0x41d
     938:	3b0b3a0e 	blcc	2cf178 <__Stack_Size+0x2ced78>
     93c:	00134905 	andseq	r4, r3, r5, lsl #18
     940:	012e1e00 	teqeq	lr, r0, lsl #28
     944:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     948:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     94c:	01110c27 	tsteq	r1, r7, lsr #24
     950:	0a400112 	beq	1000da0 <__Stack_Size+0x10009a0>
     954:	00001301 	andeq	r1, r0, r1, lsl #6
     958:	0300341f 	movweq	r3, #1055	; 0x41f
     95c:	3b0b3a08 	blcc	2cf184 <__Stack_Size+0x2ced84>
     960:	02134905 	andseq	r4, r3, #81920	; 0x14000
     964:	2000000a 	andcs	r0, r0, sl
     968:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     96c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     970:	06021349 	streq	r1, [r2], -r9, asr #6
     974:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     978:	030c3f01 	movweq	r3, #52993	; 0xcf01
     97c:	3b0b3a0e 	blcc	2cf1bc <__Stack_Size+0x2cedbc>
     980:	110c2705 	tstne	ip, r5, lsl #14
     984:	40011201 	andmi	r1, r1, r1, lsl #4
     988:	00130106 	andseq	r0, r3, r6, lsl #2
     98c:	00342200 	eorseq	r2, r4, r0, lsl #4
     990:	0b3a0803 	bleq	e829a4 <__Stack_Size+0xe825a4>
     994:	1349053b 	movtne	r0, #38203	; 0x953b
     998:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
     99c:	030c3f00 	movweq	r3, #52992	; 0xcf00
     9a0:	3b0b3a0e 	blcc	2cf1e0 <__Stack_Size+0x2cede0>
     9a4:	110c270b 	tstne	ip, fp, lsl #14
     9a8:	40011201 	andmi	r1, r1, r1, lsl #4
     9ac:	24000006 	strcs	r0, [r0], #-6
     9b0:	0c3f012e 	ldfeqs	f0, [pc], #-184
     9b4:	0b3a0e03 	bleq	e841c8 <__Stack_Size+0xe83dc8>
     9b8:	0c270b3b 	stceq	11, cr0, [r7], #-236
     9bc:	01120111 	tsteq	r2, r1, lsl r1
     9c0:	00000640 	andeq	r0, r0, r0, asr #12
     9c4:	01110100 	tsteq	r1, r0, lsl #2
     9c8:	0b130e25 	bleq	4c4264 <__Stack_Size+0x4c3e64>
     9cc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     9d0:	01120111 	tsteq	r2, r1, lsl r1
     9d4:	00000610 	andeq	r0, r0, r0, lsl r6
     9d8:	0b002402 	bleq	99e8 <__Stack_Size+0x95e8>
     9dc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     9e0:	0300000e 	movweq	r0, #14	; 0xe
     9e4:	08030016 	stmdaeq	r3, {r1, r2, r4}
     9e8:	0b3b0b3a 	bleq	ec36d8 <__Stack_Size+0xec32d8>
     9ec:	00001349 	andeq	r1, r0, r9, asr #6
     9f0:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
     9f4:	05000013 	streq	r0, [r0, #-19]
     9f8:	13490026 	movtne	r0, #36902	; 0x9026
     9fc:	04060000 	streq	r0, [r6]
     a00:	3a0b0b01 	bcc	2c360c <__Stack_Size+0x2c320c>
     a04:	010b3b0b 	tsteq	fp, fp, lsl #22
     a08:	07000013 	smladeq	r0, r3, r0, r0
     a0c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     a10:	00000d1c 	andeq	r0, r0, ip, lsl sp
     a14:	03002808 	movweq	r2, #2056	; 0x808
     a18:	000d1c08 	andeq	r1, sp, r8, lsl #24
     a1c:	00160900 	andseq	r0, r6, r0, lsl #18
     a20:	0b3a0e03 	bleq	e84234 <__Stack_Size+0xe83e34>
     a24:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a28:	240a0000 	strcs	r0, [sl]
     a2c:	3e0b0b00 	fmacdcc	d0, d11, d0
     a30:	0b00000b 	bleq	a64 <__Stack_Size+0x664>
     a34:	050b0113 	streq	r0, [fp, #-275]
     a38:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     a3c:	00001301 	andeq	r1, r0, r1, lsl #6
     a40:	03000d0c 	movweq	r0, #3340	; 0xd0c
     a44:	3b0b3a0e 	blcc	2cf284 <__Stack_Size+0x2cee84>
     a48:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     a4c:	0d00000a 	stceq	0, cr0, [r0, #-40]
     a50:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     a54:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     a58:	0a381349 	beq	e05784 <__Stack_Size+0xe05384>
     a5c:	010e0000 	tsteq	lr, r0
     a60:	01134901 	tsteq	r3, r1, lsl #18
     a64:	0f000013 	svceq	0x00000013
     a68:	13490021 	movtne	r0, #36897	; 0x9021
     a6c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     a70:	0b011310 	bleq	456b8 <__Stack_Size+0x452b8>
     a74:	3b0b3a0b 	blcc	2cf2a8 <__Stack_Size+0x2ceea8>
     a78:	00130105 	andseq	r0, r3, r5, lsl #2
     a7c:	01131100 	tsteq	r3, r0, lsl #2
     a80:	0b3a0b0b 	bleq	e836b4 <__Stack_Size+0xe832b4>
     a84:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     a88:	0d120000 	ldceq	0, cr0, [r2]
     a8c:	3a0e0300 	bcc	381694 <__Stack_Size+0x381294>
     a90:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a94:	000a3813 	andeq	r3, sl, r3, lsl r8
     a98:	012e1300 	teqeq	lr, r0, lsl #6
     a9c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     aa0:	0b3b0b3a 	bleq	ec3790 <__Stack_Size+0xec3390>
     aa4:	01110c27 	tsteq	r1, r7, lsr #24
     aa8:	0a400112 	beq	1000ef8 <__Stack_Size+0x1000af8>
     aac:	00001301 	andeq	r1, r0, r1, lsl #6
     ab0:	03003414 	movweq	r3, #1044	; 0x414
     ab4:	3b0b3a0e 	blcc	2cf2f4 <__Stack_Size+0x2ceef4>
     ab8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     abc:	1500000a 	strne	r0, [r0, #-10]
     ac0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ac4:	0b3b0b3a 	bleq	ec37b4 <__Stack_Size+0xec33b4>
     ac8:	00001349 	andeq	r1, r0, r9, asr #6
     acc:	03000516 	movweq	r0, #1302	; 0x516
     ad0:	3b0b3a0e 	blcc	2cf310 <__Stack_Size+0x2cef10>
     ad4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ad8:	17000006 	strne	r0, [r0, -r6]
     adc:	0c3f012e 	ldfeqs	f0, [pc], #-184
     ae0:	0b3a0e03 	bleq	e842f4 <__Stack_Size+0xe83ef4>
     ae4:	0c270b3b 	stceq	11, cr0, [r7], #-236
     ae8:	01120111 	tsteq	r2, r1, lsl r1
     aec:	13010640 	movwne	r0, #5696	; 0x1640
     af0:	34180000 	ldrcc	r0, [r8]
     af4:	3a0e0300 	bcc	3816fc <__Stack_Size+0x3812fc>
     af8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     afc:	00060213 	andeq	r0, r6, r3, lsl r2
     b00:	000f1900 	andeq	r1, pc, r0, lsl #18
     b04:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     b08:	051a0000 	ldreq	r0, [sl]
     b0c:	3a0e0300 	bcc	381714 <__Stack_Size+0x381314>
     b10:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b14:	000a0213 	andeq	r0, sl, r3, lsl r2
     b18:	002e1b00 	eoreq	r1, lr, r0, lsl #22
     b1c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     b20:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     b24:	13490c27 	movtne	r0, #39975	; 0x9c27
     b28:	01120111 	tsteq	r2, r1, lsl r1
     b2c:	00000a40 	andeq	r0, r0, r0, asr #20
     b30:	3f012e1c 	svccc	0x00012e1c
     b34:	3a0e030c 	bcc	38176c <__Stack_Size+0x38136c>
     b38:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     b3c:	1113490c 	tstne	r3, ip, lsl #18
     b40:	40011201 	andmi	r1, r1, r1, lsl #4
     b44:	0013010a 	andseq	r0, r3, sl, lsl #2
     b48:	00051d00 	andeq	r1, r5, r0, lsl #26
     b4c:	0b3a0e03 	bleq	e84360 <__Stack_Size+0xe83f60>
     b50:	1349053b 	movtne	r0, #38203	; 0x953b
     b54:	00000602 	andeq	r0, r0, r2, lsl #12
     b58:	0300341e 	movweq	r3, #1054	; 0x41e
     b5c:	3b0b3a0e 	blcc	2cf39c <__Stack_Size+0x2cef9c>
     b60:	00134905 	andseq	r4, r3, r5, lsl #18
     b64:	00341f00 	eorseq	r1, r4, r0, lsl #30
     b68:	0b3a0803 	bleq	e82b7c <__Stack_Size+0xe8277c>
     b6c:	1349053b 	movtne	r0, #38203	; 0x953b
     b70:	00000a02 	andeq	r0, r0, r2, lsl #20
     b74:	3f012e20 	svccc	0x00012e20
     b78:	3a0e030c 	bcc	3817b0 <__Stack_Size+0x3813b0>
     b7c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     b80:	1201110c 	andne	r1, r1, #3	; 0x3
     b84:	010a4001 	tsteq	sl, r1
     b88:	21000013 	tstcs	r0, r3, lsl r0
     b8c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     b90:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     b94:	0a021349 	beq	858c0 <__Stack_Size+0x854c0>
     b98:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
     b9c:	030c3f00 	movweq	r3, #52992	; 0xcf00
     ba0:	3b0b3a0e 	blcc	2cf3e0 <__Stack_Size+0x2cefe0>
     ba4:	110c2705 	tstne	ip, r5, lsl #14
     ba8:	40011201 	andmi	r1, r1, r1, lsl #4
     bac:	2300000a 	movwcs	r0, #10	; 0xa
     bb0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     bb4:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     bb8:	0a021349 	beq	858e4 <__Stack_Size+0x854e4>
     bbc:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
     bc0:	030c3f01 	movweq	r3, #52993	; 0xcf01
     bc4:	3b0b3a0e 	blcc	2cf404 <__Stack_Size+0x2cf004>
     bc8:	110c2705 	tstne	ip, r5, lsl #14
     bcc:	40011201 	andmi	r1, r1, r1, lsl #4
     bd0:	00130106 	andseq	r0, r3, r6, lsl #2
     bd4:	00342500 	eorseq	r2, r4, r0, lsl #10
     bd8:	0b3a0e03 	bleq	e843ec <__Stack_Size+0xe83fec>
     bdc:	1349053b 	movtne	r0, #38203	; 0x953b
     be0:	00000602 	andeq	r0, r0, r2, lsl #12
     be4:	03003426 	movweq	r3, #1062	; 0x426
     be8:	3b0b3a08 	blcc	2cf410 <__Stack_Size+0x2cf010>
     bec:	00134905 	andseq	r4, r3, r5, lsl #18
     bf0:	002e2700 	eoreq	r2, lr, r0, lsl #14
     bf4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     bf8:	0b3b0b3a 	bleq	ec38e8 <__Stack_Size+0xec34e8>
     bfc:	13490c27 	movtne	r0, #39975	; 0x9c27
     c00:	01120111 	tsteq	r2, r1, lsl r1
     c04:	00000640 	andeq	r0, r0, r0, asr #12
     c08:	3f002e28 	svccc	0x00002e28
     c0c:	3a0e030c 	bcc	381844 <__Stack_Size+0x381444>
     c10:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c14:	1201110c 	andne	r1, r1, #3	; 0x3
     c18:	00064001 	andeq	r4, r6, r1
     c1c:	11010000 	tstne	r1, r0
     c20:	130e2501 	movwne	r2, #58625	; 0xe501
     c24:	1b0e030b 	blne	381858 <__Stack_Size+0x381458>
     c28:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     c2c:	00061001 	andeq	r1, r6, r1
     c30:	00240200 	eoreq	r0, r4, r0, lsl #4
     c34:	0b3e0b0b 	bleq	f83868 <__Stack_Size+0xf83468>
     c38:	00000e03 	andeq	r0, r0, r3, lsl #28
     c3c:	03001603 	movweq	r1, #1539	; 0x603
     c40:	3b0b3a08 	blcc	2cf468 <__Stack_Size+0x2cf068>
     c44:	0013490b 	andseq	r4, r3, fp, lsl #18
     c48:	00350400 	eorseq	r0, r5, r0, lsl #8
     c4c:	00001349 	andeq	r1, r0, r9, asr #6
     c50:	0b010405 	bleq	41c6c <__Stack_Size+0x4186c>
     c54:	3b0b3a0b 	blcc	2cf488 <__Stack_Size+0x2cf088>
     c58:	0013010b 	andseq	r0, r3, fp, lsl #2
     c5c:	00280600 	eoreq	r0, r8, r0, lsl #12
     c60:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     c64:	28070000 	stmdacs	r7, {}
     c68:	1c080300 	stcne	3, cr0, [r8], {0}
     c6c:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     c70:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     c74:	0b3b0b3a 	bleq	ec3964 <__Stack_Size+0xec3564>
     c78:	00001349 	andeq	r1, r0, r9, asr #6
     c7c:	0b002409 	bleq	9ca8 <__Stack_Size+0x98a8>
     c80:	000b3e0b 	andeq	r3, fp, fp, lsl #28
     c84:	01130a00 	tsteq	r3, r0, lsl #20
     c88:	0b3a0b0b 	bleq	e838bc <__Stack_Size+0xe834bc>
     c8c:	1301053b 	movwne	r0, #5435	; 0x153b
     c90:	0d0b0000 	stceq	0, cr0, [fp]
     c94:	3a080300 	bcc	20189c <__Stack_Size+0x20149c>
     c98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c9c:	000a3813 	andeq	r3, sl, r3, lsl r8
     ca0:	012e0c00 	teqeq	lr, r0, lsl #24
     ca4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     ca8:	0b3b0b3a 	bleq	ec3998 <__Stack_Size+0xec3598>
     cac:	01110c27 	tsteq	r1, r7, lsr #24
     cb0:	0a400112 	beq	1001100 <__Stack_Size+0x1000d00>
     cb4:	00001301 	andeq	r1, r0, r1, lsl #6
     cb8:	0300050d 	movweq	r0, #1293	; 0x50d
     cbc:	3b0b3a0e 	blcc	2cf4fc <__Stack_Size+0x2cf0fc>
     cc0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     cc4:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
     cc8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     ccc:	0b3b0b3a 	bleq	ec39bc <__Stack_Size+0xec35bc>
     cd0:	06021349 	streq	r1, [r2], -r9, asr #6
     cd4:	340f0000 	strcc	r0, [pc], #0	; cdc <__Stack_Size+0x8dc>
     cd8:	3a0e0300 	bcc	3818e0 <__Stack_Size+0x3814e0>
     cdc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ce0:	00060213 	andeq	r0, r6, r3, lsl r2
     ce4:	012e1000 	teqeq	lr, r0
     ce8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     cec:	0b3b0b3a 	bleq	ec39dc <__Stack_Size+0xec35dc>
     cf0:	13490c27 	movtne	r0, #39975	; 0x9c27
     cf4:	01120111 	tsteq	r2, r1, lsl r1
     cf8:	13010a40 	movwne	r0, #6720	; 0x1a40
     cfc:	34110000 	ldrcc	r0, [r1]
     d00:	3a0e0300 	bcc	381908 <__Stack_Size+0x381508>
     d04:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d08:	12000013 	andne	r0, r0, #19	; 0x13
     d0c:	0c3f012e 	ldfeqs	f0, [pc], #-184
     d10:	0b3a0e03 	bleq	e84524 <__Stack_Size+0xe84124>
     d14:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     d18:	01120111 	tsteq	r2, r1, lsl r1
     d1c:	13010a40 	movwne	r0, #6720	; 0x1a40
     d20:	05130000 	ldreq	r0, [r3]
     d24:	3a0e0300 	bcc	38192c <__Stack_Size+0x38152c>
     d28:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d2c:	000a0213 	andeq	r0, sl, r3, lsl r2
     d30:	002e1400 	eoreq	r1, lr, r0, lsl #8
     d34:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     d38:	0b3b0b3a 	bleq	ec3a28 <__Stack_Size+0xec3628>
     d3c:	01110c27 	tsteq	r1, r7, lsr #24
     d40:	06400112 	undefined
     d44:	2e150000 	wxorcs	wr0, wr5, wr0
     d48:	030c3f01 	movweq	r3, #52993	; 0xcf01
     d4c:	3b0b3a0e 	blcc	2cf58c <__Stack_Size+0x2cf18c>
     d50:	110c270b 	tstne	ip, fp, lsl #14
     d54:	40011201 	andmi	r1, r1, r1, lsl #4
     d58:	00130106 	andseq	r0, r3, r6, lsl #2
     d5c:	11010000 	tstne	r1, r0
     d60:	130e2501 	movwne	r2, #58625	; 0xe501
     d64:	1b0e030b 	blne	381998 <__Stack_Size+0x381598>
     d68:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     d6c:	00061001 	andeq	r1, r6, r1
     d70:	00240200 	eoreq	r0, r4, r0, lsl #4
     d74:	0b3e0b0b 	bleq	f839a8 <__Stack_Size+0xf835a8>
     d78:	00000e03 	andeq	r0, r0, r3, lsl #28
     d7c:	03001603 	movweq	r1, #1539	; 0x603
     d80:	3b0b3a08 	blcc	2cf5a8 <__Stack_Size+0x2cf1a8>
     d84:	0013490b 	andseq	r4, r3, fp, lsl #18
     d88:	00350400 	eorseq	r0, r5, r0, lsl #8
     d8c:	00001349 	andeq	r1, r0, r9, asr #6
     d90:	0b010405 	bleq	41dac <__Stack_Size+0x419ac>
     d94:	3b0b3a0b 	blcc	2cf5c8 <__Stack_Size+0x2cf1c8>
     d98:	0013010b 	andseq	r0, r3, fp, lsl #2
     d9c:	00280600 	eoreq	r0, r8, r0, lsl #12
     da0:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     da4:	28070000 	stmdacs	r7, {}
     da8:	1c080300 	stcne	3, cr0, [r8], {0}
     dac:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     db0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     db4:	0b3b0b3a 	bleq	ec3aa4 <__Stack_Size+0xec36a4>
     db8:	00001349 	andeq	r1, r0, r9, asr #6
     dbc:	0b002409 	bleq	9de8 <__Stack_Size+0x99e8>
     dc0:	000b3e0b 	andeq	r3, fp, fp, lsl #28
     dc4:	01130a00 	tsteq	r3, r0, lsl #20
     dc8:	0b3a0b0b 	bleq	e839fc <__Stack_Size+0xe835fc>
     dcc:	1301053b 	movwne	r0, #5435	; 0x153b
     dd0:	0d0b0000 	stceq	0, cr0, [fp]
     dd4:	3a080300 	bcc	2019dc <__Stack_Size+0x2015dc>
     dd8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ddc:	000a3813 	andeq	r3, sl, r3, lsl r8
     de0:	000d0c00 	andeq	r0, sp, r0, lsl #24
     de4:	0b3a0e03 	bleq	e845f8 <__Stack_Size+0xe841f8>
     de8:	1349053b 	movtne	r0, #38203	; 0x953b
     dec:	00000a38 	andeq	r0, r0, r8, lsr sl
     df0:	0b01130d 	bleq	45a2c <__Stack_Size+0x4562c>
     df4:	3b0b3a0b 	blcc	2cf628 <__Stack_Size+0x2cf228>
     df8:	0013010b 	andseq	r0, r3, fp, lsl #2
     dfc:	000d0e00 	andeq	r0, sp, r0, lsl #28
     e00:	0b3a0e03 	bleq	e84614 <__Stack_Size+0xe84214>
     e04:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e08:	00000a38 	andeq	r0, r0, r8, lsr sl
     e0c:	3f012e0f 	svccc	0x00012e0f
     e10:	3a0e030c 	bcc	381a48 <__Stack_Size+0x381648>
     e14:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     e18:	2013490c 	andscs	r4, r3, ip, lsl #18
     e1c:	0013010b 	andseq	r0, r3, fp, lsl #2
     e20:	00051000 	andeq	r1, r5, r0
     e24:	0b3a0e03 	bleq	e84638 <__Stack_Size+0xe84238>
     e28:	1349053b 	movtne	r0, #38203	; 0x953b
     e2c:	34110000 	ldrcc	r0, [r1]
     e30:	3a080300 	bcc	201a38 <__Stack_Size+0x201638>
     e34:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e38:	12000013 	andne	r0, r0, #19	; 0x13
     e3c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     e40:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     e44:	00001349 	andeq	r1, r0, r9, asr #6
     e48:	3f002e13 	svccc	0x00002e13
     e4c:	3a0e030c 	bcc	381a84 <__Stack_Size+0x381684>
     e50:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     e54:	1201110c 	andne	r1, r1, #3	; 0x3
     e58:	000a4001 	andeq	r4, sl, r1
     e5c:	012e1400 	teqeq	lr, r0, lsl #8
     e60:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     e64:	0b3b0b3a 	bleq	ec3b54 <__Stack_Size+0xec3754>
     e68:	01110c27 	tsteq	r1, r7, lsr #24
     e6c:	0a400112 	beq	10012bc <__Stack_Size+0x1000ebc>
     e70:	00001301 	andeq	r1, r0, r1, lsl #6
     e74:	03000515 	movweq	r0, #1301	; 0x515
     e78:	3b0b3a0e 	blcc	2cf6b8 <__Stack_Size+0x2cf2b8>
     e7c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e80:	1600000a 	strne	r0, [r0], -sl
     e84:	0c3f012e 	ldfeqs	f0, [pc], #-184
     e88:	0b3a0e03 	bleq	e8469c <__Stack_Size+0xe8429c>
     e8c:	0c270b3b 	stceq	11, cr0, [r7], #-236
     e90:	01111349 	tsteq	r1, r9, asr #6
     e94:	06400112 	undefined
     e98:	00001301 	andeq	r1, r0, r1, lsl #6
     e9c:	03003417 	movweq	r3, #1047	; 0x417
     ea0:	3b0b3a0e 	blcc	2cf6e0 <__Stack_Size+0x2cf2e0>
     ea4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ea8:	18000006 	stmdane	r0, {r1, r2}
     eac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     eb0:	0b3b0b3a 	bleq	ec3ba0 <__Stack_Size+0xec37a0>
     eb4:	00001349 	andeq	r1, r0, r9, asr #6
     eb8:	31011d19 	tstcc	r1, r9, lsl sp
     ebc:	55015213 	strpl	r5, [r1, #-531]
     ec0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     ec4:	0013010b 	andseq	r0, r3, fp, lsl #2
     ec8:	00051a00 	andeq	r1, r5, r0, lsl #20
     ecc:	00001331 	andeq	r1, r0, r1, lsr r3
     ed0:	55010b1b 	strpl	r0, [r1, #-2843]
     ed4:	1c000006 	stcne	0, cr0, [r0], {6}
     ed8:	13310034 	teqne	r1, #52	; 0x34
     edc:	341d0000 	ldrcc	r0, [sp]
     ee0:	02133100 	andseq	r3, r3, #0	; 0x0
     ee4:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
     ee8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     eec:	01120111 	tsteq	r2, r1, lsl r1
     ef0:	0b590b58 	bleq	1643c58 <__Stack_Size+0x1643858>
     ef4:	0b1f0000 	bleq	7c0efc <__Stack_Size+0x7c0afc>
     ef8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     efc:	20000001 	andcs	r0, r0, r1
     f00:	13310034 	teqne	r1, #52	; 0x34
     f04:	00000602 	andeq	r0, r0, r2, lsl #12
     f08:	03003421 	movweq	r3, #1057	; 0x421
     f0c:	3b0b3a0e 	blcc	2cf74c <__Stack_Size+0x2cf34c>
     f10:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     f14:	2200000a 	andcs	r0, r0, #10	; 0xa
     f18:	0c3f012e 	ldfeqs	f0, [pc], #-184
     f1c:	0b3a0e03 	bleq	e84730 <__Stack_Size+0xe84330>
     f20:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     f24:	01120111 	tsteq	r2, r1, lsl r1
     f28:	13010a40 	movwne	r0, #6720	; 0x1a40
     f2c:	05230000 	streq	r0, [r3]!
     f30:	3a0e0300 	bcc	381b38 <__Stack_Size+0x381738>
     f34:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f38:	000a0213 	andeq	r0, sl, r3, lsl r2
     f3c:	00052400 	andeq	r2, r5, r0, lsl #8
     f40:	0b3a0e03 	bleq	e84754 <__Stack_Size+0xe84354>
     f44:	1349053b 	movtne	r0, #38203	; 0x953b
     f48:	00000602 	andeq	r0, r0, r2, lsl #12
     f4c:	03003425 	movweq	r3, #1061	; 0x425
     f50:	3b0b3a0e 	blcc	2cf790 <__Stack_Size+0x2cf390>
     f54:	02134905 	andseq	r4, r3, #81920	; 0x14000
     f58:	26000006 	strcs	r0, [r0], -r6
     f5c:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     f60:	0b3a0e03 	bleq	e84774 <__Stack_Size+0xe84374>
     f64:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     f68:	01111349 	tsteq	r1, r9, asr #6
     f6c:	0a400112 	beq	10013bc <__Stack_Size+0x1000fbc>
     f70:	34270000 	strtcc	r0, [r7]
     f74:	3a0e0300 	bcc	381b7c <__Stack_Size+0x38177c>
     f78:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f7c:	000a0213 	andeq	r0, sl, r3, lsl r2
     f80:	00342800 	eorseq	r2, r4, r0, lsl #16
     f84:	0b3a0803 	bleq	e82f98 <__Stack_Size+0xe82b98>
     f88:	1349053b 	movtne	r0, #38203	; 0x953b
     f8c:	00000602 	andeq	r0, r0, r2, lsl #12
     f90:	0b000f29 	bleq	4c3c <__Stack_Size+0x483c>
     f94:	0013490b 	andseq	r4, r3, fp, lsl #18
     f98:	012e2a00 	teqeq	lr, r0, lsl #20
     f9c:	01111331 	tsteq	r1, r1, lsr r3
     fa0:	0a400112 	beq	10013f0 <__Stack_Size+0x1000ff0>
     fa4:	00001301 	andeq	r1, r0, r1, lsl #6
     fa8:	3100052b 	tstcc	r0, fp, lsr #10
     fac:	00060213 	andeq	r0, r6, r3, lsl r2
     fb0:	002e2c00 	eoreq	r2, lr, r0, lsl #24
     fb4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     fb8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     fbc:	01110c27 	tsteq	r1, r7, lsr #24
     fc0:	0a400112 	beq	1001410 <__Stack_Size+0x1001010>
     fc4:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
     fc8:	030c3f01 	movweq	r3, #52993	; 0xcf01
     fcc:	3b0b3a0e 	blcc	2cf80c <__Stack_Size+0x2cf40c>
     fd0:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     fd4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     fd8:	010a4001 	tsteq	sl, r1
     fdc:	2e000013 	mcrcs	0, 0, r0, cr0, cr3, {0}
     fe0:	13490101 	movtne	r0, #37121	; 0x9101
     fe4:	00001301 	andeq	r1, r0, r1, lsl #6
     fe8:	4900212f 	stmdbmi	r0, {r0, r1, r2, r3, r5, r8, sp}
     fec:	000b2f13 	andeq	r2, fp, r3, lsl pc
     ff0:	00263000 	eoreq	r3, r6, r0
     ff4:	00001349 	andeq	r1, r0, r9, asr #6
     ff8:	01110100 	tsteq	r1, r0, lsl #2
     ffc:	0b130e25 	bleq	4c4898 <__Stack_Size+0x4c4498>
    1000:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1004:	01120111 	tsteq	r2, r1, lsl r1
    1008:	00000610 	andeq	r0, r0, r0, lsl r6
    100c:	0b002402 	bleq	a01c <__Stack_Size+0x9c1c>
    1010:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1014:	0300000e 	movweq	r0, #14	; 0xe
    1018:	08030016 	stmdaeq	r3, {r1, r2, r4}
    101c:	0b3b0b3a 	bleq	ec3d0c <__Stack_Size+0xec390c>
    1020:	00001349 	andeq	r1, r0, r9, asr #6
    1024:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
    1028:	05000013 	streq	r0, [r0, #-19]
    102c:	13490026 	movtne	r0, #36902	; 0x9026
    1030:	04060000 	streq	r0, [r6]
    1034:	3a0b0b01 	bcc	2c3c40 <__Stack_Size+0x2c3840>
    1038:	010b3b0b 	tsteq	fp, fp, lsl #22
    103c:	07000013 	smladeq	r0, r3, r0, r0
    1040:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1044:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1048:	03002808 	movweq	r2, #2056	; 0x808
    104c:	000d1c08 	andeq	r1, sp, r8, lsl #24
    1050:	00160900 	andseq	r0, r6, r0, lsl #18
    1054:	0b3a0e03 	bleq	e84868 <__Stack_Size+0xe84468>
    1058:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    105c:	240a0000 	strcs	r0, [sl]
    1060:	3e0b0b00 	fmacdcc	d0, d11, d0
    1064:	0b00000b 	bleq	1098 <__Stack_Size+0xc98>
    1068:	0b0b0113 	bleq	2c14bc <__Stack_Size+0x2c10bc>
    106c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1070:	00001301 	andeq	r1, r0, r1, lsl #6
    1074:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1078:	3b0b3a0e 	blcc	2cf8b8 <__Stack_Size+0x2cf4b8>
    107c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1080:	0d00000a 	stceq	0, cr0, [r0, #-40]
    1084:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1088:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    108c:	0a381349 	beq	e05db8 <__Stack_Size+0xe059b8>
    1090:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    1094:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1098:	3b0b3a0e 	blcc	2cf8d8 <__Stack_Size+0x2cf4d8>
    109c:	110c270b 	tstne	ip, fp, lsl #14
    10a0:	40011201 	andmi	r1, r1, r1, lsl #4
    10a4:	0013010a 	andseq	r0, r3, sl, lsl #2
    10a8:	00050f00 	andeq	r0, r5, r0, lsl #30
    10ac:	0b3a0e03 	bleq	e848c0 <__Stack_Size+0xe844c0>
    10b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10b4:	00000a02 	andeq	r0, r0, r2, lsl #20
    10b8:	3f002e10 	svccc	0x00002e10
    10bc:	3a0e030c 	bcc	381cf4 <__Stack_Size+0x3818f4>
    10c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    10c4:	1113490c 	tstne	r3, ip, lsl #18
    10c8:	40011201 	andmi	r1, r1, r1, lsl #4
    10cc:	1100000a 	tstne	r0, sl
    10d0:	0c3f012e 	ldfeqs	f0, [pc], #-184
    10d4:	0b3a0e03 	bleq	e848e8 <__Stack_Size+0xe844e8>
    10d8:	0c270b3b 	stceq	11, cr0, [r7], #-236
    10dc:	01111349 	tsteq	r1, r9, asr #6
    10e0:	0a400112 	beq	1001530 <__Stack_Size+0x1001130>
    10e4:	05120000 	ldreq	r0, [r2]
    10e8:	3a0e0300 	bcc	381cf0 <__Stack_Size+0x3818f0>
    10ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10f0:	00060213 	andeq	r0, r6, r3, lsl r2
    10f4:	00341300 	eorseq	r1, r4, r0, lsl #6
    10f8:	0b3a0e03 	bleq	e8490c <__Stack_Size+0xe8450c>
    10fc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1100:	00000602 	andeq	r0, r0, r2, lsl #12
    1104:	03003414 	movweq	r3, #1044	; 0x414
    1108:	3b0b3a08 	blcc	2cf930 <__Stack_Size+0x2cf530>
    110c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1110:	00341500 	eorseq	r1, r4, r0, lsl #10
    1114:	0b3a0e03 	bleq	e84928 <__Stack_Size+0xe84528>
    1118:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    111c:	01000000 	tsteq	r0, r0
    1120:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1124:	0e030b13 	vmoveq.32	d3[0], r0
    1128:	01110e1b 	tsteq	r1, fp, lsl lr
    112c:	06100112 	undefined
    1130:	24020000 	strcs	r0, [r2]
    1134:	3e0b0b00 	fmacdcc	d0, d11, d0
    1138:	000e030b 	andeq	r0, lr, fp, lsl #6
    113c:	00160300 	andseq	r0, r6, r0, lsl #6
    1140:	0b3a0803 	bleq	e83154 <__Stack_Size+0xe82d54>
    1144:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1148:	35040000 	strcc	r0, [r4]
    114c:	00134900 	andseq	r4, r3, r0, lsl #18
    1150:	01040500 	tsteq	r4, r0, lsl #10
    1154:	0b3a0b0b 	bleq	e83d88 <__Stack_Size+0xe83988>
    1158:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    115c:	28060000 	stmdacs	r6, {}
    1160:	1c0e0300 	stcne	3, cr0, [lr], {0}
    1164:	0700000d 	streq	r0, [r0, -sp]
    1168:	08030028 	stmdaeq	r3, {r3, r5}
    116c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1170:	03001608 	movweq	r1, #1544	; 0x608
    1174:	3b0b3a0e 	blcc	2cf9b4 <__Stack_Size+0x2cf5b4>
    1178:	0013490b 	andseq	r4, r3, fp, lsl #18
    117c:	00240900 	eoreq	r0, r4, r0, lsl #18
    1180:	0b3e0b0b 	bleq	f83db4 <__Stack_Size+0xf839b4>
    1184:	130a0000 	movwne	r0, #40960	; 0xa000
    1188:	3a0b0b01 	bcc	2c3d94 <__Stack_Size+0x2c3994>
    118c:	01053b0b 	tsteq	r5, fp, lsl #22
    1190:	0b000013 	bleq	11e4 <__Stack_Size+0xde4>
    1194:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1198:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    119c:	0a381349 	beq	e05ec8 <__Stack_Size+0xe05ac8>
    11a0:	0d0c0000 	stceq	0, cr0, [ip]
    11a4:	3a0e0300 	bcc	381dac <__Stack_Size+0x3819ac>
    11a8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    11ac:	000a3813 	andeq	r3, sl, r3, lsl r8
    11b0:	00160d00 	andseq	r0, r6, r0, lsl #26
    11b4:	0b3a0e03 	bleq	e849c8 <__Stack_Size+0xe845c8>
    11b8:	1349053b 	movtne	r0, #38203	; 0x953b
    11bc:	130e0000 	movwne	r0, #57344	; 0xe000
    11c0:	3a0b0b01 	bcc	2c3dcc <__Stack_Size+0x2c39cc>
    11c4:	010b3b0b 	tsteq	fp, fp, lsl #22
    11c8:	0f000013 	svceq	0x00000013
    11cc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    11d0:	0b3b0b3a 	bleq	ec3ec0 <__Stack_Size+0xec3ac0>
    11d4:	0a381349 	beq	e05f00 <__Stack_Size+0xe05b00>
    11d8:	2e100000 	wxorcs	wr0, wr0, wr0
    11dc:	030c3f01 	movweq	r3, #52993	; 0xcf01
    11e0:	3b0b3a0e 	blcc	2cfa20 <__Stack_Size+0x2cf620>
    11e4:	200c2705 	andcs	r2, ip, r5, lsl #14
    11e8:	0013010b 	andseq	r0, r3, fp, lsl #2
    11ec:	00051100 	andeq	r1, r5, r0, lsl #2
    11f0:	0b3a0e03 	bleq	e84a04 <__Stack_Size+0xe84604>
    11f4:	1349053b 	movtne	r0, #38203	; 0x953b
    11f8:	34120000 	ldrcc	r0, [r2]
    11fc:	3a0e0300 	bcc	381e04 <__Stack_Size+0x381a04>
    1200:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1204:	13000013 	movwne	r0, #19	; 0x13
    1208:	0b0b000f 	bleq	2c124c <__Stack_Size+0x2c0e4c>
    120c:	00001349 	andeq	r1, r0, r9, asr #6
    1210:	03012e14 	movweq	r2, #7700	; 0x1e14
    1214:	3b0b3a0e 	blcc	2cfa54 <__Stack_Size+0x2cf654>
    1218:	200c2705 	andcs	r2, ip, r5, lsl #14
    121c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1220:	00341500 	eorseq	r1, r4, r0, lsl #10
    1224:	0b3a0803 	bleq	e83238 <__Stack_Size+0xe82e38>
    1228:	1349053b 	movtne	r0, #38203	; 0x953b
    122c:	2e160000 	wxorcs	wr0, wr6, wr0
    1230:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1234:	3b0b3a0e 	blcc	2cfa74 <__Stack_Size+0x2cf674>
    1238:	110c270b 	tstne	ip, fp, lsl #14
    123c:	40011201 	andmi	r1, r1, r1, lsl #4
    1240:	00130106 	andseq	r0, r3, r6, lsl #2
    1244:	00051700 	andeq	r1, r5, r0, lsl #14
    1248:	0b3a0e03 	bleq	e84a5c <__Stack_Size+0xe8465c>
    124c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1250:	00000602 	andeq	r0, r0, r2, lsl #12
    1254:	03003418 	movweq	r3, #1048	; 0x418
    1258:	3b0b3a0e 	blcc	2cfa98 <__Stack_Size+0x2cf698>
    125c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1260:	19000006 	stmdbne	r0, {r1, r2}
    1264:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1268:	0b3a0e03 	bleq	e84a7c <__Stack_Size+0xe8467c>
    126c:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
    1270:	01120111 	tsteq	r2, r1, lsl r1
    1274:	13010640 	movwne	r0, #5696	; 0x1640
    1278:	051a0000 	ldreq	r0, [sl]
    127c:	3a0e0300 	bcc	381e84 <__Stack_Size+0x381a84>
    1280:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1284:	00060213 	andeq	r0, r6, r3, lsl r2
    1288:	00341b00 	eorseq	r1, r4, r0, lsl #22
    128c:	0b3a0e03 	bleq	e84aa0 <__Stack_Size+0xe846a0>
    1290:	1349053b 	movtne	r0, #38203	; 0x953b
    1294:	00000602 	andeq	r0, r0, r2, lsl #12
    1298:	31011d1c 	tstcc	r1, ip, lsl sp
    129c:	58065513 	stmdapl	r6, {r0, r1, r4, r8, sl, ip, lr}
    12a0:	0105590b 	tsteq	r5, fp, lsl #18
    12a4:	1d000013 	stcne	0, cr0, [r0, #-76]
    12a8:	13310005 	teqne	r1, #5	; 0x5
    12ac:	0b1e0000 	bleq	7812b4 <__Stack_Size+0x780eb4>
    12b0:	00065501 	andeq	r5, r6, r1, lsl #10
    12b4:	00341f00 	eorseq	r1, r4, r0, lsl #30
    12b8:	06021331 	undefined
    12bc:	1d200000 	stcne	0, cr0, [r0]
    12c0:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    12c4:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    12c8:	0105590b 	tsteq	r5, fp, lsl #18
    12cc:	21000013 	tstcs	r0, r3, lsl r0
    12d0:	13310034 	teqne	r1, #52	; 0x34
    12d4:	1d220000 	stcne	0, cr0, [r2]
    12d8:	11133101 	tstne	r3, r1, lsl #2
    12dc:	58011201 	stmdapl	r1, {r0, r9, ip}
    12e0:	0105590b 	tsteq	r5, fp, lsl #18
    12e4:	23000013 	movwcs	r0, #19	; 0x13
    12e8:	0111010b 	tsteq	r1, fp, lsl #2
    12ec:	00000112 	andeq	r0, r0, r2, lsl r1
    12f0:	31011d24 	tstcc	r1, r4, lsr #26
    12f4:	55015213 	strpl	r5, [r1, #-531]
    12f8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    12fc:	25000005 	strcs	r0, [r0, #-5]
    1300:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1304:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1308:	0a021349 	beq	86034 <__Stack_Size+0x85c34>
    130c:	34260000 	strtcc	r0, [r6]
    1310:	3a0e0300 	bcc	381f18 <__Stack_Size+0x381b18>
    1314:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1318:	000a0213 	andeq	r0, sl, r3, lsl r2
    131c:	00342700 	eorseq	r2, r4, r0, lsl #14
    1320:	0a021331 	beq	85fec <__Stack_Size+0x85bec>
    1324:	1d280000 	stcne	0, cr0, [r8]
    1328:	11133101 	tstne	r3, r1, lsl #2
    132c:	58011201 	stmdapl	r1, {r0, r9, ip}
    1330:	0005590b 	andeq	r5, r5, fp, lsl #18
    1334:	012e2900 	teqeq	lr, r0, lsl #18
    1338:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    133c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1340:	01110c27 	tsteq	r1, r7, lsr #24
    1344:	0a400112 	beq	1001794 <__Stack_Size+0x1001394>
    1348:	00001301 	andeq	r1, r0, r1, lsl #6
    134c:	31012e2a 	tstcc	r1, sl, lsr #28
    1350:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1354:	010a4001 	tsteq	sl, r1
    1358:	2b000013 	blcs	13ac <__Stack_Size+0xfac>
    135c:	13310005 	teqne	r1, #5	; 0x5
    1360:	00000a02 	andeq	r0, r0, r2, lsl #20
    1364:	3100052c 	tstcc	r0, ip, lsr #10
    1368:	00060213 	andeq	r0, r6, r3, lsl r2
    136c:	012e2d00 	teqeq	lr, r0, lsl #26
    1370:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1374:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1378:	13490c27 	movtne	r0, #39975	; 0x9c27
    137c:	01120111 	tsteq	r2, r1, lsl r1
    1380:	13010a40 	movwne	r0, #6720	; 0x1a40
    1384:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    1388:	030c3f01 	movweq	r3, #52993	; 0xcf01
    138c:	3b0b3a0e 	blcc	2cfbcc <__Stack_Size+0x2cf7cc>
    1390:	110c270b 	tstne	ip, fp, lsl #14
    1394:	40011201 	andmi	r1, r1, r1, lsl #4
    1398:	00000006 	andeq	r0, r0, r6
    139c:	25011101 	strcs	r1, [r1, #-257]
    13a0:	030b130e 	movweq	r1, #45838	; 0xb30e
    13a4:	110e1b0e 	tstne	lr, lr, lsl #22
    13a8:	10011201 	andne	r1, r1, r1, lsl #4
    13ac:	02000006 	andeq	r0, r0, #6	; 0x6
    13b0:	0b0b0024 	bleq	2c1448 <__Stack_Size+0x2c1048>
    13b4:	0e030b3e 	vmoveq.16	d3[0], r0
    13b8:	16030000 	strne	r0, [r3], -r0
    13bc:	3a080300 	bcc	201fc4 <__Stack_Size+0x201bc4>
    13c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13c4:	04000013 	streq	r0, [r0], #-19
    13c8:	13490035 	movtne	r0, #36917	; 0x9035
    13cc:	04050000 	streq	r0, [r5]
    13d0:	3a0b0b01 	bcc	2c3fdc <__Stack_Size+0x2c3bdc>
    13d4:	010b3b0b 	tsteq	fp, fp, lsl #22
    13d8:	06000013 	undefined
    13dc:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    13e0:	00000d1c 	andeq	r0, r0, ip, lsl sp
    13e4:	03002807 	movweq	r2, #2055	; 0x807
    13e8:	000d1c08 	andeq	r1, sp, r8, lsl #24
    13ec:	00160800 	andseq	r0, r6, r0, lsl #16
    13f0:	0b3a0e03 	bleq	e84c04 <__Stack_Size+0xe84804>
    13f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    13f8:	24090000 	strcs	r0, [r9]
    13fc:	3e0b0b00 	fmacdcc	d0, d11, d0
    1400:	0a00000b 	beq	1434 <__Stack_Size+0x1034>
    1404:	0b0b0113 	bleq	2c1858 <__Stack_Size+0x2c1458>
    1408:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    140c:	00001301 	andeq	r1, r0, r1, lsl #6
    1410:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1414:	3b0b3a08 	blcc	2cfc3c <__Stack_Size+0x2cf83c>
    1418:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    141c:	0c00000a 	stceq	0, cr0, [r0], {10}
    1420:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1424:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1428:	0a381349 	beq	e06154 <__Stack_Size+0xe05d54>
    142c:	160d0000 	strne	r0, [sp], -r0
    1430:	3a0e0300 	bcc	382038 <__Stack_Size+0x381c38>
    1434:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1438:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    143c:	0b0b0113 	bleq	2c1890 <__Stack_Size+0x2c1490>
    1440:	0b3b0b3a 	bleq	ec4130 <__Stack_Size+0xec3d30>
    1444:	00001301 	andeq	r1, r0, r1, lsl #6
    1448:	03000d0f 	movweq	r0, #3343	; 0xd0f
    144c:	3b0b3a0e 	blcc	2cfc8c <__Stack_Size+0x2cf88c>
    1450:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1454:	1000000a 	andne	r0, r0, sl
    1458:	0c3f012e 	ldfeqs	f0, [pc], #-184
    145c:	0b3a0e03 	bleq	e84c70 <__Stack_Size+0xe84870>
    1460:	0c270b3b 	stceq	11, cr0, [r7], #-236
    1464:	01120111 	tsteq	r2, r1, lsl r1
    1468:	13010a40 	movwne	r0, #6720	; 0x1a40
    146c:	05110000 	ldreq	r0, [r1]
    1470:	3a0e0300 	bcc	382078 <__Stack_Size+0x381c78>
    1474:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1478:	000a0213 	andeq	r0, sl, r3, lsl r2
    147c:	000f1200 	andeq	r1, pc, r0, lsl #4
    1480:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1484:	2e130000 	wxorcs	wr0, wr3, wr0
    1488:	030c3f01 	movweq	r3, #52993	; 0xcf01
    148c:	3b0b3a0e 	blcc	2cfccc <__Stack_Size+0x2cf8cc>
    1490:	110c2705 	tstne	ip, r5, lsl #14
    1494:	40011201 	andmi	r1, r1, r1, lsl #4
    1498:	0013010a 	andseq	r0, r3, sl, lsl #2
    149c:	00051400 	andeq	r1, r5, r0, lsl #8
    14a0:	0b3a0e03 	bleq	e84cb4 <__Stack_Size+0xe848b4>
    14a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    14a8:	00000602 	andeq	r0, r0, r2, lsl #12
    14ac:	03003415 	movweq	r3, #1045	; 0x415
    14b0:	3b0b3a0e 	blcc	2cfcf0 <__Stack_Size+0x2cf8f0>
    14b4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    14b8:	1600000a 	strne	r0, [r0], -sl
    14bc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    14c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    14c4:	0a021349 	beq	861f0 <__Stack_Size+0x85df0>
    14c8:	2e170000 	wxorcs	wr0, wr7, wr0
    14cc:	030c3f01 	movweq	r3, #52993	; 0xcf01
    14d0:	3b0b3a0e 	blcc	2cfd10 <__Stack_Size+0x2cf910>
    14d4:	110c2705 	tstne	ip, r5, lsl #14
    14d8:	40011201 	andmi	r1, r1, r1, lsl #4
    14dc:	00130106 	andseq	r0, r3, r6, lsl #2
    14e0:	00051800 	andeq	r1, r5, r0, lsl #16
    14e4:	0b3a0e03 	bleq	e84cf8 <__Stack_Size+0xe848f8>
    14e8:	1349053b 	movtne	r0, #38203	; 0x953b
    14ec:	00000602 	andeq	r0, r0, r2, lsl #12
    14f0:	03003419 	movweq	r3, #1049	; 0x419
    14f4:	3b0b3a0e 	blcc	2cfd34 <__Stack_Size+0x2cf934>
    14f8:	00134905 	andseq	r4, r3, r5, lsl #18
    14fc:	00341a00 	eorseq	r1, r4, r0, lsl #20
    1500:	0b3a0e03 	bleq	e84d14 <__Stack_Size+0xe84914>
    1504:	1349053b 	movtne	r0, #38203	; 0x953b
    1508:	00000602 	andeq	r0, r0, r2, lsl #12
    150c:	3f012e1b 	svccc	0x00012e1b
    1510:	3a0e030c 	bcc	382148 <__Stack_Size+0x381d48>
    1514:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1518:	1113490c 	tstne	r3, ip, lsl #18
    151c:	40011201 	andmi	r1, r1, r1, lsl #4
    1520:	0013010a 	andseq	r0, r3, sl, lsl #2
    1524:	012e1c00 	teqeq	lr, r0, lsl #24
    1528:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    152c:	0b3b0b3a 	bleq	ec421c <__Stack_Size+0xec3e1c>
    1530:	01110c27 	tsteq	r1, r7, lsr #24
    1534:	06400112 	undefined
    1538:	00001301 	andeq	r1, r0, r1, lsl #6
    153c:	0300341d 	movweq	r3, #1053	; 0x41d
    1540:	3b0b3a0e 	blcc	2cfd80 <__Stack_Size+0x2cf980>
    1544:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1548:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    154c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1550:	0b3b0b3a 	bleq	ec4240 <__Stack_Size+0xec3e40>
    1554:	0a021349 	beq	86280 <__Stack_Size+0x85e80>
    1558:	341f0000 	ldrcc	r0, [pc], #0	; 1560 <__Stack_Size+0x1160>
    155c:	3a0e0300 	bcc	382164 <__Stack_Size+0x381d64>
    1560:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1564:	20000013 	andcs	r0, r0, r3, lsl r0
    1568:	0c3f012e 	ldfeqs	f0, [pc], #-184
    156c:	0b3a0e03 	bleq	e84d80 <__Stack_Size+0xe84980>
    1570:	0c270b3b 	stceq	11, cr0, [r7], #-236
    1574:	01120111 	tsteq	r2, r1, lsl r1
    1578:	00000640 	andeq	r0, r0, r0, asr #12
    157c:	00110100 	andseq	r0, r1, r0, lsl #2
    1580:	01110610 	tsteq	r1, r0, lsl r6
    1584:	08030112 	stmdaeq	r3, {r1, r4, r8}
    1588:	0825081b 	stmdaeq	r5!, {r0, r1, r3, r4, fp}
    158c:	00000513 	andeq	r0, r0, r3, lsl r5
    1590:	01110100 	tsteq	r1, r0, lsl #2
    1594:	0b130e25 	bleq	4c4e30 <__Stack_Size+0x4c4a30>
    1598:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    159c:	01120111 	tsteq	r2, r1, lsl r1
    15a0:	00000610 	andeq	r0, r0, r0, lsl r6
    15a4:	0b002402 	bleq	a5b4 <__Stack_Size+0xa1b4>
    15a8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    15ac:	0300000e 	movweq	r0, #14	; 0xe
    15b0:	0b0b0024 	bleq	2c1648 <__Stack_Size+0x2c1248>
    15b4:	00000b3e 	andeq	r0, r0, lr, lsr fp
    15b8:	3f012e04 	svccc	0x00012e04
    15bc:	3a0e030c 	bcc	3821f4 <__Stack_Size+0x381df4>
    15c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    15c4:	1201110c 	andne	r1, r1, #3	; 0x3
    15c8:	01064001 	tsteq	r6, r1
    15cc:	05000013 	streq	r0, [r0, #-19]
    15d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    15d4:	0b3b0b3a 	bleq	ec42c4 <__Stack_Size+0xec3ec4>
    15d8:	00001349 	andeq	r1, r0, r9, asr #6
    15dc:	03003406 	movweq	r3, #1030	; 0x406
    15e0:	3b0b3a0e 	blcc	2cfe20 <__Stack_Size+0x2cfa20>
    15e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    15e8:	07000006 	streq	r0, [r0, -r6]
    15ec:	0b0b000f 	bleq	2c1630 <__Stack_Size+0x2c1230>
    15f0:	00001349 	andeq	r1, r0, r9, asr #6
    15f4:	03003408 	movweq	r3, #1032	; 0x408
    15f8:	3b0b3a0e 	blcc	2cfe38 <__Stack_Size+0x2cfa38>
    15fc:	3f13490b 	svccc	0x0013490b
    1600:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1604:	00340900 	eorseq	r0, r4, r0, lsl #18
    1608:	0b3a0e03 	bleq	e84e1c <__Stack_Size+0xe84a1c>
    160c:	0c3f0b3b 	ldceq	11, cr0, [pc], #-236
    1610:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1614:	4901010a 	stmdbmi	r1, {r1, r3, r8}
    1618:	00130113 	andseq	r0, r3, r3, lsl r1
    161c:	00210b00 	eoreq	r0, r1, r0, lsl #22
    1620:	0b2f1349 	bleq	bc634c <__Stack_Size+0xbc5f4c>
    1624:	150c0000 	strne	r0, [ip]
    1628:	000c2700 	andeq	r2, ip, r0, lsl #14
    162c:	00340d00 	eorseq	r0, r4, r0, lsl #26
    1630:	0b3a0e03 	bleq	e84e44 <__Stack_Size+0xe84a44>
    1634:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1638:	0a020c3f 	beq	8473c <__Stack_Size+0x8433c>
    163c:	260e0000 	strcs	r0, [lr], -r0
    1640:	00134900 	andseq	r4, r3, r0, lsl #18
    1644:	11010000 	tstne	r1, r0
    1648:	130e2501 	movwne	r2, #58625	; 0xe501
    164c:	1b0e030b 	blne	382280 <__Stack_Size+0x381e80>
    1650:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1654:	00061001 	andeq	r1, r6, r1
    1658:	00240200 	eoreq	r0, r4, r0, lsl #4
    165c:	0b3e0b0b 	bleq	f84290 <__Stack_Size+0xf83e90>
    1660:	00000e03 	andeq	r0, r0, r3, lsl #28
    1664:	0b002403 	bleq	a678 <__Stack_Size+0xa278>
    1668:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    166c:	04000008 	streq	r0, [r0], #-8
    1670:	0b0b0024 	bleq	2c1708 <__Stack_Size+0x2c1308>
    1674:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1678:	27001505 	strcs	r1, [r0, -r5, lsl #10]
    167c:	0600000c 	streq	r0, [r0], -ip
    1680:	0b0b000f 	bleq	2c16c4 <__Stack_Size+0x2c12c4>
    1684:	00001349 	andeq	r1, r0, r9, asr #6
    1688:	03010407 	movweq	r0, #5127	; 0x1407
    168c:	3a0b0b0e 	bcc	2c42cc <__Stack_Size+0x2c3ecc>
    1690:	010b3b0b 	tsteq	fp, fp, lsl #22
    1694:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1698:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    169c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    16a0:	3f012e09 	svccc	0x00012e09
    16a4:	3a0e030c 	bcc	3822dc <__Stack_Size+0x381edc>
    16a8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    16ac:	1113490c 	tstne	r3, ip, lsl #18
    16b0:	40011201 	andmi	r1, r1, r1, lsl #4
    16b4:	0a000006 	beq	16d4 <__Stack_Size+0x12d4>
    16b8:	08030005 	stmdaeq	r3, {r0, r2}
    16bc:	0b3b0b3a 	bleq	ec43ac <__Stack_Size+0xec3fac>
    16c0:	06021349 	streq	r1, [r2], -r9, asr #6
    16c4:	01000000 	tsteq	r0, r0
    16c8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    16cc:	0e030b13 	vmoveq.32	d3[0], r0
    16d0:	01110e1b 	tsteq	r1, fp, lsl lr
    16d4:	06100112 	undefined
    16d8:	24020000 	strcs	r0, [r2]
    16dc:	3e0b0b00 	fmacdcc	d0, d11, d0
    16e0:	000e030b 	andeq	r0, lr, fp, lsl #6
    16e4:	00240300 	eoreq	r0, r4, r0, lsl #6
    16e8:	0b3e0b0b 	bleq	f8431c <__Stack_Size+0xf83f1c>
    16ec:	00000803 	andeq	r0, r0, r3, lsl #16
    16f0:	03001604 	movweq	r1, #1540	; 0x604
    16f4:	3b0b3a0e 	blcc	2cff34 <__Stack_Size+0x2cfb34>
    16f8:	0013490b 	andseq	r4, r3, fp, lsl #18
    16fc:	00160500 	andseq	r0, r6, r0, lsl #10
    1700:	0b3a0e03 	bleq	e84f14 <__Stack_Size+0xe84b14>
    1704:	1349053b 	movtne	r0, #38203	; 0x953b
    1708:	17060000 	strne	r0, [r6, -r0]
    170c:	3a0b0b01 	bcc	2c4318 <__Stack_Size+0x2c3f18>
    1710:	010b3b0b 	tsteq	fp, fp, lsl #22
    1714:	07000013 	smladeq	r0, r3, r0, r0
    1718:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    171c:	0b3b0b3a 	bleq	ec440c <__Stack_Size+0xec400c>
    1720:	00001349 	andeq	r1, r0, r9, asr #6
    1724:	49010108 	stmdbmi	r1, {r3, r8}
    1728:	00130113 	andseq	r0, r3, r3, lsl r1
    172c:	00210900 	eoreq	r0, r1, r0, lsl #18
    1730:	0b2f1349 	bleq	bc645c <__Stack_Size+0xbc605c>
    1734:	240a0000 	strcs	r0, [sl]
    1738:	3e0b0b00 	fmacdcc	d0, d11, d0
    173c:	0b00000b 	bleq	1770 <__Stack_Size+0x1370>
    1740:	0b0b0113 	bleq	2c1b94 <__Stack_Size+0x2c1794>
    1744:	0b3b0b3a 	bleq	ec4434 <__Stack_Size+0xec4034>
    1748:	00001301 	andeq	r1, r0, r1, lsl #6
    174c:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1750:	3b0b3a0e 	blcc	2cff90 <__Stack_Size+0x2cfb90>
    1754:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1758:	0d00000a 	stceq	0, cr0, [r0, #-40]
    175c:	0b0b000f 	bleq	2c17a0 <__Stack_Size+0x2c13a0>
    1760:	130e0000 	movwne	r0, #57344	; 0xe000
    1764:	0b0e0301 	bleq	382370 <__Stack_Size+0x381f70>
    1768:	3b0b3a0b 	blcc	2cff9c <__Stack_Size+0x2cfb9c>
    176c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1770:	000d0f00 	andeq	r0, sp, r0, lsl #30
    1774:	0b3a0803 	bleq	e83788 <__Stack_Size+0xe83388>
    1778:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    177c:	00000a38 	andeq	r0, r0, r8, lsr sl
    1780:	0b000f10 	bleq	53c8 <__Stack_Size+0x4fc8>
    1784:	0013490b 	andseq	r4, r3, fp, lsl #18
    1788:	01131100 	tsteq	r3, r0, lsl #2
    178c:	050b0e03 	streq	r0, [fp, #-3587]
    1790:	0b3b0b3a 	bleq	ec4480 <__Stack_Size+0xec4080>
    1794:	00001301 	andeq	r1, r0, r1, lsl #6
    1798:	27001512 	smladcs	r0, r2, r5, r1
    179c:	1300000c 	movwne	r0, #12	; 0xc
    17a0:	0c270115 	stfeqs	f0, [r7], #-84
    17a4:	13011349 	movwne	r1, #4937	; 0x1349
    17a8:	05140000 	ldreq	r0, [r4]
    17ac:	00134900 	andseq	r4, r3, r0, lsl #18
    17b0:	000d1500 	andeq	r1, sp, r0, lsl #10
    17b4:	0b3a0e03 	bleq	e84fc8 <__Stack_Size+0xe84bc8>
    17b8:	1349053b 	movtne	r0, #38203	; 0x953b
    17bc:	00000a38 	andeq	r0, r0, r8, lsr sl
    17c0:	49002616 	stmdbmi	r0, {r1, r2, r4, r9, sl, sp}
    17c4:	17000013 	smladne	r0, r3, r0, r0
    17c8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    17cc:	0b3a0b0b 	bleq	e84400 <__Stack_Size+0xe84000>
    17d0:	1301053b 	movwne	r0, #5435	; 0x153b
    17d4:	13180000 	tstne	r8, #0	; 0x0
    17d8:	3a0b0b01 	bcc	2c43e4 <__Stack_Size+0x2c3fe4>
    17dc:	01053b0b 	tsteq	r5, fp, lsl #22
    17e0:	19000013 	stmdbne	r0, {r0, r1, r4}
    17e4:	0b0b0117 	bleq	2c1c48 <__Stack_Size+0x2c1848>
    17e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    17ec:	00001301 	andeq	r1, r0, r1, lsl #6
    17f0:	03000d1a 	movweq	r0, #3354	; 0xd1a
    17f4:	3b0b3a0e 	blcc	2d0034 <__Stack_Size+0x2cfc34>
    17f8:	00134905 	andseq	r4, r3, r5, lsl #18
    17fc:	01151b00 	tsteq	r5, r0, lsl #22
    1800:	13010c27 	movwne	r0, #7207	; 0x1c27
    1804:	2e1c0000 	wxorcs	wr0, wr12, wr0
    1808:	030c3f01 	movweq	r3, #52993	; 0xcf01
    180c:	3b0b3a0e 	blcc	2d004c <__Stack_Size+0x2cfc4c>
    1810:	110c270b 	tstne	ip, fp, lsl #14
    1814:	40011201 	andmi	r1, r1, r1, lsl #4
    1818:	0013010a 	andseq	r0, r3, sl, lsl #2
    181c:	00051d00 	andeq	r1, r5, r0, lsl #26
    1820:	0b3a0e03 	bleq	e85034 <__Stack_Size+0xe84c34>
    1824:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1828:	00000602 	andeq	r0, r0, r2, lsl #12
    182c:	0300341e 	movweq	r3, #1054	; 0x41e
    1830:	3b0b3a0e 	blcc	2d0070 <__Stack_Size+0x2cfc70>
    1834:	3f134905 	svccc	0x00134905
    1838:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    183c:	11010000 	tstne	r1, r0
    1840:	130e2501 	movwne	r2, #58625	; 0xe501
    1844:	1b0e030b 	blne	382478 <__Stack_Size+0x382078>
    1848:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    184c:	00061001 	andeq	r1, r6, r1
    1850:	00240200 	eoreq	r0, r4, r0, lsl #4
    1854:	0b3e0b0b 	bleq	f84488 <__Stack_Size+0xf84088>
    1858:	00000e03 	andeq	r0, r0, r3, lsl #28
    185c:	0b002403 	bleq	a870 <__Stack_Size+0xa470>
    1860:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1864:	04000008 	streq	r0, [r0], #-8
    1868:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    186c:	0b3b0b3a 	bleq	ec455c <__Stack_Size+0xec415c>
    1870:	00001349 	andeq	r1, r0, r9, asr #6
    1874:	03001605 	movweq	r1, #1541	; 0x605
    1878:	3b0b3a0e 	blcc	2d00b8 <__Stack_Size+0x2cfcb8>
    187c:	00134905 	andseq	r4, r3, r5, lsl #18
    1880:	01170600 	tsteq	r7, r0, lsl #12
    1884:	0b3a0b0b 	bleq	e844b8 <__Stack_Size+0xe840b8>
    1888:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    188c:	0d070000 	stceq	0, cr0, [r7]
    1890:	3a0e0300 	bcc	382498 <__Stack_Size+0x382098>
    1894:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1898:	08000013 	stmdaeq	r0, {r0, r1, r4}
    189c:	13490101 	movtne	r0, #37121	; 0x9101
    18a0:	00001301 	andeq	r1, r0, r1, lsl #6
    18a4:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    18a8:	000b2f13 	andeq	r2, fp, r3, lsl pc
    18ac:	00240a00 	eoreq	r0, r4, r0, lsl #20
    18b0:	0b3e0b0b 	bleq	f844e4 <__Stack_Size+0xf840e4>
    18b4:	130b0000 	movwne	r0, #45056	; 0xb000
    18b8:	3a0b0b01 	bcc	2c44c4 <__Stack_Size+0x2c40c4>
    18bc:	010b3b0b 	tsteq	fp, fp, lsl #22
    18c0:	0c000013 	stceq	0, cr0, [r0], {19}
    18c4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    18c8:	0b3b0b3a 	bleq	ec45b8 <__Stack_Size+0xec41b8>
    18cc:	0a381349 	beq	e065f8 <__Stack_Size+0xe061f8>
    18d0:	0f0d0000 	svceq	0x000d0000
    18d4:	000b0b00 	andeq	r0, fp, r0, lsl #22
    18d8:	01130e00 	tsteq	r3, r0, lsl #28
    18dc:	0b0b0e03 	bleq	2c50f0 <__Stack_Size+0x2c4cf0>
    18e0:	0b3b0b3a 	bleq	ec45d0 <__Stack_Size+0xec41d0>
    18e4:	00001301 	andeq	r1, r0, r1, lsl #6
    18e8:	03000d0f 	movweq	r0, #3343	; 0xd0f
    18ec:	3b0b3a08 	blcc	2d0114 <__Stack_Size+0x2cfd14>
    18f0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    18f4:	1000000a 	andne	r0, r0, sl
    18f8:	0b0b000f 	bleq	2c193c <__Stack_Size+0x2c153c>
    18fc:	00001349 	andeq	r1, r0, r9, asr #6
    1900:	03011311 	movweq	r1, #4881	; 0x1311
    1904:	3a050b0e 	bcc	144544 <__Stack_Size+0x144144>
    1908:	010b3b0b 	tsteq	fp, fp, lsl #22
    190c:	12000013 	andne	r0, r0, #19	; 0x13
    1910:	0c270015 	stceq	0, cr0, [r7], #-84
    1914:	15130000 	ldrne	r0, [r3]
    1918:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
    191c:	00130113 	andseq	r0, r3, r3, lsl r1
    1920:	00051400 	andeq	r1, r5, r0, lsl #8
    1924:	00001349 	andeq	r1, r0, r9, asr #6
    1928:	03000d15 	movweq	r0, #3349	; 0xd15
    192c:	3b0b3a0e 	blcc	2d016c <__Stack_Size+0x2cfd6c>
    1930:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1934:	1600000a 	strne	r0, [r0], -sl
    1938:	13490026 	movtne	r0, #36902	; 0x9026
    193c:	13170000 	tstne	r7, #0	; 0x0
    1940:	0b0e0301 	bleq	38254c <__Stack_Size+0x38214c>
    1944:	3b0b3a0b 	blcc	2d0178 <__Stack_Size+0x2cfd78>
    1948:	00130105 	andseq	r0, r3, r5, lsl #2
    194c:	01131800 	tsteq	r3, r0, lsl #16
    1950:	0b3a0b0b 	bleq	e84584 <__Stack_Size+0xe84184>
    1954:	1301053b 	movwne	r0, #5435	; 0x153b
    1958:	17190000 	ldrne	r0, [r9, -r0]
    195c:	3a0b0b01 	bcc	2c4568 <__Stack_Size+0x2c4168>
    1960:	01053b0b 	tsteq	r5, fp, lsl #22
    1964:	1a000013 	bne	19b8 <__Stack_Size+0x15b8>
    1968:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    196c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1970:	00001349 	andeq	r1, r0, r9, asr #6
    1974:	2701151b 	smladcs	r1, fp, r5, r1
    1978:	0013010c 	andseq	r0, r3, ip, lsl #2
    197c:	00341c00 	eorseq	r1, r4, r0, lsl #24
    1980:	0b3a0e03 	bleq	e85194 <__Stack_Size+0xe84d94>
    1984:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1988:	00000a02 	andeq	r0, r0, r2, lsl #20
    198c:	0300341d 	movweq	r3, #1053	; 0x41d
    1990:	3b0b3a0e 	blcc	2d01d0 <__Stack_Size+0x2cfdd0>
    1994:	3f13490b 	svccc	0x0013490b
    1998:	000a020c 	andeq	r0, sl, ip, lsl #4
    199c:	11010000 	tstne	r1, r0
    19a0:	130e2501 	movwne	r2, #58625	; 0xe501
    19a4:	1b0e030b 	blne	3825d8 <__Stack_Size+0x3821d8>
    19a8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    19ac:	00061001 	andeq	r1, r6, r1
    19b0:	00240200 	eoreq	r0, r4, r0, lsl #4
    19b4:	0b3e0b0b 	bleq	f845e8 <__Stack_Size+0xf841e8>
    19b8:	00000e03 	andeq	r0, r0, r3, lsl #28
    19bc:	0b002403 	bleq	a9d0 <__Stack_Size+0xa5d0>
    19c0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    19c4:	04000008 	streq	r0, [r0], #-8
    19c8:	0b0b0024 	bleq	2c1a60 <__Stack_Size+0x2c1660>
    19cc:	00000b3e 	andeq	r0, r0, lr, lsr fp
    19d0:	03001605 	movweq	r1, #1541	; 0x605
    19d4:	3b0b3a0e 	blcc	2d0214 <__Stack_Size+0x2cfe14>
    19d8:	0013490b 	andseq	r4, r3, fp, lsl #18
    19dc:	012e0600 	teqeq	lr, r0, lsl #12
    19e0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    19e4:	0b3b0b3a 	bleq	ec46d4 <__Stack_Size+0xec42d4>
    19e8:	01110c27 	tsteq	r1, r7, lsr #24
    19ec:	06400112 	undefined
    19f0:	00001301 	andeq	r1, r0, r1, lsl #6
    19f4:	03003407 	movweq	r3, #1031	; 0x407
    19f8:	3b0b3a0e 	blcc	2d0238 <__Stack_Size+0x2cfe38>
    19fc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1a00:	0800000a 	stmdaeq	r0, {r1, r3}
    1a04:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1a08:	0b3b0b3a 	bleq	ec46f8 <__Stack_Size+0xec42f8>
    1a0c:	0a021349 	beq	86738 <__Stack_Size+0x86338>
    1a10:	01090000 	tsteq	r9, r0
    1a14:	01134901 	tsteq	r3, r1, lsl #18
    1a18:	0a000013 	beq	1a6c <__Stack_Size+0x166c>
    1a1c:	00000021 	andeq	r0, r0, r1, lsr #32
    1a20:	2700150b 	strcs	r1, [r0, -fp, lsl #10]
    1a24:	0c00000c 	stceq	0, cr0, [r0], {12}
    1a28:	0b0b000f 	bleq	2c1a6c <__Stack_Size+0x2c166c>
    1a2c:	00001349 	andeq	r1, r0, r9, asr #6
    1a30:	0300340d 	movweq	r3, #1037	; 0x40d
    1a34:	3b0b3a0e 	blcc	2d0274 <__Stack_Size+0x2cfe74>
    1a38:	3f13490b 	svccc	0x0013490b
    1a3c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1a40:	11010000 	tstne	r1, r0
    1a44:	130e2501 	movwne	r2, #58625	; 0xe501
    1a48:	1b0e030b 	blne	38267c <__Stack_Size+0x38227c>
    1a4c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1a50:	00061001 	andeq	r1, r6, r1
    1a54:	00240200 	eoreq	r0, r4, r0, lsl #4
    1a58:	0b3e0b0b 	bleq	f8468c <__Stack_Size+0xf8428c>
    1a5c:	00000e03 	andeq	r0, r0, r3, lsl #28
    1a60:	0b002403 	bleq	aa74 <__Stack_Size+0xa674>
    1a64:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1a68:	04000008 	streq	r0, [r0], #-8
    1a6c:	0b0b0024 	bleq	2c1b04 <__Stack_Size+0x2c1704>
    1a70:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1a74:	0b000f05 	bleq	5690 <__Stack_Size+0x5290>
    1a78:	0600000b 	streq	r0, [r0], -fp
    1a7c:	0b0b000f 	bleq	2c1ac0 <__Stack_Size+0x2c16c0>
    1a80:	00001349 	andeq	r1, r0, r9, asr #6
    1a84:	03001607 	movweq	r1, #1543	; 0x607
    1a88:	3b0b3a0e 	blcc	2d02c8 <__Stack_Size+0x2cfec8>
    1a8c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1a90:	012e0800 	teqeq	lr, r0, lsl #16
    1a94:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1a98:	0b3b0b3a 	bleq	ec4788 <__Stack_Size+0xec4388>
    1a9c:	13490c27 	movtne	r0, #39975	; 0x9c27
    1aa0:	01120111 	tsteq	r2, r1, lsl r1
    1aa4:	13010640 	movwne	r0, #5696	; 0x1640
    1aa8:	05090000 	streq	r0, [r9]
    1aac:	3a080300 	bcc	2026b4 <__Stack_Size+0x2022b4>
    1ab0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ab4:	00060213 	andeq	r0, r6, r3, lsl r2
    1ab8:	00340a00 	eorseq	r0, r4, r0, lsl #20
    1abc:	0b3a0803 	bleq	e83ad0 <__Stack_Size+0xe836d0>
    1ac0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1ac4:	00000602 	andeq	r0, r0, r2, lsl #12
    1ac8:	0300340b 	movweq	r3, #1035	; 0x40b
    1acc:	3b0b3a08 	blcc	2d02f4 <__Stack_Size+0x2cfef4>
    1ad0:	0013490b 	andseq	r4, r3, fp, lsl #18
    1ad4:	00340c00 	eorseq	r0, r4, r0, lsl #24
    1ad8:	0b3a0e03 	bleq	e852ec <__Stack_Size+0xe84eec>
    1adc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1ae0:	00000602 	andeq	r0, r0, r2, lsl #12
    1ae4:	0300340d 	movweq	r3, #1037	; 0x40d
    1ae8:	3b0b3a08 	blcc	2d0310 <__Stack_Size+0x2cff10>
    1aec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1af0:	0000000a 	andeq	r0, r0, sl
    1af4:	25011101 	strcs	r1, [r1, #-257]
    1af8:	030b130e 	movweq	r1, #45838	; 0xb30e
    1afc:	110e1b0e 	tstne	lr, lr, lsl #22
    1b00:	10011201 	andne	r1, r1, r1, lsl #4
    1b04:	02000006 	andeq	r0, r0, #6	; 0x6
    1b08:	0b0b0024 	bleq	2c1ba0 <__Stack_Size+0x2c17a0>
    1b0c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1b10:	24030000 	strcs	r0, [r3]
    1b14:	3e0b0b00 	fmacdcc	d0, d11, d0
    1b18:	000e030b 	andeq	r0, lr, fp, lsl #6
    1b1c:	00160400 	andseq	r0, r6, r0, lsl #8
    1b20:	0b3a0e03 	bleq	e85334 <__Stack_Size+0xe84f34>
    1b24:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1b28:	16050000 	strne	r0, [r5], -r0
    1b2c:	3a0e0300 	bcc	382734 <__Stack_Size+0x382334>
    1b30:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b34:	06000013 	undefined
    1b38:	0b0b0117 	bleq	2c1f9c <__Stack_Size+0x2c1b9c>
    1b3c:	0b3b0b3a 	bleq	ec482c <__Stack_Size+0xec442c>
    1b40:	00001301 	andeq	r1, r0, r1, lsl #6
    1b44:	03000d07 	movweq	r0, #3335	; 0xd07
    1b48:	3b0b3a0e 	blcc	2d0388 <__Stack_Size+0x2cff88>
    1b4c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1b50:	01010800 	tsteq	r1, r0, lsl #16
    1b54:	13011349 	movwne	r1, #4937	; 0x1349
    1b58:	21090000 	tstcs	r9, r0
    1b5c:	2f134900 	svccs	0x00134900
    1b60:	0a00000b 	beq	1b94 <__Stack_Size+0x1794>
    1b64:	0b0b0024 	bleq	2c1bfc <__Stack_Size+0x2c17fc>
    1b68:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1b6c:	0b01130b 	bleq	467a0 <__Stack_Size+0x463a0>
    1b70:	3b0b3a0b 	blcc	2d03a4 <__Stack_Size+0x2cffa4>
    1b74:	0013010b 	andseq	r0, r3, fp, lsl #2
    1b78:	000d0c00 	andeq	r0, sp, r0, lsl #24
    1b7c:	0b3a0e03 	bleq	e85390 <__Stack_Size+0xe84f90>
    1b80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1b84:	00000a38 	andeq	r0, r0, r8, lsr sl
    1b88:	0b000f0d 	bleq	57c4 <__Stack_Size+0x53c4>
    1b8c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    1b90:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1b94:	0b3a0b0b 	bleq	e847c8 <__Stack_Size+0xe843c8>
    1b98:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1b9c:	0d0f0000 	stceq	0, cr0, [pc]
    1ba0:	3a080300 	bcc	2027a8 <__Stack_Size+0x2023a8>
    1ba4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ba8:	000a3813 	andeq	r3, sl, r3, lsl r8
    1bac:	000f1000 	andeq	r1, pc, r0
    1bb0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1bb4:	13110000 	tstne	r1, #0	; 0x0
    1bb8:	0b0e0301 	bleq	3827c4 <__Stack_Size+0x3823c4>
    1bbc:	3b0b3a05 	blcc	2d03d8 <__Stack_Size+0x2cffd8>
    1bc0:	0013010b 	andseq	r0, r3, fp, lsl #2
    1bc4:	00151200 	andseq	r1, r5, r0, lsl #4
    1bc8:	00000c27 	andeq	r0, r0, r7, lsr #24
    1bcc:	27011513 	smladcs	r1, r3, r5, r1
    1bd0:	0113490c 	tsteq	r3, ip, lsl #18
    1bd4:	14000013 	strne	r0, [r0], #-19
    1bd8:	13490005 	movtne	r0, #36869	; 0x9005
    1bdc:	0d150000 	ldceq	0, cr0, [r5]
    1be0:	3a0e0300 	bcc	3827e8 <__Stack_Size+0x3823e8>
    1be4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1be8:	000a3813 	andeq	r3, sl, r3, lsl r8
    1bec:	00261600 	eoreq	r1, r6, r0, lsl #12
    1bf0:	00001349 	andeq	r1, r0, r9, asr #6
    1bf4:	03011317 	movweq	r1, #4887	; 0x1317
    1bf8:	3a0b0b0e 	bcc	2c4838 <__Stack_Size+0x2c4438>
    1bfc:	01053b0b 	tsteq	r5, fp, lsl #22
    1c00:	18000013 	stmdane	r0, {r0, r1, r4}
    1c04:	0b0b0113 	bleq	2c2058 <__Stack_Size+0x2c1c58>
    1c08:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1c0c:	00001301 	andeq	r1, r0, r1, lsl #6
    1c10:	0b011719 	bleq	4787c <__Stack_Size+0x4747c>
    1c14:	3b0b3a0b 	blcc	2d0448 <__Stack_Size+0x2d0048>
    1c18:	00130105 	andseq	r0, r3, r5, lsl #2
    1c1c:	000d1a00 	andeq	r1, sp, r0, lsl #20
    1c20:	0b3a0e03 	bleq	e85434 <__Stack_Size+0xe85034>
    1c24:	1349053b 	movtne	r0, #38203	; 0x953b
    1c28:	151b0000 	ldrne	r0, [fp]
    1c2c:	010c2701 	tsteq	ip, r1, lsl #14
    1c30:	1c000013 	stcne	0, cr0, [r0], {19}
    1c34:	0e030104 	adfeqs	f0, f3, f4
    1c38:	0b3a0b0b 	bleq	e8486c <__Stack_Size+0xe8446c>
    1c3c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1c40:	281d0000 	ldmdacs	sp, {}
    1c44:	1c0e0300 	stcne	3, cr0, [lr], {0}
    1c48:	1e00000d 	cdpne	0, 0, cr0, cr0, cr13, {0}
    1c4c:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1c50:	0b3a0e03 	bleq	e85464 <__Stack_Size+0xe85064>
    1c54:	0c270b3b 	stceq	11, cr0, [r7], #-236
    1c58:	01111349 	tsteq	r1, r9, asr #6
    1c5c:	06400112 	undefined
    1c60:	00001301 	andeq	r1, r0, r1, lsl #6
    1c64:	0300051f 	movweq	r0, #1311	; 0x51f
    1c68:	3b0b3a0e 	blcc	2d04a8 <__Stack_Size+0x2d00a8>
    1c6c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1c70:	20000006 	andcs	r0, r0, r6
    1c74:	08030005 	stmdaeq	r3, {r0, r2}
    1c78:	0b3b0b3a 	bleq	ec4968 <__Stack_Size+0xec4568>
    1c7c:	06021349 	streq	r1, [r2], -r9, asr #6
    1c80:	34210000 	strtcc	r0, [r1]
    1c84:	3a0e0300 	bcc	38288c <__Stack_Size+0x38248c>
    1c88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c8c:	22000013 	andcs	r0, r0, #19	; 0x13
    1c90:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1c94:	0b3b0b3a 	bleq	ec4984 <__Stack_Size+0xec4584>
    1c98:	0a021349 	beq	869c4 <__Stack_Size+0x865c4>
    1c9c:	34230000 	strtcc	r0, [r3]
    1ca0:	3a0e0300 	bcc	3828a8 <__Stack_Size+0x3824a8>
    1ca4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ca8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1cac:	0000000c 	andeq	r0, r0, ip
    1cb0:	25011101 	strcs	r1, [r1, #-257]
    1cb4:	030b130e 	movweq	r1, #45838	; 0xb30e
    1cb8:	110e1b0e 	tstne	lr, lr, lsl #22
    1cbc:	10011201 	andne	r1, r1, r1, lsl #4
    1cc0:	02000006 	andeq	r0, r0, #6	; 0x6
    1cc4:	0b0b0024 	bleq	2c1d5c <__Stack_Size+0x2c195c>
    1cc8:	0e030b3e 	vmoveq.16	d3[0], r0
    1ccc:	24030000 	strcs	r0, [r3]
    1cd0:	3e0b0b00 	fmacdcc	d0, d11, d0
    1cd4:	0008030b 	andeq	r0, r8, fp, lsl #6
    1cd8:	00160400 	andseq	r0, r6, r0, lsl #8
    1cdc:	0b3a0e03 	bleq	e854f0 <__Stack_Size+0xe850f0>
    1ce0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1ce4:	16050000 	strne	r0, [r5], -r0
    1ce8:	3a0e0300 	bcc	3828f0 <__Stack_Size+0x3824f0>
    1cec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1cf0:	06000013 	undefined
    1cf4:	0b0b0117 	bleq	2c2158 <__Stack_Size+0x2c1d58>
    1cf8:	0b3b0b3a 	bleq	ec49e8 <__Stack_Size+0xec45e8>
    1cfc:	00001301 	andeq	r1, r0, r1, lsl #6
    1d00:	03000d07 	movweq	r0, #3335	; 0xd07
    1d04:	3b0b3a0e 	blcc	2d0544 <__Stack_Size+0x2d0144>
    1d08:	0013490b 	andseq	r4, r3, fp, lsl #18
    1d0c:	01010800 	tsteq	r1, r0, lsl #16
    1d10:	13011349 	movwne	r1, #4937	; 0x1349
    1d14:	21090000 	tstcs	r9, r0
    1d18:	2f134900 	svccs	0x00134900
    1d1c:	0a00000b 	beq	1d50 <__Stack_Size+0x1950>
    1d20:	0b0b0024 	bleq	2c1db8 <__Stack_Size+0x2c19b8>
    1d24:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1d28:	0b01130b 	bleq	4695c <__Stack_Size+0x4655c>
    1d2c:	3b0b3a0b 	blcc	2d0560 <__Stack_Size+0x2d0160>
    1d30:	0013010b 	andseq	r0, r3, fp, lsl #2
    1d34:	000d0c00 	andeq	r0, sp, r0, lsl #24
    1d38:	0b3a0e03 	bleq	e8554c <__Stack_Size+0xe8514c>
    1d3c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1d40:	00000a38 	andeq	r0, r0, r8, lsr sl
    1d44:	0b000f0d 	bleq	5980 <__Stack_Size+0x5580>
    1d48:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    1d4c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1d50:	0b3a0b0b 	bleq	e84984 <__Stack_Size+0xe84584>
    1d54:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1d58:	0d0f0000 	stceq	0, cr0, [pc]
    1d5c:	3a080300 	bcc	202964 <__Stack_Size+0x202564>
    1d60:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d64:	000a3813 	andeq	r3, sl, r3, lsl r8
    1d68:	000f1000 	andeq	r1, pc, r0
    1d6c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1d70:	13110000 	tstne	r1, #0	; 0x0
    1d74:	0b0e0301 	bleq	382980 <__Stack_Size+0x382580>
    1d78:	3b0b3a05 	blcc	2d0594 <__Stack_Size+0x2d0194>
    1d7c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1d80:	00151200 	andseq	r1, r5, r0, lsl #4
    1d84:	00000c27 	andeq	r0, r0, r7, lsr #24
    1d88:	27011513 	smladcs	r1, r3, r5, r1
    1d8c:	0113490c 	tsteq	r3, ip, lsl #18
    1d90:	14000013 	strne	r0, [r0], #-19
    1d94:	13490005 	movtne	r0, #36869	; 0x9005
    1d98:	0d150000 	ldceq	0, cr0, [r5]
    1d9c:	3a0e0300 	bcc	3829a4 <__Stack_Size+0x3825a4>
    1da0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1da4:	000a3813 	andeq	r3, sl, r3, lsl r8
    1da8:	00261600 	eoreq	r1, r6, r0, lsl #12
    1dac:	00001349 	andeq	r1, r0, r9, asr #6
    1db0:	03011317 	movweq	r1, #4887	; 0x1317
    1db4:	3a0b0b0e 	bcc	2c49f4 <__Stack_Size+0x2c45f4>
    1db8:	01053b0b 	tsteq	r5, fp, lsl #22
    1dbc:	18000013 	stmdane	r0, {r0, r1, r4}
    1dc0:	0b0b0113 	bleq	2c2214 <__Stack_Size+0x2c1e14>
    1dc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1dc8:	00001301 	andeq	r1, r0, r1, lsl #6
    1dcc:	0b011719 	bleq	47a38 <__Stack_Size+0x47638>
    1dd0:	3b0b3a0b 	blcc	2d0604 <__Stack_Size+0x2d0204>
    1dd4:	00130105 	andseq	r0, r3, r5, lsl #2
    1dd8:	000d1a00 	andeq	r1, sp, r0, lsl #20
    1ddc:	0b3a0e03 	bleq	e855f0 <__Stack_Size+0xe851f0>
    1de0:	1349053b 	movtne	r0, #38203	; 0x953b
    1de4:	151b0000 	ldrne	r0, [fp]
    1de8:	010c2701 	tsteq	ip, r1, lsl #14
    1dec:	1c000013 	stcne	0, cr0, [r0], {19}
    1df0:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1df4:	0b3a0e03 	bleq	e85608 <__Stack_Size+0xe85208>
    1df8:	0c270b3b 	stceq	11, cr0, [r7], #-236
    1dfc:	01120111 	tsteq	r2, r1, lsl r1
    1e00:	13010640 	movwne	r0, #5696	; 0x1640
    1e04:	051d0000 	ldreq	r0, [sp]
    1e08:	3a0e0300 	bcc	382a10 <__Stack_Size+0x382610>
    1e0c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e10:	00060213 	andeq	r0, r6, r3, lsl r2
    1e14:	00051e00 	andeq	r1, r5, r0, lsl #28
    1e18:	0b3a0803 	bleq	e83e2c <__Stack_Size+0xe83a2c>
    1e1c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1e20:	00000602 	andeq	r0, r0, r2, lsl #12
    1e24:	0300341f 	movweq	r3, #1055	; 0x41f
    1e28:	3b0b3a08 	blcc	2d0650 <__Stack_Size+0x2d0250>
    1e2c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1e30:	2000000a 	andcs	r0, r0, sl
    1e34:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1e38:	0b3b0b3a 	bleq	ec4b28 <__Stack_Size+0xec4728>
    1e3c:	00001349 	andeq	r1, r0, r9, asr #6
    1e40:	03003421 	movweq	r3, #1057	; 0x421
    1e44:	3b0b3a08 	blcc	2d066c <__Stack_Size+0x2d026c>
    1e48:	0013490b 	andseq	r4, r3, fp, lsl #18
    1e4c:	00342200 	eorseq	r2, r4, r0, lsl #4
    1e50:	0b3a0803 	bleq	e83e64 <__Stack_Size+0xe83a64>
    1e54:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1e58:	00000602 	andeq	r0, r0, r2, lsl #12
    1e5c:	03000a23 	movweq	r0, #2595	; 0xa23
    1e60:	3b0b3a0e 	blcc	2d06a0 <__Stack_Size+0x2d02a0>
    1e64:	2400000b 	strcs	r0, [r0], #-11
    1e68:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    1e6c:	34250000 	strtcc	r0, [r5]
    1e70:	3a0e0300 	bcc	382a78 <__Stack_Size+0x382678>
    1e74:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e78:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1e7c:	0000000c 	andeq	r0, r0, ip
    1e80:	10001101 	andne	r1, r0, r1, lsl #2
    1e84:	03065506 	movweq	r5, #25862	; 0x6506
    1e88:	25081b08 	strcs	r1, [r8, #-2824]
    1e8c:	00051308 	andeq	r1, r5, r8, lsl #6
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000045 	andeq	r0, r0, r5, asr #32
       4:	001f0002 	andseq	r0, pc, r2
       8:	01020000 	tsteq	r2, r0
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	tsteq	r0, r0
      18:	00010000 	andeq	r0, r1, r0
      1c:	69747263 	ldmdbvs	r4!, {r0, r1, r5, r6, r9, ip, sp, lr}^
      20:	6d73612e 	ldfvse	f6, [r3, #-184]!
      24:	00000000 	andeq	r0, r0, r0
      28:	02050000 	andeq	r0, r5, #0	; 0x0
      2c:	00000000 	andeq	r0, r0, r0
      30:	0100cc03 	tsteq	r0, r3, lsl #24
      34:	01000602 	tsteq	r0, r2, lsl #12
      38:	02050001 	andeq	r0, r5, #1	; 0x1
      3c:	00000000 	andeq	r0, r0, r0
      40:	0100d703 	tsteq	r0, r3, lsl #14
      44:	01000602 	tsteq	r0, r2, lsl #12
      48:	00009601 	andeq	r9, r0, r1, lsl #12
      4c:	40000200 	andmi	r0, r0, r0, lsl #4
      50:	02000000 	andeq	r0, r0, #0	; 0x0
      54:	0d0efb01 	vstreq	d15, [lr, #-4]
      58:	01010100 	tsteq	r1, r0, lsl #2
      5c:	00000001 	andeq	r0, r0, r1
      60:	01000001 	tsteq	r0, r1
      64:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
      68:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
      6c:	2f2e2e2f 	svccs	0x002e2e2f
      70:	2d636367 	stclcs	3, cr6, [r3, #-412]!
      74:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
      78:	696c2f30 	stmdbvs	ip!, {r4, r5, r8, r9, sl, fp, sp}^
      7c:	6f6c6762 	svcvs	0x006c6762
      80:	612f7373 	teqvs	pc, r3, ror r3
      84:	00006d72 	andeq	r6, r0, r2, ror sp
      88:	30747263 	rsbscc	r7, r4, r3, ror #4
      8c:	0100532e 	tsteq	r0, lr, lsr #6
      90:	00000000 	andeq	r0, r0, r0
      94:	00000205 	andeq	r0, r0, r5, lsl #4
      98:	d2030000 	andle	r0, r3, #0	; 0x0
      9c:	2f2f0100 	svccs	0x002f0100
      a0:	2f2f2f33 	svccs	0x002f2f33
      a4:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      a8:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      ac:	2f302f2f 	svccs	0x00302f2f
      b0:	2f2f302f 	svccs	0x002f302f
      b4:	2f302f2f 	svccs	0x00302f2f
      b8:	09032f30 	stmdbeq	r3, {r4, r5, r8, r9, sl, fp, sp}
      bc:	2f2f322e 	svccs	0x002f322e
      c0:	032f2f30 	teqeq	pc, #192	; 0xc0
      c4:	2f342e0e 	svccs	0x00342e0e
      c8:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      cc:	2f2f2f2f 	svccs	0x002f2f2f
      d0:	f9032f30 	undefined instruction 0xf9032f30
      d4:	2f2f2e00 	svccs	0x002f2e00
      d8:	2f2f2f2f 	svccs	0x002f2f2f
      dc:	10023030 	andne	r3, r2, r0, lsr r0
      e0:	1e010100 	adfnes	f0, f1, f0
      e4:	02000002 	andeq	r0, r0, #2	; 0x2
      e8:	0000ae00 	andeq	sl, r0, r0, lsl #28
      ec:	fb010200 	blx	408f6 <__Stack_Size+0x404f6>
      f0:	01000d0e 	tsteq	r0, lr, lsl #26
      f4:	00010101 	andeq	r0, r1, r1, lsl #2
      f8:	00010000 	andeq	r0, r1, r0
      fc:	50410100 	subpl	r0, r1, r0, lsl #2
     100:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
     104:	74730063 	ldrbtvc	r0, [r3], #-99
     108:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     10c:	5f783031 	svcpl	0x00783031
     110:	2f62696c 	svccs	0x0062696c
     114:	00636e69 	rsbeq	r6, r3, r9, ror #28
     118:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     11c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     120:	73000001 	movwvc	r0, #1	; 0x1
     124:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     128:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     12c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     130:	00682e65 	rsbeq	r2, r8, r5, ror #28
     134:	73000002 	movwvc	r0, #2	; 0x2
     138:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     13c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     140:	70616d5f 	rsbvc	r6, r1, pc, asr sp
     144:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     148:	74730000 	ldrbtvc	r0, [r3]
     14c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     150:	5f783031 	svcpl	0x00783031
     154:	6f697067 	svcvs	0x00697067
     158:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     15c:	74730000 	ldrbtvc	r0, [r3]
     160:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     164:	5f783031 	svcpl	0x00783031
     168:	6369766e 	cmnvs	r9, #115343360	; 0x6e00000
     16c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     170:	74730000 	ldrbtvc	r0, [r3]
     174:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     178:	5f783031 	svcpl	0x00783031
     17c:	2e6d6974 	mcrcs	9, 3, r6, cr13, cr4, {3}
     180:	00020068 	andeq	r0, r2, r8, rrx
     184:	6d747300 	ldclvs	3, cr7, [r4]
     188:	31663233 	cmncc	r6, r3, lsr r2
     18c:	755f7830 	ldrbvc	r7, [pc, #-2096]	; fffff964 <SCS_BASE+0x1fff1964>
     190:	74726173 	ldrbtvc	r6, [r2], #-371
     194:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     198:	00000000 	andeq	r0, r0, r0
     19c:	31340205 	teqcc	r4, r5, lsl #4
     1a0:	d9030800 	stmdble	r3, {fp}
     1a4:	67130102 	ldrvs	r0, [r3, -r2, lsl #2]
     1a8:	03781369 	cmneq	r8, #-1543503871	; 0xa4000001
     1ac:	9317580f 	tstls	r7, #983040	; 0xf0000
     1b0:	a3034d3d 	movwge	r4, #15677	; 0x3d3d
     1b4:	3d138201 	lfmcc	f0, 1, [r3, #-4]
     1b8:	4a12033d 	bmi	480eb4 <__Stack_Size+0x480ab4>
     1bc:	164d2f13 	undefined
     1c0:	4a64036a 	bmi	1900f70 <__Stack_Size+0x1900b70>
     1c4:	303e2220 	eorscc	r2, lr, r0, lsr #4
     1c8:	033d4c4d 	teqeq	sp, #19712	; 0x4d00
     1cc:	2c224a65 	stccs	10, cr4, [r2], #-404
     1d0:	033d3122 	teqeq	sp, #-2147483640	; 0x80000008
     1d4:	1f213c74 	svcne	0x00213c74
     1d8:	03ad5921 	undefined instruction 0x03ad5921
     1dc:	2d21906e 	stccs	0, cr9, [r1, #-440]!
     1e0:	675a4c21 	ldrbvs	r4, [sl, -r1, lsr #24]
     1e4:	033e3d92 	teqeq	lr, #9344	; 0x2480
     1e8:	3d328250 	lfmcc	f0, 1, [r2, #-320]!
     1ec:	3e2f2b30 	vmovcc.16	d15[2], r2
     1f0:	321c4f3f 	andscc	r4, ip, #252	; 0xfc
     1f4:	302f2f1c 	eorcc	r2, pc, ip, lsl pc
     1f8:	2f4b6931 	svccs	0x004b6931
     1fc:	221e222f 	andscs	r2, lr, #-268435454	; 0xf0000002
     200:	4d2f301e 	stcmi	0, cr3, [pc, #-120]!
     204:	58034b5b 	stmdapl	r3, {r0, r1, r3, r4, r6, r8, r9, fp, lr}
     208:	211f214a 	tstcs	pc, sl, asr #2
     20c:	6f03673d 	svcvs	0x0003673d
     210:	201d154a 	andscs	r1, sp, sl, asr #10
     214:	2f212f23 	svccs	0x00212f23
     218:	2f214b2f 	svccs	0x00214b2f
     21c:	206f032f 	rsbcs	r0, pc, pc, lsr #6
     220:	3d1f2220 	lfmcc	f2, 4, [pc, #-128]
     224:	2077033d 	rsbscs	r0, r7, sp, lsr r3
     228:	4c2d303c 	stcmi	0, cr3, [sp], #-240
     22c:	213c4203 	teqcs	ip, r3, lsl #4
     230:	3277211f 	rsbscc	r2, r7, #-1073741817	; 0xc0000007
     234:	32323232 	eorscc	r3, r2, #536870915	; 0x20000003
     238:	16083f32 	undefined
     23c:	4b211f21 	blmi	847ec8 <__Stack_Size+0x847ac8>
     240:	593e593e 	ldmdbpl	lr!, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
     244:	593e593e 	ldmdbpl	lr!, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
     248:	593e593e 	ldmdbpl	lr!, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
     24c:	7fab033d 	svcvc	0x00ab033d
     250:	211f21f2 	ldrshcs	r2, [pc, -r2]
     254:	4b4c1e3f 	blmi	1307b58 <__Stack_Size+0x1307758>
     258:	034b4b68 	movteq	r4, #47976	; 0xbb68
     25c:	1f215865 	svcne	0x00215865
     260:	4f033d21 	svcmi	0x00033d21
     264:	1c242e4a 	stcne	14, cr2, [r4], #-296
     268:	2f4b3224 	svccs	0x004b3224
     26c:	78032f2f 	stmdavc	r3, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
     270:	3125232e 	teqcc	r5, lr, lsr #6
     274:	4d3e3d22 	ldcmi	13, cr3, [lr, #-136]!
     278:	3d30316a 	ldfccs	f3, [r0, #-424]!
     27c:	034c513e 	movteq	r5, #49470	; 0xc13e
     280:	3d3d664f 	ldccc	6, cr6, [sp, #-316]!
     284:	302e6303 	eorcc	r6, lr, r3, lsl #6
     288:	207a0326 	rsbscs	r0, sl, r6, lsr #6
     28c:	21214b3f 	teqcs	r1, pc, lsr fp
     290:	30302d2d 	eorscc	r2, r0, sp, lsr #26
     294:	1f211f4c 	svcne	0x00211f4c
     298:	1f4d302f 	svcne	0x004d302f
     29c:	302d1f21 	eorcc	r1, sp, r1, lsr #30
     2a0:	4b4c4b30 	blmi	1312f68 <__Stack_Size+0x1312b68>
     2a4:	7443034b 	strbvc	r0, [r3], #-843
     2a8:	2e780328 	cdpcs	3, 7, cr0, cr8, cr8, {1}
     2ac:	4a0b0328 	bmi	2c0f54 <__Stack_Size+0x2c0b54>
     2b0:	4e207903 	cdpmi	9, 2, cr7, cr0, cr3, {0}
     2b4:	1c21231f 	stcne	3, cr2, [r1], #-124
     2b8:	2f2f2f2f 	svccs	0x002f2f2f
     2bc:	2f1c2431 	svccs	0x001c2431
     2c0:	2f2f2f2f 	svccs	0x002f2f2f
     2c4:	3c7fa203 	lfmcc	f2, 3, [pc], #-12
     2c8:	304d3131 	subcc	r3, sp, r1, lsr r1
     2cc:	3f3f3f31 	svccc	0x003f3f31
     2d0:	3f694d3f 	svccc	0x00694d3f
     2d4:	5b523f5d 	blpl	1490050 <__Stack_Size+0x148fc50>
     2d8:	8b033d4c 	blhi	cf810 <__Stack_Size+0xcf410>
     2dc:	3130587f 	teqcc	r0, pc, ror r8
     2e0:	30303031 	eorscc	r3, r0, r1, lsr r0
     2e4:	032f5c4b 	teqeq	pc, #19200	; 0x4b00
     2e8:	6d032012 	stcvs	0, cr2, [r3, #-72]
     2ec:	1f3d5920 	svcne	0x003d5920
     2f0:	3d312221 	lfmcc	f2, 4, [r1, #-132]!
     2f4:	31932330 	orrscc	r2, r3, r0, lsr r3
     2f8:	67211f4b 	strvs	r1, [r1, -fp, asr #30]!
     2fc:	4d3d3d3d 	ldcmi	13, cr3, [sp, #-244]!
     300:	01001402 	tsteq	r0, r2, lsl #8
     304:	00015501 	andeq	r5, r1, r1, lsl #10
     308:	2d000200 	sfmcs	f0, 4, [r0]
     30c:	02000000 	andeq	r0, r0, #0	; 0x0
     310:	0d0efb01 	vstreq	d15, [lr, #-4]
     314:	01010100 	tsteq	r1, r0, lsl #2
     318:	00000001 	andeq	r0, r0, r1
     31c:	01000001 	tsteq	r0, r1
     320:	2f505041 	svccs	0x00505041
     324:	00637273 	rsbeq	r7, r3, r3, ror r2
     328:	6d747300 	ldclvs	3, cr7, [r4]
     32c:	31663233 	cmncc	r6, r3, lsr r2
     330:	695f7830 	ldmdbvs	pc, {r4, r5, fp, ip, sp, lr}^
     334:	00632e74 	rsbeq	r2, r3, r4, ror lr
     338:	00000001 	andeq	r0, r0, r1
     33c:	98020500 	stmdals	r2, {r8, sl}
     340:	03080037 	movweq	r0, #32823	; 0x8037
     344:	03130123 	tsteq	r3, #-1073741816	; 0xc0000008
     348:	0f032e0a 	svceq	0x00032e0a
     34c:	2e0f032e 	cdpcs	3, 0, cr0, cr15, cr14, {1}
     350:	032e0f03 	teqeq	lr, #12	; 0xc
     354:	03132e0f 	tsteq	r3, #240	; 0xf0
     358:	03132e0a 	tsteq	r3, #160	; 0xa0
     35c:	03132e0a 	tsteq	r3, #160	; 0xa0
     360:	03132e16 	tsteq	r3, #352	; 0x160
     364:	03132e0a 	tsteq	r3, #160	; 0xa0
     368:	03132e0a 	tsteq	r3, #160	; 0xa0
     36c:	03132e0a 	tsteq	r3, #160	; 0xa0
     370:	03132e0a 	tsteq	r3, #160	; 0xa0
     374:	03132e0a 	tsteq	r3, #160	; 0xa0
     378:	03132e0a 	tsteq	r3, #160	; 0xa0
     37c:	03132e0a 	tsteq	r3, #160	; 0xa0
     380:	03132e0a 	tsteq	r3, #160	; 0xa0
     384:	03132e0a 	tsteq	r3, #160	; 0xa0
     388:	03132e0a 	tsteq	r3, #160	; 0xa0
     38c:	03132e0a 	tsteq	r3, #160	; 0xa0
     390:	03132e0a 	tsteq	r3, #160	; 0xa0
     394:	03132e0a 	tsteq	r3, #160	; 0xa0
     398:	03132e0a 	tsteq	r3, #160	; 0xa0
     39c:	03132e0a 	tsteq	r3, #160	; 0xa0
     3a0:	03132e0a 	tsteq	r3, #160	; 0xa0
     3a4:	03132e0a 	tsteq	r3, #160	; 0xa0
     3a8:	03132e0b 	tsteq	r3, #176	; 0xb0
     3ac:	03132e0b 	tsteq	r3, #176	; 0xb0
     3b0:	03132e0b 	tsteq	r3, #176	; 0xb0
     3b4:	03132e0a 	tsteq	r3, #160	; 0xa0
     3b8:	03132e0a 	tsteq	r3, #160	; 0xa0
     3bc:	03132e0a 	tsteq	r3, #160	; 0xa0
     3c0:	03132e0a 	tsteq	r3, #160	; 0xa0
     3c4:	03132e0b 	tsteq	r3, #176	; 0xb0
     3c8:	03132e0b 	tsteq	r3, #176	; 0xb0
     3cc:	03132e0a 	tsteq	r3, #160	; 0xa0
     3d0:	03132e16 	tsteq	r3, #352	; 0x160
     3d4:	03132e0a 	tsteq	r3, #160	; 0xa0
     3d8:	03132e0a 	tsteq	r3, #160	; 0xa0
     3dc:	03132e0a 	tsteq	r3, #160	; 0xa0
     3e0:	03132e0a 	tsteq	r3, #160	; 0xa0
     3e4:	03132e0a 	tsteq	r3, #160	; 0xa0
     3e8:	03132e0a 	tsteq	r3, #160	; 0xa0
     3ec:	03132e0a 	tsteq	r3, #160	; 0xa0
     3f0:	03132e16 	tsteq	r3, #352	; 0x160
     3f4:	03132e0a 	tsteq	r3, #160	; 0xa0
     3f8:	03132e0a 	tsteq	r3, #160	; 0xa0
     3fc:	03132e0a 	tsteq	r3, #160	; 0xa0
     400:	03132e0a 	tsteq	r3, #160	; 0xa0
     404:	03132e0a 	tsteq	r3, #160	; 0xa0
     408:	03132e0b 	tsteq	r3, #176	; 0xb0
     40c:	03132e0b 	tsteq	r3, #176	; 0xb0
     410:	03132e0a 	tsteq	r3, #160	; 0xa0
     414:	03132e0a 	tsteq	r3, #160	; 0xa0
     418:	03132e0a 	tsteq	r3, #160	; 0xa0
     41c:	03132e0a 	tsteq	r3, #160	; 0xa0
     420:	03132e0a 	tsteq	r3, #160	; 0xa0
     424:	03132e0a 	tsteq	r3, #160	; 0xa0
     428:	03132e0a 	tsteq	r3, #160	; 0xa0
     42c:	03132e0a 	tsteq	r3, #160	; 0xa0
     430:	03132e0a 	tsteq	r3, #160	; 0xa0
     434:	03132e0a 	tsteq	r3, #160	; 0xa0
     438:	03132e0a 	tsteq	r3, #160	; 0xa0
     43c:	03132e0a 	tsteq	r3, #160	; 0xa0
     440:	03132e0a 	tsteq	r3, #160	; 0xa0
     444:	03132e0b 	tsteq	r3, #176	; 0xb0
     448:	2f2e7e89 	svccs	0x002e7e89
     44c:	7f9a032f 	svcvc	0x009a032f
     450:	032f2f2e 	teqeq	pc, #184	; 0xb8
     454:	2f2e7db9 	svccs	0x002e7db9
     458:	0002022f 	andeq	r0, r2, pc, lsr #4
     45c:	006d0101 	rsbeq	r0, sp, r1, lsl #2
     460:	00020000 	andeq	r0, r2, r0
     464:	00000028 	andeq	r0, r0, r8, lsr #32
     468:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     46c:	0101000d 	tsteq	r1, sp
     470:	00000101 	andeq	r0, r0, r1, lsl #2
     474:	00000100 	andeq	r0, r0, r0, lsl #2
     478:	50504101 	subspl	r4, r0, r1, lsl #2
     47c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     480:	78640000 	stmdavc	r4!, {}^
     484:	61685f6c 	cmnvs	r8, ip, ror #30
     488:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     48c:	00000001 	andeq	r0, r0, r1
     490:	c4020500 	strgt	r0, [r2], #-1280
     494:	03080038 	movweq	r0, #32824	; 0x8038
     498:	320100c7 	andcc	r0, r1, #199	; 0xc7
     49c:	2e72032f 	cdpcs	3, 7, cr0, cr2, cr15, {1}
     4a0:	4b251b33 	blmi	947174 <__Stack_Size+0x946d74>
     4a4:	202e6803 	eorcs	r6, lr, r3, lsl #16
     4a8:	594a0903 	stmdbpl	sl, {r0, r1, r8, fp}^
     4ac:	441d232b 	ldrmi	r2, [sp], #-811
     4b0:	203c6303 	eorscs	r6, ip, r3, lsl #6
     4b4:	034e3b52 	movteq	r3, #60242	; 0xeb52
     4b8:	2f312e6e 	svccs	0x00312e6e
     4bc:	322e7403 	eorcc	r7, lr, #50331648	; 0x3000000
     4c0:	2e70032f 	cdpcs	3, 7, cr0, cr0, cr15, {1}
     4c4:	207a0326 	rsbscs	r0, sl, r6, lsr #6
     4c8:	03023026 	movweq	r3, #8230	; 0x2026
     4cc:	42010100 	andmi	r0, r1, #0	; 0x0
     4d0:	02000001 	andeq	r0, r0, #1	; 0x1
     4d4:	00002a00 	andeq	r2, r0, r0, lsl #20
     4d8:	fb010200 	blx	40ce2 <__Stack_Size+0x408e2>
     4dc:	01000d0e 	tsteq	r0, lr, lsl #26
     4e0:	00010101 	andeq	r0, r1, r1, lsl #2
     4e4:	00010000 	andeq	r0, r1, r0
     4e8:	50410100 	subpl	r0, r1, r0, lsl #2
     4ec:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
     4f0:	64000063 	strvs	r0, [r0], #-99
     4f4:	6d616e79 	stclvs	14, cr6, [r1, #-484]!
     4f8:	6c657869 	stclvs	8, cr7, [r5], #-420
     4fc:	0100632e 	tsteq	r0, lr, lsr #6
     500:	00000000 	andeq	r0, r0, r0
     504:	39500205 	ldmdbcc	r0, {r0, r2, r9}^
     508:	e6030800 	str	r0, [r3], -r0, lsl #16
     50c:	30010101 	andcc	r0, r1, r1, lsl #2
     510:	4d2f134d 	stcmi	3, cr1, [pc, #-308]!
     514:	134d2f13 	movtne	r2, #57107	; 0xdf13
     518:	2f133f3d 	svccs	0x00133f3d
     51c:	4d6b014d 	stfmie	f0, [fp, #-308]!
     520:	014d3001 	cmpeq	sp, r1
     524:	3f163f3e 	svccc	0x00163f3e
     528:	23250123 	teqcs	r5, #-1073741816	; 0xc0000008
     52c:	c2033f15 	andgt	r3, r3, #84	; 0x54
     530:	1c24207e 	stcne	0, cr2, [r4], #-504
     534:	306d4d24 	rsbcc	r4, sp, r4, lsr #26
     538:	2f963f2f 	svccs	0x00963f2f
     53c:	211f211f 	tstcs	pc, pc, lsl r1
     540:	4a0e0322 	bmi	3811d0 <__Stack_Size+0x380dd0>
     544:	207a0326 	rsbscs	r0, sl, r6, lsr #6
     548:	03341e22 	teqeq	r4, #544	; 0x220
     54c:	303d3c70 	eorscc	r3, sp, r0, ror ip
     550:	0386442f 	orreq	r4, r6, #788529152	; 0x2f000000
     554:	0b03667a 	bleq	d9f44 <__Stack_Size+0xd9b44>
     558:	812f304a 	teqhi	pc, sl, asr #32
     55c:	687c3f4d 	ldmdavs	ip!, {r0, r2, r3, r6, r8, r9, sl, fp, ip, sp}^
     560:	211f3d4f 	tstcs	pc, pc, asr #26
     564:	1f2f5922 	svcne	0x002f5922
     568:	28211f21 	stmdacs	r1!, {r0, r5, r8, r9, sl, fp, ip}
     56c:	51667a03 	cmnpl	r6, r3, lsl #20
     570:	33a04e57 	movcc	r4, #1392	; 0x570
     574:	d6032f2f 	strle	r2, [r3], -pc, lsr #30
     578:	1b25d67e 	blne	975f78 <__Stack_Size+0x975b78>
     57c:	221e4325 	andscs	r4, lr, #-1811939328	; 0x94000000
     580:	c243222c 	subgt	r2, r3, #-1073741822	; 0xc0000002
     584:	213d403d 	teqcs	sp, sp, lsr r0
     588:	5a4c573d 	bpl	1316284 <__Stack_Size+0x1315e84>
     58c:	1f2f315e 	svcne	0x002f315e
     590:	3d3f3e2f 	ldccc	14, cr3, [pc, #-188]!
     594:	3e3e3d40 	cdpcc	13, 3, cr3, cr14, cr0, {2}
     598:	00ed033d 	rsceq	r0, sp, sp, lsr r3
     59c:	43302290 	teqmi	r0, #9	; 0x9
     5a0:	033f301e 	teqeq	pc, #30	; 0x1e
     5a4:	214a0182 	smlalbbcs	r0, sl, r2, r1
     5a8:	211f211f 	tstcs	pc, pc, lsl r1
     5ac:	b5032122 	strlt	r2, [r3, #-290]
     5b0:	cd032e7f 	stcgt	14, cr2, [r3, #-508]
     5b4:	2f212e00 	svccs	0x00212e00
     5b8:	2223221b 	eorcs	r2, r3, #-1342177279	; 0xb0000001
     5bc:	8263032f 	rsbhi	r0, r3, #-1140850688	; 0xbc000000
     5c0:	30211f21 	eorcc	r1, r1, r1, lsr #30
     5c4:	1c213021 	stcne	0, cr3, [r1], #-132
     5c8:	03252222 	teqeq	r5, #536870914	; 0x20000002
     5cc:	2f2e7fb5 	svccs	0x002e7fb5
     5d0:	4a00cd03 	bmi	339e4 <__Stack_Size+0x335e4>
     5d4:	21906403 	orrscs	r6, r0, r3, lsl #8
     5d8:	211f211f 	tstcs	pc, pc, lsl r1
     5dc:	1c312122 	ldfnes	f2, [r1], #-136
     5e0:	222f2122 	eorcs	r2, pc, #-2147483640	; 0x80000008
     5e4:	7467032f 	strbtvc	r0, [r7], #-815
     5e8:	30211f21 	eorcc	r1, r1, r1, lsr #30
     5ec:	1c2f3021 	stcne	0, cr3, [pc], #-132
     5f0:	4d241e24 	stcmi	14, cr1, [r4, #-144]!
     5f4:	219e6903 	orrscs	r6, lr, r3, lsl #18
     5f8:	2130211f 	teqcs	r0, pc, lsl r1
     5fc:	22221e2f 	eorcs	r1, r2, #752	; 0x2f0
     600:	7def032f 	stclvc	3, cr0, [pc, #188]!
     604:	032f2f74 	teqeq	pc, #464	; 0x1d0
     608:	46242e6e 	strtmi	r2, [r4], -lr, ror #28
     60c:	4f3d4d24 	svcmi	0x003d4d24
     610:	01000902 	tsteq	r0, r2, lsl #18
     614:	00021f01 	andeq	r1, r2, r1, lsl #30
     618:	88000200 	stmdahi	r0, {r9}
     61c:	02000000 	andeq	r0, r0, #0	; 0x0
     620:	0d0efb01 	vstreq	d15, [lr, #-4]
     624:	01010100 	tsteq	r1, r0, lsl #2
     628:	00000001 	andeq	r0, r0, r1
     62c:	01000001 	tsteq	r0, r1
     630:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     634:	30316632 	eorscc	r6, r1, r2, lsr r6
     638:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     63c:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     640:	74730063 	ldrbtvc	r0, [r3], #-99
     644:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     648:	5f783031 	svcpl	0x00783031
     64c:	2f62696c 	svccs	0x0062696c
     650:	00636e69 	rsbeq	r6, r3, r9, ror #28
     654:	6d747300 	ldclvs	3, cr7, [r4]
     658:	31663233 	cmncc	r6, r3, lsr r2
     65c:	665f7830 	undefined
     660:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     664:	0100632e 	tsteq	r0, lr, lsr #6
     668:	74730000 	ldrbtvc	r0, [r3]
     66c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     670:	5f783031 	svcpl	0x00783031
     674:	65707974 	ldrbvs	r7, [r0, #-2420]!
     678:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     67c:	74730000 	ldrbtvc	r0, [r3]
     680:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     684:	5f783031 	svcpl	0x00783031
     688:	2e70616d 	rpwcssz	f6, f0, #5.0
     68c:	00020068 	andeq	r0, r2, r8, rrx
     690:	6d747300 	ldclvs	3, cr7, [r4]
     694:	31663233 	cmncc	r6, r3, lsr r2
     698:	665f7830 	undefined
     69c:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     6a0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     6a4:	00000000 	andeq	r0, r0, r0
     6a8:	3d5c0205 	lfmcc	f0, 2, [ip, #-20]
     6ac:	d6030800 	strle	r0, [r3], -r0, lsl #16
     6b0:	59170100 	ldmdbpl	r7, {r8}
     6b4:	4a0d033d 	bmi	3413b0 <__Stack_Size+0x340fb0>
     6b8:	033d5917 	teqeq	sp, #376832	; 0x5c000
     6bc:	59174a0d 	ldmdbpl	r7, {r0, r2, r3, r9, fp, lr}
     6c0:	4a0b033d 	bmi	2c13bc <__Stack_Size+0x2c0fbc>
     6c4:	033d3d14 	teqeq	sp, #1280	; 0x500
     6c8:	5914660a 	ldmdbpl	r4, {r1, r3, r9, sl, sp, lr}
     6cc:	3c03f503 	cfstr32cc	mvfx15, [r3], {3}
     6d0:	0a033d14 	beq	cfb28 <__Stack_Size+0xcf728>
     6d4:	032f143c 	teqeq	pc, #1006632960	; 0x3c000000
     6d8:	03154a0b 	tsteq	r5, #45056	; 0xb000
     6dc:	0a035809 	beq	d6708 <__Stack_Size+0xd6308>
     6e0:	0a03153c 	beq	c5bd8 <__Stack_Size+0xc57d8>
     6e4:	3c0e0358 	stccc	3, cr0, [lr], {88}
     6e8:	5a5d2317 	bpl	174934c <__Stack_Size+0x1748f4c>
     6ec:	183c1003 	ldmdane	ip!, {r0, r1, ip}
     6f0:	580b0330 	stmdapl	fp, {r4, r5, r8, r9}
     6f4:	03660b03 	cmneq	r6, #3072	; 0xc00
     6f8:	2f173c0f 	svccs	0x00173c0f
     6fc:	154a0b03 	strbne	r0, [sl, #-2819]
     700:	0c036c7a 	stceq	12, cr6, [r3], {122}
     704:	3c0c0366 	stccc	3, cr0, [ip], {102}
     708:	03205c03 	teqeq	r0, #768	; 0x300
     70c:	5c032024 	stcpl	0, cr2, [r3], {36}
     710:	20240320 	eorcs	r0, r4, r0, lsr #6
     714:	5e205c03 	cdppl	12, 2, cr5, cr0, cr3, {0}
     718:	7438036c 	ldrtvc	r0, [r8], #-876
     71c:	7fba0322 	svcvc	0x00ba0322
     720:	036c6c90 	cmneq	ip, #36864	; 0x9000
     724:	51036623 	tstpl	r3, r3, lsr #12
     728:	00c4032e 	sbceq	r0, r4, lr, lsr #6
     72c:	65032220 	strvs	r2, [r3, #-544]
     730:	0343a52e 	movteq	sl, #13614	; 0x352e
     734:	034a7def 	movteq	r7, #44527	; 0xadef
     738:	77032009 	strvc	r2, [r3, -r9]
     73c:	2009032e 	andcs	r0, r9, lr, lsr #6
     740:	2e760321 	cdpcs	3, 7, cr0, cr6, cr1, {1}
     744:	23200a03 	teqcs	r0, #12288	; 0x3000
     748:	03207303 	teqeq	r0, #201326592	; 0xc000000
     74c:	31302e0d 	teqcc	r0, sp, lsl #28
     750:	773e1e22 	ldrvc	r1, [lr, -r2, lsr #28]!
     754:	036b233e 	cmneq	fp, #-134217728	; 0xf8000000
     758:	42827f8e 	addmi	r7, r2, #568	; 0x238
     75c:	0335314c 	teqeq	r5, #19	; 0x13
     760:	3e212e79 	mcrcc	14, 1, r2, cr1, cr9, {3}
     764:	4d3d1c24 	ldcmi	12, cr1, [sp, #-144]!
     768:	4c693130 	stfmie	f3, [r9], #-192
     76c:	4c4e4e22 	mcrrmi	14, 2, r4, lr, cr2
     770:	6c238731 	stcvs	7, cr8, [r3], #-196
     774:	827ef803 	rsbshi	pc, lr, #196608	; 0x30000
     778:	200f0320 	andcs	r0, pc, r0, lsr #6
     77c:	7403313e 	strvc	r3, [r3], #-318
     780:	2e0c032e 	cdpcs	3, 0, cr0, cr12, cr14, {1}
     784:	73033d21 	movwvc	r3, #15649	; 0x3d21
     788:	200d0320 	andcs	r0, sp, r0, lsr #6
     78c:	22221e30 	eorcs	r1, r2, #768	; 0x300
     790:	03231d23 	teqeq	r3, #2240	; 0x8c0
     794:	15032e6d 	strne	r2, [r3, #-3693]
     798:	1d23a03c 	stcne	0, cr10, [r3, #-240]!
     79c:	2e670323 	cdpcs	3, 6, cr0, cr7, cr3, {1}
     7a0:	a03c1c03 	eorsge	r1, ip, r3, lsl #24
     7a4:	03231d23 	teqeq	r3, #2240	; 0x8c0
     7a8:	23032e60 	movwcs	r2, #15968	; 0x3e60
     7ac:	1d23a020 	stcne	0, cr10, [r3, #-128]!
     7b0:	87233123 	strhi	r3, [r3, -r3, lsr #2]!
     7b4:	827f9003 	rsbshi	r9, pc, #3	; 0x3
     7b8:	7a032620 	bvc	ca040 <__Stack_Size+0xc9c40>
     7bc:	31302620 	teqcc	r0, r0, lsr #12
     7c0:	20780336 	rsbscs	r0, r8, r6, lsr r3
     7c4:	234b3f21 	movtcs	r3, #48929	; 0xbf21
     7c8:	036b2330 	cmneq	fp, #-1073741824	; 0xc0000000
     7cc:	20587fbb 	ldrhcs	r7, [r8], #-251
     7d0:	20790327 	rsbscs	r0, r9, r7, lsr #6
     7d4:	24313027 	ldrtcs	r3, [r1], #-39
     7d8:	30224c1c 	eorcc	r4, r2, ip, lsl ip
     7dc:	ab036b23 	blge	db470 <__Stack_Size+0xdb070>
     7e0:	27204a7f 	undefined
     7e4:	27207903 	strcs	r7, [r0, -r3, lsl #18]!
     7e8:	1b253230 	blne	94d0b0 <__Stack_Size+0x94ccb0>
     7ec:	3230314c 	eorscc	r3, r0, #19	; 0x13
     7f0:	3c0a0331 	stccc	3, cr0, [sl], {49}
     7f4:	93036c23 	movwls	r6, #15395	; 0x3c23
     7f8:	4c244a7f 	stcmi	10, cr4, [r4], #-508
     7fc:	78033631 	stmdavc	r3, {r0, r4, r5, r9, sl, ip, sp}
     800:	243f212e 	ldrtcs	r2, [pc], #302	; 808 <__Stack_Size+0x408>
     804:	304d3d1c 	subcc	r3, sp, ip, lsl sp
     808:	2b236931 	blcs	8dacd4 <__Stack_Size+0x8da8d4>
     80c:	231d233f 	tstcs	sp, #-67108864	; 0xfc000000
     810:	232e0a03 	teqcs	lr, #12288	; 0x3000
     814:	7fab036c 	svcvc	0x00ab036c
     818:	314c2482 	smlalbbcc	r2, ip, r2, r4
     81c:	3f2b234b 	svccc	0x002b234b
     820:	036b233e 	cmneq	fp, #-134217728	; 0xf8000000
     824:	4c433c42 	mcrrmi	12, 4, r3, r3, cr2
     828:	25292531 	strcs	r2, [r9, #-1329]!
     82c:	4d213d1b 	stcmi	13, cr3, [r1, #-108]!
     830:	026b2330 	rsbeq	r2, fp, #-1073741824	; 0xc0000000
     834:	01010005 	tsteq	r1, r5
     838:	00000174 	andeq	r0, r0, r4, ror r1
     83c:	00860002 	addeq	r0, r6, r2
     840:	01020000 	tsteq	r2, r0
     844:	000d0efb 	strdeq	r0, [sp], -fp
     848:	01010101 	tsteq	r1, r1, lsl #2
     84c:	01000000 	tsteq	r0, r0
     850:	73010000 	movwvc	r0, #4096	; 0x1000
     854:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     858:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     85c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     860:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     864:	6d747300 	ldclvs	3, cr7, [r4]
     868:	31663233 	cmncc	r6, r3, lsr r2
     86c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     870:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
     874:	0000636e 	andeq	r6, r0, lr, ror #6
     878:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     87c:	30316632 	eorscc	r6, r1, r2, lsr r6
     880:	70675f78 	rsbvc	r5, r7, r8, ror pc
     884:	632e6f69 	teqvs	lr, #420	; 0x1a4
     888:	00000100 	andeq	r0, r0, r0, lsl #2
     88c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     890:	30316632 	eorscc	r6, r1, r2, lsr r6
     894:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     898:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     89c:	00000200 	andeq	r0, r0, r0, lsl #4
     8a0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     8a4:	30316632 	eorscc	r6, r1, r2, lsr r6
     8a8:	616d5f78 	smcvs	54776
     8ac:	00682e70 	rsbeq	r2, r8, r0, ror lr
     8b0:	73000002 	movwvc	r0, #2	; 0x2
     8b4:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     8b8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     8bc:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     8c0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     8c4:	00000002 	andeq	r0, r0, r2
     8c8:	84020500 	strhi	r0, [r2], #-1280
     8cc:	03080042 	movweq	r0, #32834	; 0x8042
     8d0:	030100fc 	movweq	r0, #4348	; 0x10fc
     8d4:	0c03200a 	stceq	0, cr2, [r3], {10}
     8d8:	20760320 	rsbscs	r0, r6, r0, lsr #6
     8dc:	2e790333 	mrccs	3, 3, r0, cr9, cr3, {1}
     8e0:	6a033335 	bvs	cd5bc <__Stack_Size+0xcd1bc>
     8e4:	2016032e 	andscs	r0, r6, lr, lsr #6
     8e8:	303e3222 	eorscc	r3, lr, r2, lsr #4
     8ec:	2b312132 	blcs	c48dbc <__Stack_Size+0xc489bc>
     8f0:	7a032331 	bvc	c95bc <__Stack_Size+0xc91bc>
     8f4:	273a2820 	ldrcs	r2, [sl, -r0, lsr #16]!
     8f8:	3c660322 	stclcc	3, cr0, [r6], #-136
     8fc:	253c1f03 	ldrcs	r1, [ip, #-3843]!
     900:	2f5a3130 	svccs	0x005a3130
     904:	2b312132 	blcs	c48dd4 <__Stack_Size+0xc489d4>
     908:	7a032331 	bvc	c95d4 <__Stack_Size+0xc91d4>
     90c:	253a2820 	ldrcs	r2, [sl, #-2080]!
     910:	3c690322 	stclcc	3, cr0, [r9], #-136
     914:	223c1b03 	eorscs	r1, ip, #3072	; 0xc00
     918:	143c0b03 	ldrtne	r0, [ip], #-2819
     91c:	032f2f3d 	teqeq	pc, #244	; 0xf4
     920:	0319200c 	tsteq	r9, #12	; 0xc
     924:	0a035809 	beq	d6950 <__Stack_Size+0xd6550>
     928:	032f1620 	teqeq	pc, #33554432	; 0x2000000
     92c:	03192e0c 	tsteq	r9, #192	; 0xc0
     930:	0a035809 	beq	d695c <__Stack_Size+0xd655c>
     934:	032f1620 	teqeq	pc, #33554432	; 0x2000000
     938:	21172e0d 	tstcs	r7, sp, lsl #28
     93c:	17200d03 	strne	r0, [r0, -r3, lsl #26]!
     940:	20100321 	andscs	r0, r0, r1, lsr #6
     944:	22322218 	eorscs	r2, r2, #-2147483647	; 0x80000001
     948:	162e0c03 	strtne	r0, [lr], -r3, lsl #24
     94c:	200d0321 	andcs	r0, sp, r1, lsr #6
     950:	22223019 	eorcs	r3, r2, #25	; 0x19
     954:	03212222 	teqeq	r1, #536870914	; 0x20000002
     958:	3019200f 	andscc	r2, r9, pc
     95c:	302d312c 	eorcc	r3, sp, ip, lsr #2
     960:	0b032f22 	bleq	cc5f0 <__Stack_Size+0xcc1f0>
     964:	032f163c 	teqeq	pc, #62914560	; 0x3c00000
     968:	0c034a26 	stceq	10, cr4, [r3], {38}
     96c:	76032c20 	strvc	r2, [r3], -r0, lsr #24
     970:	22232720 	eorcs	r2, r3, #8388608	; 0x800000
     974:	1f233329 	svcne	0x00233329
     978:	6b3f4c2f 	blvs	fd3a3c <__Stack_Size+0xfd363c>
     97c:	5b223167 	blpl	88cf20 <__Stack_Size+0x88cb20>
     980:	4a0f032f 	bmi	3c1644 <__Stack_Size+0x3c1244>
     984:	1f2f3e27 	svcne	0x002f3e27
     988:	a703599f 	undefined
     98c:	2d214a7c 	fstmdbscs	r1!, {s8-s131}
     990:	034b2f21 	movteq	r2, #48929	; 0xbf21
     994:	1c242e45 	stcne	14, cr2, [r4], #-276
     998:	08241c24 	stmdaeq	r4!, {r2, r5, sl, fp, ip}
     99c:	4b324ba1 	blmi	c93828 <__Stack_Size+0xc93428>
     9a0:	4b324b32 	blmi	c93670 <__Stack_Size+0xc93270>
     9a4:	4b324b32 	blmi	c93674 <__Stack_Size+0xc93274>
     9a8:	025e5932 	subseq	r5, lr, #819200	; 0xc8000
     9ac:	01010006 	tsteq	r1, r6
     9b0:	000001a6 	andeq	r0, r0, r6, lsr #3
     9b4:	00860002 	addeq	r0, r6, r2
     9b8:	01020000 	tsteq	r2, r0
     9bc:	000d0efb 	strdeq	r0, [sp], -fp
     9c0:	01010101 	tsteq	r1, r1, lsl #2
     9c4:	01000000 	tsteq	r0, r0
     9c8:	73010000 	movwvc	r0, #4096	; 0x1000
     9cc:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     9d0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     9d4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     9d8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     9dc:	6d747300 	ldclvs	3, cr7, [r4]
     9e0:	31663233 	cmncc	r6, r3, lsr r2
     9e4:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     9e8:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
     9ec:	0000636e 	andeq	r6, r0, lr, ror #6
     9f0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     9f4:	30316632 	eorscc	r6, r1, r2, lsr r6
     9f8:	766e5f78 	uqsub16vc	r5, lr, r8
     9fc:	632e6369 	teqvs	lr, #-1543503871	; 0xa4000001
     a00:	00000100 	andeq	r0, r0, r0, lsl #2
     a04:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     a08:	30316632 	eorscc	r6, r1, r2, lsr r6
     a0c:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     a10:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     a14:	00000200 	andeq	r0, r0, r0, lsl #4
     a18:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     a1c:	30316632 	eorscc	r6, r1, r2, lsr r6
     a20:	616d5f78 	smcvs	54776
     a24:	00682e70 	rsbeq	r2, r8, r0, ror lr
     a28:	73000002 	movwvc	r0, #2	; 0x2
     a2c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     a30:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     a34:	69766e5f 	ldmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     a38:	00682e63 	rsbeq	r2, r8, r3, ror #28
     a3c:	00000002 	andeq	r0, r0, r2
     a40:	0c020500 	cfstr32eq	mvfx0, [r2], {0}
     a44:	03080045 	movweq	r0, #32837	; 0x8045
     a48:	3d150124 	ldfccs	f0, [r5, #-144]
     a4c:	7a03352d 	bvc	cdf08 <__Stack_Size+0xcdb08>
     a50:	322f2f20 	eorcc	r2, pc, #128	; 0x80
     a54:	302c241c 	eorcc	r2, ip, ip, lsl r4
     a58:	0b03242c 	bleq	c9b10 <__Stack_Size+0xc9710>
     a5c:	1e3e153c 	mrcne	5, 1, r1, cr14, cr12, {1}
     a60:	21212f21 	teqcs	r1, r1, lsr #30
     a64:	2f213e23 	svccs	0x00213e23
     a68:	16032121 	strne	r2, [r3], -r1, lsr #2
     a6c:	03671766 	cmneq	r7, #26738688	; 0x1980000
     a70:	0a034a0d 	beq	d32ac <__Stack_Size+0xd2eac>
     a74:	1c243f20 	stcne	15, cr3, [r4], #-128
     a78:	03200a03 	teqeq	r0, #12288	; 0x3000
     a7c:	3d5c2076 	ldclcc	0, cr2, [ip, #-472]
     a80:	1f312b3f 	svcne	0x00312b3f
     a84:	6a222b24 	bvs	88b71c <__Stack_Size+0x88b31c>
     a88:	3122301e 	teqcc	r2, lr, lsl r0
     a8c:	0b039388 	bleq	e58b4 <__Stack_Size+0xe54b4>
     a90:	212f1458 	teqcs	pc, r8, asr r4
     a94:	d7032121 	strle	r2, [r3, -r1, lsr #2]
     a98:	67132000 	ldrvs	r2, [r3, -r0]
     a9c:	19660b03 	stmdbne	r6!, {r0, r1, r8, r9, fp}^
     aa0:	9e09034c 	cdpls	3, 0, cr0, cr9, cr12, {2}
     aa4:	164a0a03 	strbne	r0, [sl], -r3, lsl #20
     aa8:	4a0a032f 	bmi	28176c <__Stack_Size+0x28136c>
     aac:	0b039116 	bleq	e4f0c <__Stack_Size+0xe4b0c>
     ab0:	034b133c 	movteq	r1, #45884	; 0xb33c
     ab4:	4c194a0b 	ldcmi	10, cr4, [r9], {11}
     ab8:	039e0903 	orrseq	r0, lr, #49152	; 0xc000
     abc:	2f134a0b 	svccs	0x00134a0b
     ac0:	174a1003 	strbne	r1, [sl, -r3]
     ac4:	3c0a0375 	stccc	3, cr0, [sl], {117}
     ac8:	0a033d13 	beq	cff1c <__Stack_Size+0xcfb1c>
     acc:	033d1358 	teqeq	sp, #1610612737	; 0x60000001
     ad0:	22175811 	andscs	r5, r7, #1114112	; 0x110000
     ad4:	11035a5c 	tstne	r3, ip, asr sl
     ad8:	225a193c 	subscs	r1, sl, #983040	; 0xf0000
     adc:	18035a5c 	stmdane	r3, {r2, r3, r4, r6, r9, fp, ip, lr}
     ae0:	2009034a 	andcs	r0, r9, sl, asr #6
     ae4:	31694b78 	smccc	38072
     ae8:	2e79033f 	mrccs	3, 3, r0, cr9, cr15, {1}
     aec:	207a0328 	rsbscs	r0, sl, r8, lsr #6
     af0:	03597525 	cmpeq	r9, #155189248	; 0x9400000
     af4:	23194a10 	tstcs	r9, #65536	; 0x10000
     af8:	820b034c 	andhi	r0, fp, #805306369	; 0x30000001
     afc:	033c0f03 	teqeq	ip, #12	; 0xc
     b00:	03830109 	orreq	r0, r3, #1073741826	; 0x40000002
     b04:	09034a0e 	stmdbeq	r3, {r1, r2, r3, r9, fp, lr}
     b08:	14039101 	strne	r9, [r3], #-257
     b0c:	010a033c 	tsteq	sl, ip, lsr r3
     b10:	820b035a 	andhi	r0, fp, #1744830465	; 0x68000001
     b14:	193c1103 	ldmdbne	ip!, {r0, r1, r8, ip}
     b18:	303e3e23 	eorscc	r3, lr, r3, lsr #28
     b1c:	28587803 	ldmdacs	r8, {r0, r1, fp, ip, sp, lr}^
     b20:	36207803 	strtcc	r7, [r0], -r3, lsl #16
     b24:	4140224b 	cmpmi	r0, fp, asr #4
     b28:	3c0f0331 	stccc	3, cr0, [pc], {49}
     b2c:	30010903 	andcc	r0, r1, r3, lsl #18
     b30:	23241c32 	teqcs	r4, #12800	; 0x3200
     b34:	3c7c8d03 	ldclcc	13, cr8, [ip], #-12
     b38:	6f032f2f 	svcvs	0x00032f2f
     b3c:	241c242e 	ldrcs	r2, [ip], #-1070
     b40:	3c6d032f 	stclcc	3, cr0, [sp], #-188
     b44:	72032f2f 	andvc	r2, r3, #188	; 0xbc
     b48:	032f2f2e 	teqeq	pc, #184	; 0xb8
     b4c:	2f2f2e72 	svccs	0x002f2e72
     b50:	2f2e7203 	svccs	0x002e7203
     b54:	0002022f 	andeq	r0, r2, pc, lsr #4
     b58:	00d20101 	sbcseq	r0, r2, r1, lsl #2
     b5c:	00020000 	andeq	r0, r2, r0
     b60:	00000071 	andeq	r0, r0, r1, ror r0
     b64:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     b68:	0101000d 	tsteq	r1, sp
     b6c:	00000101 	andeq	r0, r0, r1, lsl #2
     b70:	00000100 	andeq	r0, r0, r0, lsl #2
     b74:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     b78:	31663233 	cmncc	r6, r3, lsr r2
     b7c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     b80:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
     b84:	73006372 	movwvc	r6, #882	; 0x372
     b88:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     b8c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     b90:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     b94:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     b98:	74730000 	ldrbtvc	r0, [r3]
     b9c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     ba0:	5f783031 	svcpl	0x00783031
     ba4:	2e727770 	mrccs	7, 3, r7, cr2, cr0, {3}
     ba8:	00010063 	andeq	r0, r1, r3, rrx
     bac:	6d747300 	ldclvs	3, cr7, [r4]
     bb0:	31663233 	cmncc	r6, r3, lsr r2
     bb4:	745f7830 	ldrbvc	r7, [pc], #2096	; bbc <__Stack_Size+0x7bc>
     bb8:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     bbc:	00020068 	andeq	r0, r2, r8, rrx
     bc0:	6d747300 	ldclvs	3, cr7, [r4]
     bc4:	31663233 	cmncc	r6, r3, lsr r2
     bc8:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]
     bcc:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
     bd0:	00000200 	andeq	r0, r0, r0, lsl #4
     bd4:	02050000 	andeq	r0, r5, #0	; 0x0
     bd8:	08004890 	stmdaeq	r0, {r4, r7, fp, lr}
     bdc:	0100d103 	tsteq	r0, r3, lsl #2
     be0:	0b032f16 	bleq	cc840 <__Stack_Size+0xcc440>
     be4:	032f164a 	teqeq	pc, #77594624	; 0x4a00000
     be8:	31184a14 	tstcc	r8, r4, lsl sl
     bec:	03212331 	teqeq	r1, #-1006632960	; 0xc4000000
     bf0:	2f164a0b 	svccs	0x00164a0b
     bf4:	4a00d803 	bmi	36c08 <__Stack_Size+0x36808>
     bf8:	660b0318 	undefined
     bfc:	164a0d03 	strbne	r0, [sl], -r3, lsl #26
     c00:	3c430359 	mcrrcc	3, 5, r0, r3, cr9
     c04:	1e221e14 	mcrne	14, 1, r1, cr2, cr4, {0}
     c08:	934d3f22 	movtls	r3, #57122	; 0xdf22
     c0c:	4a49032f 	bmi	12418d0 <__Stack_Size+0x12414d0>
     c10:	2078031a 	rsbscs	r0, r8, sl, lsl r3
     c14:	20780328 	rsbscs	r0, r8, r8, lsr #6
     c18:	31200b03 	teqcc	r0, r3, lsl #22
     c1c:	1d692323 	stclne	3, cr2, [r9, #-140]!
     c20:	3041233f 	subcc	r2, r1, pc, lsr r3
     c24:	4a7ef503 	bmi	1fbe038 <__Stack_Size+0x1fbdc38>
     c28:	024b6721 	subeq	r6, fp, #8650752	; 0x840000
     c2c:	01010001 	tsteq	r1, r1
     c30:	000001b4 	strheq	r0, [r0], -r4
     c34:	00840002 	addeq	r0, r4, r2
     c38:	01020000 	tsteq	r2, r0
     c3c:	000d0efb 	strdeq	r0, [sp], -fp
     c40:	01010101 	tsteq	r1, r1, lsl #2
     c44:	01000000 	tsteq	r0, r0
     c48:	73010000 	movwvc	r0, #4096	; 0x1000
     c4c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     c50:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     c54:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     c58:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     c5c:	6d747300 	ldclvs	3, cr7, [r4]
     c60:	31663233 	cmncc	r6, r3, lsr r2
     c64:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     c68:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
     c6c:	0000636e 	andeq	r6, r0, lr, ror #6
     c70:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     c74:	30316632 	eorscc	r6, r1, r2, lsr r6
     c78:	63725f78 	cmnvs	r2, #480	; 0x1e0
     c7c:	00632e63 	rsbeq	r2, r3, r3, ror #28
     c80:	73000001 	movwvc	r0, #1	; 0x1
     c84:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     c88:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     c8c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     c90:	00682e65 	rsbeq	r2, r8, r5, ror #28
     c94:	73000002 	movwvc	r0, #2	; 0x2
     c98:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     c9c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     ca0:	70616d5f 	rsbvc	r6, r1, pc, asr sp
     ca4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     ca8:	74730000 	ldrbtvc	r0, [r3]
     cac:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     cb0:	5f783031 	svcpl	0x00783031
     cb4:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     cb8:	00020068 	andeq	r0, r2, r8, rrx
     cbc:	05000000 	streq	r0, [r0]
     cc0:	00497002 	subeq	r7, r9, r2
     cc4:	00fc0308 	rscseq	r0, ip, r8, lsl #6
     cc8:	5b5b1401 	blpl	16c5cd4 <__Stack_Size+0x16c58d4>
     ccc:	2f4d4d69 	svccs	0x004d4d69
     cd0:	18661103 	stmdane	r6!, {r0, r1, r8, ip}^
     cd4:	2e7a0326 	cdpcs	3, 7, cr0, cr10, cr6, {1}
     cd8:	415c4d4d 	cmpmi	ip, sp, asr #26
     cdc:	3c0c0350 	stccc	3, cr0, [ip], {80}
     ce0:	06a30321 	strteq	r0, [r3], r1, lsr #6
     ce4:	79dd0320 	ldmibvc	sp, {r5, r8, r9}^
     ce8:	06a30320 	strteq	r0, [r3], r0, lsr #6
     cec:	79e50320 	stmibvc	r5!, {r5, r8, r9}^
     cf0:	212d2f20 	teqcs	sp, r0, lsr #30
     cf4:	58069a03 	stmdapl	r6, {r0, r1, r9, fp, ip, pc}
     cf8:	5879f303 	ldmdapl	r9!, {r0, r1, r8, r9, ip, sp, lr, pc}^
     cfc:	184a0c03 	stmdane	sl, {r0, r1, sl, fp}^
     d00:	21313131 	teqcs	r1, r1, lsr r1
     d04:	163c0d03 	ldrtne	r0, [ip], -r3, lsl #26
     d08:	4a14032f 	bmi	5019cc <__Stack_Size+0x5015cc>
     d0c:	214d3419 	cmpcs	sp, r9, lsl r4
     d10:	163c0c03 	ldrtne	r0, [ip], -r3, lsl #24
     d14:	4a0e032f 	bmi	3819d8 <__Stack_Size+0x3815d8>
     d18:	23313118 	teqcs	r1, #6	; 0x6
     d1c:	4a0e0321 	bmi	3819a8 <__Stack_Size+0x3815a8>
     d20:	15034b13 	strne	r4, [r3, #-2835]
     d24:	3131184a 	teqcc	r1, sl, asr #16
     d28:	11032123 	tstne	r3, r3, lsr #2
     d2c:	3131184a 	teqcc	r1, sl, asr #16
     d30:	11032123 	tstne	r3, r3, lsr #2
     d34:	3131184a 	teqcc	r1, sl, asr #16
     d38:	13032131 	movwne	r2, #12593	; 0x3131
     d3c:	5d23173c 	stcpl	7, cr1, [r3, #-240]!
     d40:	3c10035a 	ldccc	3, cr0, [r0], {90}
     d44:	10032f16 	andne	r2, r3, r6, lsl pc
     d48:	3131184a 	teqcc	r1, sl, asr #16
     d4c:	0f032123 	svceq	0x00032123
     d50:	0334184a 	teqeq	r4, #4849664	; 0x4a0000
     d54:	2723207a 	undefined
     d58:	3c09032a 	stccc	3, cr0, [r9], {42}
     d5c:	4a0c0334 	bmi	301a34 <__Stack_Size+0x301634>
     d60:	11032f16 	tstne	r3, r6, lsl pc
     d64:	034b174a 	movteq	r1, #46922	; 0xb74a
     d68:	2f164a0d 	svccs	0x00164a0d
     d6c:	164a0b03 	strbne	r0, [sl], -r3, lsl #22
     d70:	0322241c 	teqeq	r2, #469762048	; 0x1c000000
     d74:	4c21660c 	stcmi	6, cr6, [r1], #-48
     d78:	273a3022 	ldrcs	r3, [sl, -r2, lsr #32]!
     d7c:	267a7869 	ldrbtcs	r7, [sl], -r9, ror #16
     d80:	34207a03 	strtcc	r7, [r0], #-2563
     d84:	77331b25 	ldrvc	r1, [r3, -r5, lsr #22]!
     d88:	36416941 	strbcc	r6, [r1], -r1, asr #18
     d8c:	3f207803 	svccc	0x00207803
     d90:	15036741 	strne	r6, [r3, #-1857]
     d94:	5c221790 	stcpl	7, cr1, [r2], #-576
     d98:	3c14035a 	ldccc	3, cr0, [r4], {90}
     d9c:	5a5c2217 	bpl	1709600 <__Stack_Size+0x1709200>
     da0:	173c1503 	ldrne	r1, [ip, -r3, lsl #10]!
     da4:	035a5c22 	cmpeq	sl, #8704	; 0x2200
     da8:	22173c13 	andscs	r3, r7, #4864	; 0x1300
     dac:	14035a5c 	strne	r5, [r3], #-2652
     db0:	5c22173c 	stcpl	7, cr1, [r2], #-240
     db4:	3c0b035a 	stccc	3, cr0, [fp], {90}
     db8:	0b032f16 	bleq	cca18 <__Stack_Size+0xcc618>
     dbc:	032f164a 	teqeq	pc, #77594624	; 0x4a00000
     dc0:	2f174a10 	svccs	0x00174a10
     dc4:	034a1603 	movteq	r1, #42499	; 0xa603
     dc8:	30220109 	eorcc	r0, r2, r9, lsl #2
     dcc:	03943092 	orrseq	r3, r4, #146	; 0x92
     dd0:	0d038211 	sfmeq	f0, 1, [r3, #-68]
     dd4:	0359143c 	cmpeq	r9, #1006632960	; 0x3c000000
     dd8:	03193c11 	tsteq	r9, #4352	; 0x1100
     ddc:	1103660b 	tstne	r3, fp, lsl #12
     de0:	022f184a 	eoreq	r1, pc, #4849664	; 0x4a0000
     de4:	01010004 	tsteq	r1, r4
     de8:	000000b9 	strheq	r0, [r0], -r9
     dec:	00750002 	rsbseq	r0, r5, r2
     df0:	01020000 	tsteq	r2, r0
     df4:	000d0efb 	strdeq	r0, [sp], -fp
     df8:	01010101 	tsteq	r1, r1, lsl #2
     dfc:	01000000 	tsteq	r0, r0
     e00:	73010000 	movwvc	r0, #4096	; 0x1000
     e04:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     e08:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     e0c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     e10:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     e14:	6d747300 	ldclvs	3, cr7, [r4]
     e18:	31663233 	cmncc	r6, r3, lsr r2
     e1c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     e20:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
     e24:	0000636e 	andeq	r6, r0, lr, ror #6
     e28:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     e2c:	30316632 	eorscc	r6, r1, r2, lsr r6
     e30:	79735f78 	ldmdbvc	r3!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e34:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
     e38:	00632e6b 	rsbeq	r2, r3, fp, ror #28
     e3c:	73000001 	movwvc	r0, #1	; 0x1
     e40:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     e44:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     e48:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     e4c:	00682e65 	rsbeq	r2, r8, r5, ror #28
     e50:	73000002 	movwvc	r0, #2	; 0x2
     e54:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     e58:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     e5c:	70616d5f 	rsbvc	r6, r1, pc, asr sp
     e60:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     e64:	00000000 	andeq	r0, r0, r0
     e68:	4d140205 	lfmmi	f0, 4, [r4, #-20]
     e6c:	2b030800 	blcs	c2e74 <__Stack_Size+0xc2a74>
     e70:	4e301601 	cfmsuba32mi	mvax0, mvax1, mvfx0, mvfx1
     e74:	3c0b035a 	stccc	3, cr0, [fp], {90}
     e78:	0e032f16 	mcreq	15, 0, r2, cr3, cr6, {0}
     e7c:	4c30164a 	ldcmi	6, cr1, [r0], #-296
     e80:	033e6a3e 	teqeq	lr, #253952	; 0x3e000
     e84:	22164a0b 	andscs	r4, r6, #45056	; 0xb000
     e88:	0a035a5c 	beq	d7800 <__Stack_Size+0xd7400>
     e8c:	032f133c 	teqeq	pc, #-268435456	; 0xf0000000
     e90:	0a034a0e 	beq	d36d0 <__Stack_Size+0xd32d0>
     e94:	2e760301 	cdpcs	3, 7, cr0, cr6, cr1, {0}
     e98:	22200a03 	eorcs	r0, r0, #12288	; 0x3000
     e9c:	580c0378 	stmdapl	ip, {r3, r4, r5, r6, r8, r9}
     ea0:	01000402 	tsteq	r0, r2, lsl #8
     ea4:	0005eb01 	andeq	lr, r5, r1, lsl #22
     ea8:	84000200 	strhi	r0, [r0], #-512
     eac:	02000000 	andeq	r0, r0, #0	; 0x0
     eb0:	0d0efb01 	vstreq	d15, [lr, #-4]
     eb4:	01010100 	tsteq	r1, r0, lsl #2
     eb8:	00000001 	andeq	r0, r0, r1
     ebc:	01000001 	tsteq	r0, r1
     ec0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     ec4:	30316632 	eorscc	r6, r1, r2, lsr r6
     ec8:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     ecc:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     ed0:	74730063 	ldrbtvc	r0, [r3], #-99
     ed4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     ed8:	5f783031 	svcpl	0x00783031
     edc:	2f62696c 	svccs	0x0062696c
     ee0:	00636e69 	rsbeq	r6, r3, r9, ror #28
     ee4:	6d747300 	ldclvs	3, cr7, [r4]
     ee8:	31663233 	cmncc	r6, r3, lsr r2
     eec:	745f7830 	ldrbvc	r7, [pc], #2096	; ef4 <__Stack_Size+0xaf4>
     ef0:	632e6d69 	teqvs	lr, #6720	; 0x1a40
     ef4:	00000100 	andeq	r0, r0, r0, lsl #2
     ef8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     efc:	30316632 	eorscc	r6, r1, r2, lsr r6
     f00:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     f04:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     f08:	00000200 	andeq	r0, r0, r0, lsl #4
     f0c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     f10:	30316632 	eorscc	r6, r1, r2, lsr r6
     f14:	616d5f78 	smcvs	54776
     f18:	00682e70 	rsbeq	r2, r8, r0, ror lr
     f1c:	73000002 	movwvc	r0, #2	; 0x2
     f20:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     f24:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     f28:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
     f2c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     f30:	00000000 	andeq	r0, r0, r0
     f34:	4db80205 	lfmmi	f0, 4, [r8, #20]!
     f38:	c6030800 	strgt	r0, [r3], -r0, lsl #16
     f3c:	03190101 	tsteq	r9, #1073741824	; 0x40000000
     f40:	3d272079 	stccc	0, cr2, [r7, #-484]!
     f44:	28587803 	ldmdacs	r8, {r0, r1, fp, ip, sp, lr}^
     f48:	7803283f 	stmdavc	r3, {r0, r1, r2, r3, r4, r5, fp, sp}
     f4c:	72032320 	andvc	r2, r3, #-2147483648	; 0x80000000
     f50:	200e0320 	andcs	r0, lr, r0, lsr #6
     f54:	3ea13e23 	cdpcc	14, 10, cr3, cr1, cr3, {1}
     f58:	03660f03 	cmneq	r6, #12	; 0xc
     f5c:	7603010a 	strvc	r0, [r3], -sl, lsl #2
     f60:	200a0320 	andcs	r0, sl, r0, lsr #6
     f64:	7003235b 	andvc	r2, r3, fp, asr r3
     f68:	20100320 	andscs	r0, r0, r0, lsr #6
     f6c:	200c0323 	andcs	r0, ip, r3, lsr #6
     f70:	032e7403 	teqeq	lr, #50331648	; 0x3000000
     f74:	312b200c 	teqcc	fp, ip
     f78:	261d231d 	undefined
     f7c:	2e740331 	mrccs	3, 3, r0, cr4, cr1, {1}
     f80:	222e0c03 	eorcs	r0, lr, #768	; 0x300
     f84:	03665903 	cmneq	r6, #49152	; 0xc000
     f88:	59032027 	stmdbpl	r3, {r0, r1, r2, r5, sp}
     f8c:	2027034a 	eorcs	r0, r7, sl, asr #6
     f90:	3f2b4d28 	svccc	0x002b4d28
     f94:	2a324d23 	bcs	c94428 <__Stack_Size+0xc94028>
     f98:	31314735 	teqcc	r1, r5, lsr r7
     f9c:	4d2e5403 	cfstrsmi	mvf5, [lr, #-12]!
     fa0:	23202c03 	teqcs	r0, #768	; 0x300
     fa4:	0f032123 	svceq	0x00032123
     fa8:	010a0374 	tsteq	sl, r4, ror r3
     fac:	03207603 	teqeq	r0, #3145728	; 0x300000
     fb0:	235b200a 	cmpcs	fp, #10	; 0xa
     fb4:	03200c03 	teqeq	r0, #768	; 0x300
     fb8:	03232e74 	teqeq	r3, #1856	; 0x740
     fbc:	77032009 	strvc	r2, [r3, -r9]
     fc0:	200c0320 	andcs	r0, ip, r0, lsr #6
     fc4:	1d31231d 	ldcne	3, cr2, [r1, #-116]!
     fc8:	74033f23 	strvc	r3, [r3], #-3875
     fcc:	200c0320 	andcs	r0, ip, r0, lsr #6
     fd0:	66590322 	ldrbvs	r0, [r9], -r2, lsr #6
     fd4:	03202703 	teqeq	r0, #786432	; 0xc0000
     fd8:	27034a59 	smlsdcs	r3, r9, sl, r4
     fdc:	2b4d282e 	blcs	134b09c <__Stack_Size+0x134ac9c>
     fe0:	5f4d313f 	svcpl	0x004d313f
     fe4:	2b314d2b 	blcs	c54498 <__Stack_Size+0xc54098>
     fe8:	3c540323 	mrrccc	3, 2, r0, r4, cr3
     fec:	3c2d034d 	stccc	3, cr0, [sp], #-308
     ff0:	03212323 	teqeq	r1, #-1946157056	; 0x8c000000
     ff4:	0a03740f 	beq	de038 <__Stack_Size+0xddc38>
     ff8:	20760301 	rsbscs	r0, r6, r1, lsl #6
     ffc:	5b200a03 	blpl	803810 <__Stack_Size+0x803410>
    1000:	200c0323 	andcs	r0, ip, r3, lsr #6
    1004:	232e7403 	teqcs	lr, #50331648	; 0x3000000
    1008:	03200903 	teqeq	r0, #49152	; 0xc000
    100c:	0c032077 	stceq	0, cr2, [r3], {119}
    1010:	31231d20 	teqcc	r3, r0, lsr #26
    1014:	033f231d 	teqeq	pc, #1946157056	; 0x74000000
    1018:	0c032074 	stceq	0, cr2, [r3], {116}
    101c:	59032220 	stmdbpl	r3, {r5, r9, sp}
    1020:	20270366 	eorcs	r0, r7, r6, ror #6
    1024:	034a5903 	movteq	r5, #43267	; 0xa903
    1028:	4d282e27 	stcmi	14, cr2, [r8, #-156]!
    102c:	4d313f2b 	ldcmi	15, cr3, [r1, #-172]!
    1030:	314d2b5f 	cmpcc	sp, pc, asr fp
    1034:	5403232b 	strpl	r2, [r3], #-811
    1038:	2d034d3c 	stccs	13, cr4, [r3, #-240]
    103c:	21232320 	teqcs	r3, r0, lsr #6
    1040:	03740f03 	cmneq	r4, #12	; 0xc
    1044:	7603010a 	strvc	r0, [r3], -sl, lsl #2
    1048:	200a0320 	andcs	r0, sl, r0, lsr #6
    104c:	2073035b 	rsbscs	r0, r3, fp, asr r3
    1050:	31200d03 	teqcc	r0, r3, lsl #26
    1054:	03201203 	teqeq	r0, #805306368	; 0x30000000
    1058:	2631206e 	ldrtcs	r2, [r1], -lr, rrx
    105c:	03207a03 	teqeq	r0, #12288	; 0x3000
    1060:	7a032012 	bvc	c90b0 <__Stack_Size+0xc8cb0>
    1064:	1b302620 	blne	c0a8ec <__Stack_Size+0xc0a4ec>
    1068:	90590325 	subsls	r0, r9, r5, lsr #6
    106c:	252e2703 	strcs	r2, [lr, #-1795]!
    1070:	03231d31 	teqeq	r3, #3136	; 0xc40
    1074:	3f4d4a67 	svccc	0x004d4a67
    1078:	31201703 	teqcc	r0, r3, lsl #14
    107c:	4d206603 	stcmi	6, cr6, [r0, #-12]!
    1080:	03231d31 	teqeq	r3, #3136	; 0xc40
    1084:	03213c17 	teqeq	r1, #5888	; 0x1700
    1088:	0903740f 	stmdbeq	r3, {r0, r1, r2, r3, sl, ip, sp, lr}
    108c:	20770301 	rsbscs	r0, r7, r1, lsl #6
    1090:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    1094:	2013a003 	andscs	sl, r3, r3
    1098:	206ce303 	rsbcs	lr, ip, r3, lsl #6
    109c:	20139d03 	andscs	r9, r3, r3, lsl #26
    10a0:	4a6ce303 	bmi	1b39cb4 <__Stack_Size+0x1b398b4>
    10a4:	3c139d03 	ldccc	13, cr9, [r3], {3}
    10a8:	4d242122 	stfmis	f2, [r4, #-136]!
    10ac:	231d312b 	tstcs	sp, #-1073741814	; 0xc000000a
    10b0:	23322a21 	teqcs	r2, #135168	; 0x21000
    10b4:	7cef0321 	stclvc	3, cr0, [pc], #132
    10b8:	6fea0320 	svcvs	0x00ea0320
    10bc:	10960320 	addsne	r0, r6, r0, lsr #6
    10c0:	e9035b20 	stmdb	r3, {r5, r8, r9, fp, ip, lr}
    10c4:	c4034a6f 	strgt	r4, [r3], #-2671
    10c8:	bf032e13 	svclt	0x00032e13
    10cc:	c103206c 	tstgt	r3, ip, rrx
    10d0:	bf032e13 	svclt	0x00032e13
    10d4:	c1034a6c 	tstgt	r3, ip, ror #20
    10d8:	21222e13 	teqcs	r2, r3, lsl lr
    10dc:	7a034224 	bvc	d1974 <__Stack_Size+0xd1574>
    10e0:	331b262e 	tstcc	fp, #48234496	; 0x2e00000
    10e4:	322a251b 	eorcc	r2, sl, #113246208	; 0x6c00000
    10e8:	2131241c 	teqcs	r1, ip, lsl r4
    10ec:	207cdb03 	rsbscs	sp, ip, r3, lsl #22
    10f0:	206fd803 	rsbcs	sp, pc, r3, lsl #16
    10f4:	2010a803 	andscs	sl, r0, r3, lsl #16
    10f8:	6fd7035b 	svcvs	0x00d7035b
    10fc:	13ea0374 	mvnne	r0, #-805306367	; 0xd0000001
    1100:	25216866 	strcs	r6, [r1, #-2150]!
    1104:	1c242a32 	stcne	10, cr2, [r4], #-200
    1108:	2a321c24 	bcs	c881a0 <__Stack_Size+0xc87da0>
    110c:	31241c24 	teqcc	r4, r4, lsr #24
    1110:	7cc80321 	stclvc	3, cr0, [r8], {33}
    1114:	6fc60320 	svcvs	0x00c60320
    1118:	10ba0320 	adcsne	r0, sl, r0, lsr #6
    111c:	d4035b20 	strle	r5, [r3], #-2848
    1120:	21684a03 	cmncs	r8, r3, lsl #20
    1124:	242a4025 	strtcs	r4, [sl], #-37
    1128:	241c321c 	ldrcs	r3, [ip], #-540
    112c:	241c322a 	ldrcs	r3, [ip], #-554
    1130:	b5032131 	strlt	r2, [r3, #-305]
    1134:	b403207c 	strlt	r2, [r3], #-124
    1138:	cc03206f 	stcgt	0, cr2, [r3], {111}
    113c:	035b2010 	cmpeq	fp, #16	; 0x10
    1140:	03666fb3 	cmneq	r6, #716	; 0x2cc
    1144:	1b032010 	blne	c918c <__Stack_Size+0xc8d8c>
    1148:	2e6d032e 	cdpcs	3, 6, cr0, cr13, cr14, {1}
    114c:	03200a03 	teqeq	r0, #12288	; 0x3000
    1150:	0a032076 	beq	c9330 <__Stack_Size+0xc8f30>
    1154:	6609034a 	strvs	r0, [r9], -sl, asr #6
    1158:	2e12cd03 	cdpcs	13, 1, cr12, cr2, cr3, {0}
    115c:	69242168 	stmdbvs	r4!, {r3, r5, r6, r8, sp}
    1160:	231d232b 	tstcs	sp, #-1409286144	; 0xac000000
    1164:	03213f21 	teqeq	r1, #132	; 0x84
    1168:	03207cef 	teqeq	r0, #61184	; 0xef00
    116c:	032070bc 	teqeq	r0, #188	; 0xbc
    1170:	5b2e0fc4 	blpl	b85088 <__Stack_Size+0xb84c88>
    1174:	4a03ad03 	bmi	ec588 <__Stack_Size+0xec188>
    1178:	42242168 	eormi	r2, r4, #26	; 0x1a
    117c:	262e7a03 	strtcs	r7, [lr], -r3, lsl #20
    1180:	251b331b 	ldrcs	r3, [fp, #-795]
    1184:	2131322a 	teqcs	r1, sl, lsr #4
    1188:	207cdb03 	rsbscs	sp, ip, r3, lsl #22
    118c:	03910369 	orrseq	r0, r1, #-1543503871	; 0xa4000001
    1190:	24216866 	strtcs	r6, [r1], #-2150
    1194:	2e7a0342 	cdpcs	3, 7, cr0, cr10, cr2, {2}
    1198:	1b331b26 	blne	cc7e38 <__Stack_Size+0xcc7a38>
    119c:	1c322a25 	ldcne	10, cr2, [r2], #-148
    11a0:	03213124 	teqeq	r1, #9	; 0x9
    11a4:	03207cdb 	teqeq	r0, #56064	; 0xdb00
    11a8:	032070af 	teqeq	r0, #175	; 0xaf
    11ac:	5b2e0fd1 	blpl	b850f8 <__Stack_Size+0xb84cf8>
    11b0:	6602e303 	strvs	lr, [r2], -r3, lsl #6
    11b4:	40242168 	eormi	r2, r4, r8, ror #2
    11b8:	321c242a 	andscc	r2, ip, #704643072	; 0x2a000000
    11bc:	242a241c 	strtcs	r2, [sl], #-1052
    11c0:	ef032123 	svc	0x00032123
    11c4:	0369207c 	cmneq	r9, #124	; 0x7c
    11c8:	034a70d0 	movteq	r7, #41168	; 0xa0d0
    11cc:	0d032e0e 	stceq	14, cr2, [r3, #-56]
    11d0:	0b03f701 	bleq	feddc <__Stack_Size+0xfe9dc>
    11d4:	3d3d142e 	cfldrscc	mvf1, [sp, #-184]!
    11d8:	032f2121 	teqeq	pc, #1073741832	; 0x40000008
    11dc:	3d142e0b 	ldccc	14, cr2, [r4, #-44]
    11e0:	21212121 	teqcs	r1, r1, lsr #2
    11e4:	03212121 	teqeq	r1, #1073741832	; 0x40000008
    11e8:	3d142e0b 	ldccc	14, cr2, [r4, #-44]
    11ec:	213d3d21 	teqcs	sp, r1, lsr #26
    11f0:	14200b03 	strtne	r0, [r0], #-2819
    11f4:	2121213d 	teqcs	r1, sp, lsr r1
    11f8:	03212121 	teqeq	r1, #1073741832	; 0x40000008
    11fc:	2317200c 	tstcs	r7, #12	; 0xc
    1200:	0c03685d 	stceq	8, cr6, [r3], {93}
    1204:	6b23172e 	blvs	8c6ec4 <__Stack_Size+0x8c6ac4>
    1208:	20170368 	andscs	r0, r7, r8, ror #6
    120c:	5a5d2319 	bpl	1749e78 <__Stack_Size+0x1749a78>
    1210:	19201203 	stmdbne	r0!, {r0, r1, r9, ip}
    1214:	20170321 	andscs	r0, r7, r1, lsr #6
    1218:	15033d19 	strne	r3, [r3, #-3353]
    121c:	5d231920 	stcpl	9, cr1, [r3, #-128]!
    1220:	200b035a 	andcs	r0, fp, sl, asr r3
    1224:	10036717 	andne	r6, r3, r7, lsl r7
    1228:	0292032e 	addseq	r0, r2, #-1207959552	; 0xb8000000
    122c:	234d2301 	movtcs	r2, #54017	; 0xd301
    1230:	207dee03 	rsbscs	lr, sp, r3, lsl #28
    1234:	2e160359 	mrccs	3, 0, r0, cr6, cr9, {2}
    1238:	78032820 	stmdavc	r3, {r5, fp, sp}
    123c:	ea033620 	b	ceac4 <__Stack_Size+0xce6c4>
    1240:	2168200f 	cmncs	r8, pc
    1244:	7a033424 	bvc	ce2dc <__Stack_Size+0xcdedc>
    1248:	7a03262e 	bvc	cab08 <__Stack_Size+0xca708>
    124c:	331b2620 	tstcc	fp, #33554432	; 0x2000000
    1250:	242a322a 	strtcs	r3, [sl], #-554
    1254:	682e4503 	stmdavs	lr!, {r0, r1, r8, sl, lr}
    1258:	2a402421 	bcs	100a2e4 <__Stack_Size+0x1009ee4>
    125c:	1c321c24 	ldcne	12, cr1, [r2], #-144
    1260:	23242a32 	teqcs	r4, #204800	; 0x32000
    1264:	729f0321 	addsvc	r0, pc, #-2080374784	; 0x84000000
    1268:	314d2320 	cmpcc	sp, r0, lsr #6
    126c:	207e9a03 	rsbscs	r9, lr, r3, lsl #20
    1270:	2e180359 	mrccs	3, 0, r0, cr8, cr9, {2}
    1274:	0100df03 	tsteq	r0, r3, lsl #30
    1278:	a5038534 	strge	r8, [r3, #-1332]
    127c:	4e25207f 	mcrmi	0, 1, r2, cr5, cr15, {3}
    1280:	18032131 	stmdane	r3, {r0, r4, r5, r8, sp}
    1284:	012d0320 	teqeq	sp, r0, lsr #6
    1288:	55038534 	strpl	r8, [r3, #-1332]
    128c:	18035920 	stmdane	r3, {r5, r8, fp, ip, lr}
    1290:	0109032e 	tsteq	r9, lr, lsr #6
    1294:	03218534 	teqeq	r1, #218103808	; 0xd000000
    1298:	23182011 	tstcs	r8, #17	; 0x11
    129c:	2e120321 	cdpcs	3, 1, cr0, cr2, cr1, {1}
    12a0:	234d2319 	movtcs	r2, #54041	; 0xd319
    12a4:	20150321 	andscs	r0, r5, r1, lsr #6
    12a8:	234d231a 	movtcs	r2, #54042	; 0xd31a
    12ac:	201c0321 	andscs	r0, ip, r1, lsr #6
    12b0:	03010c03 	movweq	r0, #7171	; 0x1c03
    12b4:	0f032e74 	svceq	0x00032e74
    12b8:	33272320 	teqcc	r7, #-2147483648	; 0x80000000
    12bc:	77033329 	strvc	r3, [r3, -r9, lsr #6]
    12c0:	03253220 	teqeq	r5, #2	; 0x2
    12c4:	25322077 	ldrcs	r2, [r2, #-119]!
    12c8:	33207703 	teqcc	r0, #786432	; 0xc0000
    12cc:	2e780332 	mrccs	3, 3, r0, cr8, cr2, {1}
    12d0:	23233232 	teqcs	r3, #536870915	; 0x20000003
    12d4:	11032123 	tstne	r3, r3, lsr #2
    12d8:	4d23192e 	stcmi	9, cr1, [r3, #-184]!
    12dc:	11032123 	tstne	r3, r3, lsr #2
    12e0:	4d231920 	stcmi	9, cr1, [r3, #-128]!
    12e4:	1103213f 	tstne	r3, pc, lsr r1
    12e8:	4d231920 	stcmi	9, cr1, [r3, #-128]!
    12ec:	11032123 	tstne	r3, r3, lsr #2
    12f0:	4d231820 	stcmi	8, cr1, [r3, #-128]!
    12f4:	0d03213f 	stfeqs	f2, [r3, #-252]
    12f8:	5d231720 	stcpl	7, cr1, [r3, #-128]!
    12fc:	2e0c0368 	cdpcs	3, 0, cr0, cr12, cr8, {3}
    1300:	685d2317 	ldmdavs	sp, {r0, r1, r2, r4, r8, r9, sp}^
    1304:	172e0d03 	strne	r0, [lr, -r3, lsl #26]!
    1308:	03685d23 	cmneq	r8, #2240	; 0x8c0
    130c:	23172e0d 	tstcs	r7, #208	; 0xd0
    1310:	1003685d 	andne	r6, r3, sp, asr r8
    1314:	4d23192e 	stcmi	9, cr1, [r3, #-184]!
    1318:	10032123 	andne	r2, r3, r3, lsr #2
    131c:	4d231920 	stcmi	9, cr1, [r3, #-128]!
    1320:	1003213f 	andne	r2, r3, pc, lsr r1
    1324:	4d231920 	stcmi	9, cr1, [r3, #-128]!
    1328:	10032123 	andne	r2, r3, r3, lsr #2
    132c:	4d231920 	stcmi	9, cr1, [r3, #-128]!
    1330:	0f03213f 	svceq	0x0003213f
    1334:	4d231a20 	fstmdbsmi	r3!, {s2-s33}
    1338:	0f032123 	svceq	0x00032123
    133c:	4d231a20 	fstmdbsmi	r3!, {s2-s33}
    1340:	0f03213f 	svceq	0x0003213f
    1344:	4d231a20 	fstmdbsmi	r3!, {s2-s33}
    1348:	0f032123 	svceq	0x00032123
    134c:	4d231a20 	fstmdbsmi	r3!, {s2-s33}
    1350:	0f03213f 	svceq	0x0003213f
    1354:	4d231920 	stcmi	9, cr1, [r3, #-128]!
    1358:	0f032123 	svceq	0x00032123
    135c:	31231920 	teqcc	r3, r0, lsr #18
    1360:	0f03213f 	svceq	0x0003213f
    1364:	4d231920 	stcmi	9, cr1, [r3, #-128]!
    1368:	0f032123 	svceq	0x00032123
    136c:	31231920 	teqcc	r3, r0, lsr #18
    1370:	0f03213f 	svceq	0x0003213f
    1374:	4b231920 	blmi	8c77fc <__Stack_Size+0x8c73fc>
    1378:	0e032123 	adfeqsp	f2, f3, f3
    137c:	4b231920 	blmi	8c7804 <__Stack_Size+0x8c7404>
    1380:	0f032123 	svceq	0x00032123
    1384:	4b231920 	blmi	8c780c <__Stack_Size+0x8c740c>
    1388:	0e03213f 	mcreq	1, 0, r2, cr3, cr15, {1}
    138c:	4b231920 	blmi	8c7814 <__Stack_Size+0x8c7414>
    1390:	0f03213f 	svceq	0x0003213f
    1394:	4b231920 	blmi	8c781c <__Stack_Size+0x8c741c>
    1398:	0e03213f 	mcreq	1, 0, r2, cr3, cr15, {1}
    139c:	4b231920 	blmi	8c7824 <__Stack_Size+0x8c7424>
    13a0:	0f03213f 	svceq	0x0003213f
    13a4:	4b231920 	blmi	8c782c <__Stack_Size+0x8c742c>
    13a8:	1303213f 	movwne	r2, #12607	; 0x313f
    13ac:	1d311920 	ldcne	9, cr1, [r1, #-128]!
    13b0:	11034b85 	smlabbne	r3, r5, fp, r4
    13b4:	1d311920 	ldcne	9, cr1, [r1, #-128]!
    13b8:	1d034b85 	vstrne	d4, [r3, #-532]
    13bc:	79031920 	stmdbvc	r3, {r5, r8, fp, ip}
    13c0:	7903272e 	stmdbvc	r3, {r1, r2, r3, r5, r8, r9, sl, sp}
    13c4:	033e2720 	teqeq	lr, #8388608	; 0x800000
    13c8:	22278277 	eorcs	r8, r7, #1879048199	; 0x70000007
    13cc:	af5e9323 	svcge	0x005e9323
    13d0:	2e0c0368 	cdpcs	3, 0, cr0, cr12, cr8, {3}
    13d4:	685d2317 	ldmdavs	sp, {r0, r1, r2, r4, r8, r9, sp}^
    13d8:	172e0e03 	strne	r0, [lr, -r3, lsl #28]!
    13dc:	03685d23 	cmneq	r8, #2240	; 0x8c0
    13e0:	23172e0c 	tstcs	r7, #192	; 0xc0
    13e4:	0e03685d 	mcreq	8, 0, r6, cr3, cr13, {2}
    13e8:	4b69182e 	blmi	1a474a8 <__Stack_Size+0x1a470a8>
    13ec:	192e1703 	stmdbne	lr!, {r0, r1, r8, r9, sl, ip}
    13f0:	11034b69 	tstne	r3, r9, ror #22
    13f4:	4b69182e 	blmi	1a474b4 <__Stack_Size+0x1a470b4>
    13f8:	182e1003 	stmdane	lr!, {r0, r1, ip}
    13fc:	0b034b69 	bleq	d41a8 <__Stack_Size+0xd3da8>
    1400:	0321172e 	teqeq	r1, #12058624	; 0xb80000
    1404:	2117200b 	tstcs	r7, fp
    1408:	17200c03 	strne	r0, [r0, -r3, lsl #24]!
    140c:	200c0321 	andcs	r0, ip, r1, lsr #6
    1410:	0c032117 	stfeqs	f2, [r3], {23}
    1414:	03211720 	teqeq	r1, #8388608	; 0x800000
    1418:	2f17200c 	svccs	0x0017200c
    141c:	182e1203 	stmdane	lr!, {r0, r1, r9, ip}
    1420:	12034b69 	andne	r4, r3, #107520	; 0x1a400
    1424:	6769182e 	strbvs	r1, [r9, -lr, lsr #16]!
    1428:	182e1203 	stmdane	lr!, {r0, r1, r9, ip}
    142c:	12034b69 	andne	r4, r3, #107520	; 0x1a400
    1430:	6769182e 	strbvs	r1, [r9, -lr, lsr #16]!
    1434:	182e1003 	stmdane	lr!, {r0, r1, ip}
    1438:	0a034b3f 	beq	d413c <__Stack_Size+0xd3d3c>
    143c:	032f1720 	teqeq	pc, #8388608	; 0x800000
    1440:	2f172e0b 	svccs	0x00172e0b
    1444:	172e0b03 	strne	r0, [lr, -r3, lsl #22]!
    1448:	2e0b032f 	cdpcs	3, 0, cr0, cr11, cr15, {1}
    144c:	0a033d17 	beq	d08b0 <__Stack_Size+0xd04b0>
    1450:	032f1720 	teqeq	pc, #8388608	; 0x800000
    1454:	2f172e0a 	svccs	0x00172e0a
    1458:	1a2e1803 	bne	b8746c <__Stack_Size+0xb8706c>
    145c:	03580903 	cmpeq	r8, #49152	; 0xc000
    1460:	4b182018 	blmi	6094c8 <__Stack_Size+0x6090c8>
    1464:	032e1503 	teqeq	lr, #12582912	; 0xc00000
    1468:	22220109 	eorcs	r0, r2, #1073741826	; 0x40000002
    146c:	03900903 	orrseq	r0, r0, #49152	; 0xc000
    1470:	4b182015 	blmi	6094cc <__Stack_Size+0x6090cc>
    1474:	2e69b203 	cdpcs	2, 6, cr11, cr9, cr3, {0}
    1478:	1c241c24 	stcne	12, cr1, [r4], #-144
    147c:	59d90824 	ldmibpl	r9, {r2, r5, fp}^
    1480:	4b324b40 	blmi	c94188 <__Stack_Size+0xc93d88>
    1484:	4b324b32 	blmi	c94154 <__Stack_Size+0xc93d54>
    1488:	4b324b32 	blmi	c94158 <__Stack_Size+0xc93d58>
    148c:	025e595c 	subseq	r5, lr, #1507328	; 0x170000
    1490:	01010009 	tsteq	r1, r9
    1494:	000001fa 	strdeq	r0, [r0], -sl
    1498:	009b0002 	addseq	r0, fp, r2
    149c:	01020000 	tsteq	r2, r0
    14a0:	000d0efb 	strdeq	r0, [sp], -fp
    14a4:	01010101 	tsteq	r1, r1, lsl #2
    14a8:	01000000 	tsteq	r0, r0
    14ac:	73010000 	movwvc	r0, #4096	; 0x1000
    14b0:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    14b4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    14b8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    14bc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    14c0:	6d747300 	ldclvs	3, cr7, [r4]
    14c4:	31663233 	cmncc	r6, r3, lsr r2
    14c8:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    14cc:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
    14d0:	0000636e 	andeq	r6, r0, lr, ror #6
    14d4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    14d8:	30316632 	eorscc	r6, r1, r2, lsr r6
    14dc:	73755f78 	cmnvc	r5, #480	; 0x1e0
    14e0:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    14e4:	00010063 	andeq	r0, r1, r3, rrx
    14e8:	6d747300 	ldclvs	3, cr7, [r4]
    14ec:	31663233 	cmncc	r6, r3, lsr r2
    14f0:	745f7830 	ldrbvc	r7, [pc], #2096	; 14f8 <__Stack_Size+0x10f8>
    14f4:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    14f8:	00020068 	andeq	r0, r2, r8, rrx
    14fc:	6d747300 	ldclvs	3, cr7, [r4]
    1500:	31663233 	cmncc	r6, r3, lsr r2
    1504:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]
    1508:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
    150c:	00000200 	andeq	r0, r0, r0, lsl #4
    1510:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1514:	30316632 	eorscc	r6, r1, r2, lsr r6
    1518:	73755f78 	cmnvc	r5, #480	; 0x1e0
    151c:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    1520:	00020068 	andeq	r0, r2, r8, rrx
    1524:	6d747300 	ldclvs	3, cr7, [r4]
    1528:	31663233 	cmncc	r6, r3, lsr r2
    152c:	725f7830 	subsvc	r7, pc, #3145728	; 0x300000
    1530:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    1534:	00000200 	andeq	r0, r0, r0, lsl #4
    1538:	02050000 	andeq	r0, r5, #0	; 0x0
    153c:	08005b40 	stmdaeq	r0, {r6, r8, r9, fp, ip, lr}
    1540:	0101e803 	tsteq	r1, r3, lsl #16
    1544:	213d3d14 	teqcs	sp, r4, lsl sp
    1548:	033d3d21 	teqeq	sp, #2112	; 0x840
    154c:	18032e0f 	stmdane	r3, {r0, r1, r2, r3, r9, sl, fp, sp}
    1550:	3c730301 	ldclcc	3, cr0, [r3], #-4
    1554:	03200d03 	teqeq	r0, #192	; 0xc0
    1558:	0b035875 	bleq	d7734 <__Stack_Size+0xd7334>
    155c:	2e75032e 	cdpcs	3, 7, cr0, cr5, cr14, {1}
    1560:	03200b03 	teqeq	r0, #3072	; 0xc00
    1564:	0b032075 	bleq	c9740 <__Stack_Size+0xc9340>
    1568:	0b033d20 	bleq	d09f0 <__Stack_Size+0xd05f0>
    156c:	213d1420 	teqcs	sp, r0, lsr #8
    1570:	0e032121 	adfeqsp	f2, f3, f1
    1574:	5d23172e 	stcpl	7, cr1, [r3, #-184]!
    1578:	2e1c0368 	cdpcs	3, 1, cr0, cr12, cr8, {3}
    157c:	41010d03 	tstmi	r1, r3, lsl #26
    1580:	033c6e03 	teqeq	ip, #48	; 0x30
    1584:	03302012 	teqeq	r0, #18	; 0x12
    1588:	14032e6c 	strne	r2, [r3], #-3692
    158c:	3e302220 	cdpcc	2, 3, cr2, cr0, cr0, {1}
    1590:	40222232 	eormi	r2, r2, r2, lsr r2
    1594:	3c13034c 	ldccc	3, cr0, [r3], {76}
    1598:	5a5e2418 	bpl	178a600 <__Stack_Size+0x178a200>
    159c:	18200d03 	stmdane	r0!, {r0, r1, r8, sl, fp}
    15a0:	10034b68 	andne	r4, r3, r8, ror #22
    15a4:	4b67172e 	blmi	19c7264 <__Stack_Size+0x19c6e64>
    15a8:	172e0e03 	strne	r0, [lr, -r3, lsl #28]!
    15ac:	03685d23 	cmneq	r8, #2240	; 0x8c0
    15b0:	67172e11 	undefined
    15b4:	2e0e034b 	cdpcs	3, 0, cr0, cr14, cr11, {2}
    15b8:	685d2317 	ldmdavs	sp, {r0, r1, r2, r4, r8, r9, sp}^
    15bc:	182e0d03 	stmdane	lr!, {r0, r1, r8, sl, fp}
    15c0:	200c033d 	andcs	r0, ip, sp, lsr r3
    15c4:	0c033d17 	stceq	13, cr3, [r3], {23}
    15c8:	03591720 	cmpeq	r9, #8388608	; 0x800000
    15cc:	3e17200d 	wxorcc	wr2, wr7, wr13
    15d0:	2e0e0359 	mcrcs	3, 0, r0, cr14, cr9, {2}
    15d4:	034b4c17 	movteq	r4, #48151	; 0xbc17
    15d8:	23172e0e 	tstcs	r7, #224	; 0xe0
    15dc:	0e03685d 	mcreq	8, 0, r6, cr3, cr13, {2}
    15e0:	5d23172e 	stcpl	7, cr1, [r3, #-184]!
    15e4:	2e0e0368 	cdpcs	3, 0, cr0, cr14, cr8, {3}
    15e8:	685d2317 	ldmdavs	sp, {r0, r1, r2, r4, r8, r9, sp}^
    15ec:	172e1003 	strne	r1, [lr, -r3]!
    15f0:	0e034b67 	fnmacdeq	d4, d3, d23
    15f4:	5d23172e 	stcpl	7, cr1, [r3, #-184]!
    15f8:	2e190368 	cdpcs	3, 1, cr0, cr9, cr8, {3}
    15fc:	5809031a 	stmdapl	r9, {r1, r3, r4, r8, r9}
    1600:	18202303 	stmdane	r0!, {r0, r1, r8, r9, sp}
    1604:	2e1a034b 	cdpcs	3, 1, cr0, cr10, cr11, {2}
    1608:	41010a03 	tstmi	r1, r3, lsl #20
    160c:	242c305a 	strtcs	r3, [ip], #-90
    1610:	3d4f3230 	sfmcc	f3, 2, [pc, #-192]
    1614:	9e0a0330 	mcrls	3, 0, r0, cr10, cr0, {1}
    1618:	032e2303 	teqeq	lr, #201326592	; 0xc000000
    161c:	0375010b 	cmneq	r5, #-1073741822	; 0xc0000002
    1620:	032079a6 	teqeq	r0, #2719744	; 0x298000
    1624:	09030115 	stmdbeq	r3, {r0, r2, r4, r8}
    1628:	20790320 	rsbscs	r0, r9, r0, lsr #6
    162c:	5f033151 	svcpl	0x00033151
    1630:	202d0320 	eorcs	r0, sp, r0, lsr #6
    1634:	03205303 	teqeq	r0, #201326592	; 0xc000000
    1638:	7603202d 	strvc	r2, [r3], -sp, lsr #32
    163c:	2e0a0320 	cdpcs	3, 0, cr0, cr10, cr0, {1}
    1640:	032e7603 	teqeq	lr, #3145728	; 0x300000
    1644:	76032e0a 	strvc	r2, [r3], -sl, lsl #28
    1648:	2e0a0320 	cdpcs	3, 0, cr0, cr10, cr0, {1}
    164c:	2009033f 	andcs	r0, r9, pc, lsr r3
    1650:	03207903 	teqeq	r0, #49152	; 0xc000
    1654:	39034a4e 	stmdbcc	r3, {r1, r2, r3, r6, r9, fp, lr}
    1658:	20470320 	subcs	r0, r7, r0, lsr #6
    165c:	03203903 	teqeq	r0, #49152	; 0xc000
    1660:	12032047 	andne	r2, r3, #71	; 0x47
    1664:	202b0320 	eorcs	r0, fp, r0, lsr #6
    1668:	200b033d 	andcs	r0, fp, sp, lsr r3
    166c:	22207503 	eorcs	r7, r0, #12582912	; 0xc00000
    1670:	32832432 	addcc	r2, r3, #838860800	; 0x32000000
    1674:	4b93321c 	blmi	fe4cdeec <SCS_BASE+0x1e4bfeec>
    1678:	667efd03 	ldrbtvs	pc, [lr], -r3, lsl #26
    167c:	1c241c24 	stcne	12, cr1, [r4], #-144
    1680:	59230824 	stmdbpl	r3!, {r2, r5, fp}
    1684:	5940596a 	stmdbpl	r0, {r1, r3, r5, r6, r8, fp, ip, lr}^
    1688:	59405940 	stmdbpl	r0, {r6, r8, fp, ip, lr}^
    168c:	0006025e 	andeq	r0, r6, lr, asr r2
    1690:	00a00101 	adceq	r0, r0, r1, lsl #2
    1694:	00020000 	andeq	r0, r2, r0
    1698:	00000039 	andeq	r0, r0, r9, lsr r0
    169c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    16a0:	0101000d 	tsteq	r1, sp
    16a4:	00000101 	andeq	r0, r0, r1, lsl #2
    16a8:	00000100 	andeq	r0, r0, r0, lsl #2
    16ac:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
    16b0:	31663233 	cmncc	r6, r3, lsr r2
    16b4:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    16b8:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    16bc:	00006372 	andeq	r6, r0, r2, ror r3
    16c0:	74726f63 	ldrbtvc	r6, [r2], #-3939
    16c4:	336d7865 	cmncc	sp, #6619136	; 0x650000
    16c8:	63616d5f 	cmnvs	r1, #6080	; 0x17c0
    16cc:	732e6f72 	teqvc	lr, #456	; 0x1c8
    16d0:	00000100 	andeq	r0, r0, r0, lsl #2
    16d4:	02050000 	andeq	r0, r5, #0	; 0x0
    16d8:	08005efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, lr}
    16dc:	21013403 	tstcs	r1, r3, lsl #8
    16e0:	21200b03 	teqcs	r0, r3, lsl #22
    16e4:	21200b03 	teqcs	r0, r3, lsl #22
    16e8:	2f200b03 	svccs	0x00200b03
    16ec:	2f200b03 	svccs	0x00200b03
    16f0:	2f200b03 	svccs	0x00200b03
    16f4:	21200b03 	teqcs	r0, r3, lsl #22
    16f8:	2f200b03 	svccs	0x00200b03
    16fc:	2f200b03 	svccs	0x00200b03
    1700:	200a032f 	andcs	r0, sl, pc, lsr #6
    1704:	200b032f 	andcs	r0, fp, pc, lsr #6
    1708:	200b032f 	andcs	r0, fp, pc, lsr #6
    170c:	200b032f 	andcs	r0, fp, pc, lsr #6
    1710:	200a032f 	andcs	r0, sl, pc, lsr #6
    1714:	200b0321 	andcs	r0, fp, r1, lsr #6
    1718:	200b0321 	andcs	r0, fp, r1, lsr #6
    171c:	200b0321 	andcs	r0, fp, r1, lsr #6
    1720:	200b0321 	andcs	r0, fp, r1, lsr #6
    1724:	200b032f 	andcs	r0, fp, pc, lsr #6
    1728:	200a032f 	andcs	r0, sl, pc, lsr #6
    172c:	200b0321 	andcs	r0, fp, r1, lsr #6
    1730:	00010221 	andeq	r0, r1, r1, lsr #4
    1734:	005a0101 	subseq	r0, sl, r1, lsl #2
    1738:	00020000 	andeq	r0, r2, r0
    173c:	0000003b 	andeq	r0, r0, fp, lsr r0
    1740:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1744:	0101000d 	tsteq	r1, sp
    1748:	00000101 	andeq	r0, r0, r1, lsl #2
    174c:	00000100 	andeq	r0, r0, r0, lsl #2
    1750:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
    1754:	31663233 	cmncc	r6, r3, lsr r2
    1758:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    175c:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    1760:	00006372 	andeq	r6, r0, r2, ror r3
    1764:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1768:	30316632 	eorscc	r6, r1, r2, lsr r6
    176c:	65765f78 	ldrbvs	r5, [r6, #-3960]!
    1770:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    1774:	0100632e 	tsteq	r0, lr, lsr #6
    1778:	00000000 	andeq	r0, r0, r0
    177c:	5f6c0205 	svcpl	0x006c0205
    1780:	91030800 	tstls	r3, r0, lsl #16
    1784:	27580101 	ldrbcs	r0, [r8, -r1, lsl #2]
    1788:	2260563e 	rsbcs	r5, r0, #65011712	; 0x3e00000
    178c:	022f3648 	eoreq	r3, pc, #75497472	; 0x4800000
    1790:	0101000e 	tsteq	r1, lr
    1794:	00000070 	andeq	r0, r0, r0, ror r0
    1798:	00570002 	subseq	r0, r7, r2
    179c:	01020000 	tsteq	r2, r0
    17a0:	000d0efb 	strdeq	r0, [sp], -fp
    17a4:	01010101 	tsteq	r1, r1, lsl #2
    17a8:	01000000 	tsteq	r0, r0
    17ac:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    17b0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    17b4:	2f2e2e2f 	svccs	0x002e2e2f
    17b8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    17bc:	63672f2e 	cmnvs	r7, #184	; 0xb8
    17c0:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    17c4:	2f302e33 	svccs	0x00302e33
    17c8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    17cc:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    17d0:	2f636269 	svccs	0x00636269
    17d4:	6c647473 	cfstrdvs	mvd7, [r4], #-460
    17d8:	00006269 	andeq	r6, r0, r9, ror #4
    17dc:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    17e0:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    17e4:	00000100 	andeq	r0, r0, r0, lsl #2
    17e8:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    17ec:	682e7469 	stmdavs	lr!, {r0, r3, r5, r6, sl, ip, sp, lr}
    17f0:	00000100 	andeq	r0, r0, r0, lsl #2
    17f4:	02050000 	andeq	r0, r5, #0	; 0x0
    17f8:	00000000 	andeq	r0, r0, r0
    17fc:	4b013f03 	blmi	51410 <__Stack_Size+0x51010>
    1800:	02672f2d 	rsbeq	r2, r7, #180	; 0xb4
    1804:	01010006 	tsteq	r1, r6
    1808:	000000eb 	andeq	r0, r0, fp, ror #1
    180c:	00d00002 	sbcseq	r0, r0, r2
    1810:	01020000 	tsteq	r2, r0
    1814:	000d0efb 	strdeq	r0, [sp], -fp
    1818:	01010101 	tsteq	r1, r1, lsl #2
    181c:	01000000 	tsteq	r0, r0
    1820:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1824:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1828:	2f2e2e2f 	svccs	0x002e2e2f
    182c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1830:	63672f2e 	cmnvs	r7, #184	; 0xb8
    1834:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    1838:	2f302e33 	svccs	0x00302e33
    183c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    1840:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    1844:	2f636269 	svccs	0x00636269
    1848:	6c647473 	cfstrdvs	mvd7, [r4], #-460
    184c:	63006269 	movwvs	r6, #617	; 0x269
    1850:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
    1854:	6d72616e 	ldfvse	f6, [r2, #-440]!
    1858:	75622f73 	strbvc	r2, [r2, #-3955]!
    185c:	2f646c69 	svccs	0x00646c69
    1860:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1864:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    1868:	656e2f30 	strbvs	r2, [lr, #-3888]!
    186c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1870:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1874:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    1878:	64756c63 	ldrbtvs	r6, [r5], #-3171
    187c:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1880:	3a630073 	bcc	18c1a54 <__Stack_Size+0x18c1654>
    1884:	6e69772f 	cdpvs	7, 6, cr7, cr9, cr15, {1}
    1888:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    188c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1890:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    1894:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
    1898:	646c6975 	strbtvs	r6, [ip], #-2421
    189c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    18a0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    18a4:	6564756c 	strbvs	r7, [r4, #-1388]!
    18a8:	78650000 	stmdavc	r5!, {}^
    18ac:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    18b0:	00000100 	andeq	r0, r0, r0, lsl #2
    18b4:	6b636f6c 	blvs	18dd66c <__Stack_Size+0x18dd26c>
    18b8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    18bc:	745f0000 	ldrbvc	r0, [pc], #0	; 18c4 <__Stack_Size+0x14c4>
    18c0:	73657079 	cmnvc	r5, #121	; 0x79
    18c4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    18c8:	74730000 	ldrbtvc	r0, [r3]
    18cc:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    18d0:	0300682e 	movweq	r6, #2094	; 0x82e
    18d4:	65720000 	ldrbvs	r0, [r2]!
    18d8:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    18dc:	00020068 	andeq	r0, r2, r8, rrx
    18e0:	05000000 	streq	r0, [r0]
    18e4:	00000002 	andeq	r0, r0, r2
    18e8:	013b0300 	teqeq	fp, r0, lsl #6
    18ec:	302f2d13 	eorcc	r2, pc, r3, lsl sp
    18f0:	06024b83 	streq	r4, [r2], -r3, lsl #23
    18f4:	d7010100 	strle	r0, [r1, -r0, lsl #2]
    18f8:	02000000 	andeq	r0, r0, #0	; 0x0
    18fc:	0000d100 	andeq	sp, r0, r0, lsl #2
    1900:	fb010200 	blx	4210a <__Stack_Size+0x41d0a>
    1904:	01000d0e 	tsteq	r0, lr, lsl #26
    1908:	00010101 	andeq	r0, r1, r1, lsl #2
    190c:	00010000 	andeq	r0, r1, r0
    1910:	3a630100 	bcc	18c1d18 <__Stack_Size+0x18c1918>
    1914:	6e69772f 	cdpvs	7, 6, cr7, cr9, cr15, {1}
    1918:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    191c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1920:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    1924:	342d6363 	strtcc	r6, [sp], #-867
    1928:	302e332e 	eorcc	r3, lr, lr, lsr #6
    192c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1930:	2f62696c 	svccs	0x0062696c
    1934:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    1938:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    193c:	6564756c 	strbvs	r7, [r4, #-1388]!
    1940:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    1944:	2f3a6300 	svccs	0x003a6300
    1948:	616e6977 	smcvs	59031
    194c:	2f736d72 	svccs	0x00736d72
    1950:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    1954:	63672f64 	cmnvs	r7, #400	; 0x190
    1958:	75622d63 	strbvc	r2, [r2, #-3427]!
    195c:	2f646c69 	svccs	0x00646c69
    1960:	2f636367 	svccs	0x00636367
    1964:	6c636e69 	stclvs	14, cr6, [r3], #-420
    1968:	00656475 	rsbeq	r6, r5, r5, ror r4
    196c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1970:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1974:	2f2e2e2f 	svccs	0x002e2e2f
    1978:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    197c:	342d6363 	strtcc	r6, [sp], #-867
    1980:	302e332e 	eorcc	r3, lr, lr, lsr #6
    1984:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1988:	2f62696c 	svccs	0x0062696c
    198c:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    1990:	6565722f 	strbvs	r7, [r5, #-559]!
    1994:	0000746e 	andeq	r7, r0, lr, ror #8
    1998:	6b636f6c 	blvs	18dd750 <__Stack_Size+0x18dd350>
    199c:	0100682e 	tsteq	r0, lr, lsr #16
    19a0:	745f0000 	ldrbvc	r0, [pc], #0	; 19a8 <__Stack_Size+0x15a8>
    19a4:	73657079 	cmnvc	r5, #121	; 0x79
    19a8:	0100682e 	tsteq	r0, lr, lsr #16
    19ac:	74730000 	ldrbtvc	r0, [r3]
    19b0:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    19b4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    19b8:	65720000 	ldrbvs	r0, [r2]!
    19bc:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    19c0:	00010068 	andeq	r0, r1, r8, rrx
    19c4:	706d6900 	rsbvc	r6, sp, r0, lsl #18
    19c8:	2e657275 	mcrcs	2, 3, r7, cr5, cr5, {3}
    19cc:	00030063 	andeq	r0, r3, r3, rrx
    19d0:	00a20000 	adceq	r0, r2, r0
    19d4:	00020000 	andeq	r0, r2, r0
    19d8:	0000007a 	andeq	r0, r0, sl, ror r0
    19dc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    19e0:	0101000d 	tsteq	r1, sp
    19e4:	00000101 	andeq	r0, r0, r1, lsl #2
    19e8:	00000100 	andeq	r0, r0, r0, lsl #2
    19ec:	2f2e2e01 	svccs	0x002e2e01
    19f0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    19f4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    19f8:	2f2e2e2f 	svccs	0x002e2e2f
    19fc:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1a00:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    1a04:	656e2f30 	strbvs	r2, [lr, #-3888]!
    1a08:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1a0c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1a10:	696d2f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    1a14:	63006373 	movwvs	r6, #883	; 0x373
    1a18:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
    1a1c:	6d72616e 	ldfvse	f6, [r2, #-440]!
    1a20:	75622f73 	strbvc	r2, [r2, #-3955]!
    1a24:	2f646c69 	svccs	0x00646c69
    1a28:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1a2c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    1a30:	63672f64 	cmnvs	r7, #400	; 0x190
    1a34:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    1a38:	64756c63 	ldrbtvs	r6, [r5], #-3171
    1a3c:	69000065 	stmdbvs	r0, {r0, r2, r5, r6}
    1a40:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
    1a44:	00010063 	andeq	r0, r1, r3, rrx
    1a48:	64747300 	ldrbtvs	r7, [r4], #-768
    1a4c:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    1a50:	00020068 	andeq	r0, r2, r8, rrx
    1a54:	05000000 	streq	r0, [r0]
    1a58:	00000002 	andeq	r0, r0, r2
    1a5c:	01310300 	teqeq	r1, r0, lsl #6
    1a60:	65676732 	strbvs	r6, [r7, #-1842]!
    1a64:	65032f69 	strvs	r2, [r3, #-3945]
    1a68:	67673282 	strbvs	r3, [r7, -r2, lsl #5]!
    1a6c:	67306965 	ldrvs	r6, [r0, -r5, ror #18]!
    1a70:	02686567 	rsbeq	r6, r8, #432013312	; 0x19c00000
    1a74:	0101000c 	tsteq	r1, ip
    1a78:	000000d8 	ldrdeq	r0, [r0], -r8
    1a7c:	007e0002 	rsbseq	r0, lr, r2
    1a80:	01020000 	tsteq	r2, r0
    1a84:	000d0efb 	strdeq	r0, [sp], -fp
    1a88:	01010101 	tsteq	r1, r1, lsl #2
    1a8c:	01000000 	tsteq	r0, r0
    1a90:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1a94:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1a98:	2f2e2e2f 	svccs	0x002e2e2f
    1a9c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1aa0:	63672f2e 	cmnvs	r7, #184	; 0xb8
    1aa4:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    1aa8:	2f302e33 	svccs	0x00302e33
    1aac:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    1ab0:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    1ab4:	2f636269 	svccs	0x00636269
    1ab8:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1abc:	6300676e 	movwvs	r6, #1902	; 0x76e
    1ac0:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
    1ac4:	6d72616e 	ldfvse	f6, [r2, #-440]!
    1ac8:	75622f73 	strbvc	r2, [r2, #-3955]!
    1acc:	2f646c69 	svccs	0x00646c69
    1ad0:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1ad4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    1ad8:	63672f64 	cmnvs	r7, #400	; 0x190
    1adc:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    1ae0:	64756c63 	ldrbtvs	r6, [r5], #-3171
    1ae4:	6d000065 	stcvs	0, cr0, [r0, #-404]
    1ae8:	65736d65 	ldrbvs	r6, [r3, #-3429]!
    1aec:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1af0:	73000001 	movwvc	r0, #1	; 0x1
    1af4:	65646474 	strbvs	r6, [r4, #-1140]!
    1af8:	00682e66 	rsbeq	r2, r8, r6, ror #28
    1afc:	00000002 	andeq	r0, r0, r2
    1b00:	00020500 	andeq	r0, r2, r0, lsl #10
    1b04:	03000000 	movweq	r0, #0	; 0x0
    1b08:	1203012e 	andne	r0, r3, #-2147483637	; 0x8000000b
    1b0c:	2e6e0301 	cdpcs	3, 6, cr0, cr14, cr1, {0}
    1b10:	032e0b03 	teqeq	lr, #3072	; 0xc00
    1b14:	0f032e75 	svceq	0x00032e75
    1b18:	1303312e 	movwne	r3, #12590	; 0x312e
    1b1c:	2e760366 	cdpcs	3, 7, cr0, cr6, cr6, {3}
    1b20:	2e09032f 	cdpcs	3, 0, cr0, cr9, cr15, {1}
    1b24:	2e7a036c 	cdpcs	3, 7, cr0, cr10, cr12, {3}
    1b28:	2f2f2f30 	svccs	0x002f2f30
    1b2c:	032e5603 	teqeq	lr, #3145728	; 0x300000
    1b30:	5b032e25 	blpl	cd3cc <__Stack_Size+0xccfcc>
    1b34:	822e032e 	eorhi	r0, lr, #-1207959552	; 0xb8000000
    1b38:	032e5203 	teqeq	lr, #805306368	; 0x30000000
    1b3c:	77032e2e 	strvc	r2, [r3, -lr, lsr #28]
    1b40:	2e0b032e 	cdpcs	3, 0, cr0, cr11, cr14, {1}
    1b44:	66520348 	ldrbvs	r0, [r2], -r8, asr #6
    1b48:	319e3403 	orrscc	r3, lr, r3, lsl #8
    1b4c:	02514884 	subseq	r4, r1, #8650752	; 0x840000
    1b50:	01010006 	tsteq	r1, r6
    1b54:	00000123 	andeq	r0, r0, r3, lsr #2
    1b58:	00e00002 	rsceq	r0, r0, r2
    1b5c:	01020000 	tsteq	r2, r0
    1b60:	000d0efb 	strdeq	r0, [sp], -fp
    1b64:	01010101 	tsteq	r1, r1, lsl #2
    1b68:	01000000 	tsteq	r0, r0
    1b6c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1b70:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1b74:	2f2e2e2f 	svccs	0x002e2e2f
    1b78:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1b7c:	63672f2e 	cmnvs	r7, #184	; 0xb8
    1b80:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    1b84:	2f302e33 	svccs	0x00302e33
    1b88:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    1b8c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    1b90:	2f636269 	svccs	0x00636269
    1b94:	6c647473 	cfstrdvs	mvd7, [r4], #-460
    1b98:	63006269 	movwvs	r6, #617	; 0x269
    1b9c:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
    1ba0:	6d72616e 	ldfvse	f6, [r2, #-440]!
    1ba4:	75622f73 	strbvc	r2, [r2, #-3955]!
    1ba8:	2f646c69 	svccs	0x00646c69
    1bac:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1bb0:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    1bb4:	656e2f30 	strbvs	r2, [lr, #-3888]!
    1bb8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1bbc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1bc0:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    1bc4:	64756c63 	ldrbtvs	r6, [r5], #-3171
    1bc8:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1bcc:	3a630073 	bcc	18c1da0 <__Stack_Size+0x18c19a0>
    1bd0:	6e69772f 	cdpvs	7, 6, cr7, cr9, cr15, {1}
    1bd4:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1bd8:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1bdc:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    1be0:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
    1be4:	646c6975 	strbtvs	r6, [ip], #-2421
    1be8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1bec:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1bf0:	6564756c 	strbvs	r7, [r4, #-1388]!
    1bf4:	5f5f0000 	svcpl	0x005f0000
    1bf8:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    1bfc:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    1c00:	00000100 	andeq	r0, r0, r0, lsl #2
    1c04:	6b636f6c 	blvs	18dd9bc <__Stack_Size+0x18dd5bc>
    1c08:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1c0c:	745f0000 	ldrbvc	r0, [pc], #0	; 1c14 <__Stack_Size+0x1814>
    1c10:	73657079 	cmnvc	r5, #121	; 0x79
    1c14:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1c18:	74730000 	ldrbtvc	r0, [r3]
    1c1c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    1c20:	0300682e 	movweq	r6, #2094	; 0x82e
    1c24:	65720000 	ldrbvs	r0, [r2]!
    1c28:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    1c2c:	00020068 	andeq	r0, r2, r8, rrx
    1c30:	65746100 	ldrbvs	r6, [r4, #-256]!
    1c34:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
    1c38:	00010068 	andeq	r0, r1, r8, rrx
    1c3c:	05000000 	streq	r0, [r0]
    1c40:	00000002 	andeq	r0, r0, r2
    1c44:	01160300 	tsteq	r6, r0, lsl #6
    1c48:	03010a03 	movweq	r0, #6659	; 0x1a03
    1c4c:	0a032e76 	beq	cd62c <__Stack_Size+0xcd22c>
    1c50:	032f4b2e 	teqeq	pc, #47104	; 0xb800
    1c54:	0d032e74 	stceq	14, cr2, [r3, #-464]
    1c58:	032f2d2e 	teqeq	pc, #2944	; 0xb80
    1c5c:	0d032e73 	stceq	14, cr2, [r3, #-460]
    1c60:	4a170366 	bmi	5c2a00 <__Stack_Size+0x5c2600>
    1c64:	a34a1b03 	movtge	r1, #43779	; 0xab03
    1c68:	4c4a7603 	mcrrmi	6, 0, r7, sl, cr3
    1c6c:	322d2f2b 	eorcc	r2, sp, #172	; 0xac
    1c70:	2c302f2b 	ldccs	15, cr2, [r0], #-172
    1c74:	0602312d 	streq	r3, [r2], -sp, lsr #2
    1c78:	1b010100 	blne	42080 <__Stack_Size+0x41c80>
    1c7c:	02000001 	andeq	r0, r0, #1	; 0x1
    1c80:	0000d900 	andeq	sp, r0, r0, lsl #18
    1c84:	fb010200 	blx	4248e <__Stack_Size+0x4208e>
    1c88:	01000d0e 	tsteq	r0, lr, lsl #26
    1c8c:	00010101 	andeq	r0, r1, r1, lsl #2
    1c90:	00010000 	andeq	r0, r1, r0
    1c94:	2e2e0100 	sufcse	f0, f6, f0
    1c98:	2f2e2e2f 	svccs	0x002e2e2f
    1c9c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1ca0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1ca4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1ca8:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    1cac:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    1cb0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1cb4:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1cb8:	732f6362 	teqvc	pc, #-2013265919	; 0x88000001
    1cbc:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    1cc0:	3a630062 	bcc	18c1e50 <__Stack_Size+0x18c1a50>
    1cc4:	6e69772f 	cdpvs	7, 6, cr7, cr9, cr15, {1}
    1cc8:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1ccc:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1cd0:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    1cd4:	342d6363 	strtcc	r6, [sp], #-867
    1cd8:	302e332e 	eorcc	r3, lr, lr, lsr #6
    1cdc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1ce0:	2f62696c 	svccs	0x0062696c
    1ce4:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    1ce8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1cec:	6564756c 	strbvs	r7, [r4, #-1388]!
    1cf0:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    1cf4:	2f3a6300 	svccs	0x003a6300
    1cf8:	616e6977 	smcvs	59031
    1cfc:	2f736d72 	svccs	0x00736d72
    1d00:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    1d04:	63672f64 	cmnvs	r7, #400	; 0x190
    1d08:	75622d63 	strbvc	r2, [r2, #-3427]!
    1d0c:	2f646c69 	svccs	0x00646c69
    1d10:	2f636367 	svccs	0x00636367
    1d14:	6c636e69 	stclvs	14, cr6, [r3], #-420
    1d18:	00656475 	rsbeq	r6, r5, r5, ror r4
    1d1c:	635f5f00 	cmpvs	pc, #0	; 0x0
    1d20:	5f6c6c61 	svcpl	0x006c6c61
    1d24:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    1d28:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    1d2c:	00000100 	andeq	r0, r0, r0, lsl #2
    1d30:	6b636f6c 	blvs	18ddae8 <__Stack_Size+0x18dd6e8>
    1d34:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1d38:	745f0000 	ldrbvc	r0, [pc], #0	; 1d40 <__Stack_Size+0x1940>
    1d3c:	73657079 	cmnvc	r5, #121	; 0x79
    1d40:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1d44:	74730000 	ldrbtvc	r0, [r3]
    1d48:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    1d4c:	0300682e 	movweq	r6, #2094	; 0x82e
    1d50:	65720000 	ldrbvs	r0, [r2]!
    1d54:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    1d58:	00020068 	andeq	r0, r2, r8, rrx
    1d5c:	05000000 	streq	r0, [r0]
    1d60:	00000002 	andeq	r0, r0, r2
    1d64:	01110300 	tsteq	r1, r0, lsl #6
    1d68:	032e0a03 	teqeq	lr, #12288	; 0x3000
    1d6c:	034a4a76 	movteq	r4, #43638	; 0xaa76
    1d70:	77034a2c 	strvc	r4, [r3, -ip, lsr #20]
    1d74:	2e69032e 	cdpcs	3, 6, cr0, cr9, cr14, {1}
    1d78:	7903c151 	stmdbvc	r3, {r0, r4, r6, r8, lr, pc}
    1d7c:	663e039e 	undefined
    1d80:	2d664f03 	stclcs	15, cr4, [r6, #-12]!
    1d84:	31304b2f 	teqcc	r0, pc, lsr #22
    1d88:	30316350 	eorscc	r6, r1, r0, asr r3
    1d8c:	77038967 	strvc	r8, [r3, -r7, ror #18]
    1d90:	4a09039e 	bmi	242c10 <__Stack_Size+0x242810>
    1d94:	000a02d1 	ldrdeq	r0, [sl], -r1
    1d98:	00450101 	subeq	r0, r5, r1, lsl #2
    1d9c:	00020000 	andeq	r0, r2, r0
    1da0:	0000001f 	andeq	r0, r0, pc, lsl r0
    1da4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1da8:	0101000d 	tsteq	r1, sp
    1dac:	00000101 	andeq	r0, r0, r1, lsl #2
    1db0:	00000100 	andeq	r0, r0, r0, lsl #2
    1db4:	72630001 	rsbvc	r0, r3, #1	; 0x1
    1db8:	612e6e74 	teqvs	lr, r4, ror lr
    1dbc:	00006d73 	andeq	r6, r0, r3, ror sp
    1dc0:	00000000 	andeq	r0, r0, r0
    1dc4:	00000205 	andeq	r0, r0, r5, lsl #4
    1dc8:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    1dcc:	06020100 	streq	r0, [r2], -r0, lsl #2
    1dd0:	00010100 	andeq	r0, r1, r0, lsl #2
    1dd4:	00000205 	andeq	r0, r0, r5, lsl #4
    1dd8:	d2030000 	andle	r0, r3, #0	; 0x0
    1ddc:	06020100 	streq	r0, [r2], -r0, lsl #2
    1de0:	Address 0x00001de0 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 	undefined instruction 0xffffffff
       8:	7c010001 	stcvc	0, cr0, [r1], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000000c 	andeq	r0, r0, ip
      14:	00000000 	andeq	r0, r0, r0
      18:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
      1c:	00000018 	andeq	r0, r0, r8, lsl r0
      20:	0000000c 	andeq	r0, r0, ip
      24:	00000000 	andeq	r0, r0, r0
      28:	0800314c 	stmdaeq	r0, {r2, r3, r6, r8, ip, sp}
      2c:	00000018 	andeq	r0, r0, r8, lsl r0
      30:	0000000c 	andeq	r0, r0, ip
      34:	00000000 	andeq	r0, r0, r0
      38:	08003164 	stmdaeq	r0, {r2, r5, r6, r8, ip, sp}
      3c:	00000030 	andeq	r0, r0, r0, lsr r0
      40:	0000000c 	andeq	r0, r0, ip
      44:	00000000 	andeq	r0, r0, r0
      48:	08003194 	stmdaeq	r0, {r2, r4, r7, r8, ip, sp}
      4c:	00000014 	andeq	r0, r0, r4, lsl r0
      50:	0000000c 	andeq	r0, r0, ip
      54:	00000000 	andeq	r0, r0, r0
      58:	080031a8 	stmdaeq	r0, {r3, r5, r7, r8, ip, sp}
      5c:	0000000c 	andeq	r0, r0, ip
      60:	0000000c 	andeq	r0, r0, ip
      64:	00000000 	andeq	r0, r0, r0
      68:	080031b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, sp}
      6c:	00000014 	andeq	r0, r0, r4, lsl r0
      70:	00000014 	andeq	r0, r0, r4, lsl r0
      74:	00000000 	andeq	r0, r0, r0
      78:	080031c8 	stmdaeq	r0, {r3, r6, r7, r8, ip, sp}
      7c:	0000002c 	andeq	r0, r0, ip, lsr #32
      80:	8e080e42 	cdphi	14, 0, cr0, cr8, cr2, {2}
      84:	00028401 	andeq	r8, r2, r1, lsl #8
      88:	00000014 	andeq	r0, r0, r4, lsl r0
      8c:	00000000 	andeq	r0, r0, r0
      90:	080031f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip, sp}
      94:	00000016 	andeq	r0, r0, r6, lsl r0
      98:	46040e42 	strmi	r0, [r4], -r2, asr #28
      9c:	018e080e 	orreq	r0, lr, lr, lsl #16
      a0:	00000018 	andeq	r0, r0, r8, lsl r0
      a4:	00000000 	andeq	r0, r0, r0
      a8:	0800320c 	stmdaeq	r0, {r2, r3, r9, ip, sp}
      ac:	00000038 	andeq	r0, r0, r8, lsr r0
      b0:	440c0e42 	strmi	r0, [ip], #-3650
      b4:	018e100e 	orreq	r1, lr, lr
      b8:	03840285 	orreq	r0, r4, #1342177288	; 0x50000008
      bc:	00000014 	andeq	r0, r0, r4, lsl r0
      c0:	00000000 	andeq	r0, r0, r0
      c4:	08003244 	stmdaeq	r0, {r2, r6, r9, ip, sp}
      c8:	00000054 	andeq	r0, r0, r4, asr r0
      cc:	46040e42 	strmi	r0, [r4], -r2, asr #28
      d0:	018e080e 	orreq	r0, lr, lr, lsl #16
      d4:	0000001c 	andeq	r0, r0, ip, lsl r0
      d8:	00000000 	andeq	r0, r0, r0
      dc:	08003298 	stmdaeq	r0, {r3, r4, r7, r9, ip, sp}
      e0:	00000090 	muleq	r0, r0, r0
      e4:	42100e42 	andsmi	r0, r0, #1056	; 0x420
      e8:	018e300e 	orreq	r3, lr, lr
      ec:	03850286 	orreq	r0, r5, #1610612744	; 0x60000008
      f0:	00000484 	andeq	r0, r0, r4, lsl #9
      f4:	00000014 	andeq	r0, r0, r4, lsl r0
      f8:	00000000 	andeq	r0, r0, r0
      fc:	08003328 	stmdaeq	r0, {r3, r5, r8, r9, ip, sp}
     100:	00000020 	andeq	r0, r0, r0, lsr #32
     104:	44040e42 	strmi	r0, [r4], #-3650
     108:	018e080e 	orreq	r0, lr, lr, lsl #16
     10c:	00000014 	andeq	r0, r0, r4, lsl r0
     110:	00000000 	andeq	r0, r0, r0
     114:	08003348 	stmdaeq	r0, {r3, r6, r8, r9, ip, sp}
     118:	00000028 	andeq	r0, r0, r8, lsr #32
     11c:	8e080e44 	cdphi	14, 0, cr0, cr8, cr4, {2}
     120:	00028401 	andeq	r8, r2, r1, lsl #8
     124:	00000014 	andeq	r0, r0, r4, lsl r0
     128:	00000000 	andeq	r0, r0, r0
     12c:	08003370 	stmdaeq	r0, {r4, r5, r6, r8, r9, ip, sp}
     130:	00000014 	andeq	r0, r0, r4, lsl r0
     134:	8e080e42 	cdphi	14, 0, cr0, cr8, cr2, {2}
     138:	00028401 	andeq	r8, r2, r1, lsl #8
     13c:	00000018 	andeq	r0, r0, r8, lsl r0
     140:	00000000 	andeq	r0, r0, r0
     144:	08003384 	stmdaeq	r0, {r2, r7, r8, r9, ip, sp}
     148:	0000001a 	andeq	r0, r0, sl, lsl r0
     14c:	8e0c0e42 	cdphi	14, 0, cr0, cr12, cr2, {2}
     150:	84028501 	strhi	r8, [r2], #-1281
     154:	100e4403 	andne	r4, lr, r3, lsl #8
     158:	00000014 	andeq	r0, r0, r4, lsl r0
     15c:	00000000 	andeq	r0, r0, r0
     160:	080033a0 	stmdaeq	r0, {r5, r7, r8, r9, ip, sp}
     164:	00000054 	andeq	r0, r0, r4, asr r0
     168:	44040e42 	strmi	r0, [r4], #-3650
     16c:	018e080e 	orreq	r0, lr, lr, lsl #16
     170:	00000014 	andeq	r0, r0, r4, lsl r0
     174:	00000000 	andeq	r0, r0, r0
     178:	080033f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, ip, sp}
     17c:	00000094 	muleq	r0, r4, r0
     180:	44040e42 	strmi	r0, [r4], #-3650
     184:	018e080e 	orreq	r0, lr, lr, lsl #16
     188:	00000014 	andeq	r0, r0, r4, lsl r0
     18c:	00000000 	andeq	r0, r0, r0
     190:	08003488 	stmdaeq	r0, {r3, r7, sl, ip, sp}
     194:	00000044 	andeq	r0, r0, r4, asr #32
     198:	8e080e42 	cdphi	14, 0, cr0, cr8, cr2, {2}
     19c:	00028401 	andeq	r8, r2, r1, lsl #8
     1a0:	00000014 	andeq	r0, r0, r4, lsl r0
     1a4:	00000000 	andeq	r0, r0, r0
     1a8:	080034cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, ip, sp}
     1ac:	00000014 	andeq	r0, r0, r4, lsl r0
     1b0:	44040e42 	strmi	r0, [r4], #-3650
     1b4:	018e080e 	orreq	r0, lr, lr, lsl #16
     1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     1bc:	00000000 	andeq	r0, r0, r0
     1c0:	080034e0 	stmdaeq	r0, {r5, r6, r7, sl, ip, sp}
     1c4:	00000080 	andeq	r0, r0, r0, lsl #1
     1c8:	42100e42 	andsmi	r0, r0, #1056	; 0x420
     1cc:	018e200e 	orreq	r2, lr, lr
     1d0:	03850286 	orreq	r0, r5, #1610612744	; 0x60000008
     1d4:	00000484 	andeq	r0, r0, r4, lsl #9
     1d8:	00000014 	andeq	r0, r0, r4, lsl r0
     1dc:	00000000 	andeq	r0, r0, r0
     1e0:	08003560 	stmdaeq	r0, {r5, r6, r8, sl, ip, sp}
     1e4:	00000010 	andeq	r0, r0, r0, lsl r0
     1e8:	44040e42 	strmi	r0, [r4], #-3650
     1ec:	018e080e 	orreq	r0, lr, lr, lsl #16
     1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     1f4:	00000000 	andeq	r0, r0, r0
     1f8:	08003570 	stmdaeq	r0, {r4, r5, r6, r8, sl, ip, sp}
     1fc:	00000088 	andeq	r0, r0, r8, lsl #1
     200:	42100e42 	andsmi	r0, r0, #1056	; 0x420
     204:	018e180e 	orreq	r1, lr, lr, lsl #16
     208:	03850286 	orreq	r0, r5, #1610612744	; 0x60000008
     20c:	00000484 	andeq	r0, r0, r4, lsl #9
     210:	0000001c 	andeq	r0, r0, ip, lsl r0
     214:	00000000 	andeq	r0, r0, r0
     218:	080035f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, ip, sp}
     21c:	00000052 	andeq	r0, r0, r2, asr r0
     220:	46100e42 	ldrmi	r0, [r0], -r2, asr #28
     224:	018e180e 	orreq	r1, lr, lr, lsl #16
     228:	03850286 	orreq	r0, r5, #1610612744	; 0x60000008
     22c:	00000484 	andeq	r0, r0, r4, lsl #9
     230:	00000014 	andeq	r0, r0, r4, lsl r0
     234:	00000000 	andeq	r0, r0, r0
     238:	0800364c 	stmdaeq	r0, {r2, r3, r6, r9, sl, ip, sp}
     23c:	00000084 	andeq	r0, r0, r4, lsl #1
     240:	42040e42 	andmi	r0, r4, #1056	; 0x420
     244:	018e080e 	orreq	r0, lr, lr, lsl #16
     248:	0000001c 	andeq	r0, r0, ip, lsl r0
     24c:	00000000 	andeq	r0, r0, r0
     250:	080036d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip, sp}
     254:	000000c8 	andeq	r0, r0, r8, asr #1
     258:	42140e42 	andsmi	r0, r4, #1056	; 0x420
     25c:	018e180e 	orreq	r1, lr, lr, lsl #16
     260:	03860287 	orreq	r0, r6, #1879048200	; 0x70000008
     264:	05840485 	streq	r0, [r4, #1157]
     268:	0000000c 	.word	0x0000000c
     26c:	ffffffff 	.word	0xffffffff
     270:	7c010001 	.word	0x7c010001
     274:	000d0c0e 	.word	0x000d0c0e
     278:	0000000c 	.word	0x0000000c
     27c:	00000268 	.word	0x00000268
     280:	08003798 	.word	0x08003798
     284:	00000002 	.word	0x00000002
     288:	0000000c 	.word	0x0000000c
     28c:	00000268 	.word	0x00000268
     290:	0800379c 	.word	0x0800379c
     294:	00000002 	.word	0x00000002
     298:	0000000c 	.word	0x0000000c
     29c:	00000268 	.word	0x00000268
     2a0:	080037a0 	.word	0x080037a0
     2a4:	00000002 	.word	0x00000002
     2a8:	0000000c 	.word	0x0000000c
     2ac:	00000268 	.word	0x00000268
     2b0:	080037a4 	.word	0x080037a4
     2b4:	00000002 	.word	0x00000002
     2b8:	0000000c 	.word	0x0000000c
     2bc:	00000268 	.word	0x00000268
     2c0:	080037a8 	.word	0x080037a8
     2c4:	00000002 	.word	0x00000002
     2c8:	0000000c 	.word	0x0000000c
     2cc:	00000268 	.word	0x00000268
     2d0:	080037ac 	.word	0x080037ac
     2d4:	00000002 	.word	0x00000002
     2d8:	0000000c 	.word	0x0000000c
     2dc:	00000268 	.word	0x00000268
     2e0:	080037b0 	.word	0x080037b0
     2e4:	00000002 	.word	0x00000002
     2e8:	0000000c 	.word	0x0000000c
     2ec:	00000268 	.word	0x00000268
     2f0:	080037b4 	.word	0x080037b4
     2f4:	00000002 	.word	0x00000002
     2f8:	0000000c 	.word	0x0000000c
     2fc:	00000268 	.word	0x00000268
     300:	080037b8 	.word	0x080037b8
     304:	00000002 	.word	0x00000002
     308:	0000000c 	.word	0x0000000c
     30c:	00000268 	.word	0x00000268
     310:	080037bc 	.word	0x080037bc
     314:	00000002 	.word	0x00000002
     318:	0000000c 	.word	0x0000000c
     31c:	00000268 	.word	0x00000268
     320:	080037c0 	.word	0x080037c0
     324:	00000002 	.word	0x00000002
     328:	0000000c 	.word	0x0000000c
     32c:	00000268 	.word	0x00000268
     330:	080037c4 	.word	0x080037c4
     334:	00000002 	.word	0x00000002
     338:	0000000c 	.word	0x0000000c
     33c:	00000268 	.word	0x00000268
     340:	080037c8 	.word	0x080037c8
     344:	00000002 	.word	0x00000002
     348:	0000000c 	.word	0x0000000c
     34c:	00000268 	.word	0x00000268
     350:	080037cc 	.word	0x080037cc
     354:	00000002 	.word	0x00000002
     358:	0000000c 	.word	0x0000000c
     35c:	00000268 	.word	0x00000268
     360:	080037d0 	.word	0x080037d0
     364:	00000002 	.word	0x00000002
     368:	0000000c 	.word	0x0000000c
     36c:	00000268 	.word	0x00000268
     370:	080037d4 	.word	0x080037d4
     374:	00000002 	.word	0x00000002
     378:	0000000c 	.word	0x0000000c
     37c:	00000268 	.word	0x00000268
     380:	080037d8 	.word	0x080037d8
     384:	00000002 	.word	0x00000002
     388:	0000000c 	.word	0x0000000c
     38c:	00000268 	.word	0x00000268
     390:	080037dc 	.word	0x080037dc
     394:	00000002 	.word	0x00000002
     398:	0000000c 	.word	0x0000000c
     39c:	00000268 	.word	0x00000268
     3a0:	080037e0 	.word	0x080037e0
     3a4:	00000002 	.word	0x00000002
     3a8:	0000000c 	.word	0x0000000c
     3ac:	00000268 	.word	0x00000268
     3b0:	080037e4 	.word	0x080037e4
     3b4:	00000002 	.word	0x00000002
     3b8:	0000000c 	.word	0x0000000c
     3bc:	00000268 	.word	0x00000268
     3c0:	080037e8 	.word	0x080037e8
     3c4:	00000002 	.word	0x00000002
     3c8:	0000000c 	.word	0x0000000c
     3cc:	00000268 	.word	0x00000268
     3d0:	080037ec 	.word	0x080037ec
     3d4:	00000002 	.word	0x00000002
     3d8:	0000000c 	.word	0x0000000c
     3dc:	00000268 	.word	0x00000268
     3e0:	080037f0 	.word	0x080037f0
     3e4:	00000002 	.word	0x00000002
     3e8:	0000000c 	.word	0x0000000c
     3ec:	00000268 	.word	0x00000268
     3f0:	080037f4 	.word	0x080037f4
     3f4:	00000002 	.word	0x00000002
     3f8:	0000000c 	.word	0x0000000c
     3fc:	00000268 	.word	0x00000268
     400:	080037f8 	.word	0x080037f8
     404:	00000002 	.word	0x00000002
     408:	0000000c 	.word	0x0000000c
     40c:	00000268 	.word	0x00000268
     410:	080037fc 	.word	0x080037fc
     414:	00000002 	.word	0x00000002
     418:	0000000c 	.word	0x0000000c
     41c:	00000268 	.word	0x00000268
     420:	08003800 	.word	0x08003800
     424:	00000002 	.word	0x00000002
     428:	0000000c 	.word	0x0000000c
     42c:	00000268 	.word	0x00000268
     430:	08003804 	.word	0x08003804
     434:	00000002 	.word	0x00000002
     438:	0000000c 	.word	0x0000000c
     43c:	00000268 	.word	0x00000268
     440:	08003808 	.word	0x08003808
     444:	00000002 	.word	0x00000002
     448:	0000000c 	.word	0x0000000c
     44c:	00000268 	.word	0x00000268
     450:	0800380c 	.word	0x0800380c
     454:	00000002 	.word	0x00000002
     458:	0000000c 	.word	0x0000000c
     45c:	00000268 	.word	0x00000268
     460:	08003810 	.word	0x08003810
     464:	00000002 	.word	0x00000002
     468:	0000000c 	.word	0x0000000c
     46c:	00000268 	.word	0x00000268
     470:	08003814 	.word	0x08003814
     474:	00000002 	.word	0x00000002
     478:	0000000c 	.word	0x0000000c
     47c:	00000268 	.word	0x00000268
     480:	08003818 	.word	0x08003818
     484:	00000002 	.word	0x00000002
     488:	0000000c 	.word	0x0000000c
     48c:	00000268 	.word	0x00000268
     490:	0800381c 	.word	0x0800381c
     494:	00000002 	.word	0x00000002
     498:	0000000c 	.word	0x0000000c
     49c:	00000268 	.word	0x00000268
     4a0:	08003820 	.word	0x08003820
     4a4:	00000002 	.word	0x00000002
     4a8:	0000000c 	.word	0x0000000c
     4ac:	00000268 	.word	0x00000268
     4b0:	08003824 	.word	0x08003824
     4b4:	00000002 	.word	0x00000002
     4b8:	0000000c 	.word	0x0000000c
     4bc:	00000268 	.word	0x00000268
     4c0:	28          	.byte	0x28
     4c1:	38          	.byte	0x38
     4c2:	0800      	.short	0x0800
     4c4:	00000002 	.word	0x00000002
     4c8:	0000000c 	.word	0x0000000c
     4cc:	00000268 	.word	0x00000268
     4d0:	0800382c 	.word	0x0800382c
     4d4:	00000002 	.word	0x00000002
     4d8:	0000000c 	.word	0x0000000c
     4dc:	00000268 	.word	0x00000268
     4e0:	08003830 	.word	0x08003830
     4e4:	00000002 	.word	0x00000002
     4e8:	0000000c 	.word	0x0000000c
     4ec:	00000268 	.word	0x00000268
     4f0:	08003834 	.word	0x08003834
     4f4:	00000002 	.word	0x00000002
     4f8:	0000000c 	.word	0x0000000c
     4fc:	00000268 	.word	0x00000268
     500:	08003838 	.word	0x08003838
     504:	00000002 	.word	0x00000002
     508:	0000000c 	.word	0x0000000c
     50c:	00000268 	.word	0x00000268
     510:	0800383c 	.word	0x0800383c
     514:	00000002 	.word	0x00000002
     518:	0000000c 	.word	0x0000000c
     51c:	00000268 	.word	0x00000268
     520:	08003840 	.word	0x08003840
     524:	00000002 	.word	0x00000002
     528:	0000000c 	.word	0x0000000c
     52c:	00000268 	.word	0x00000268
     530:	08003844 	.word	0x08003844
     534:	00000002 	.word	0x00000002
     538:	0000000c 	.word	0x0000000c
     53c:	00000268 	.word	0x00000268
     540:	08003848 	.word	0x08003848
     544:	00000002 	.word	0x00000002
     548:	0000000c 	.word	0x0000000c
     54c:	00000268 	.word	0x00000268
     550:	0800384c 	.word	0x0800384c
     554:	00000002 	.word	0x00000002
     558:	0000000c 	.word	0x0000000c
     55c:	00000268 	.word	0x00000268
     560:	08003850 	.word	0x08003850
     564:	00000002 	.word	0x00000002
     568:	0000000c 	.word	0x0000000c
     56c:	00000268 	.word	0x00000268
     570:	08003854 	.word	0x08003854
     574:	00000002 	.word	0x00000002
     578:	0000000c 	.word	0x0000000c
     57c:	00000268 	.word	0x00000268
     580:	08003858 	.word	0x08003858
     584:	00000002 	.word	0x00000002
     588:	0000000c 	.word	0x0000000c
     58c:	00000268 	.word	0x00000268
     590:	0800385c 	.word	0x0800385c
     594:	00000002 	.word	0x00000002
     598:	0000000c 	.word	0x0000000c
     59c:	00000268 	.word	0x00000268
     5a0:	08003860 	.word	0x08003860
     5a4:	00000002 	.word	0x00000002
     5a8:	0000000c 	.word	0x0000000c
     5ac:	00000268 	.word	0x00000268
     5b0:	08003864 	.word	0x08003864
     5b4:	00000002 	.word	0x00000002
     5b8:	0000000c 	.word	0x0000000c
     5bc:	00000268 	.word	0x00000268
     5c0:	08003868 	.word	0x08003868
     5c4:	00000002 	.word	0x00000002
     5c8:	0000000c 	.word	0x0000000c
     5cc:	00000268 	.word	0x00000268
     5d0:	0800386c 	.word	0x0800386c
     5d4:	00000002 	.word	0x00000002
     5d8:	0000000c 	.word	0x0000000c
     5dc:	00000268 	.word	0x00000268
     5e0:	08003870 	.word	0x08003870
     5e4:	00000002 	.word	0x00000002
     5e8:	0000000c 	.word	0x0000000c
     5ec:	00000268 	.word	0x00000268
     5f0:	08003874 	.word	0x08003874
     5f4:	00000002 	.word	0x00000002
     5f8:	0000000c 	.word	0x0000000c
     5fc:	00000268 	.word	0x00000268
     600:	08003878 	.word	0x08003878
     604:	00000002 	.word	0x00000002
     608:	0000000c 	.word	0x0000000c
     60c:	00000268 	.word	0x00000268
     610:	0800387c 	.word	0x0800387c
     614:	00000002 	.word	0x00000002
     618:	0000000c 	.word	0x0000000c
     61c:	00000268 	.word	0x00000268
     620:	08003880 	.word	0x08003880
     624:	00000002 	.word	0x00000002
     628:	0000000c 	.word	0x0000000c
     62c:	00000268 	.word	0x00000268
     630:	08003884 	.word	0x08003884
     634:	00000002 	.word	0x00000002
     638:	0000000c 	.word	0x0000000c
     63c:	00000268 	.word	0x00000268
     640:	08003888 	.word	0x08003888
     644:	00000002 	.word	0x00000002
     648:	0000000c 	.word	0x0000000c
     64c:	00000268 	.word	0x00000268
     650:	0800388c 	.word	0x0800388c
     654:	00000002 	.word	0x00000002
     658:	0000000c 	.word	0x0000000c
     65c:	00000268 	.word	0x00000268
     660:	08003890 	.word	0x08003890
     664:	00000002 	.word	0x00000002
     668:	0000000c 	.word	0x0000000c
     66c:	00000268 	.word	0x00000268
     670:	08003894 	.word	0x08003894
     674:	00000002 	.word	0x00000002
     678:	0000000c 	.word	0x0000000c
     67c:	00000268 	.word	0x00000268
     680:	08003898 	.word	0x08003898
     684:	00000002 	.word	0x00000002
     688:	0000000c 	.word	0x0000000c
     68c:	00000268 	.word	0x00000268
     690:	0800389c 	.word	0x0800389c
     694:	00000002 	.word	0x00000002
     698:	00000014 	.word	0x00000014
     69c:	00000268 	.word	0x00000268
     6a0:	080038a0 	.word	0x080038a0
     6a4:	0000000c 	.word	0x0000000c
     6a8:	42040e42 	.word	0x42040e42
     6ac:	018e080e 	.word	0x018e080e
     6b0:	00000014 	.word	0x00000014
     6b4:	00000268 	.word	0x00000268
     6b8:	080038ac 	.word	0x080038ac
     6bc:	0000000c 	.word	0x0000000c
     6c0:	42040e42 	.word	0x42040e42
     6c4:	018e080e 	.word	0x018e080e
     6c8:	00000014 	.word	0x00000014
     6cc:	00000268 	.word	0x00000268
     6d0:	080038b8 	.word	0x080038b8
     6d4:	0000000c 	.word	0x0000000c
     6d8:	42040e42 	.word	0x42040e42
     6dc:	018e080e 	.word	0x018e080e
     6e0:	0000000c 	.word	0x0000000c
     6e4:	ffffffff 	.word	0xffffffff
     6e8:	7c010001 	.word	0x7c010001
     6ec:	000d0c0e 	.word	0x000d0c0e
     6f0:	00000014 	.word	0x00000014
     6f4:	000006e0 	.word	0x000006e0
     6f8:	080038c4 	.word	0x080038c4
     6fc:	0000000c 	.word	0x0000000c
     700:	42040e42 	.word	0x42040e42
     704:	018e080e 	.word	0x018e080e
     708:	00000014 	.word	0x00000014
     70c:	000006e0 	.word	0x000006e0
     710:	080038d0 	.word	0x080038d0
     714:	00000014 	.word	0x00000014
     718:	46040e42 	.word	0x46040e42
     71c:	018e080e 	.word	0x018e080e
     720:	00000018 	.word	0x00000018
     724:	000006e0 	.word	0x000006e0
     728:	080038e4 	.word	0x080038e4
     72c:	00000026 	.word	0x00000026
     730:	8e100e42 	.word	0x8e100e42
     734:	85028601 	.word	0x85028601
     738:	00048403 	.word	0x00048403
     73c:	00000018 	.word	0x00000018
     740:	000006e0 	.word	0x000006e0
     744:	0800390c 	.word	0x0800390c
     748:	0000001c 	.word	0x0000001c
     74c:	8e100e42 	.word	0x8e100e42
     750:	85028601 	.word	0x85028601
     754:	00048403 	.word	0x00048403
     758:	00000014 	.word	0x00000014
     75c:	000006e0 	.word	0x000006e0
     760:	08003928 	.word	0x08003928
     764:	0000000c 	.word	0x0000000c
     768:	42040e42 	.word	0x42040e42
     76c:	018e080e 	.word	0x018e080e
     770:	00000014 	.word	0x00000014
     774:	000006e0 	.word	0x000006e0
     778:	08003934 	.word	0x08003934
     77c:	0000000c 	.word	0x0000000c
     780:	42040e42 	.word	0x42040e42
     784:	018e080e 	.word	0x018e080e
     788:	00000014 	.word	0x00000014
     78c:	000006e0 	.word	0x000006e0
     790:	08003940 	.word	0x08003940
     794:	00000010 	.word	0x00000010
     798:	44040e42 	.word	0x44040e42
     79c:	018e080e 	.word	0x018e080e
     7a0:	0000000c 	.word	0x0000000c
     7a4:	ffffffff 	.word	0xffffffff
     7a8:	7c010001 	.word	0x7c010001
     7ac:	000d0c0e 	.word	0x000d0c0e
     7b0:	0000000c 	.word	0x0000000c
     7b4:	000007a0 	.word	0x000007a0
     7b8:	08003950 	.word	0x08003950
     7bc:	0000000c 	.word	0x0000000c
     7c0:	0000000c 	.word	0x0000000c
     7c4:	000007a0 	.word	0x000007a0
     7c8:	0800395c 	.word	0x0800395c
     7cc:	0000000c 	.word	0x0000000c
     7d0:	0000000c 	.word	0x0000000c
     7d4:	000007a0 	.word	0x000007a0
     7d8:	08003968 	.word	0x08003968
     7dc:	0000000c 	.word	0x0000000c
     7e0:	0000000c 	.word	0x0000000c
     7e4:	000007a0 	.word	0x000007a0
     7e8:	08003974 	.word	0x08003974
     7ec:	0000000c 	.word	0x0000000c
     7f0:	0000000c 	.word	0x0000000c
     7f4:	000007a0 	.word	0x000007a0
     7f8:	08003980 	.word	0x08003980
     7fc:	0000000c 	.word	0x0000000c
     800:	0000000c 	.word	0x0000000c
     804:	000007a0 	.word	0x000007a0
     808:	0800398c 	.word	0x0800398c
     80c:	00000014 	.word	0x00000014
     810:	0000000c 	.word	0x0000000c
     814:	000007a0 	.word	0x000007a0
     818:	080039a0 	.word	0x080039a0
     81c:	0000000c 	.word	0x0000000c
     820:	0000000c 	.word	0x0000000c
     824:	000007a0 	.word	0x000007a0
     828:	080039ac 	.word	0x080039ac
     82c:	0000000c 	.word	0x0000000c
     830:	0000000c 	.word	0x0000000c
     834:	000007a0 	.word	0x000007a0
     838:	080039b8 	.word	0x080039b8
     83c:	00000008 	.word	0x00000008
     840:	0000000c 	.word	0x0000000c
     844:	000007a0 	.word	0x000007a0
     848:	080039c0 	.word	0x080039c0
     84c:	00000004 	.word	0x00000004
     850:	0000000c 	.word	0x0000000c
     854:	000007a0 	.word	0x000007a0
     858:	080039c4 	.word	0x080039c4
     85c:	00000008 	.word	0x00000008
     860:	00000018 	.word	0x00000018
     864:	000007a0 	.word	0x000007a0
     868:	080039cc 	.word	0x080039cc
     86c:	00000168 	.word	0x00000168
     870:	440c0e42 	.word	0x440c0e42
     874:	018e100e 	.word	0x018e100e
     878:	03840285 	.word	0x03840285
     87c:	00000018 	.word	0x00000018
     880:	000007a0 	.word	0x000007a0
     884:	08003b34 	.word	0x08003b34
     888:	000000c4 	.word	0x000000c4
     88c:	440c0e42 	.word	0x440c0e42
     890:	018e100e 	.word	0x018e100e
     894:	03840285 	.word	0x03840285
     898:	00000014 	.word	0x00000014
     89c:	000007a0 	.word	0x000007a0
     8a0:	08003bf8 	.word	0x08003bf8
     8a4:	00000020 	.word	0x00000020
     8a8:	8e080e42 	.word	0x8e080e42
     8ac:	00028401 	.word	0x00028401
     8b0:	00000014 	.word	0x00000014
     8b4:	000007a0 	.word	0x000007a0
     8b8:	08003c18 	.word	0x08003c18
     8bc:	00000038 	.word	0x00000038
     8c0:	44040e42 	.word	0x44040e42
     8c4:	018e080e 	.word	0x018e080e
     8c8:	00000014 	.word	0x00000014
     8cc:	000007a0 	.word	0x000007a0
     8d0:	08003c50 	.word	0x08003c50
     8d4:	0000003c 	.word	0x0000003c
     8d8:	44040e42 	.word	0x44040e42
     8dc:	018e080e 	.word	0x018e080e
     8e0:	00000014 	.word	0x00000014
     8e4:	000007a0 	.word	0x000007a0
     8e8:	08003c8c 	.word	0x08003c8c
     8ec:	00000030 	.word	0x00000030
     8f0:	44040e42 	.word	0x44040e42
     8f4:	018e080e 	.word	0x018e080e
     8f8:	00000014 	.word	0x00000014
     8fc:	000007a0 	.word	0x000007a0
     900:	08003cbc 	.word	0x08003cbc
     904:	00000038 	.word	0x00000038
     908:	44040e42 	.word	0x44040e42
     90c:	018e080e 	.word	0x018e080e
     910:	00000014 	.word	0x00000014
     914:	000007a0 	.word	0x000007a0
     918:	08003cf4 	.word	0x08003cf4
     91c:	00000028 	.word	0x00000028
     920:	44040e42 	.word	0x44040e42
     924:	018e080e 	.word	0x018e080e
     928:	00000014 	.word	0x00000014
     92c:	000007a0 	.word	0x000007a0
     930:	08003d1c 	.word	0x08003d1c
     934:	0000000c 	.word	0x0000000c
     938:	42040e42 	.word	0x42040e42
     93c:	018e080e 	.word	0x018e080e
     940:	00000014 	.word	0x00000014
     944:	000007a0 	.word	0x000007a0
     948:	08003d28 	.word	0x08003d28
     94c:	00000034 	.word	0x00000034
     950:	4a040e42 	.word	0x4a040e42
     954:	018e080e 	.word	0x018e080e
     958:	0000000c 	.word	0x0000000c
     95c:	ffffffff 	.word	0xffffffff
     960:	7c010001 	.word	0x7c010001
     964:	000d0c0e 	.word	0x000d0c0e
     968:	0000000c 	.word	0x0000000c
     96c:	00000958 	.word	0x00000958
     970:	08003d5c 	.word	0x08003d5c
     974:	00000018 	.word	0x00000018
     978:	0000000c 	.word	0x0000000c
     97c:	00000958 	.word	0x00000958
     980:	08003d74 	.word	0x08003d74
     984:	00000018 	.word	0x00000018
     988:	0000000c 	.word	0x0000000c
     98c:	00000958 	.word	0x00000958
     990:	08003d8c 	.word	0x08003d8c
     994:	00000018 	.word	0x00000018
     998:	0000000c 	.word	0x0000000c
     99c:	00000958 	.word	0x00000958
     9a0:	08003da4 	.word	0x08003da4
     9a4:	00000018 	.word	0x00000018
     9a8:	0000000c 	.word	0x0000000c
     9ac:	00000958 	.word	0x00000958
     9b0:	08003dbc 	.word	0x08003dbc
     9b4:	00000010 	.word	0x00000010
     9b8:	0000000c 	.word	0x0000000c
     9bc:	00000958 	.word	0x00000958
     9c0:	08003dcc 	.word	0x08003dcc
     9c4:	0000000c 	.word	0x0000000c
     9c8:	0000000c 	.word	0x0000000c
     9cc:	00000958 	.word	0x00000958
     9d0:	08003dd8 	.word	0x08003dd8
     9d4:	0000000c 	.word	0x0000000c
     9d8:	0000000c 	.word	0x0000000c
     9dc:	00000958 	.word	0x00000958
     9e0:	08003de4 	.word	0x08003de4
     9e4:	00000010 	.word	0x00000010
     9e8:	0000000c 	.word	0x0000000c
     9ec:	00000958 	.word	0x00000958
     9f0:	08003df4 	.word	0x08003df4
     9f4:	00000010 	.word	0x00000010
     9f8:	0000000c 	.word	0x0000000c
     9fc:	00000958 	.word	0x00000958
     a00:	08003e04 	.word	0x08003e04
     a04:	0000001c 	.word	0x0000001c
     a08:	0000000c 	.word	0x0000000c
     a0c:	00000958 	.word	0x00000958
     a10:	08003e20 	.word	0x08003e20
     a14:	00000020 	.word	0x00000020
     a18:	0000000c 	.word	0x0000000c
     a1c:	00000958 	.word	0x00000958
     a20:	08003e40 	.word	0x08003e40
     a24:	0000000c 	.word	0x0000000c
     a28:	0000000c 	.word	0x0000000c
     a2c:	00000958 	.word	0x00000958
     a30:	08003e4c 	.word	0x08003e4c
     a34:	0000002c 	.word	0x0000002c
     a38:	00000018 	.word	0x00000018
     a3c:	00000958 	.word	0x00000958
     a40:	08003e78 	.word	0x08003e78
     a44:	00000094 	.word	0x00000094
     a48:	44080e42 	.word	0x44080e42
     a4c:	018e100e 	.word	0x018e100e
     a50:	00000284 	.word	0x00000284
     a54:	0000001c 	.word	0x0000001c
     a58:	00000958 	.word	0x00000958
     a5c:	08003f0c 	.word	0x08003f0c
     a60:	0000005c 	.word	0x0000005c
     a64:	8e140e42 	.word	0x8e140e42
     a68:	86028701 	.word	0x86028701
     a6c:	84048503 	.word	0x84048503
     a70:	180e4605 	.word	0x180e4605
     a74:	00000018 	.word	0x00000018
     a78:	00000958 	.word	0x00000958
     a7c:	08003f68 	.word	0x08003f68
     a80:	0000009c 	.word	0x0000009c
     a84:	8e0c0e42 	.word	0x8e0c0e42
     a88:	84028501 	.word	0x84028501
     a8c:	100e4403 	.word	0x100e4403
     a90:	00000014 	.word	0x00000014
     a94:	00000958 	.word	0x00000958
     a98:	08004004 	.word	0x08004004
     a9c:	000000c0 	.word	0x000000c0
     aa0:	8e080e42 	.word	0x8e080e42
     aa4:	00028401 	.word	0x00028401
     aa8:	00000018 	.word	0x00000018
     aac:	00000958 	.word	0x00000958
     ab0:	080040c4 	.word	0x080040c4
     ab4:	00000044 	.word	0x00000044
     ab8:	8e100e42 	.word	0x8e100e42
     abc:	85028601 	.word	0x85028601
     ac0:	00048403 	.word	0x00048403
     ac4:	00000018 	.word	0x00000018
     ac8:	00000958 	.word	0x00000958
     acc:	08004108 	.word	0x08004108
     ad0:	00000038 	.word	0x00000038
     ad4:	8e100e42 	.word	0x8e100e42
     ad8:	85028601 	.word	0x85028601
     adc:	00048403 	.word	0x00048403
     ae0:	00000018 	.word	0x00000018
     ae4:	00000958 	.word	0x00000958
     ae8:	08004140 	.word	0x08004140
     aec:	00000048 	.word	0x00000048
     af0:	8e100e42 	.word	0x8e100e42
     af4:	85028601 	.word	0x85028601
     af8:	00048403 	.word	0x00048403
     afc:	00000014 	.word	0x00000014
     b00:	00000958 	.word	0x00000958
     b04:	08004188 	.word	0x08004188
     b08:	00000078 	.word	0x00000078
     b0c:	8e080e42 	.word	0x8e080e42
     b10:	00028401 	.word	0x00028401
     b14:	00000014 	.word	0x00000014
     b18:	00000958 	.word	0x00000958
     b1c:	08004200 	.word	0x08004200
     b20:	0000003c 	.word	0x0000003c
     b24:	8e080e42 	.word	0x8e080e42
     b28:	00028401 	.word	0x00028401
     b2c:	00000018 	.word	0x00000018
     b30:	00000958 	.word	0x00000958
     b34:	0800423c 	.word	0x0800423c
     b38:	00000048 	.word	0x00000048
     b3c:	8e0c0e42 	.word	0x8e0c0e42
     b40:	84028501 	.word	0x84028501
     b44:	100e4403 	.word	0x100e4403
     b48:	0000000c 	.word	0x0000000c
     b4c:	ffffffff 	.word	0xffffffff
     b50:	7c010001 	.word	0x7c010001
     b54:	000d0c0e 	.word	0x000d0c0e
     b58:	0000001c 	.word	0x0000001c
     b5c:	00000b48 	.word	0x00000b48
     b60:	08004284 	.word	0x08004284
     b64:	000000a6 	.word	0x000000a6
     b68:	8e140e42 	.word	0x8e140e42
     b6c:	86028701 	.word	0x86028701
     b70:	84048503 	.word	0x84048503
     b74:	200e5a05 	.word	0x200e5a05
     b78:	0000000c 	.word	0x0000000c
     b7c:	00000b48 	.word	0x00000b48
     b80:	0800432c 	.word	0x0800432c
     b84:	00000010 	.word	0x00000010
     b88:	0000000c 	.word	0x0000000c
     b8c:	00000b48 	.word	0x00000b48
     b90:	0800433c 	.word	0x0800433c
     b94:	0000000c 	.word	0x0000000c
     b98:	0000000c 	.word	0x0000000c
     b9c:	00000b48 	.word	0x00000b48
     ba0:	08004348 	.word	0x08004348
     ba4:	00000006 	.word	0x00000006
     ba8:	0000000c 	.word	0x0000000c
     bac:	00000b48 	.word	0x00000b48
     bb0:	08004350 	.word	0x08004350
     bb4:	0000000c 	.word	0x0000000c
     bb8:	0000000c 	.word	0x0000000c
     bbc:	00000b48 	.word	0x00000b48
     bc0:	0800435c 	.word	0x0800435c
     bc4:	00000006 	.word	0x00000006
     bc8:	0000000c 	.word	0x0000000c
     bcc:	00000b48 	.word	0x00000b48
     bd0:	08004364 	.word	0x08004364
     bd4:	00000004 	.word	0x00000004
     bd8:	0000000c 	.word	0x0000000c
     bdc:	00000b48 	.word	0x00000b48
     be0:	08004368 	.word	0x08004368
     be4:	00000004 	.word	0x00000004
     be8:	0000000c 	.word	0x0000000c
     bec:	00000b48 	.word	0x00000b48
     bf0:	0800436c 	.word	0x0800436c
     bf4:	0000000a 	.word	0x0000000a
     bf8:	0000000c 	.word	0x0000000c
     bfc:	00000b48 	.word	0x00000b48
     c00:	08004378 	.word	0x08004378
     c04:	00000004 	.word	0x00000004
     c08:	0000000c 	.word	0x0000000c
     c0c:	00000b48 	.word	0x00000b48
     c10:	0800437c 	.word	0x0800437c
     c14:	00000010 	.word	0x00000010
     c18:	0000000c 	.word	0x0000000c
     c1c:	00000b48 	.word	0x00000b48
     c20:	0800438c 	.word	0x0800438c
     c24:	00000020 	.word	0x00000020
     c28:	0000000c 	.word	0x0000000c
     c2c:	00000b48 	.word	0x00000b48
     c30:	080043ac 	.word	0x080043ac
     c34:	0000000c 	.word	0x0000000c
     c38:	00000018 	.word	0x00000018
     c3c:	00000b48 	.word	0x00000b48
     c40:	080043b8 	.word	0x080043b8
     c44:	00000060 	.word	0x00000060
     c48:	8e0c0e42 	.word	0x8e0c0e42
     c4c:	84028501 	.word	0x84028501
     c50:	00000003 	.word	0x00000003
     c54:	00000014 	.word	0x00000014
     c58:	00000b48 	.word	0x00000b48
     c5c:	08004418 	.word	0x08004418
     c60:	00000034 	.word	0x00000034
     c64:	8e080e42 	.word	0x8e080e42
     c68:	00028401 	.word	0x00028401
     c6c:	00000014 	.word	0x00000014
     c70:	00000b48 	.word	0x00000b48
     c74:	0800444c 	.word	0x0800444c
     c78:	00000018 	.word	0x00000018
     c7c:	46040e42 	.word	0x46040e42
     c80:	018e080e 	.word	0x018e080e
     c84:	00000014 	.word	0x00000014
     c88:	00000b48 	.word	0x00000b48
     c8c:	08004464 	.word	0x08004464
     c90:	000000a8 	.word	0x000000a8
     c94:	44040e42 	.word	0x44040e42
     c98:	018e100e 	.word	0x018e100e
     c9c:	0000000c 	.word	0x0000000c
     ca0:	ffffffff 	.word	0xffffffff
     ca4:	7c010001 	.word	0x7c010001
     ca8:	000d0c0e 	.word	0x000d0c0e
     cac:	0000000c 	.word	0x0000000c
     cb0:	00000c9c 	.word	0x00000c9c
     cb4:	0800450c 	.word	0x0800450c
     cb8:	00000034 	.word	0x00000034
     cbc:	0000000c 	.word	0x0000000c
     cc0:	00000c9c 	.word	0x00000c9c
     cc4:	08004540 	.word	0x08004540
     cc8:	00000030 	.word	0x00000030
     ccc:	0000000c 	.word	0x0000000c
     cd0:	00000c9c 	.word	0x00000c9c
     cd4:	08004570 	.word	0x08004570
     cd8:	00000014 	.word	0x00000014
     cdc:	00000018 	.word	0x00000018
     ce0:	00000c9c 	.word	0x00000c9c
     ce4:	08004584 	.word	0x08004584
     ce8:	0000007c 	.word	0x0000007c
     cec:	8e0c0e42 	.word	0x8e0c0e42
     cf0:	84028501 	.word	0x84028501
     cf4:	00000003 	.word	0x00000003
     cf8:	0000000c 	.word	0x0000000c
     cfc:	00000c9c 	.word	0x00000c9c
     d00:	08004600 	.word	0x08004600
     d04:	0000000c 	.word	0x0000000c
     d08:	0000000c 	.word	0x0000000c
     d0c:	00000c9c 	.word	0x00000c9c
     d10:	0800460c 	.word	0x0800460c
     d14:	00000018 	.word	0x00000018
     d18:	0000000c 	.word	0x0000000c
     d1c:	00000c9c 	.word	0x00000c9c
     d20:	08004624 	.word	0x08004624
     d24:	00000024 	.word	0x00000024
     d28:	0000000c 	.word	0x0000000c
     d2c:	00000c9c 	.word	0x00000c9c
     d30:	08004648 	.word	0x08004648
     d34:	0000000c 	.word	0x0000000c
     d38:	0000000c 	.word	0x0000000c
     d3c:	00000c9c 	.word	0x00000c9c
     d40:	08004654 	.word	0x08004654
     d44:	00000018 	.word	0x00000018
     d48:	0000000c 	.word	0x0000000c
     d4c:	00000c9c 	.word	0x00000c9c
     d50:	0800466c 	.word	0x0800466c
     d54:	00000010 	.word	0x00000010
     d58:	0000000c 	.word	0x0000000c
     d5c:	00000c9c 	.word	0x00000c9c
     d60:	0800467c 	.word	0x0800467c
     d64:	00000024 	.word	0x00000024
     d68:	0000000c 	.word	0x0000000c
     d6c:	00000c9c 	.word	0x00000c9c
     d70:	080046a0 	.word	0x080046a0
     d74:	0000000c 	.word	0x0000000c
     d78:	0000000c 	.word	0x0000000c
     d7c:	00000c9c 	.word	0x00000c9c
     d80:	080046ac 	.word	0x080046ac
     d84:	00000014 	.word	0x00000014
     d88:	0000000c 	.word	0x0000000c
     d8c:	00000c9c 	.word	0x00000c9c
     d90:	080046c0 	.word	0x080046c0
     d94:	00000010 	.word	0x00000010
     d98:	0000000c 	.word	0x0000000c
     d9c:	00000c9c 	.word	0x00000c9c
     da0:	080046d0 	.word	0x080046d0
     da4:	00000010 	.word	0x00000010
     da8:	0000000c 	.word	0x0000000c
     dac:	00000c9c 	.word	0x00000c9c
     db0:	080046e0 	.word	0x080046e0
     db4:	0000001c 	.word	0x0000001c
     db8:	0000000c 	.word	0x0000000c
     dbc:	00000c9c 	.word	0x00000c9c
     dc0:	080046fc 	.word	0x080046fc
     dc4:	00000028 	.word	0x00000028
     dc8:	00000014 	.word	0x00000014
     dcc:	00000c9c 	.word	0x00000c9c
     dd0:	08004724 	.word	0x08004724
     dd4:	00000058 	.word	0x00000058
     dd8:	8e080e42 	.word	0x8e080e42
     ddc:	00028401 	.word	0x00028401
     de0:	0000000c 	.word	0x0000000c
     de4:	00000c9c 	.word	0x00000c9c
     de8:	0800477c 	.word	0x0800477c
     dec:	00000020 	.word	0x00000020
     df0:	0000000c 	.word	0x0000000c
     df4:	00000c9c 	.word	0x00000c9c
     df8:	0800479c 	.word	0x0800479c
     dfc:	00000018 	.word	0x00000018
     e00:	0000000c 	.word	0x0000000c
     e04:	00000c9c 	.word	0x00000c9c
     e08:	080047b4 	.word	0x080047b4
     e0c:	00000018 	.word	0x00000018
     e10:	0000000c 	.word	0x0000000c
     e14:	00000c9c 	.word	0x00000c9c
     e18:	080047cc 	.word	0x080047cc
     e1c:	00000020 	.word	0x00000020
     e20:	0000000c 	.word	0x0000000c
     e24:	00000c9c 	.word	0x00000c9c
     e28:	080047ec 	.word	0x080047ec
     e2c:	00000044 	.word	0x00000044
     e30:	0000000c 	.word	0x0000000c
     e34:	00000c9c 	.word	0x00000c9c
     e38:	08004830 	.word	0x08004830
     e3c:	00000014 	.word	0x00000014
     e40:	00000014 	.word	0x00000014
     e44:	00000c9c 	.word	0x00000c9c
     e48:	08004844 	.word	0x08004844
     e4c:	0000000c 	.word	0x0000000c
     e50:	42040e42 	.word	0x42040e42
     e54:	018e080e 	.word	0x018e080e
     e58:	00000014 	.word	0x00000014
     e5c:	00000c9c 	.word	0x00000c9c
     e60:	08004850 	.word	0x08004850
     e64:	0000000e 	.word	0x0000000e
     e68:	44040e42 	.word	0x44040e42
     e6c:	018e080e 	.word	0x018e080e
     e70:	00000014 	.word	0x00000014
     e74:	00000c9c 	.word	0x00000c9c
     e78:	08004860 	.word	0x08004860
     e7c:	0000000c 	.word	0x0000000c
     e80:	42040e42 	.word	0x42040e42
     e84:	018e080e 	.word	0x018e080e
     e88:	00000014 	.word	0x00000014
     e8c:	00000c9c 	.word	0x00000c9c
     e90:	0800486c 	.word	0x0800486c
     e94:	0000000c 	.word	0x0000000c
     e98:	42040e42 	.word	0x42040e42
     e9c:	018e080e 	.word	0x018e080e
     ea0:	00000014 	.word	0x00000014
     ea4:	00000c9c 	.word	0x00000c9c
     ea8:	08004878 	.word	0x08004878
     eac:	0000000c 	.word	0x0000000c
     eb0:	42040e42 	.word	0x42040e42
     eb4:	018e080e 	.word	0x018e080e
     eb8:	00000014 	.word	0x00000014
     ebc:	00000c9c 	.word	0x00000c9c
     ec0:	08004884 	.word	0x08004884
     ec4:	0000000c 	.word	0x0000000c
     ec8:	42040e42 	.word	0x42040e42
     ecc:	018e080e 	.word	0x018e080e
     ed0:	0000000c 	.word	0x0000000c
     ed4:	ffffffff 	.word	0xffffffff
     ed8:	7c010001 	.word	0x7c010001
     edc:	000d0c0e 	.word	0x000d0c0e
     ee0:	0000000c 	.word	0x0000000c
     ee4:	00000ed0 	.word	0x00000ed0
     ee8:	08004890 	.word	0x08004890
     eec:	0000000c 	.word	0x0000000c
     ef0:	0000000c 	.word	0x0000000c
     ef4:	00000ed0 	.word	0x00000ed0
     ef8:	0800489c 	.word	0x0800489c
     efc:	0000000c 	.word	0x0000000c
     f00:	0000000c 	.word	0x0000000c
     f04:	00000ed0 	.word	0x00000ed0
     f08:	080048a8 	.word	0x080048a8
     f0c:	00000014 	.word	0x00000014
     f10:	0000000c 	.word	0x0000000c
     f14:	00000ed0 	.word	0x00000ed0
     f18:	080048bc 	.word	0x080048bc
     f1c:	0000000c 	.word	0x0000000c
     f20:	0000000c 	.word	0x0000000c
     f24:	00000ed0 	.word	0x00000ed0
     f28:	080048c8 	.word	0x080048c8
     f2c:	00000014 	.word	0x00000014
     f30:	0000000c 	.word	0x0000000c
     f34:	00000ed0 	.word	0x00000ed0
     f38:	080048dc 	.word	0x080048dc
     f3c:	00000010 	.word	0x00000010
     f40:	00000014 	.word	0x00000014
     f44:	00000ed0 	.word	0x00000ed0
     f48:	080048ec 	.word	0x080048ec
     f4c:	00000034 	.word	0x00000034
     f50:	44040e44 	.word	0x44040e44
     f54:	018e080e 	.word	0x018e080e
     f58:	00000014 	.word	0x00000014
     f5c:	00000ed0 	.word	0x00000ed0
     f60:	08004920 	.word	0x08004920
     f64:	00000038 	.word	0x00000038
     f68:	44040e44 	.word	0x44040e44
     f6c:	018e080e 	.word	0x018e080e
     f70:	00000014 	.word	0x00000014
     f74:	00000ed0 	.word	0x00000ed0
     f78:	08004958 	.word	0x08004958
     f7c:	00000018 	.word	0x00000018
     f80:	8e080e42 	.word	0x8e080e42
     f84:	00028401 	.word	0x00028401
     f88:	0000000c 	.word	0x0000000c
     f8c:	ffffffff 	.word	0xffffffff
     f90:	7c010001 	.word	0x7c010001
     f94:	000d0c0e 	.word	0x000d0c0e
     f98:	0000000c 	.word	0x0000000c
     f9c:	00000f88 	.word	0x00000f88
     fa0:	08004970 	.word	0x08004970
     fa4:	00000040 	.word	0x00000040
     fa8:	0000000c 	.word	0x0000000c
     fac:	00000f88 	.word	0x00000f88
     fb0:	080049b0 	.word	0x080049b0
     fb4:	00000034 	.word	0x00000034
     fb8:	00000010 	.word	0x00000010
     fbc:	00000f88 	.word	0x00000f88
     fc0:	080049e4 	.word	0x080049e4
     fc4:	00000030 	.word	0x00000030
     fc8:	00080e42 	.word	0x00080e42
     fcc:	0000000c 	.word	0x0000000c
     fd0:	00000f88 	.word	0x00000f88
     fd4:	08004a14 	.word	0x08004a14
     fd8:	00000014 	.word	0x00000014
     fdc:	0000000c 	.word	0x0000000c
     fe0:	00000f88 	.word	0x00000f88
     fe4:	08004a28 	.word	0x08004a28
     fe8:	0000000c 	.word	0x0000000c
     fec:	0000000c 	.word	0x0000000c
     ff0:	00000f88 	.word	0x00000f88
     ff4:	08004a34 	.word	0x08004a34
     ff8:	00000014 	.word	0x00000014
     ffc:	0000000c 	.word	0x0000000c
    1000:	00000f88 	.word	0x00000f88
    1004:	08004a48 	.word	0x08004a48
    1008:	0000000c 	.word	0x0000000c
    100c:	0000000c 	.word	0x0000000c
    1010:	00000f88 	.word	0x00000f88
    1014:	08004a54 	.word	0x08004a54
    1018:	00000014 	.word	0x00000014
    101c:	0000000c 	.word	0x0000000c
    1020:	00000f88 	.word	0x00000f88
    1024:	08004a68 	.word	0x08004a68
    1028:	00000010 	.word	0x00000010
    102c:	0000000c 	.word	0x0000000c
    1030:	00000f88 	.word	0x00000f88
    1034:	08004a78 	.word	0x08004a78
    1038:	00000014 	.word	0x00000014
    103c:	0000000c 	.word	0x0000000c
    1040:	00000f88 	.word	0x00000f88
    1044:	08004a8c 	.word	0x08004a8c
    1048:	00000014 	.word	0x00000014
    104c:	0000000c 	.word	0x0000000c
    1050:	00000f88 	.word	0x00000f88
    1054:	08004aa0 	.word	0x08004aa0
    1058:	00000014 	.word	0x00000014
    105c:	0000000c 	.word	0x0000000c
    1060:	00000f88 	.word	0x00000f88
    1064:	08004ab4 	.word	0x08004ab4
    1068:	0000001c 	.word	0x0000001c
    106c:	0000000c 	.word	0x0000000c
    1070:	00000f88 	.word	0x00000f88
    1074:	08004ad0 	.word	0x08004ad0
    1078:	0000000c 	.word	0x0000000c
    107c:	0000000c 	.word	0x0000000c
    1080:	00000f88 	.word	0x00000f88
    1084:	08004adc 	.word	0x08004adc
    1088:	00000014 	.word	0x00000014
    108c:	0000000c 	.word	0x0000000c
    1090:	00000f88 	.word	0x00000f88
    1094:	08004af0 	.word	0x08004af0
    1098:	00000020 	.word	0x00000020
    109c:	0000000c 	.word	0x0000000c
    10a0:	00000f88 	.word	0x00000f88
    10a4:	08004b10 	.word	0x08004b10
    10a8:	0000000c 	.word	0x0000000c
    10ac:	0000000c 	.word	0x0000000c
    10b0:	00000f88 	.word	0x00000f88
    10b4:	08004b1c 	.word	0x08004b1c
    10b8:	00000010 	.word	0x00000010
    10bc:	0000000c 	.word	0x0000000c
    10c0:	00000f88 	.word	0x00000f88
    10c4:	08004b2c 	.word	0x08004b2c
    10c8:	0000000c 	.word	0x0000000c
    10cc:	0000000c 	.word	0x0000000c
    10d0:	00000f88 	.word	0x00000f88
    10d4:	08004b38 	.word	0x08004b38
    10d8:	000000b8 	.word	0x000000b8
    10dc:	0000000c 	.word	0x0000000c
    10e0:	00000f88 	.word	0x00000f88
    10e4:	08004bf0 	.word	0x08004bf0
    10e8:	0000001c 	.word	0x0000001c
    10ec:	0000000c 	.word	0x0000000c
    10f0:	00000f88 	.word	0x00000f88
    10f4:	08004c0c 	.word	0x08004c0c
    10f8:	0000001c 	.word	0x0000001c
    10fc:	0000000c 	.word	0x0000000c
    1100:	00000f88 	.word	0x00000f88
    1104:	08004c28 	.word	0x08004c28
    1108:	0000001c 	.word	0x0000001c
    110c:	0000000c 	.word	0x0000000c
    1110:	00000f88 	.word	0x00000f88
    1114:	08004c44 	.word	0x08004c44
    1118:	0000001c 	.word	0x0000001c
    111c:	0000000c 	.word	0x0000000c
    1120:	00000f88 	.word	0x00000f88
    1124:	08004c60 	.word	0x08004c60
    1128:	0000001c 	.word	0x0000001c
    112c:	0000000c 	.word	0x0000000c
    1130:	00000f88 	.word	0x00000f88
    1134:	08004c7c 	.word	0x08004c7c
    1138:	0000000c 	.word	0x0000000c
    113c:	0000000c 	.word	0x0000000c
    1140:	00000f88 	.word	0x00000f88
    1144:	08004c88 	.word	0x08004c88
    1148:	0000000c 	.word	0x0000000c
    114c:	0000000c 	.word	0x0000000c
    1150:	00000f88 	.word	0x00000f88
    1154:	08004c94 	.word	0x08004c94
    1158:	0000000c 	.word	0x0000000c
    115c:	0000000c 	.word	0x0000000c
    1160:	00000f88 	.word	0x00000f88
    1164:	08004ca0 	.word	0x08004ca0
    1168:	00000044 	.word	0x00000044
    116c:	0000000c 	.word	0x0000000c
    1170:	00000f88 	.word	0x00000f88
    1174:	08004ce4 	.word	0x08004ce4
    1178:	00000010 	.word	0x00000010
    117c:	0000000c 	.word	0x0000000c
    1180:	00000f88 	.word	0x00000f88
    1184:	08004cf4 	.word	0x08004cf4
    1188:	00000014 	.word	0x00000014
    118c:	0000000c 	.word	0x0000000c
    1190:	00000f88 	.word	0x00000f88
    1194:	08004d08 	.word	0x08004d08
    1198:	0000000c 	.word	0x0000000c
    119c:	0000000c 	.word	0x0000000c
    11a0:	ffffffff 	.word	0xffffffff
    11a4:	7c010001 	.word	0x7c010001
    11a8:	000d0c0e 	.word	0x000d0c0e
    11ac:	0000000c 	.word	0x0000000c
    11b0:	0000119c 	.word	0x0000119c
    11b4:	08004d14 	.word	0x08004d14
    11b8:	0000001c 	.word	0x0000001c
    11bc:	0000000c 	.word	0x0000000c
    11c0:	0000119c 	.word	0x0000119c
    11c4:	08004d30 	.word	0x08004d30
    11c8:	0000000c 	.word	0x0000000c
    11cc:	0000000c 	.word	0x0000000c
    11d0:	0000119c 	.word	0x0000119c
    11d4:	08004d3c 	.word	0x08004d3c
    11d8:	0000002c 	.word	0x0000002c
    11dc:	0000000c 	.word	0x0000000c
    11e0:	0000119c 	.word	0x0000119c
    11e4:	08004d68 	.word	0x08004d68
    11e8:	0000001c 	.word	0x0000001c
    11ec:	0000000c 	.word	0x0000000c
    11f0:	0000119c 	.word	0x0000119c
    11f4:	08004d84 	.word	0x08004d84
    11f8:	0000000c 	.word	0x0000000c
    11fc:	0000000c 	.word	0x0000000c
    1200:	0000119c 	.word	0x0000119c
    1204:	08004d90 	.word	0x08004d90
    1208:	00000028 	.word	0x00000028
    120c:	0000000c 	.word	0x0000000c
    1210:	ffffffff 	.word	0xffffffff
    1214:	7c010001 	.word	0x7c010001
    1218:	000d0c0e 	.word	0x000d0c0e
    121c:	00000010 	.word	0x00000010
    1220:	0000120c 	.word	0x0000120c
    1224:	08004db8 	.word	0x08004db8
    1228:	00000054 	.word	0x00000054
    122c:	00080e44 	.word	0x00080e44
    1230:	0000001c 	.word	0x0000001c
    1234:	0000120c 	.word	0x0000120c
    1238:	08004e0c 	.word	0x08004e0c
    123c:	000000b0 	.word	0x000000b0
    1240:	8e140e54 	.word	0x8e140e54
    1244:	86028701 	.word	0x86028701
    1248:	84048503 	.word	0x84048503
    124c:	200e7605 	.word	0x200e7605
    1250:	00000020 	.word	0x00000020
    1254:	0000120c 	.word	0x0000120c
    1258:	08004ebc 	.word	0x08004ebc
    125c:	000000b8 	.word	0x000000b8
    1260:	8e140e44 	.word	0x8e140e44
    1264:	86028701 	.word	0x86028701
    1268:	84048503 	.word	0x84048503
    126c:	0e400205 	.word	0x0e400205
    1270:	00000020 	.word	0x00000020
    1274:	00000020 	.word	0x00000020
    1278:	0000120c 	.word	0x0000120c
    127c:	08004f74 	.word	0x08004f74
    1280:	000000b4 	.word	0x000000b4
    1284:	8e140e44 	.word	0x8e140e44
    1288:	86028701 	.word	0x86028701
    128c:	84048503 	.word	0x84048503
    1290:	0e400205 	.word	0x0e400205
    1294:	00000020 	.word	0x00000020
    1298:	0000001c 	.word	0x0000001c
    129c:	0000120c 	.word	0x0000120c
    12a0:	08005028 	.word	0x08005028
    12a4:	00000094 	.word	0x00000094
    12a8:	4e140e44 	.word	0x4e140e44
    12ac:	018e280e 	.word	0x018e280e
    12b0:	03860287 	.word	0x03860287
    12b4:	05840485 	.word	0x05840485
    12b8:	00000018 	.word	0x00000018
    12bc:	0000120c 	.word	0x0000120c
    12c0:	080050bc 	.word	0x080050bc
    12c4:	0000016c 	.word	0x0000016c
    12c8:	8e0c0e44 	.word	0x8e0c0e44
    12cc:	84028501 	.word	0x84028501
    12d0:	00000003 	.word	0x00000003
    12d4:	0000001c 	.word	0x0000001c
    12d8:	0000120c 	.word	0x0000120c
    12dc:	08005228 	.word	0x08005228
    12e0:	0000015a 	.word	0x0000015a
    12e4:	8e140e44 	.word	0x8e140e44
    12e8:	86028701 	.word	0x86028701
    12ec:	84048503 	.word	0x84048503
    12f0:	00000005 	.word	0x00000005
    12f4:	0000000c 	.word	0x0000000c
    12f8:	0000120c 	.word	0x0000120c
    12fc:	08005384 	.word	0x08005384
    1300:	00000022 	.word	0x00000022
    1304:	0000000c 	.word	0x0000000c
    1308:	0000120c 	.word	0x0000120c
    130c:	080053a8 	.word	0x080053a8
    1310:	00000016 	.word	0x00000016
    1314:	0000000c 	.word	0x0000000c
    1318:	0000120c 	.word	0x0000120c
    131c:	080053c0 	.word	0x080053c0
    1320:	00000016 	.word	0x00000016
    1324:	0000000c 	.word	0x0000000c
    1328:	0000120c 	.word	0x0000120c
    132c:	080053d8 	.word	0x080053d8
    1330:	00000018 	.word	0x00000018
    1334:	0000000c 	.word	0x0000000c
    1338:	0000120c 	.word	0x0000120c
    133c:	080053f0 	.word	0x080053f0
    1340:	00000014 	.word	0x00000014
    1344:	0000000c 	.word	0x0000000c
    1348:	0000120c 	.word	0x0000120c
    134c:	08005404 	.word	0x08005404
    1350:	0000001a 	.word	0x0000001a
    1354:	0000000c 	.word	0x0000000c
    1358:	0000120c 	.word	0x0000120c
    135c:	08005420 	.word	0x08005420
    1360:	0000001c 	.word	0x0000001c
    1364:	0000000c 	.word	0x0000000c
    1368:	0000120c 	.word	0x0000120c
    136c:	0800543c 	.word	0x0800543c
    1370:	00000018 	.word	0x00000018
    1374:	0000000c 	.word	0x0000000c
    1378:	0000120c 	.word	0x0000120c
    137c:	08005454 	.word	0x08005454
    1380:	00000004 	.word	0x00000004
    1384:	0000000c 	.word	0x0000000c
    1388:	0000120c 	.word	0x0000120c
    138c:	08005458 	.word	0x08005458
    1390:	00000008 	.word	0x00000008
    1394:	0000000c 	.word	0x0000000c
    1398:	0000120c 	.word	0x0000120c
    139c:	08005460 	.word	0x08005460
    13a0:	00000018 	.word	0x00000018
    13a4:	0000000c 	.word	0x0000000c
    13a8:	0000120c 	.word	0x0000120c
    13ac:	08005478 	.word	0x08005478
    13b0:	0000000e 	.word	0x0000000e
    13b4:	0000000c 	.word	0x0000000c
    13b8:	0000120c 	.word	0x0000120c
    13bc:	08005488 	.word	0x08005488
    13c0:	0000001a 	.word	0x0000001a
    13c4:	00000014 	.word	0x00000014
    13c8:	0000120c 	.word	0x0000120c
    13cc:	080054a4 	.word	0x080054a4
    13d0:	00000092 	.word	0x00000092
    13d4:	8e080e42 	.word	0x8e080e42
    13d8:	00028401 	.word	0x00028401
    13dc:	0000000c 	.word	0x0000000c
    13e0:	0000120c 	.word	0x0000120c
    13e4:	08005538 	.word	0x08005538
    13e8:	00000028 	.word	0x00000028
    13ec:	0000000c 	.word	0x0000000c
    13f0:	0000120c 	.word	0x0000120c
    13f4:	08005560 	.word	0x08005560
    13f8:	00000022 	.word	0x00000022
    13fc:	0000000c 	.word	0x0000000c
    1400:	0000120c 	.word	0x0000120c
    1404:	08005584 	.word	0x08005584
    1408:	00000018 	.word	0x00000018
    140c:	0000000c 	.word	0x0000000c
    1410:	0000120c 	.word	0x0000120c
    1414:	0800559c 	.word	0x0800559c
    1418:	00000006 	.word	0x00000006
    141c:	0000000c 	.word	0x0000000c
    1420:	0000120c 	.word	0x0000120c
    1424:	080055a4 	.word	0x080055a4
    1428:	00000010 	.word	0x00000010
    142c:	0000000c 	.word	0x0000000c
    1430:	0000120c 	.word	0x0000120c
    1434:	080055b4 	.word	0x080055b4
    1438:	00000010 	.word	0x00000010
    143c:	00000018 	.word	0x00000018
    1440:	0000120c 	.word	0x0000120c
    1444:	080055c4 	.word	0x080055c4
    1448:	00000046 	.word	0x00000046
    144c:	8e0c0e46 	.word	0x8e0c0e46
    1450:	84028501 	.word	0x84028501
    1454:	00000003 	.word	0x00000003
    1458:	0000000c 	.word	0x0000000c
    145c:	0000120c 	.word	0x0000120c
    1460:	0800560c 	.word	0x0800560c
    1464:	00000010 	.word	0x00000010
    1468:	0000000c 	.word	0x0000000c
    146c:	0000120c 	.word	0x0000120c
    1470:	0800561c 	.word	0x0800561c
    1474:	00000014 	.word	0x00000014
    1478:	0000000c 	.word	0x0000000c
    147c:	0000120c 	.word	0x0000120c
    1480:	08005630 	.word	0x08005630
    1484:	00000010 	.word	0x00000010
    1488:	0000000c 	.word	0x0000000c
    148c:	0000120c 	.word	0x0000120c
    1490:	08005640 	.word	0x08005640
    1494:	00000014 	.word	0x00000014
    1498:	0000000c 	.word	0x0000000c
    149c:	0000120c 	.word	0x0000120c
    14a0:	08005654 	.word	0x08005654
    14a4:	0000001a 	.word	0x0000001a
    14a8:	0000000c 	.word	0x0000000c
    14ac:	0000120c 	.word	0x0000120c
    14b0:	08005670 	.word	0x08005670
    14b4:	0000001a 	.word	0x0000001a
    14b8:	0000000c 	.word	0x0000000c
    14bc:	0000120c 	.word	0x0000120c
    14c0:	0800568c 	.word	0x0800568c
    14c4:	0000001a 	.word	0x0000001a
    14c8:	0000000c 	.word	0x0000000c
    14cc:	0000120c 	.word	0x0000120c
    14d0:	080056a8 	.word	0x080056a8
    14d4:	0000001a 	.word	0x0000001a
    14d8:	0000000c 	.word	0x0000000c
    14dc:	0000120c 	.word	0x0000120c
    14e0:	080056c4 	.word	0x080056c4
    14e4:	00000010 	.word	0x00000010
    14e8:	0000000c 	.word	0x0000000c
    14ec:	0000120c 	.word	0x0000120c
    14f0:	080056d4 	.word	0x080056d4
    14f4:	00000014 	.word	0x00000014
    14f8:	0000000c 	.word	0x0000000c
    14fc:	0000120c 	.word	0x0000120c
    1500:	080056e8 	.word	0x080056e8
    1504:	00000010 	.word	0x00000010
    1508:	0000000c 	.word	0x0000000c
    150c:	0000120c 	.word	0x0000120c
    1510:	080056f8 	.word	0x080056f8
    1514:	00000014 	.word	0x00000014
    1518:	0000000c 	.word	0x0000000c
    151c:	0000120c 	.word	0x0000120c
    1520:	0800570c 	.word	0x0800570c
    1524:	00000010 	.word	0x00000010
    1528:	0000000c 	.word	0x0000000c
    152c:	0000120c 	.word	0x0000120c
    1530:	0800571c 	.word	0x0800571c
    1534:	00000014 	.word	0x00000014
    1538:	0000000c 	.word	0x0000000c
    153c:	0000120c 	.word	0x0000120c
    1540:	08005730 	.word	0x08005730
    1544:	00000010 	.word	0x00000010
    1548:	0000000c 	.word	0x0000000c
    154c:	0000120c 	.word	0x0000120c
    1550:	08005740 	.word	0x08005740
    1554:	00000014 	.word	0x00000014
    1558:	0000000c 	.word	0x0000000c
    155c:	0000120c 	.word	0x0000120c
    1560:	08005754 	.word	0x08005754
    1564:	00000010 	.word	0x00000010
    1568:	0000000c 	.word	0x0000000c
    156c:	0000120c 	.word	0x0000120c
    1570:	08005764 	.word	0x08005764
    1574:	00000010 	.word	0x00000010
    1578:	0000000c 	.word	0x0000000c
    157c:	0000120c 	.word	0x0000120c
    1580:	08005774 	.word	0x08005774
    1584:	00000010 	.word	0x00000010
    1588:	0000000c 	.word	0x0000000c
    158c:	0000120c 	.word	0x0000120c
    1590:	08005784 	.word	0x08005784
    1594:	00000010 	.word	0x00000010
    1598:	0000000c 	.word	0x0000000c
    159c:	0000120c 	.word	0x0000120c
    15a0:	08005794 	.word	0x08005794
    15a4:	00000010 	.word	0x00000010
    15a8:	0000000c 	.word	0x0000000c
    15ac:	0000120c 	.word	0x0000120c
    15b0:	080057a4 	.word	0x080057a4
    15b4:	00000010 	.word	0x00000010
    15b8:	0000000c 	.word	0x0000000c
    15bc:	0000120c 	.word	0x0000120c
    15c0:	080057b4 	.word	0x080057b4
    15c4:	00000014 	.word	0x00000014
    15c8:	0000000c 	.word	0x0000000c
    15cc:	0000120c 	.word	0x0000120c
    15d0:	080057c8 	.word	0x080057c8
    15d4:	00000014 	.word	0x00000014
    15d8:	0000000c 	.word	0x0000000c
    15dc:	0000120c 	.word	0x0000120c
    15e0:	080057dc 	.word	0x080057dc
    15e4:	00000014 	.word	0x00000014
    15e8:	0000000c 	.word	0x0000000c
    15ec:	0000120c 	.word	0x0000120c
    15f0:	080057f0 	.word	0x080057f0
    15f4:	00000014 	.word	0x00000014
    15f8:	0000000c 	.word	0x0000000c
    15fc:	0000120c 	.word	0x0000120c
    1600:	08005804 	.word	0x08005804
    1604:	00000014 	.word	0x00000014
    1608:	0000000c 	.word	0x0000000c
    160c:	0000120c 	.word	0x0000120c
    1610:	08005818 	.word	0x08005818
    1614:	00000020 	.word	0x00000020
    1618:	0000000c 	.word	0x0000000c
    161c:	0000120c 	.word	0x0000120c
    1620:	08005838 	.word	0x08005838
    1624:	00000020 	.word	0x00000020
    1628:	00000010 	.word	0x00000010
    162c:	0000120c 	.word	0x0000120c
    1630:	08005858 	.word	0x08005858
    1634:	00000068 	.word	0x00000068
    1638:	00080e4a 	.word	0x00080e4a
    163c:	0000000c 	.word	0x0000000c
    1640:	0000120c 	.word	0x0000120c
    1644:	080058c0 	.word	0x080058c0
    1648:	0000001a 	.word	0x0000001a
    164c:	0000000c 	.word	0x0000000c
    1650:	0000120c 	.word	0x0000120c
    1654:	080058dc 	.word	0x080058dc
    1658:	0000001a 	.word	0x0000001a
    165c:	0000000c 	.word	0x0000000c
    1660:	0000120c 	.word	0x0000120c
    1664:	080058f8 	.word	0x080058f8
    1668:	0000001a 	.word	0x0000001a
    166c:	0000000c 	.word	0x0000000c
    1670:	0000120c 	.word	0x0000120c
    1674:	08005914 	.word	0x08005914
    1678:	00000016 	.word	0x00000016
    167c:	0000000c 	.word	0x0000000c
    1680:	0000120c 	.word	0x0000120c
    1684:	0800592c 	.word	0x0800592c
    1688:	00000016 	.word	0x00000016
    168c:	0000000c 	.word	0x0000000c
    1690:	0000120c 	.word	0x0000120c
    1694:	08005944 	.word	0x08005944
    1698:	00000016 	.word	0x00000016
    169c:	0000000c 	.word	0x0000000c
    16a0:	0000120c 	.word	0x0000120c
    16a4:	0800595c 	.word	0x0800595c
    16a8:	00000016 	.word	0x00000016
    16ac:	0000000c 	.word	0x0000000c
    16b0:	0000120c 	.word	0x0000120c
    16b4:	08005974 	.word	0x08005974
    16b8:	00000004 	.word	0x00000004
    16bc:	0000000c 	.word	0x0000000c
    16c0:	0000120c 	.word	0x0000120c
    16c4:	08005978 	.word	0x08005978
    16c8:	00000004 	.word	0x00000004
    16cc:	0000000c 	.word	0x0000000c
    16d0:	0000120c 	.word	0x0000120c
    16d4:	0800597c 	.word	0x0800597c
    16d8:	00000004 	.word	0x00000004
    16dc:	0000000c 	.word	0x0000000c
    16e0:	0000120c 	.word	0x0000120c
    16e4:	08005980 	.word	0x08005980
    16e8:	00000004 	.word	0x00000004
    16ec:	0000000c 	.word	0x0000000c
    16f0:	0000120c 	.word	0x0000120c
    16f4:	08005984 	.word	0x08005984
    16f8:	00000004 	.word	0x00000004
    16fc:	0000000c 	.word	0x0000000c
    1700:	0000120c 	.word	0x0000120c
    1704:	08005988 	.word	0x08005988
    1708:	00000006 	.word	0x00000006
    170c:	0000000c 	.word	0x0000000c
    1710:	0000120c 	.word	0x0000120c
    1714:	08005990 	.word	0x08005990
    1718:	00000016 	.word	0x00000016
    171c:	0000000c 	.word	0x0000000c
    1720:	0000120c 	.word	0x0000120c
    1724:	080059a8 	.word	0x080059a8
    1728:	0000001a 	.word	0x0000001a
    172c:	000c      	.short	0x000c
    172e:	00          	.byte	0x00
    172f:	00          	.byte	0x00
    1730:	0000120c 	.word	0x0000120c
    1734:	080059c4 	.word	0x080059c4
    1738:	00000016 	.word	0x00000016
    173c:	0000000c 	.word	0x0000000c
    1740:	0000120c 	.word	0x0000120c
    1744:	080059dc 	.word	0x080059dc
    1748:	0000001a 	.word	0x0000001a
    174c:	0000000c 	.word	0x0000000c
    1750:	0000120c 	.word	0x0000120c
    1754:	080059f8 	.word	0x080059f8
    1758:	00000010 	.word	0x00000010
    175c:	0000000c 	.word	0x0000000c
    1760:	0000120c 	.word	0x0000120c
    1764:	08005a08 	.word	0x08005a08
    1768:	00000006 	.word	0x00000006
    176c:	0000000c 	.word	0x0000000c
    1770:	0000120c 	.word	0x0000120c
    1774:	08005a10 	.word	0x08005a10
    1778:	00000006 	.word	0x00000006
    177c:	0000000c 	.word	0x0000000c
    1780:	0000120c 	.word	0x0000120c
    1784:	08005a18 	.word	0x08005a18
    1788:	00000006 	.word	0x00000006
    178c:	0000000c 	.word	0x0000000c
    1790:	0000120c 	.word	0x0000120c
    1794:	08005a20 	.word	0x08005a20
    1798:	00000008 	.word	0x00000008
    179c:	0000000c 	.word	0x0000000c
    17a0:	0000120c 	.word	0x0000120c
    17a4:	08005a28 	.word	0x08005a28
    17a8:	00000006 	.word	0x00000006
    17ac:	0000000c 	.word	0x0000000c
    17b0:	0000120c 	.word	0x0000120c
    17b4:	08005a30 	.word	0x08005a30
    17b8:	00000006 	.word	0x00000006
    17bc:	0000000c 	.word	0x0000000c
    17c0:	0000120c 	.word	0x0000120c
    17c4:	08005a38 	.word	0x08005a38
    17c8:	0000000c 	.word	0x0000000c
    17cc:	0000000c 	.word	0x0000000c
    17d0:	0000120c 	.word	0x0000120c
    17d4:	08005a44 	.word	0x08005a44
    17d8:	0000000a 	.word	0x0000000a
    17dc:	0000000c 	.word	0x0000000c
    17e0:	0000120c 	.word	0x0000120c
    17e4:	08005a50 	.word	0x08005a50
    17e8:	00000018 	.word	0x00000018
    17ec:	0000000c 	.word	0x0000000c
    17f0:	0000120c 	.word	0x0000120c
    17f4:	08005a68 	.word	0x08005a68
    17f8:	0000000a 	.word	0x0000000a
    17fc:	00000014 	.word	0x00000014
    1800:	0000120c 	.word	0x0000120c
    1804:	08005a74 	.word	0x08005a74
    1808:	000000cc 	.word	0x000000cc
    180c:	44040e42 	.word	0x44040e42
    1810:	018e100e 	.word	0x018e100e
    1814:	0000000c 	.word	0x0000000c
    1818:	ffffffff 	.word	0xffffffff
    181c:	7c010001 	.word	0x7c010001
    1820:	000d0c0e 	.word	0x000d0c0e
    1824:	0000000c 	.word	0x0000000c
    1828:	00001814 	.word	0x00001814
    182c:	08005b40 	.word	0x08005b40
    1830:	0000001e 	.word	0x0000001e
    1834:	0000000c 	.word	0x0000000c
    1838:	00001814 	.word	0x00001814
    183c:	08005b60 	.word	0x08005b60
    1840:	00000028 	.word	0x00000028
    1844:	0000000c 	.word	0x0000000c
    1848:	00001814 	.word	0x00001814
    184c:	08005b88 	.word	0x08005b88
    1850:	0000000e 	.word	0x0000000e
    1854:	0000000c 	.word	0x0000000c
    1858:	00001814 	.word	0x00001814
    185c:	08005b98 	.word	0x08005b98
    1860:	0000001a 	.word	0x0000001a
    1864:	00000010 	.word	0x00000010
    1868:	00001814 	.word	0x00001814
    186c:	08005bb4 	.word	0x08005bb4
    1870:	0000003e 	.word	0x0000003e
    1874:	00080e4e 	.word	0x00080e4e
    1878:	0000000c 	.word	0x0000000c
    187c:	00001814 	.word	0x00001814
    1880:	08005bf4 	.word	0x08005bf4
    1884:	00000018 	.word	0x00000018
    1888:	0000000c 	.word	0x0000000c
    188c:	00001814 	.word	0x00001814
    1890:	08005c0c 	.word	0x08005c0c
    1894:	00000016 	.word	0x00000016
    1898:	0000000c 	.word	0x0000000c
    189c:	00001814 	.word	0x00001814
    18a0:	08005c24 	.word	0x08005c24
    18a4:	00000016 	.word	0x00000016
    18a8:	0000000c 	.word	0x0000000c
    18ac:	00001814 	.word	0x00001814
    18b0:	08005c3c 	.word	0x08005c3c
    18b4:	0000001a 	.word	0x0000001a
    18b8:	0000000c 	.word	0x0000000c
    18bc:	00001814 	.word	0x00001814
    18c0:	08005c58 	.word	0x08005c58
    18c4:	00000016 	.word	0x00000016
    18c8:	0000000c 	.word	0x0000000c
    18cc:	00001814 	.word	0x00001814
    18d0:	08005c70 	.word	0x08005c70
    18d4:	0000001a 	.word	0x0000001a
    18d8:	0000000c 	.word	0x0000000c
    18dc:	00001814 	.word	0x00001814
    18e0:	08005c8c 	.word	0x08005c8c
    18e4:	00000008 	.word	0x00000008
    18e8:	0000000c 	.word	0x0000000c
    18ec:	00001814 	.word	0x00001814
    18f0:	08005c94 	.word	0x08005c94
    18f4:	00000008 	.word	0x00000008
    18f8:	0000000c 	.word	0x0000000c
    18fc:	00001814 	.word	0x00001814
    1900:	08005c9c 	.word	0x08005c9c
    1904:	0000000c 	.word	0x0000000c
    1908:	0000000c 	.word	0x0000000c
    190c:	00001814 	.word	0x00001814
    1910:	08005ca8 	.word	0x08005ca8
    1914:	00000012 	.word	0x00000012
    1918:	0000000c 	.word	0x0000000c
    191c:	00001814 	.word	0x00001814
    1920:	08005cbc 	.word	0x08005cbc
    1924:	00000012 	.word	0x00000012
    1928:	0000000c 	.word	0x0000000c
    192c:	00001814 	.word	0x00001814
    1930:	08005cd0 	.word	0x08005cd0
    1934:	0000001a 	.word	0x0000001a
    1938:	0000000c 	.word	0x0000000c
    193c:	00001814 	.word	0x00001814
    1940:	08005cec 	.word	0x08005cec
    1944:	0000001a 	.word	0x0000001a
    1948:	0000000c 	.word	0x0000000c
    194c:	00001814 	.word	0x00001814
    1950:	08005d08 	.word	0x08005d08
    1954:	0000001a 	.word	0x0000001a
    1958:	0000000c 	.word	0x0000000c
    195c:	00001814 	.word	0x00001814
    1960:	08005d24 	.word	0x08005d24
    1964:	00000016 	.word	0x00000016
    1968:	0000000c 	.word	0x0000000c
    196c:	00001814 	.word	0x00001814
    1970:	08005d3c 	.word	0x08005d3c
    1974:	0000001a 	.word	0x0000001a
    1978:	0000000c 	.word	0x0000000c
    197c:	00001814 	.word	0x00001814
    1980:	08005d58 	.word	0x08005d58
    1984:	0000000c 	.word	0x0000000c
    1988:	0000000c 	.word	0x0000000c
    198c:	00001814 	.word	0x00001814
    1990:	08005d64 	.word	0x08005d64
    1994:	0000000a 	.word	0x0000000a
    1998:	0000000c 	.word	0x0000000c
    199c:	00001814 	.word	0x00001814
    19a0:	08005d70 	.word	0x08005d70
    19a4:	0000004a 	.word	0x0000004a
    19a8:	0000000c 	.word	0x0000000c
    19ac:	00001814 	.word	0x00001814
    19b0:	08005dbc 	.word	0x08005dbc
    19b4:	00000010 	.word	0x00000010
    19b8:	0000001c 	.word	0x0000001c
    19bc:	00001814 	.word	0x00001814
    19c0:	08005dcc 	.word	0x08005dcc
    19c4:	0000009c 	.word	0x0000009c
    19c8:	8e100e54 	.word	0x8e100e54
    19cc:	85028601 	.word	0x85028601
    19d0:	6c048403 	.word	0x6c048403
    19d4:	0000300e 	.word	0x0000300e
    19d8:	00000014 	.word	0x00000014
    19dc:	00001814 	.word	0x00001814
    19e0:	08005e68 	.word	0x08005e68
    19e4:	00000094 	.word	0x00000094
    19e8:	44040e42 	.word	0x44040e42
    19ec:	018e100e 	.word	0x018e100e
    19f0:	0000000c 	.word	0x0000000c
    19f4:	ffffffff 	.word	0xffffffff
    19f8:	7c010001 	.word	0x7c010001
    19fc:	000d0c0e 	.word	0x000d0c0e
    1a00:	00000018 	.word	0x00000018
    1a04:	000019f0 	.word	0x000019f0
    1a08:	08005f6c 	.word	0x08005f6c
    1a0c:	00000054 	.word	0x00000054
    1a10:	000d0946 	.word	0x000d0946
    1a14:	8e080e44 	.word	0x8e080e44
    1a18:	00028d01 	.word	0x00028d01
    1a1c:	0000000c 	.word	0x0000000c
    1a20:	ffffffff 	.word	0xffffffff
    1a24:	7c010001 	.word	0x7c010001
    1a28:	000d0c0e 	.word	0x000d0c0e
    1a2c:	00000014 	.word	0x00000014
    1a30:	00001a1c 	.word	0x00001a1c
    1a34:	00000000 	.word	0x00000000
    1a38:	00000028 	.word	0x00000028
    1a3c:	4c040e44 	.word	0x4c040e44
    1a40:	018e080e 	.word	0x018e080e
    1a44:	0000000c 	.word	0x0000000c
    1a48:	ffffffff 	.word	0xffffffff
    1a4c:	7c010001 	.word	0x7c010001
    1a50:	000d0c0e 	.word	0x000d0c0e
    1a54:	0000000c 	.word	0x0000000c
    1a58:	00001a44 	.word	0x00001a44
    1a5c:	00000000 	.word	0x00000000
    1a60:	00000030 	.word	0x00000030
    1a64:	0000000c 	.word	0x0000000c
    1a68:	ffffffff 	.word	0xffffffff
    1a6c:	7c010001 	.word	0x7c010001
    1a70:	000d0c0e 	.word	0x000d0c0e
    1a74:	00000018 	.word	0x00000018
    1a78:	00001a64 	.word	0x00001a64
    1a7c:	00000000 	.word	0x00000000
    1a80:	00000048 	.word	0x00000048
    1a84:	8e100e44 	.word	0x8e100e44
    1a88:	85028601 	.word	0x85028601
    1a8c:	00048403 	.word	0x00048403
    1a90:	00000018 	.word	0x00000018
    1a94:	00001a64 	.word	0x00001a64
    1a98:	00000000 	.word	0x00000000
    1a9c:	00000080 	.word	0x00000080
    1aa0:	8e100e44 	.word	0x8e100e44
    1aa4:	85028601 	.word	0x85028601
    1aa8:	00048403 	.word	0x00048403
    1aac:	0000000c 	.word	0x0000000c
    1ab0:	ffffffff 	.word	0xffffffff
    1ab4:	7c010001 	.word	0x7c010001
    1ab8:	000d0c0e 	.word	0x000d0c0e
    1abc:	00000014 	.word	0x00000014
    1ac0:	00001aac 	.word	0x00001aac
    1ac4:	00000000 	.word	0x00000000
    1ac8:	000000d0 	.word	0x000000d0
    1acc:	85080e48 	.word	0x85080e48
    1ad0:	00028401 	.word	0x00028401
    1ad4:	0000000c 	.word	0x0000000c
    1ad8:	ffffffff 	.word	0xffffffff
    1adc:	7c010001 	.word	0x7c010001
    1ae0:	000d0c0e 	.word	0x000d0c0e
    1ae4:	0000001c 	.word	0x0000001c
    1ae8:	00001ad4 	.word	0x00001ad4
    1aec:	00000000 	.word	0x00000000
    1af0:	0000009c 	.word	0x0000009c
    1af4:	88140e48 	.word	0x88140e48
    1af8:	86028701 	.word	0x86028701
    1afc:	84048503 	.word	0x84048503
    1b00:	00000005 	.word	0x00000005
    1b04:	0000000c 	.word	0x0000000c
    1b08:	ffffffff 	.word	0xffffffff
    1b0c:	7c010001 	.word	0x7c010001
    1b10:	000d0c0e 	.word	0x000d0c0e
    1b14:	00000024 	.word	0x00000024
    1b18:	00001b04 	.word	0x00001b04
    1b1c:	00000000 	.word	0x00000000
    1b20:	0000010c 	.word	0x0000010c
    1b24:	8e240e44 	.word	0x8e240e44
    1b28:	8a028b01 	.word	0x8a028b01
    1b2c:	88048903 	.word	0x88048903
    1b30:	86068705 	.word	0x86068705
    1b34:	84088507 	.word	0x84088507
    1b38:	300e4c09 	.word	0x300e4c09

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4f495047 	svcmi	0x00495047
       4:	646f4d5f 	strbtvs	r4, [pc], #3423	; c <_Minimum_Stack_Size-0xf4>
       8:	754f5f65 	strbvc	r5, [pc, #-3941]	; fffff0ab <SCS_BASE+0x1fff10ab>
       c:	50505f74 	subspl	r5, r0, r4, ror pc
      10:	52524500 	subspl	r4, r2, #0	; 0x0
      14:	5300524f 	movwpl	r5, #591	; 0x24f
      18:	74726174 	ldrbtvc	r6, [r2], #-372
      1c:	656d6954 	strbvs	r6, [sp, #-2388]!
      20:	4d495400 	cfstrdmi	mvd5, [r9]
      24:	6572505f 	ldrbvs	r5, [r2, #-95]!
      28:	6c616373 	stclvs	3, cr6, [r1], #-460
      2c:	42007265 	andmi	r7, r0, #1342177286	; 0x50000006
      30:	00525253 	subseq	r5, r2, r3, asr r2
      34:	61656c43 	cmnvs	r5, r3, asr #24
      38:	66754272 	undefined
      3c:	32726566 	rsbscc	r6, r2, #427819008	; 0x19800000
      40:	54003635 	strpl	r3, [r0], #-1589
      44:	4f5f4d49 	svcmi	0x005f4d49
      48:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
      4c:	70795474 	rsbsvc	r5, r9, r4, ror r4
      50:	66654465 	strbtvs	r4, [r5], -r5, ror #8
      54:	52626700 	rsbpl	r6, r2, #0	; 0x0
      58:	66754278 	undefined
      5c:	57726566 	ldrbpl	r6, [r2, -r6, ror #10]!
      60:	65746972 	ldrbvs	r6, [r4, #-2418]!
      64:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
      68:	00726574 	rsbseq	r6, r2, r4, ror r5
      6c:	4f495047 	svcmi	0x00495047
      70:	646f4d5f 	strbtvs	r4, [pc], #3423	; 78 <_Minimum_Stack_Size-0x88>
      74:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
      78:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
      7c:	616c6f50 	cmnvs	ip, r0, asr pc
      80:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
      84:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      88:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
      8c:	3a43006e 	bcc	10c024c <__Stack_Size+0x10bfe4c>
      90:	6573555c 	ldrbvs	r5, [r3, #-1372]!
      94:	4d5c7372 	ldclmi	3, cr7, [ip, #-456]
      98:	5c637261 	sfmpl	f7, 2, [r3], #-388
      9c:	75636f44 	strbvc	r6, [r3, #-3908]!
      a0:	746e656d 	strbtvc	r6, [lr], #-1389
      a4:	69475c73 	stmdbvs	r7, {r0, r1, r4, r5, r6, sl, fp, ip, lr}^
      a8:	62754874 	rsbsvs	r4, r5, #7602176	; 0x740000
      ac:	336d435c 	cmncc	sp, #1879048193	; 0x70000001
      b0:	7361745f 	cmnvc	r1, #1593835520	; 0x5f000000
      b4:	575c316b 	ldrbpl	r3, [ip, -fp, ror #2]
      b8:	6c656568 	cfstr64vs	mvdx6, [r5], #-416
      bc:	6f526465 	svcvs	0x00526465
      c0:	52746f62 	rsbspl	r6, r4, #392	; 0x188
      c4:	746f6d65 	strbtvc	r6, [pc], #3429	; cc <_Minimum_Stack_Size-0x34>
      c8:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
      cc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
      d0:	62003156 	andvs	r3, r0, #-2147483627	; 0x80000015
      d4:	72647561 	rsbvc	r7, r4, #406847488	; 0x18400000
      d8:	00657461 	rsbeq	r7, r5, r1, ror #8
      dc:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
      e0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
      e4:	74536c61 	ldrbvc	r6, [r3], #-3169
      e8:	00657461 	rsbeq	r7, r5, r1, ror #8
      ec:	64756142 	ldrbtvs	r6, [r5], #-322
      f0:	65746172 	ldrbvs	r6, [r4, #-370]!
      f4:	4c58445f 	cfldrdmi	mvd4, [r8], {95}
      f8:	72724500 	rsbsvc	r4, r2, #0	; 0x0
      fc:	7453726f 	ldrbvc	r7, [r3], #-623
     100:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     104:	444e4900 	strbmi	r4, [lr], #-2304
     108:	62005845 	andvs	r5, r0, #4521984	; 0x450000
     10c:	44647854 	strbtmi	r7, [r4], #-2132
     110:	00617461 	rsbeq	r7, r1, r1, ror #8
     114:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     118:	6f575f54 	svcvs	0x00575f54
     11c:	654c6472 	strbvs	r6, [ip, #-1138]
     120:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     124:	4d495400 	cfstrdmi	mvd5, [r9]
     128:	7265505f 	rsbvc	r5, r5, #95	; 0x5f
     12c:	00646f69 	rsbeq	r6, r4, r9, ror #30
     130:	766f4d62 	strbtvc	r4, [pc], -r2, ror #26
     134:	00676e69 	rsbeq	r6, r7, r9, ror #28
     138:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     13c:	74535f54 	ldrbvc	r5, [r3], #-3924
     140:	6942706f 	stmdbvs	r2, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
     144:	54007374 	strpl	r7, [r0], #-884
     148:	4f5f4d49 	svcmi	0x005f4d49
     14c:	6c644943 	stclvs	9, cr4, [r4], #-268
     150:	61745365 	cmnvs	r4, r5, ror #6
     154:	43006574 	movwmi	r6, #1396	; 0x574
     158:	5f315243 	svcpl	0x00315243
     15c:	006c6156 	rsbeq	r6, ip, r6, asr r1
     160:	4f495047 	svcmi	0x00495047
     164:	6570535f 	ldrbvs	r5, [r0, #-863]!
     168:	325f6465 	subscc	r6, pc, #1694498816	; 0x65000000
     16c:	007a484d 	rsbseq	r4, sl, sp, asr #16
     170:	52505447 	subspl	r5, r0, #1191182336	; 0x47000000
     174:	44785400 	ldrbtmi	r5, [r8], #-1024
     178:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     17c:	5400676e 	strpl	r6, [r0], #-1902
     180:	505f4d49 	subspl	r4, pc, r9, asr #26
     184:	65736c75 	ldrbvs	r6, [r3, #-3189]!
     188:	41535500 	cmpmi	r3, r0, lsl #10
     18c:	425f5452 	subsmi	r5, pc, #1375731712	; 0x52000000
     190:	52647561 	rsbpl	r7, r4, #406847488	; 0x18400000
     194:	00657461 	rsbeq	r7, r5, r1, ror #8
     198:	5f4d4954 	svcpl	0x004d4954
     19c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     1a0:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
     1a4:	6f697369 	svcvs	0x00697369
     1a8:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     1ac:	754f5f4d 	strbvc	r5, [pc, #-3917]	; fffff267 <SCS_BASE+0x1fff1267>
     1b0:	74757074 	ldrbtvc	r7, [r5], #-116
     1b4:	74617453 	strbtvc	r7, [r1], #-1107
     1b8:	44420065 	strbmi	r0, [r2], #-101
     1bc:	62005254 	andvs	r5, r0, #1073741829	; 0x40000005
     1c0:	61746144 	cmnvs	r4, r4, asr #2
     1c4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     1c8:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     1cc:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     1d0:	65446570 	strbvs	r6, [r4, #-1392]
     1d4:	53620066 	cmnpl	r2, #102	; 0x66
     1d8:	44746e65 	ldrbtmi	r6, [r4], #-3685
     1dc:	00617461 	rsbeq	r7, r1, r1, ror #8
     1e0:	31524343 	cmpcc	r2, r3, asr #6
     1e4:	52434300 	subpl	r4, r3, #0	; 0x0
     1e8:	43430032 	movtmi	r0, #12338	; 0x3032
     1ec:	43003352 	movwmi	r3, #850	; 0x352
     1f0:	00345243 	eorseq	r5, r4, r3, asr #4
     1f4:	524d4343 	subpl	r4, sp, #201326593	; 0xc000001
     1f8:	43430031 	movtmi	r0, #12337	; 0x3031
     1fc:	0032524d 	eorseq	r5, r2, sp, asr #4
     200:	4f495047 	svcmi	0x00495047
     204:	6570535f 	ldrbvs	r5, [r0, #-863]!
     208:	315f6465 	cmpcc	pc, r5, ror #8
     20c:	7a484d30 	bvc	12136d4 <__Stack_Size+0x12132d4>
     210:	44785400 	ldrbtmi	r5, [r8], #-1024
     214:	65747942 	ldrbvs	r7, [r4, #-2370]!
     218:	0043505f 	subeq	r5, r3, pc, asr r0
     21c:	74706163 	ldrbtvc	r6, [r0], #-355
     220:	00657275 	rsbeq	r7, r5, r5, ror r2
     224:	6e655377 	mcrvs	3, 3, r5, cr5, cr7, {3}
     228:	74614474 	strbtvc	r4, [r1], #-1140
     22c:	50410061 	subpl	r0, r1, r1, rrx
     230:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
     234:	616d2f63 	cmnvs	sp, r3, ror #30
     238:	632e6e69 	teqvs	lr, #1680	; 0x690
     23c:	6c6f5600 	stclvs	6, cr5, [pc]
     240:	65676174 	strbvs	r6, [r7, #-372]!
     244:	44785200 	ldrbtmi	r5, [r8], #-512
     248:	746e4930 	strbtvc	r4, [lr], #-2352
     24c:	75727265 	ldrbvc	r7, [r2, #-613]!
     250:	50007470 	andpl	r7, r0, r0, ror r4
     254:	746e6972 	strbtvc	r6, [lr], #-2418
     258:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!
     25c:	74617453 	strbtvc	r7, [r1], #-1107
     260:	47007375 	smlsdxmi	r0, r5, r3, r7
     264:	5f4f4950 	svcpl	0x004f4950
     268:	65646f4d 	strbvs	r6, [r4, #-3917]!
     26c:	4450495f 	ldrbmi	r4, [r0], #-2399
     270:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     274:	6f4d5f4f 	svcvs	0x004d5f4f
     278:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^
     27c:	54005550 	strpl	r5, [r0], #-1360
     280:	79424478 	stmdbvc	r2, {r3, r4, r5, r6, sl, lr}^
     284:	445f6574 	ldrbmi	r6, [pc], #1396	; 28c <_Minimum_Stack_Size+0x18c>
     288:	47004c58 	smlsdmi	r0, r8, ip, r4
     28c:	5f4f4950 	svcpl	0x004f4950
     290:	65646f4d 	strbvs	r6, [r4, #-3917]!
     294:	74754f5f 	ldrbtvc	r4, [r5], #-3935
     298:	00444f5f 	subeq	r4, r4, pc, asr pc
     29c:	57447854 	smlsldpl	r7, r4, r4, r8
     2a0:	3164726f 	cmncc	r4, pc, ror #4
     2a4:	77670036 	undefined
     2a8:	43736d31 	cmnmi	r3, #3136	; 0xc40
     2ac:	746e756f 	strbtvc	r7, [lr], #-1391
     2b0:	4e007265 	cdpmi	2, 0, cr7, cr0, cr5, {3}
     2b4:	5f434956 	svcpl	0x00434956
     2b8:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     2bc:	6e6e6168 	powvsez	f6, f6, #0.0
     2c0:	6d436c65 	stclvs	12, cr6, [r3, #-404]
     2c4:	49440064 	stmdbmi	r4, {r2, r5, r6}^
     2c8:	67005245 	strvs	r5, [r0, -r5, asr #4]
     2cc:	6d695477 	cfstrdvs	mvd5, [r9, #-476]!
     2d0:	44676e69 	strbtmi	r6, [r7], #-3689
     2d4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     2d8:	4d495400 	cfstrdmi	mvd5, [r9]
     2dc:	49434f5f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     2e0:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     2e4:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
     2e8:	65727574 	ldrbvs	r7, [r2, #-1396]!
     2ec:	4d495400 	cfstrdmi	mvd5, [r9]
     2f0:	7065525f 	rsbvc	r5, r5, pc, asr r2
     2f4:	74697465 	strbtvc	r7, [r9], #-1125
     2f8:	436e6f69 	cmnmi	lr, #420	; 0x1a4
     2fc:	746e756f 	strbtvc	r7, [lr], #-1391
     300:	54007265 	strpl	r7, [r0], #-613
     304:	4f5f4d49 	svcmi	0x005f4d49
     308:	6f504e43 	svcvs	0x00504e43
     30c:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
     310:	6d007974 	stcvs	9, cr7, [r0, #-464]
     314:	616c6544 	cmnvs	ip, r4, asr #10
     318:	53550079 	cmppl	r5, #121	; 0x79
     31c:	5f545241 	svcpl	0x00545241
     320:	74696e49 	strbtvc	r6, [r9], #-3657
     324:	75727453 	ldrbvc	r7, [r2, #-1107]!
     328:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     32c:	43430065 	movtmi	r0, #12389	; 0x3065
     330:	50005245 	andpl	r5, r0, r5, asr #4
     334:	7469736f 	strbtvc	r7, [r9], #-879
     338:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     33c:	64756142 	ldrbtvs	r6, [r5], #-322
     340:	65746172 	ldrbvs	r6, [r4, #-370]!
     344:	0043505f 	subeq	r5, r3, pc, asr r0
     348:	43435553 	movtmi	r5, #13651	; 0x3553
     34c:	00535345 	subseq	r5, r3, r5, asr #6
     350:	4349564e 	movtmi	r5, #38478	; 0x964e
     354:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     358:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
     35c:	75746375 	ldrbvc	r6, [r4, #-885]!
     360:	44006572 	strmi	r6, [r0], #-1394
     364:	42415349 	submi	r5, r1, #603979777	; 0x24000001
     368:	4300454c 	movwmi	r4, #1356	; 0x54c
     36c:	6b636568 	blvs	18d9914 <__Stack_Size+0x18d9514>
     370:	4177654e 	cmnmi	r7, lr, asr #10
     374:	76697272 	undefined
     378:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
     37c:	6f435f4d 	svcvs	0x00435f4d
     380:	65746e75 	ldrbvs	r6, [r4, #-3701]!
     384:	646f4d72 	strbtvs	r4, [pc], #3442	; 38c <_Minimum_Stack_Size+0x28c>
     388:	53550065 	cmppl	r5, #101	; 0x65
     38c:	5f545241 	svcpl	0x00545241
     390:	65646f4d 	strbvs	r6, [r4, #-3917]!
     394:	41535500 	cmpmi	r3, r0, lsl #10
     398:	5f315452 	svcpl	0x00315452
     39c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     3a0:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     3a4:	6f697461 	svcvs	0x00697461
     3a8:	4d53006e 	ldclmi	0, cr0, [r3, #-440]
     3ac:	55005243 	strpl	r5, [r0, #-579]
     3b0:	54524153 	ldrbpl	r4, [r2], #-339
     3b4:	7261485f 	rsbvc	r4, r1, #6225920	; 0x5f0000
     3b8:	72617764 	rsbvc	r7, r1, #26214400	; 0x1900000
     3bc:	6f6c4665 	svcvs	0x006c4665
     3c0:	6e6f4377 	mcrvs	3, 3, r4, cr15, cr7, {3}
     3c4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464
     3c8:	6d695400 	cfstrdvs	mvd5, [r9]
     3cc:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
     3d0:	72726574 	rsbsvc	r6, r2, #486539264	; 0x1d000000
     3d4:	5f747075 	svcpl	0x00747075
     3d8:	00736d31 	rsbseq	r6, r3, r1, lsr sp
     3dc:	54737953 	ldrbtpl	r7, [r3], #-2387
     3e0:	5f6b6369 	svcpl	0x006b6369
     3e4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     3e8:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     3ec:	6f697461 	svcvs	0x00697461
     3f0:	4f50006e 	svcmi	0x0050006e
     3f4:	67005452 	smlsdvs	r0, r2, r4, r5
     3f8:	78527062 	ldmdavc	r2, {r1, r5, r6, ip, sp, lr}^
     3fc:	65746e49 	ldrbvs	r6, [r4, #-3657]!
     400:	70757272 	rsbsvc	r7, r5, r2, ror r2
     404:	66754274 	undefined
     408:	00726566 	rsbseq	r6, r2, r6, ror #10
     40c:	5f434352 	svcpl	0x00434352
     410:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     414:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     418:	6f697461 	svcvs	0x00697461
     41c:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     420:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
     424:	6c64494e 	stclvs	9, cr4, [r4], #-312
     428:	61745365 	cmnvs	r4, r5, ror #6
     42c:	47006574 	smlsdxmi	r0, r4, r5, r6
     430:	5f4f4950 	svcpl	0x004f4950
     434:	74696e49 	strbtvc	r6, [r9], #-3657
     438:	75727453 	ldrbvc	r7, [r2, #-1107]!
     43c:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     440:	50770065 	rsbspl	r0, r7, r5, rrx
     444:	65736572 	ldrbvs	r6, [r3, #-1394]!
     448:	6f50746e 	svcvs	0x0050746e
     44c:	54620073 	strbtpl	r0, [r2], #-115
     450:	00706d65 	rsbseq	r6, r0, r5, ror #26
     454:	4349564e 	movtmi	r5, #38478	; 0x964e
     458:	5152495f 	cmppl	r2, pc, asr r9
     45c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     460:	006c656e 	rsbeq	r6, ip, lr, ror #10
     464:	4f495047 	svcmi	0x00495047
     468:	646f4d5f 	strbtvs	r4, [pc], #3423	; 470 <__Stack_Size+0x70>
     46c:	46415f65 	strbmi	r5, [r1], -r5, ror #30
     470:	00444f5f 	subeq	r4, r4, pc, asr pc
     474:	656d6954 	strbvs	r6, [sp, #-2388]!
     478:	6f435f72 	svcvs	0x00435f72
     47c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     480:	74617275 	strbtvc	r7, [r1], #-629
     484:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     488:	20554e47 	subscs	r4, r5, r7, asr #28
     48c:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
     490:	00302e33 	eorseq	r2, r0, r3, lsr lr
     494:	42447854 	submi	r7, r4, #5505024	; 0x540000
     498:	31657479 	smccc	22345
     49c:	50470036 	subpl	r0, r7, r6, lsr r0
     4a0:	70534f49 	subsvc	r4, r3, r9, asr #30
     4a4:	5f646565 	svcpl	0x00646565
     4a8:	65707954 	ldrbvs	r7, [r0, #-2388]!
     4ac:	00666544 	rsbeq	r6, r6, r4, asr #10
     4b0:	5f4d4954 	svcpl	0x004d4954
     4b4:	6f4d434f 	svcvs	0x004d434f
     4b8:	47006564 	strmi	r6, [r0, -r4, ror #10]
     4bc:	5f4f4950 	svcpl	0x004f4950
     4c0:	65646f4d 	strbvs	r6, [r4, #-3917]!
     4c4:	4e49415f 	mcrmi	1, 2, r4, cr9, cr15, {2}
     4c8:	53455200 	movtpl	r5, #20992	; 0x5200
     4cc:	45565245 	ldrbmi	r5, [r6, #-581]
     4d0:	52003044 	andpl	r3, r0, #68	; 0x44
     4d4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     4d8:	31444556 	cmpcc	r4, r6, asr r5
     4dc:	53455200 	movtpl	r5, #20992	; 0x5200
     4e0:	45565245 	ldrbmi	r5, [r6, #-581]
     4e4:	52003244 	andpl	r3, r0, #1073741828	; 0x40000004
     4e8:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     4ec:	33444556 	movtcc	r4, #17750	; 0x4556
     4f0:	53455200 	movtpl	r5, #20992	; 0x5200
     4f4:	45565245 	ldrbmi	r5, [r6, #-581]
     4f8:	52003444 	andpl	r3, r0, #1140850688	; 0x44000000
     4fc:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     500:	35444556 	strbcc	r4, [r4, #-1366]
     504:	53455200 	movtpl	r5, #20992	; 0x5200
     508:	45565245 	ldrbmi	r5, [r6, #-581]
     50c:	73003644 	movwvc	r3, #1604	; 0x644
     510:	74726f68 	ldrbtvc	r6, [r2], #-3944
     514:	746e6920 	strbtvc	r6, [lr], #-2336
     518:	53455200 	movtpl	r5, #20992	; 0x5200
     51c:	45565245 	ldrbmi	r5, [r6, #-581]
     520:	52003844 	andpl	r3, r0, #4456448	; 0x440000
     524:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     528:	39444556 	stmdbcc	r4, {r1, r2, r4, r6, r8, sl, lr}^
     52c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     530:	6f4d5f4f 	svcvs	0x004d5f4f
     534:	415f6564 	cmpmi	pc, r4, ror #10
     538:	50505f46 	subspl	r5, r0, r6, asr #30
     53c:	414d4400 	cmpmi	sp, r0, lsl #8
     540:	50470052 	subpl	r0, r7, r2, asr r0
     544:	535f4f49 	cmppl	pc, #292	; 0x124
     548:	64656570 	strbtvs	r6, [r5], #-1392
     54c:	65684300 	strbvs	r4, [r8, #-768]!
     550:	69546b63 	ldmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
     554:	754f656d 	strbvc	r6, [pc, #-1389]	; ffffffef <SCS_BASE+0x1fff1fef>
     558:	78520074 	ldmdavc	r2, {r2, r4, r5, r6}^
     55c:	74794244 	ldrbtvc	r4, [r9], #-580
     560:	58445f65 	stmdapl	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     564:	6944004c 	stmdbvs	r4, {r2, r3, r6}^
     568:	6c626173 	stfvse	f6, [r2], #-460
     56c:	41535565 	cmpmi	r3, r5, ror #10
     570:	00315452 	eorseq	r5, r1, r2, asr r4
     574:	4f495047 	svcmi	0x00495047
     578:	65646f4d 	strbvs	r6, [r4, #-3917]!
     57c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     580:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     584:	61745300 	cmnvs	r4, r0, lsl #6
     588:	69447472 	stmdbvs	r4, {r1, r4, r5, r6, sl, ip, sp, lr}^
     58c:	756f6373 	strbvc	r6, [pc, #-883]!	; 221 <_Minimum_Stack_Size+0x121>
     590:	5400746e 	strpl	r7, [r0], #-1134
     594:	4f5f4d49 	svcmi	0x005f4d49
     598:	75707475 	ldrbvc	r7, [r0, #-1141]!
     59c:	74534e74 	ldrbvc	r4, [r3], #-3700
     5a0:	00657461 	rsbeq	r7, r5, r1, ror #8
     5a4:	42414e45 	submi	r4, r1, #1104	; 0x450
     5a8:	5400454c 	strpl	r4, [r0], #-1356
     5ac:	545f4d49 	ldrbpl	r4, [pc], #3401	; 5b4 <__Stack_Size+0x1b4>
     5b0:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
     5b4:	53657361 	cmnpl	r5, #-2080374783	; 0x84000001
     5b8:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
     5bc:	65727574 	ldrbvs	r7, [r2, #-1396]!
     5c0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     5c4:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     5c8:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     5cc:	65446570 	strbvs	r6, [r4, #-1392]
     5d0:	6e750066 	cdpvs	0, 7, cr0, cr5, cr6, {3}
     5d4:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     5d8:	63206465 	teqvs	r0, #1694498816	; 0x65000000
     5dc:	00726168 	rsbseq	r6, r2, r8, ror #2
     5e0:	706d5462 	rsbvc	r5, sp, r2, ror #8
     5e4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     5e8:	70535f4f 	subsvc	r5, r3, pc, asr #30
     5ec:	5f646565 	svcpl	0x00646565
     5f0:	484d3035 	stmdami	sp, {r0, r2, r4, r5, ip, sp}^
     5f4:	5355007a 	cmppl	r5, #122	; 0x7a
     5f8:	5f545241 	svcpl	0x00545241
     5fc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     600:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     604:	6f697461 	svcvs	0x00697461
     608:	564e006e 	strbpl	r0, [lr], -lr, rrx
     60c:	435f4349 	cmpmi	pc, #603979777	; 0x24000001
     610:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     614:	61727567 	cmnvs	r2, r7, ror #10
     618:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     61c:	53455200 	movtpl	r5, #20992	; 0x5200
     620:	45565245 	ldrbmi	r5, [r6, #-581]
     624:	00303144 	eorseq	r3, r0, r4, asr #2
     628:	45534552 	ldrbmi	r4, [r3, #-1362]
     62c:	44455652 	strbmi	r5, [r5], #-1618
     630:	52003131 	andpl	r3, r0, #1073741836	; 0x4000000c
     634:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     638:	31444556 	cmpcc	r4, r6, asr r5
     63c:	45520032 	ldrbmi	r0, [r2, #-50]
     640:	56524553 	undefined
     644:	33314445 	teqcc	r1, #1157627904	; 0x45000000
     648:	53455200 	movtpl	r5, #20992	; 0x5200
     64c:	45565245 	ldrbmi	r5, [r6, #-581]
     650:	00343144 	eorseq	r3, r4, r4, asr #2
     654:	45534552 	ldrbmi	r4, [r3, #-1362]
     658:	44455652 	strbmi	r5, [r5], #-1618
     65c:	52003531 	andpl	r3, r0, #205520896	; 0xc400000
     660:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     664:	31444556 	cmpcc	r4, r6, asr r5
     668:	45520036 	ldrbmi	r0, [r2, #-54]
     66c:	56524553 	undefined
     670:	37314445 	ldrcc	r4, [r1, -r5, asr #8]!
     674:	53455200 	movtpl	r5, #20992	; 0x5200
     678:	45565245 	ldrbmi	r5, [r6, #-581]
     67c:	00383144 	eorseq	r3, r8, r4, asr #2
     680:	45534552 	ldrbmi	r4, [r3, #-1362]
     684:	44455652 	strbmi	r5, [r5], #-1618
     688:	47003931 	smladxmi	r0, r1, r9, r3
     68c:	5f4f4950 	svcpl	0x004f4950
     690:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     694:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     698:	6f697461 	svcvs	0x00697461
     69c:	5355006e 	cmppl	r5, #110	; 0x6e
     6a0:	5f545241 	svcpl	0x00545241
     6a4:	74696e49 	strbtvc	r6, [r9], #-3657
     6a8:	65707954 	ldrbvs	r7, [r0, #-2388]!
     6ac:	00666544 	rsbeq	r6, r6, r4, asr #10
     6b0:	4349564e 	movtmi	r5, #38478	; 0x964e
     6b4:	5152495f 	cmppl	r2, pc, asr r9
     6b8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     6bc:	536c656e 	cmnpl	ip, #461373440	; 0x1b800000
     6c0:	72506275 	subsvc	r6, r0, #1342177287	; 0x50000007
     6c4:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     6c8:	55007974 	strpl	r7, [r0, #-2420]
     6cc:	54524153 	ldrbpl	r4, [r2], #-339
     6d0:	7261505f 	rsbvc	r5, r1, #95	; 0x5f
     6d4:	00797469 	rsbseq	r7, r9, r9, ror #8
     6d8:	53495f5f 	movtpl	r5, #40799	; 0x9f5f
     6dc:	45445f52 	strbmi	r5, [r4, #-3922]
     6e0:	0059414c 	subseq	r4, r9, ip, asr #2
     6e4:	5f4d4954 	svcpl	0x004d4954
     6e8:	656d6954 	strbvs	r6, [sp, #-2388]!
     6ec:	65736142 	ldrbvs	r6, [r3, #-322]!
     6f0:	74696e49 	strbtvc	r6, [r9], #-3657
     6f4:	65707954 	ldrbvs	r7, [r0, #-2388]!
     6f8:	00666544 	rsbeq	r6, r6, r4, asr #10
     6fc:	78526267 	ldmdavc	r2, {r0, r1, r2, r5, r6, r9, sp, lr}^
     700:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     704:	65527265 	ldrbvs	r7, [r2, #-613]
     708:	6f506461 	svcvs	0x00506461
     70c:	65746e69 	ldrbvs	r6, [r4, #-3689]!
     710:	68730072 	ldmdavs	r3!, {r1, r4, r5, r6}^
     714:	2074726f 	rsbscs	r7, r4, pc, ror #4
     718:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     71c:	64656e67 	strbtvs	r6, [r5], #-3687
     720:	746e6920 	strbtvc	r6, [lr], #-2336
     724:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     728:	6f47006e 	svcvs	0x0047006e
     72c:	6f506c61 	svcvs	0x00506c61
     730:	564e0073 	undefined
     734:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^
     738:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     73c:	656e6e61 	strbvs	r6, [lr, #-3681]!
     740:	6572506c 	ldrbvs	r5, [r2, #-108]!
     744:	74706d65 	ldrbtvc	r6, [r0], #-3429
     748:	506e6f69 	rsbpl	r6, lr, r9, ror #30
     74c:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     750:	00797469 	rsbseq	r7, r9, r9, ror #8
     754:	4f495047 	svcmi	0x00495047
     758:	646f4d5f 	strbtvs	r4, [pc], #3423	; 760 <__Stack_Size+0x360>
     75c:	4e495f65 	cdpmi	15, 4, cr5, cr9, cr5, {3}
     760:	4f4c465f 	svcmi	0x004c465f
     764:	4e495441 	cdpmi	4, 4, cr5, cr9, cr1, {2}
     768:	45520047 	ldrbmi	r0, [r2, #-71]
     76c:	56524553 	undefined
     770:	00374445 	eorseq	r4, r7, r5, asr #8
     774:	6d69546e 	cfstrdvs	mvd5, [r9, #-440]!
     778:	72500065 	subsvc	r0, r0, #101	; 0x65
     77c:	45746e69 	ldrbmi	r6, [r4, #-3689]!
     780:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     784:	65646f43 	strbvs	r6, [r4, #-3907]!
     788:	45534800 	ldrbmi	r4, [r3, #-2048]
     78c:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     790:	53705574 	cmnpl	r0, #486539264	; 0x1d000000
     794:	75746174 	ldrbvc	r6, [r4, #-372]!
     798:	434c0073 	movtmi	r0, #49267	; 0xc073
     79c:	4200524b 	andmi	r5, r0, #-1342177276	; 0xb0000004
     7a0:	61467375 	cmpvs	r6, r5, ror r3
     7a4:	45746c75 	ldrbmi	r6, [r4, #-3189]!
     7a8:	70656378 	rsbvc	r6, r5, r8, ror r3
     7ac:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     7b0:	54584500 	ldrbpl	r4, [r8], #-1280
     7b4:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^
     7b8:	61485152 	cmpvs	r8, r2, asr r1
     7bc:	656c646e 	strbvs	r6, [ip, #-1134]!
     7c0:	4d440072 	stclmi	0, cr0, [r4, #-456]
     7c4:	435f3241 	cmpmi	pc, #268435460	; 0x10000004
     7c8:	6e6e6168 	powvsez	f6, f6, #0.0
     7cc:	5f326c65 	svcpl	0x00326c65
     7d0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     7d4:	6c646e61 	stclvs	14, cr6, [r4], #-388
     7d8:	54007265 	strpl	r7, [r0], #-613
     7dc:	5f314d49 	svcpl	0x00314d49
     7e0:	5f4b5242 	svcpl	0x004b5242
     7e4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     7e8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     7ec:	45007265 	strmi	r7, [r0, #-613]
     7f0:	30495458 	subcc	r5, r9, r8, asr r4
     7f4:	5152495f 	cmppl	r2, pc, asr r9
     7f8:	646e6148 	strbtvs	r6, [lr], #-328
     7fc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     800:	5f445650 	svcpl	0x00445650
     804:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     808:	6c646e61 	stclvs	14, cr6, [r4], #-388
     80c:	48007265 	stmdami	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     810:	46647261 	strbtmi	r7, [r4], -r1, ror #4
     814:	746c7561 	strbtvc	r7, [ip], #-1377
     818:	65637845 	strbvs	r7, [r3, #-2117]!
     81c:	6f697470 	svcvs	0x00697470
     820:	4441006e 	strbmi	r0, [r1], #-110
     824:	325f3143 	subscc	r3, pc, #-1073741808	; 0xc0000010
     828:	5152495f 	cmppl	r2, pc, asr r9
     82c:	646e6148 	strbtvs	r6, [lr], #-328
     830:	0072656c 	rsbseq	r6, r2, ip, ror #10
     834:	504d4154 	subpl	r4, sp, r4, asr r1
     838:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^
     83c:	61485152 	cmpvs	r8, r2, asr r1
     840:	656c646e 	strbvs	r6, [ip, #-1134]!
     844:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     848:	545f384d 	ldrbpl	r3, [pc], #2125	; 850 <__Stack_Size+0x450>
     84c:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     850:	495f4d4f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, sl, fp, lr}^
     854:	61485152 	cmpvs	r8, r2, asr r1
     858:	656c646e 	strbvs	r6, [ip, #-1134]!
     85c:	41430072 	cmpmi	r3, r2, ror r0
     860:	58525f4e 	ldmdapl	r2, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     864:	52495f31 	subpl	r5, r9, #196	; 0xc4
     868:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     86c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     870:	73795300 	cmnvc	r9, #0	; 0x0
     874:	6b636954 	blvs	18dadcc <__Stack_Size+0x18da9cc>
     878:	646e6148 	strbtvs	r6, [lr], #-328
     87c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     880:	75626544 	strbvc	r6, [r2, #-1348]!
     884:	6e6f4d67 	cdpvs	13, 6, cr4, cr15, cr7, {3}
     888:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
     88c:	414d4400 	cmpmi	sp, r0, lsl #8
     890:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     894:	656e6e61 	strbvs	r6, [lr, #-3681]!
     898:	495f336c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, ip, sp}^
     89c:	61485152 	cmpvs	r8, r2, asr r1
     8a0:	656c646e 	strbvs	r6, [ip, #-1134]!
     8a4:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     8a8:	555f314d 	ldrbpl	r3, [pc, #-333]	; 763 <__Stack_Size+0x363>
     8ac:	52495f50 	subpl	r5, r9, #320	; 0x140
     8b0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     8b4:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     8b8:	4d495400 	cfstrdmi	mvd5, [r9]
     8bc:	50555f38 	subspl	r5, r5, r8, lsr pc
     8c0:	5152495f 	cmppl	r2, pc, asr r9
     8c4:	646e6148 	strbtvs	r6, [lr], #-328
     8c8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     8cc:	314d4954 	cmpcc	sp, r4, asr r9
     8d0:	5f43435f 	svcpl	0x0043435f
     8d4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     8d8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     8dc:	54007265 	strpl	r7, [r0], #-613
     8e0:	5f384d49 	svcpl	0x00384d49
     8e4:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^
     8e8:	61485152 	cmpvs	r8, r2, asr r1
     8ec:	656c646e 	strbvs	r6, [ip, #-1134]!
     8f0:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     8f4:	35314954 	ldrcc	r4, [r1, #-2388]!
     8f8:	5f30315f 	svcpl	0x0030315f
     8fc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     900:	6c646e61 	stclvs	14, cr6, [r4], #-388
     904:	55007265 	strpl	r7, [r0, #-613]
     908:	65676173 	strbvs	r6, [r7, #-371]!
     90c:	6c756146 	ldfvse	f6, [r5], #-280
     910:	63784574 	cmnvs	r8, #486539264	; 0x1d000000
     914:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
     918:	44006e6f 	strmi	r6, [r0], #-3695
     91c:	5f31414d 	svcpl	0x0031414d
     920:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     924:	316c656e 	cmncc	ip, lr, ror #10
     928:	5152495f 	cmppl	r2, pc, asr r9
     92c:	646e6148 	strbtvs	r6, [lr], #-328
     930:	0072656c 	rsbseq	r6, r2, ip, ror #10
     934:	48435653 	stmdami	r3, {r0, r1, r4, r6, r9, sl, ip, lr}^
     938:	6c646e61 	stclvs	14, cr6, [r4], #-388
     93c:	55007265 	strpl	r7, [r0, #-613]
     940:	54524153 	ldrbpl	r4, [r2], #-339
     944:	52495f33 	subpl	r5, r9, #204	; 0xcc
     948:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     94c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     950:	43545200 	cmpmi	r4, #0	; 0x0
     954:	5152495f 	cmppl	r2, pc, asr r9
     958:	646e6148 	strbtvs	r6, [lr], #-328
     95c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     960:	354d4954 	strbcc	r4, [sp, #-2388]
     964:	5152495f 	cmppl	r2, pc, asr r9
     968:	646e6148 	strbtvs	r6, [lr], #-328
     96c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     970:	32414d44 	subcc	r4, r1, #4352	; 0x1100
     974:	6168435f 	cmnvs	r8, pc, asr r3
     978:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     97c:	5f355f34 	svcpl	0x00355f34
     980:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     984:	6c646e61 	stclvs	14, cr6, [r4], #-388
     988:	54007265 	strpl	r7, [r0], #-613
     98c:	5f324d49 	svcpl	0x00324d49
     990:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     994:	6c646e61 	stclvs	14, cr6, [r4], #-388
     998:	4d007265 	sfmmi	f7, 4, [r0, #-404]
     99c:	614d6d65 	cmpvs	sp, r5, ror #26
     9a0:	6567616e 	strbvs	r6, [r7, #-366]!
     9a4:	65637845 	strbvs	r7, [r3, #-2117]!
     9a8:	6f697470 	svcvs	0x00697470
     9ac:	4d4e006e 	stclmi	0, cr0, [lr, #-440]
     9b0:	63784549 	cmnvs	r8, #306184192	; 0x12400000
     9b4:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
     9b8:	45006e6f 	strmi	r6, [r0, #-3695]
     9bc:	33495458 	movtcc	r5, #37976	; 0x9458
     9c0:	5152495f 	cmppl	r2, pc, asr r9
     9c4:	646e6148 	strbtvs	r6, [lr], #-328
     9c8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     9cc:	32414d44 	subcc	r4, r1, #4352	; 0x1100
     9d0:	6168435f 	cmnvs	r8, pc, asr r3
     9d4:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     9d8:	52495f33 	subpl	r5, r9, #204	; 0xcc
     9dc:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     9e0:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     9e4:	42535500 	subsmi	r5, r3, #0	; 0x0
     9e8:	656b6157 	strbvs	r6, [fp, #-343]!
     9ec:	495f7055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, sp, lr}^
     9f0:	61485152 	cmpvs	r8, r2, asr r1
     9f4:	656c646e 	strbvs	r6, [ip, #-1134]!
     9f8:	44530072 	ldrbmi	r0, [r3], #-114
     9fc:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^
     a00:	61485152 	cmpvs	r8, r2, asr r1
     a04:	656c646e 	strbvs	r6, [ip, #-1134]!
     a08:	4c460072 	mcrrmi	0, 7, r0, r6, cr2
     a0c:	5f485341 	svcpl	0x00485341
     a10:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     a14:	6c646e61 	stclvs	14, cr6, [r4], #-388
     a18:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     a1c:	5f314332 	svcpl	0x00314332
     a20:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^
     a24:	61485152 	cmpvs	r8, r2, asr r1
     a28:	656c646e 	strbvs	r6, [ip, #-1134]!
     a2c:	54520072 	ldrbpl	r0, [r2], #-114
     a30:	616c4143 	cmnvs	ip, r3, asr #2
     a34:	495f6d72 	ldmdbmi	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
     a38:	61485152 	cmpvs	r8, r2, asr r1
     a3c:	656c646e 	strbvs	r6, [ip, #-1134]!
     a40:	4d440072 	stclmi	0, cr0, [r4, #-456]
     a44:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     a48:	6e6e6168 	powvsez	f6, f6, #0.0
     a4c:	5f366c65 	svcpl	0x00366c65
     a50:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     a54:	6c646e61 	stclvs	14, cr6, [r4], #-388
     a58:	53007265 	movwpl	r7, #613	; 0x265
     a5c:	5f334950 	svcpl	0x00334950
     a60:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     a64:	6c646e61 	stclvs	14, cr6, [r4], #-388
     a68:	54007265 	strpl	r7, [r0], #-613
     a6c:	5f334d49 	svcpl	0x00334d49
     a70:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     a74:	6c646e61 	stclvs	14, cr6, [r4], #-388
     a78:	43007265 	movwmi	r7, #613	; 0x265
     a7c:	535f4e41 	cmppl	pc, #1040	; 0x410
     a80:	495f4543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, lr}^
     a84:	61485152 	cmpvs	r8, r2, asr r1
     a88:	656c646e 	strbvs	r6, [ip, #-1134]!
     a8c:	4d440072 	stclmi	0, cr0, [r4, #-456]
     a90:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     a94:	6e6e6168 	powvsez	f6, f6, #0.0
     a98:	5f346c65 	svcpl	0x00346c65
     a9c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     aa0:	6c646e61 	stclvs	14, cr6, [r4], #-388
     aa4:	46007265 	strmi	r7, [r0], -r5, ror #4
     aa8:	5f434d53 	svcpl	0x00434d53
     aac:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     ab0:	6c646e61 	stclvs	14, cr6, [r4], #-388
     ab4:	45007265 	strmi	r7, [r0, #-613]
     ab8:	31495458 	cmpcc	r9, r8, asr r4
     abc:	5152495f 	cmppl	r2, pc, asr r9
     ac0:	646e6148 	strbtvs	r6, [lr], #-328
     ac4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     ac8:	33434441 	movtcc	r4, #13377	; 0x3441
     acc:	5152495f 	cmppl	r2, pc, asr r9
     ad0:	646e6148 	strbtvs	r6, [lr], #-328
     ad4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     ad8:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     adc:	5f56455f 	svcpl	0x0056455f
     ae0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     ae4:	6c646e61 	stclvs	14, cr6, [r4], #-388
     ae8:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     aec:	5f324332 	svcpl	0x00324332
     af0:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^
     af4:	61485152 	cmpvs	r8, r2, asr r1
     af8:	656c646e 	strbvs	r6, [ip, #-1134]!
     afc:	53550072 	cmppl	r5, #114	; 0x72
     b00:	31545241 	cmpcc	r4, r1, asr #4
     b04:	5152495f 	cmppl	r2, pc, asr r9
     b08:	646e6148 	strbtvs	r6, [lr], #-328
     b0c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     b10:	5f425355 	svcpl	0x00425355
     b14:	435f504c 	cmpmi	pc, #76	; 0x4c
     b18:	525f4e41 	subspl	r4, pc, #1040	; 0x410
     b1c:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^
     b20:	61485152 	cmpvs	r8, r2, asr r1
     b24:	656c646e 	strbvs	r6, [ip, #-1134]!
     b28:	53550072 	cmppl	r5, #114	; 0x72
     b2c:	50485f42 	subpl	r5, r8, r2, asr #30
     b30:	4e41435f 	mcrmi	3, 2, r4, cr1, cr15, {2}
     b34:	5f58545f 	svcpl	0x0058545f
     b38:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     b3c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     b40:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     b44:	5f314332 	svcpl	0x00314332
     b48:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^
     b4c:	61485152 	cmpvs	r8, r2, asr r1
     b50:	656c646e 	strbvs	r6, [ip, #-1134]!
     b54:	50530072 	subspl	r0, r3, r2, ror r0
     b58:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^
     b5c:	61485152 	cmpvs	r8, r2, asr r1
     b60:	656c646e 	strbvs	r6, [ip, #-1134]!
     b64:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     b68:	425f384d 	subsmi	r3, pc, #5046272	; 0x4d0000
     b6c:	495f4b52 	ldmdbmi	pc, {r1, r4, r6, r8, r9, fp, lr}^
     b70:	61485152 	cmpvs	r8, r2, asr r1
     b74:	656c646e 	strbvs	r6, [ip, #-1134]!
     b78:	4d440072 	stclmi	0, cr0, [r4, #-456]
     b7c:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     b80:	6e6e6168 	powvsez	f6, f6, #0.0
     b84:	5f326c65 	svcpl	0x00326c65
     b88:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     b8c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     b90:	55007265 	strpl	r7, [r0, #-613]
     b94:	34545241 	ldrbcc	r5, [r4], #-577
     b98:	5152495f 	cmppl	r2, pc, asr r9
     b9c:	646e6148 	strbtvs	r6, [lr], #-328
     ba0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     ba4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     ba8:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^
     bac:	61485152 	cmpvs	r8, r2, asr r1
     bb0:	656c646e 	strbvs	r6, [ip, #-1134]!
     bb4:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     bb8:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^
     bbc:	61485152 	cmpvs	r8, r2, asr r1
     bc0:	656c646e 	strbvs	r6, [ip, #-1134]!
     bc4:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     bc8:	545f314d 	ldrbpl	r3, [pc], #333	; bd0 <__Stack_Size+0x7d0>
     bcc:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     bd0:	495f4d4f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, sl, fp, lr}^
     bd4:	61485152 	cmpvs	r8, r2, asr r1
     bd8:	656c646e 	strbvs	r6, [ip, #-1134]!
     bdc:	43520072 	cmpmi	r2, #114	; 0x72
     be0:	52495f43 	subpl	r5, r9, #268	; 0x10c
     be4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     be8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     bec:	414d4400 	cmpmi	sp, r0, lsl #8
     bf0:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     bf4:	656e6e61 	strbvs	r6, [lr, #-3681]!
     bf8:	495f316c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, ip, sp}^
     bfc:	61485152 	cmpvs	r8, r2, asr r1
     c00:	656c646e 	strbvs	r6, [ip, #-1134]!
     c04:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     c08:	495f374d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, sl, ip, sp}^
     c0c:	61485152 	cmpvs	r8, r2, asr r1
     c10:	656c646e 	strbvs	r6, [ip, #-1134]!
     c14:	57570072 	undefined
     c18:	495f4744 	ldmdbmi	pc, {r2, r6, r8, r9, sl, lr}^
     c1c:	61485152 	cmpvs	r8, r2, asr r1
     c20:	656c646e 	strbvs	r6, [ip, #-1134]!
     c24:	50530072 	subspl	r0, r3, r2, ror r0
     c28:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^
     c2c:	61485152 	cmpvs	r8, r2, asr r1
     c30:	656c646e 	strbvs	r6, [ip, #-1134]!
     c34:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     c38:	5f344954 	svcpl	0x00344954
     c3c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     c40:	6c646e61 	stclvs	14, cr6, [r4], #-388
     c44:	45007265 	strmi	r7, [r0, #-613]
     c48:	39495458 	stmdbcc	r9, {r3, r4, r6, sl, ip, lr}^
     c4c:	495f355f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}^
     c50:	61485152 	cmpvs	r8, r2, asr r1
     c54:	656c646e 	strbvs	r6, [ip, #-1134]!
     c58:	65500072 	ldrbvs	r0, [r0, #-114]
     c5c:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
     c60:	49540043 	ldmdbmi	r4, {r0, r1, r6}^
     c64:	495f364d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, sl, ip, sp}^
     c68:	61485152 	cmpvs	r8, r2, asr r1
     c6c:	656c646e 	strbvs	r6, [ip, #-1134]!
     c70:	50410072 	subpl	r0, r1, r2, ror r0
     c74:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
     c78:	74732f63 	ldrbtvc	r2, [r3], #-3939
     c7c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     c80:	5f783031 	svcpl	0x00783031
     c84:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
     c88:	414d4400 	cmpmi	sp, r0, lsl #8
     c8c:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     c90:	656e6e61 	strbvs	r6, [lr, #-3681]!
     c94:	495f376c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, sl, ip, sp}^
     c98:	61485152 	cmpvs	r8, r2, asr r1
     c9c:	656c646e 	strbvs	r6, [ip, #-1134]!
     ca0:	41550072 	cmpmi	r5, r2, ror r0
     ca4:	5f355452 	svcpl	0x00355452
     ca8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     cac:	6c646e61 	stclvs	14, cr6, [r4], #-388
     cb0:	44007265 	strmi	r7, [r0], #-613
     cb4:	5f31414d 	svcpl	0x0031414d
     cb8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     cbc:	356c656e 	strbcc	r6, [ip, #-1390]!
     cc0:	5152495f 	cmppl	r2, pc, asr r9
     cc4:	646e6148 	strbtvs	r6, [lr], #-328
     cc8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     ccc:	5f6c7864 	svcpl	0x006c7864
     cd0:	5f6c6168 	svcpl	0x006c6168
     cd4:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
     cd8:	6c786400 	cfldrdvs	mvd6, [r8]
     cdc:	6c61685f 	stclvs	8, cr6, [r1], #-380
     ce0:	0078745f 	rsbseq	r7, r8, pc, asr r4
     ce4:	5f6c7864 	svcpl	0x006c7864
     ce8:	5f6c6168 	svcpl	0x006c6168
     cec:	61656c63 	cmnvs	r5, r3, ror #24
     cf0:	754e0072 	strbvc	r0, [lr, #-114]
     cf4:	7663526d 	strbtvc	r5, [r3], -sp, ror #4
     cf8:	65747942 	ldrbvs	r7, [r4, #-2370]!
     cfc:	6c786400 	cfldrdvs	mvd6, [r8]
     d00:	6c61685f 	stclvs	8, cr6, [r1], #-380
     d04:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
     d08:	74756f65 	ldrbtvc	r6, [r5], #-3941
     d0c:	6c786400 	cfldrdvs	mvd6, [r8]
     d10:	6c61685f 	stclvs	8, cr6, [r1], #-380
     d14:	7465735f 	strbtvc	r7, [r5], #-863
     d18:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
     d1c:	74756f65 	ldrbtvc	r6, [r5], #-3941
     d20:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
     d24:	65646e49 	strbvs	r6, [r4, #-3657]!
     d28:	50410078 	subpl	r0, r1, r8, ror r0
     d2c:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
     d30:	78642f63 	stmdavc	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     d34:	61685f6c 	cmnvs	r8, ip, ror #30
     d38:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     d3c:	63615070 	cmnvs	r1, #112	; 0x70
     d40:	0074656b 	rsbseq	r6, r4, fp, ror #10
     d44:	506d756e 	rsbpl	r7, sp, lr, ror #10
     d48:	656b6361 	strbvs	r6, [fp, #-865]!
     d4c:	78640074 	stmdavc	r4!, {r2, r4, r5, r6}^
     d50:	61685f6c 	cmnvs	r8, ip, ror #30
     d54:	78725f6c 	ldmdavc	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     d58:	6c786400 	cfldrdvs	mvd6, [r8]
     d5c:	6c61685f 	stclvs	8, cr6, [r1], #-380
     d60:	6f6c635f 	svcvs	0x006c635f
     d64:	67006573 	smlsdxvs	r0, r3, r5, r6
     d68:	50785262 	rsbspl	r5, r8, r2, ror #4
     d6c:	656b6361 	strbvs	r6, [fp, #-865]!
     d70:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
     d74:	00687467 	rsbeq	r7, r8, r7, ror #8
     d78:	5f6c7864 	svcpl	0x006c7864
     d7c:	705f7874 	subsvc	r7, pc, r4, ror r8
     d80:	656b6361 	strbvs	r6, [fp, #-865]!
     d84:	78640074 	stmdavc	r4!, {r2, r4, r5, r6}^
     d88:	69705f6c 	ldmdbvs	r0!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     d8c:	6400676e 	strvs	r6, [r0], #-1902
     d90:	695f6c78 	ldmdbvs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^
     d94:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     d98:	7a696c61 	bvc	1a5bf24 <__Stack_Size+0x1a5bb24>
     d9c:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
     da0:	65725f6c 	ldrbvs	r5, [r2, #-3948]!
     da4:	775f6461 	ldrbvc	r6, [pc, -r1, ror #8]
     da8:	0064726f 	rsbeq	r7, r4, pc, ror #4
     dac:	6f436267 	svcvs	0x00436267
     db0:	74536d6d 	ldrbvc	r6, [r3], #-3437
     db4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     db8:	6c786400 	cfldrdvs	mvd6, [r8]
     dbc:	7465675f 	strbtvc	r6, [r5], #-1887
     dc0:	7078725f 	rsbsvc	r7, r8, pc, asr r2
     dc4:	656b6361 	strbvs	r6, [fp, #-865]!
     dc8:	656c5f74 	strbvs	r5, [ip, #-3956]!
     dcc:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     dd0:	6c786400 	cfldrdvs	mvd6, [r8]
     dd4:	7465675f 	strbtvc	r6, [r5], #-1887
     dd8:	6769685f 	undefined
     ddc:	74796268 	ldrbtvc	r6, [r9], #-616
     de0:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
     de4:	65725f6c 	ldrbvs	r5, [r2, #-3948]!
     de8:	625f6461 	subsvs	r6, pc, #1627389952	; 0x61000000
     dec:	00657479 	rsbeq	r7, r5, r9, ror r4
     df0:	5f6c7864 	svcpl	0x006c7864
     df4:	5f746573 	svcpl	0x00746573
     df8:	61707874 	cmnvs	r0, r4, ror r8
     dfc:	74656b63 	strbtvc	r6, [r5], #-2915
     e00:	7261705f 	rsbvc	r7, r1, #95	; 0x5f
     e04:	74656d61 	strbtvc	r6, [r5], #-3425
     e08:	64007265 	strvs	r7, [r0], #-613
     e0c:	675f6c78 	undefined
     e10:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}
     e14:	7962776f 	stmdbvc	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
     e18:	64006574 	strvs	r6, [r0], #-1396
     e1c:	725f6c78 	subsvc	r6, pc, #30720	; 0x7800
     e20:	61705f78 	cmnvs	r0, r8, ror pc
     e24:	74656b63 	strbtvc	r6, [r5], #-2915
     e28:	65686300 	strbvs	r6, [r8, #-768]!
     e2c:	75736b63 	ldrbvc	r6, [r3, #-2915]!
     e30:	7864006d 	stmdavc	r4!, {r0, r2, r3, r5, r6}^
     e34:	65675f6c 	strbvs	r5, [r7, #-3948]!
     e38:	78725f74 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e3c:	6b636170 	blvs	18d9404 <__Stack_Size+0x18d9004>
     e40:	655f7465 	ldrbvs	r7, [pc, #-1125]	; 9e3 <__Stack_Size+0x5e3>
     e44:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     e48:	6c786400 	cfldrdvs	mvd6, [r8]
     e4c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     e50:	775f6574 	undefined
     e54:	0064726f 	rsbeq	r7, r4, pc, ror #4
     e58:	2f505041 	svccs	0x00505041
     e5c:	2f637273 	svccs	0x00637273
     e60:	616e7964 	cmnvs	lr, r4, ror #18
     e64:	6578696d 	ldrbvs	r6, [r8, #-2413]!
     e68:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     e6c:	6c616552 	cfstr64vs	mvdx6, [r1], #-328
     e70:	754e7854 	strbvc	r7, [lr, #-2132]
     e74:	7479426d 	ldrbtvc	r4, [r9], #-621
     e78:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
     e7c:	65735f6c 	ldrbvs	r5, [r3, #-3948]!
     e80:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e84:	6b636170 	blvs	18d944c <__Stack_Size+0x18d904c>
     e88:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}
     e8c:	74676e65 	strbtvc	r6, [r7], #-3685
     e90:	78640068 	stmdavc	r4!, {r3, r5, r6}^
     e94:	65735f6c 	ldrbvs	r5, [r3, #-3948]!
     e98:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e9c:	6b636170 	blvs	18d9464 <__Stack_Size+0x18d9064>
     ea0:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^
     ea4:	78640064 	stmdavc	r4!, {r2, r5, r6}^
     ea8:	72775f6c 	rsbsvc	r5, r7, #432	; 0x1b0
     eac:	5f657469 	svcpl	0x00657469
     eb0:	65747962 	ldrbvs	r7, [r4, #-2402]!
     eb4:	53626700 	cmnpl	r2, #0	; 0x0
     eb8:	75746174 	ldrbvc	r6, [r4, #-372]!
     ebc:	63615073 	cmnvs	r1, #115	; 0x73
     ec0:	0074656b 	rsbseq	r6, r4, fp, ror #10
     ec4:	5f6c7864 	svcpl	0x006c7864
     ec8:	5f746567 	svcpl	0x00746567
     ecc:	75736572 	ldrbvc	r6, [r3, #-1394]!
     ed0:	6700746c 	strvs	r7, [r0, -ip, ror #8]
     ed4:	73754269 	cmnvc	r5, #-1879048186	; 0x90000006
     ed8:	6e697355 	mcrvs	3, 3, r7, cr9, cr5, {2}
     edc:	78640067 	stmdavc	r4!, {r0, r1, r2, r5, r6}^
     ee0:	616d5f6c 	cmnvs	sp, ip, ror #30
     ee4:	6f77656b 	svcvs	0x0077656b
     ee8:	64006472 	strvs	r6, [r0], #-1138
     eec:	675f6c78 	undefined
     ef0:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
     ef4:	63617078 	cmnvs	r1, #120	; 0x78
     ef8:	5f74656b 	svcpl	0x0074656b
     efc:	61726170 	cmnvs	r2, r0, ror r1
     f00:	6574656d 	ldrbvs	r6, [r4, #-1389]!
     f04:	62670072 	rsbvs	r0, r7, #114	; 0x72
     f08:	65477852 	strbvs	r7, [r7, #-2130]
     f0c:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
     f10:	00687467 	rsbeq	r7, r8, r7, ror #8
     f14:	5f6c7864 	svcpl	0x006c7864
     f18:	78727874 	ldmdavc	r2!, {r2, r4, r5, r6, fp, ip, sp, lr}^
     f1c:	6361705f 	cmnvs	r1, #95	; 0x5f
     f20:	0074656b 	rsbseq	r6, r4, fp, ror #10
     f24:	5f6c7864 	svcpl	0x006c7864
     f28:	5f746573 	svcpl	0x00746573
     f2c:	61707874 	cmnvs	r0, r4, ror r8
     f30:	74656b63 	strbtvc	r6, [r5], #-2915
     f34:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
     f38:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
     f3c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     f40:	6d657400 	cfstrdvs	mvd7, [r5]
     f44:	72650070 	rsbvc	r0, r5, #112	; 0x70
     f48:	74696272 	strbtvc	r6, [r9], #-626
     f4c:	65526e00 	ldrbvs	r6, [r2, #-3584]
     f50:	69006461 	stmdbvs	r0, {r0, r5, r6, sl, sp, lr}
     f54:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     f58:	49626700 	stmdbmi	r2!, {r8, r9, sl, sp, lr}^
     f5c:	7274736e 	rsbsvc	r7, r4, #-1207959551	; 0xb8000001
     f60:	69746375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
     f64:	61506e6f 	cmpvs	r0, pc, ror #28
     f68:	74656b63 	strbtvc	r6, [r5], #-2915
     f6c:	75616200 	strbvc	r6, [r1, #-512]!
     f70:	6d756e64 	ldclvs	14, cr6, [r5, #-400]!
     f74:	6c786400 	cfldrdvs	mvd6, [r8]
     f78:	7265745f 	rsbvc	r7, r5, #1593835520	; 0x5f000000
     f7c:	616e696d 	cmnvs	lr, sp, ror #18
     f80:	46006574 	undefined
     f84:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     f88:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
     f8c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     f90:	424f0067 	submi	r0, pc, #103	; 0x67
     f94:	4457495f 	ldrbmi	r4, [r7], #-2399
     f98:	52570047 	subspl	r0, r7, #71	; 0x47
     f9c:	445f3250 	ldrbmi	r3, [pc], #592	; fa4 <__Stack_Size+0xba4>
     fa0:	00617461 	rsbeq	r7, r1, r1, ror #8
     fa4:	535f424f 	cmppl	pc, #-268435452	; 0xf0000004
     fa8:	00504f54 	subseq	r4, r0, r4, asr pc
     fac:	53414c46 	movtpl	r4, #7238	; 0x1c46
     fb0:	72455f48 	subvc	r5, r5, #288	; 0x120
     fb4:	4f657361 	svcmi	0x00657361
     fb8:	6f697470 	svcvs	0x00697470
     fbc:	7479426e 	ldrbtvc	r4, [r9], #-622
     fc0:	72007365 	andvc	r7, r0, #-1811939327	; 0x94000001
     fc4:	6f646165 	svcvs	0x00646165
     fc8:	74737475 	ldrbtvc	r7, [r3], #-1141
     fcc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     fd0:	414c4600 	cmpmi	ip, r0, lsl #12
     fd4:	455f4853 	ldrbmi	r4, [pc, #-2131]	; 789 <__Stack_Size+0x389>
     fd8:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
     fdc:	5052575f 	subspl	r5, r2, pc, asr r7
     fe0:	414c4600 	cmpmi	ip, r0, lsl #12
     fe4:	455f4853 	ldrbmi	r4, [pc, #-2131]	; 799 <__Stack_Size+0x399>
     fe8:	65736172 	ldrbvs	r6, [r3, #-370]!
     fec:	65676150 	strbvs	r6, [r7, #-336]!
     ff0:	414c4600 	cmpmi	ip, r0, lsl #12
     ff4:	4c5f4853 	mrrcmi	8, 5, r4, pc, cr3
     ff8:	6e657461 	cdpvs	4, 6, cr7, cr5, cr1, {3}
     ffc:	46007963 	strmi	r7, [r0], -r3, ror #18
    1000:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1004:	7465475f 	strbtvc	r4, [r5], #-1887
    1008:	66657250 	undefined
    100c:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1010:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1014:	74537265 	ldrbvc	r7, [r3], #-613
    1018:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    101c:	6c656400 	cfstrdvs	mvd6, [r5]
    1020:	46007961 	strmi	r7, [r0], -r1, ror #18
    1024:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1028:	6c6e555f 	cfstr64vs	mvdx5, [lr], #-380
    102c:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1030:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1034:	72455f48 	subvc	r5, r5, #288	; 0x120
    1038:	41657361 	cmnmi	r5, r1, ror #6
    103c:	61506c6c 	cmpvs	r0, ip, ror #24
    1040:	00736567 	rsbseq	r6, r3, r7, ror #10
    1044:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1048:	74535f48 	ldrbvc	r5, [r3], #-3912
    104c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1050:	77654e00 	strbvc	r4, [r5, -r0, lsl #28]!
    1054:	74617453 	strbtvc	r7, [r1], #-1107
    1058:	52570065 	subspl	r0, r7, #101	; 0x65
    105c:	57003050 	smlsdpl	r0, r0, r0, r3
    1060:	00315052 	eorseq	r5, r1, r2, asr r0
    1064:	32505257 	subscc	r5, r0, #1879048197	; 0x70000005
    1068:	50525700 	subspl	r5, r2, r0, lsl #14
    106c:	4c460033 	mcrrmi	0, 3, r0, r6, cr3
    1070:	5f485341 	svcpl	0x00485341
    1074:	57746547 	ldrbpl	r6, [r4, -r7, asr #10]!
    1078:	65746972 	ldrbvs	r6, [r4, #-2418]!
    107c:	746f7250 	strbtvc	r7, [pc], #592	; 1084 <__Stack_Size+0xc84>
    1080:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1084:	704f6e6f 	subvc	r6, pc, pc, ror #28
    1088:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    108c:	65747942 	ldrbvs	r7, [r4, #-2370]!
    1090:	54504f00 	ldrbpl	r4, [r0], #-3840
    1094:	5259454b 	subspl	r4, r9, #314572800	; 0x12c00000
    1098:	414c4600 	cmpmi	ip, r0, lsl #12
    109c:	555f4853 	ldrbpl	r4, [pc, #-2131]	; 851 <__Stack_Size+0x451>
    10a0:	4f726573 	svcmi	0x00726573
    10a4:	6f697470 	svcvs	0x00697470
    10a8:	7479426e 	ldrbtvc	r4, [r9], #-622
    10ac:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    10b0:	00676966 	rsbeq	r6, r7, r6, ror #18
    10b4:	53414c46 	movtpl	r4, #7238	; 0x1c46
    10b8:	65525f48 	ldrbvs	r5, [r2, #-3912]
    10bc:	754f6461 	strbvc	r6, [pc, #-1121]	; c63 <__Stack_Size+0x863>
    10c0:	6f725074 	svcvs	0x00725074
    10c4:	74636574 	strbtvc	r6, [r3], #-1396
    10c8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    10cc:	73616c66 	cmnvc	r1, #26112	; 0x6600
    10d0:	61747368 	cmnvs	r4, r8, ror #6
    10d4:	00737574 	rsbseq	r7, r3, r4, ror r5
    10d8:	73746962 	cmnvc	r4, #1605632	; 0x188000
    10dc:	75746174 	ldrbvc	r6, [r4, #-372]!
    10e0:	61500073 	cmpvs	r0, r3, ror r0
    10e4:	415f6567 	cmpmi	pc, r7, ror #10
    10e8:	65726464 	ldrbvs	r6, [r2, #-1124]!
    10ec:	46007373 	undefined
    10f0:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    10f4:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
    10f8:	505f524f 	subspl	r5, pc, pc, asr #4
    10fc:	4c460047 	mcrrmi	0, 4, r0, r6, cr7
    1100:	5f485341 	svcpl	0x00485341
    1104:	6b636f4c 	blvs	18dce3c <__Stack_Size+0x18dca3c>
    1108:	50525700 	subspl	r5, r2, r0, lsl #14
    110c:	61445f33 	cmpvs	r4, r3, lsr pc
    1110:	73006174 	movwvc	r6, #372	; 0x174
    1114:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1118:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    111c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1120:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1124:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!
    1128:	31663233 	cmncc	r6, r3, lsr r2
    112c:	665f7830 	undefined
    1130:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
    1134:	4600632e 	strmi	r6, [r0], -lr, lsr #6
    1138:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    113c:	6572505f 	ldrbvs	r5, [r2, #-95]!
    1140:	63746566 	cmnvs	r4, #427819008	; 0x19800000
    1144:	66754268 	ldrbtvs	r4, [r5], -r8, ror #4
    1148:	43726566 	cmnmi	r2, #427819008	; 0x19800000
    114c:	4600646d 	strmi	r6, [r0], -sp, ror #8
    1150:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1154:	7465475f 	strbtvc	r4, [r5], #-1887
    1158:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    115c:	74617453 	strbtvc	r7, [r1], #-1107
    1160:	46007375 	undefined
    1164:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1168:	656c435f 	strbvs	r4, [ip, #-863]!
    116c:	6c467261 	sfmvs	f7, 2, [r6], {97}
    1170:	46006761 	strmi	r6, [r0], -r1, ror #14
    1174:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1178:	4d4f435f 	stclmi	3, cr4, [pc, #-380]
    117c:	54454c50 	strbpl	r4, [r5], #-3152
    1180:	4c460045 	mcrrmi	0, 4, r0, r6, cr5
    1184:	5f485341 	svcpl	0x00485341
    1188:	59535542 	ldmdbpl	r3, {r1, r6, r8, sl, ip, lr}^
    118c:	50525700 	subspl	r5, r2, r0, lsl #14
    1190:	61445f31 	cmpvs	r4, r1, lsr pc
    1194:	46006174 	undefined
    1198:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    119c:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]
    11a0:	54554f45 	ldrbpl	r4, [r5], #-3909
    11a4:	6d695400 	cfstrdvs	mvd5, [r9]
    11a8:	74756f65 	ldrbtvc	r6, [r5], #-3941
    11ac:	414c4600 	cmpmi	ip, r0, lsl #12
    11b0:	475f4853 	undefined
    11b4:	65527465 	ldrbvs	r7, [r2, #-1125]
    11b8:	754f6461 	strbvc	r6, [pc, #-1121]	; d5f <__Stack_Size+0x95f>
    11bc:	6f725074 	svcvs	0x00725074
    11c0:	74636574 	strbtvc	r6, [r3], #-1396
    11c4:	536e6f69 	cmnpl	lr, #420	; 0x1a4
    11c8:	75746174 	ldrbvc	r6, [r4, #-372]!
    11cc:	424f0073 	submi	r0, pc, #115	; 0x73
    11d0:	4454535f 	ldrbmi	r5, [r4], #-863
    11d4:	57005942 	strpl	r5, [r0, -r2, asr #18]
    11d8:	5f305052 	svcpl	0x00305052
    11dc:	61746144 	cmnvs	r4, r4, asr #2
    11e0:	414c4600 	cmpmi	ip, r0, lsl #12
    11e4:	485f4853 	ldmdami	pc, {r0, r1, r4, r6, fp, lr}^
    11e8:	43666c61 	cmnmi	r6, #24832	; 0x6100
    11ec:	656c6379 	strbvs	r6, [ip, #-889]!
    11f0:	65636341 	strbvs	r6, [r3, #-833]!
    11f4:	46007373 	undefined
    11f8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    11fc:	7465475f 	strbtvc	r4, [r5], #-1887
    1200:	74617453 	strbtvc	r7, [r1], #-1107
    1204:	46007375 	undefined
    1208:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    120c:	616e455f 	cmnvs	lr, pc, asr r5
    1210:	57656c62 	strbpl	r6, [r5, -r2, ror #24]!
    1214:	65746972 	ldrbvs	r6, [r4, #-2418]!
    1218:	746f7250 	strbtvc	r7, [pc], #592	; 1220 <__Stack_Size+0xe20>
    121c:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1220:	46006e6f 	strmi	r6, [r0], -pc, ror #28
    1224:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    1228:	7465535f 	strbtvc	r5, [r5], #-863
    122c:	6574614c 	ldrbvs	r6, [r4, #-332]!
    1230:	0079636e 	rsbseq	r6, r9, lr, ror #6
    1234:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1238:	61485f48 	cmpvs	r8, r8, asr #30
    123c:	7943666c 	stmdbvc	r3, {r2, r3, r5, r6, r9, sl, sp, lr}^
    1240:	41656c63 	cmnmi	r5, r3, ror #24
    1244:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
    1248:	646d4373 	strbtvs	r4, [sp], #-883
    124c:	414c4600 	cmpmi	ip, r0, lsl #12
    1250:	505f4853 	subspl	r4, pc, r3, asr r8
    1254:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    1258:	704f6d61 	subvc	r6, pc, r1, ror #26
    125c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1260:	65747942 	ldrbvs	r7, [r4, #-2370]!
    1264:	61746144 	cmnvs	r4, r4, asr #2
    1268:	414c4600 	cmpmi	ip, r0, lsl #12
    126c:	475f4853 	undefined
    1270:	73557465 	cmpvc	r5, #1694498816	; 0x65000000
    1274:	704f7265 	subvc	r7, pc, r5, ror #4
    1278:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    127c:	65747942 	ldrbvs	r7, [r4, #-2370]!
    1280:	414c4600 	cmpmi	ip, r0, lsl #12
    1284:	505f4853 	subspl	r4, pc, r3, asr r8
    1288:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    128c:	61486d61 	cmpvs	r8, r1, ror #26
    1290:	6f57666c 	svcvs	0x0057666c
    1294:	46006472 	undefined
    1298:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    129c:	414c465f 	cmpmi	ip, pc, asr r6
    12a0:	53550047 	cmppl	r5, #71	; 0x47
    12a4:	44005245 	strmi	r5, [r0], #-581
    12a8:	30617461 	rsbcc	r7, r1, r1, ror #8
    12ac:	74614400 	strbtvc	r4, [r1], #-1024
    12b0:	46003161 	strmi	r3, [r0], -r1, ror #2
    12b4:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    12b8:	6761505f 	undefined
    12bc:	46007365 	strmi	r7, [r0], -r5, ror #6
    12c0:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    12c4:	0054495f 	subseq	r4, r4, pc, asr r9
    12c8:	53414c46 	movtpl	r4, #7238	; 0x1c46
    12cc:	72505f48 	subsvc	r5, r0, #288	; 0x120
    12d0:	6172676f 	cmnvs	r2, pc, ror #14
    12d4:	726f576d 	rsbvc	r5, pc, #28573696	; 0x1b40000
    12d8:	45520064 	ldrbmi	r0, [r2, #-100]
    12dc:	56524553 	undefined
    12e0:	46004445 	strmi	r4, [r0], -r5, asr #8
    12e4:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    12e8:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    12ec:	726f4674 	rsbvc	r4, pc, #121634816	; 0x7400000
    12f0:	7473614c 	ldrbtvc	r6, [r3], #-332
    12f4:	7265704f 	rsbvc	r7, r5, #79	; 0x4f
    12f8:	6f697461 	svcvs	0x00697461
    12fc:	4c46006e 	mcrrmi	0, 6, r0, r6, cr14
    1300:	5f485341 	svcpl	0x00485341
    1304:	66657250 	undefined
    1308:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    130c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1310:	57007265 	strpl	r7, [r0, -r5, ror #4]
    1314:	00525052 	subseq	r5, r2, r2, asr r0
    1318:	4f495047 	svcmi	0x00495047
    131c:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1320:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1324:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    1328:	00736f70 	rsbseq	r6, r3, r0, ror pc
    132c:	5f746942 	svcpl	0x00746942
    1330:	00544553 	subseq	r4, r4, r3, asr r5
    1334:	4f495047 	svcmi	0x00495047
    1338:	6165525f 	cmnvs	r5, pc, asr r2
    133c:	74754f64 	ldrbtvc	r4, [r5], #-3940
    1340:	44747570 	ldrbtmi	r7, [r4], #-1392
    1344:	00617461 	rsbeq	r7, r1, r1, ror #8
    1348:	4f495047 	svcmi	0x00495047
    134c:	6576455f 	ldrbvs	r4, [r6, #-1375]!
    1350:	754f746e 	strbvc	r7, [pc, #-1134]	; eea <__Stack_Size+0xaea>
    1354:	74757074 	ldrbtvc	r7, [r5], #-116
    1358:	00646d43 	rsbeq	r6, r4, r3, asr #26
    135c:	4f495047 	svcmi	0x00495047
    1360:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1364:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    1368:	0074696e 	rsbseq	r6, r4, lr, ror #18
    136c:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    1370:	42006c61 	andmi	r6, r0, #24832	; 0x6100
    1374:	525f7469 	subspl	r7, pc, #1761607680	; 0x69000000
    1378:	54455345 	strbpl	r5, [r5], #-837
    137c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1380:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
    1384:	42657469 	rsbmi	r7, r5, #1761607680	; 0x69000000
    1388:	47007469 	strmi	r7, [r0, -r9, ror #8]
    138c:	5f4f4950 	svcpl	0x004f4950
    1390:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
    1394:	00737469 	rsbseq	r7, r3, r9, ror #8
    1398:	4f495047 	svcmi	0x00495047
    139c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    13a0:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    13a4:	52434954 	subpl	r4, r3, #1376256	; 0x150000
    13a8:	6d747300 	ldclvs	3, cr7, [r4]
    13ac:	31663233 	cmncc	r6, r3, lsr r2
    13b0:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    13b4:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    13b8:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    13bc:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    13c0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    13c4:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    13c8:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    13cc:	6d6e6970 	stclvs	9, cr6, [lr, #-448]!
    13d0:	006b7361 	rsbeq	r7, fp, r1, ror #6
    13d4:	4f495047 	svcmi	0x00495047
    13d8:	726f505f 	rsbvc	r5, pc, #95	; 0x5f
    13dc:	756f5374 	strbvc	r5, [pc, #-884]!	; 1070 <__Stack_Size+0xc70>
    13e0:	00656372 	rsbeq	r6, r5, r2, ror r3
    13e4:	4f495047 	svcmi	0x00495047
    13e8:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    13ec:	0074696e 	rsbseq	r6, r4, lr, ror #18
    13f0:	4f495047 	svcmi	0x00495047
    13f4:	6576455f 	ldrbvs	r4, [r6, #-1375]!
    13f8:	754f746e 	strbvc	r7, [pc, #-1134]	; f92 <__Stack_Size+0xb92>
    13fc:	74757074 	ldrbtvc	r7, [r5], #-116
    1400:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1404:	47006769 	strmi	r6, [r0, -r9, ror #14]
    1408:	5f4f4950 	svcpl	0x004f4950
    140c:	616d6552 	cmnvs	sp, r2, asr r5
    1410:	50470070 	subpl	r0, r7, r0, ror r0
    1414:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1418:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    141c:	7475706e 	ldrbtvc	r7, [r5], #-110
    1420:	61746144 	cmnvs	r4, r4, asr #2
    1424:	00746942 	rsbseq	r6, r4, r2, asr #18
    1428:	72706d74 	rsbsvc	r6, r0, #7424	; 0x1d00
    142c:	47006765 	strmi	r6, [r0, -r5, ror #14]
    1430:	5f4f4950 	svcpl	0x004f4950
    1434:	65736552 	ldrbvs	r6, [r3, #-1362]!
    1438:	74694274 	strbtvc	r4, [r9], #-628
    143c:	6f500073 	svcvs	0x00500073
    1440:	61567472 	cmpvs	r6, r2, ror r4
    1444:	7563006c 	strbvc	r0, [r3, #-108]!
    1448:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    144c:	646f6d74 	strbtvs	r6, [pc], #3444	; 1454 <__Stack_Size+0x1054>
    1450:	50470065 	subpl	r0, r7, r5, rrx
    1454:	505f4f49 	subspl	r4, pc, r9, asr #30
    1458:	65526e69 	ldrbvs	r6, [r2, #-3689]
    145c:	4370616d 	cmnmi	r0, #1073741851	; 0x4000001b
    1460:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1464:	50470067 	subpl	r0, r7, r7, rrx
    1468:	505f4f49 	subspl	r4, pc, r9, asr #30
    146c:	6f536e69 	svcvs	0x00536e69
    1470:	65637275 	strbvs	r7, [r3, #-629]!
    1474:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1478:	65525f4f 	ldrbvs	r5, [r2, #-3919]
    147c:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    1480:	44747570 	ldrbtmi	r7, [r4], #-1392
    1484:	00617461 	rsbeq	r7, r1, r1, ror #8
    1488:	6d706d74 	ldclvs	13, cr6, [r0, #-464]!
    148c:	006b7361 	rsbeq	r7, fp, r1, ror #6
    1490:	4f495047 	svcmi	0x00495047
    1494:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    1498:	6b636f4c 	blvs	18dd1d0 <__Stack_Size+0x18dcdd0>
    149c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    14a0:	63006769 	movwvs	r6, #1897	; 0x769
    14a4:	65727275 	ldrbvs	r7, [r2, #-629]!
    14a8:	6970746e 	ldmdbvs	r0!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    14ac:	5047006e 	subpl	r0, r7, lr, rrx
    14b0:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
    14b4:	65746972 	ldrbvs	r6, [r4, #-2418]!
    14b8:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    14bc:	50470031 	subpl	r0, r7, r1, lsr r0
    14c0:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; 57f <__Stack_Size+0x17f>
    14c4:	4c495458 	cfstrdmi	mvd5, [r9], {88}
    14c8:	43656e69 	cmnmi	r5, #1680	; 0x690
    14cc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    14d0:	69420067 	stmdbvs	r2, {r0, r1, r2, r5, r6}^
    14d4:	74634174 	strbtvc	r4, [r3], #-372
    14d8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    14dc:	5250414d 	subspl	r4, r0, #1073741843	; 0x40000013
    14e0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    14e4:	4700784f 	strmi	r7, [r0, -pc, asr #16]
    14e8:	5f4f4950 	svcpl	0x004f4950
    14ec:	74696e49 	strbtvc	r6, [r9], #-3657
    14f0:	75727453 	ldrbvc	r7, [r2, #-1107]!
    14f4:	45007463 	strmi	r7, [r0, #-1123]
    14f8:	00524356 	subseq	r4, r2, r6, asr r3
    14fc:	4f495047 	svcmi	0x00495047
    1500:	6165525f 	cmnvs	r5, pc, asr r2
    1504:	74754f64 	ldrbtvc	r4, [r5], #-3940
    1508:	44747570 	ldrbtmi	r7, [r4], #-1392
    150c:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    1510:	47007469 	strmi	r7, [r0, -r9, ror #8]
    1514:	5f4f4950 	svcpl	0x004f4950
    1518:	4f494641 	svcmi	0x00494641
    151c:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1520:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1524:	00524241 	subseq	r4, r2, r1, asr #4
    1528:	4349564e 	movtmi	r5, #38478	; 0x964e
    152c:	656c435f 	strbvs	r4, [ip, #-863]!
    1530:	52497261 	subpl	r7, r9, #268435462	; 0x10000006
    1534:	61684351 	cmnvs	r8, r1, asr r3
    1538:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    153c:	646e6550 	strbtvs	r6, [lr], #-1360
    1540:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1544:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    1548:	5f434956 	svcpl	0x00434956
    154c:	74696e49 	strbtvc	r6, [r9], #-3657
    1550:	75727453 	ldrbvc	r7, [r2, #-1107]!
    1554:	4e007463 	cdpmi	4, 0, cr7, cr0, cr3, {3}
    1558:	5f434956 	svcpl	0x00434956
    155c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1560:	65727275 	ldrbvs	r7, [r2, #-629]!
    1564:	6550746e 	ldrbvs	r7, [r0, #-1134]
    1568:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    156c:	51524967 	cmppl	r2, r7, ror #18
    1570:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1574:	006c656e 	rsbeq	r6, ip, lr, ror #10
    1578:	4349564e 	movtmi	r5, #38478	; 0x964e
    157c:	7465475f 	strbtvc	r4, [r5], #-1887
    1580:	6c756146 	ldfvse	f6, [r5], #-280
    1584:	64644174 	strbtvs	r4, [r4], #-372
    1588:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    158c:	73795300 	cmnvc	r9, #0	; 0x0
    1590:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1594:	6c646e61 	stclvs	14, cr6, [r4], #-388
    1598:	75537265 	ldrbvc	r7, [r3, #-613]
    159c:	69725062 	ldmdbvs	r2!, {r1, r5, r6, ip, lr}^
    15a0:	7469726f 	strbtvc	r7, [r9], #-623
    15a4:	564e0079 	undefined
    15a8:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    15ac:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    15b0:	53414d49 	movtpl	r4, #7497	; 0x1d49
    15b4:	564e004b 	strbpl	r0, [lr], -fp, asr #32
    15b8:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    15bc:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    15c0:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
    15c4:	65747379 	ldrbvs	r7, [r4, #-889]!
    15c8:	7365526d 	cmnvc	r5, #-805306362	; 0xd0000006
    15cc:	74007465 	strvc	r7, [r0], #-1125
    15d0:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
    15d4:	564e0065 	strbpl	r0, [lr], -r5, rrx
    15d8:	525f4349 	subspl	r4, pc, #603979777	; 0x24000001
    15dc:	54455345 	strbpl	r5, [r5], #-837
    15e0:	4d495250 	sfmmi	f5, 2, [r9, #-320]
    15e4:	004b5341 	subeq	r5, fp, r1, asr #6
    15e8:	6c756166 	ldfvse	f6, [r5], #-408
    15ec:	64646174 	strbtvs	r6, [r4], #-372
    15f0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    15f4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    15f8:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    15fc:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    1600:	646e6148 	strbtvs	r6, [lr], #-328
    1604:	5072656c 	rsbspl	r6, r2, ip, ror #10
    1608:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    160c:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    1610:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1614:	74730067 	ldrbtvc	r0, [r3], #-103
    1618:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    161c:	5f783031 	svcpl	0x00783031
    1620:	2f62696c 	svccs	0x0062696c
    1624:	2f637273 	svccs	0x00637273
    1628:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    162c:	30316632 	eorscc	r6, r1, r2, lsr r6
    1630:	766e5f78 	uqsub16vc	r5, lr, r8
    1634:	632e6369 	teqvs	lr, #-1543503871	; 0xa4000001
    1638:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    163c:	65475f43 	strbvs	r5, [r7, #-3907]
    1640:	55504374 	ldrbpl	r4, [r0, #-884]
    1644:	4e004449 	cdpmi	4, 0, cr4, cr0, cr9, {2}
    1648:	5f434956 	svcpl	0x00434956
    164c:	6f697250 	svcvs	0x00697250
    1650:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1654:	756f7247 	strbvc	r7, [pc, #-583]!	; 1415 <__Stack_Size+0x1015>
    1658:	564e0070 	undefined
    165c:	525f4349 	subspl	r4, pc, #603979777	; 0x24000001
    1660:	54455345 	strbpl	r5, [r5], #-837
    1664:	4c554146 	ldfmie	f4, [r5], {70}
    1668:	53414d54 	movtpl	r4, #7508	; 0x1d54
    166c:	564e004b 	strbpl	r0, [lr], -fp, asr #32
    1670:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1674:	75437465 	strbvc	r7, [r3, #-1125]
    1678:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    167c:	74634174 	strbtvc	r4, [r3], #-372
    1680:	48657669 	stmdami	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    1684:	6c646e61 	stclvs	14, cr6, [r4], #-388
    1688:	53007265 	movwpl	r7, #613	; 0x265
    168c:	65747379 	ldrbvs	r7, [r4, #-889]!
    1690:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1694:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    1698:	53434900 	movtpl	r4, #14592	; 0x3900
    169c:	53520052 	cmppl	r2, #82	; 0x52
    16a0:	45565245 	ldrbmi	r5, [r6, #-581]
    16a4:	4e003144 	adfmism	f3, f0, f4
    16a8:	5f434956 	svcpl	0x00434956
    16ac:	656e6547 	strbvs	r6, [lr, #-1351]!
    16b0:	65746172 	ldrbvs	r6, [r4, #-370]!
    16b4:	65726f43 	ldrbvs	r6, [r2, #-3907]!
    16b8:	65736552 	ldrbvs	r6, [r3, #-1362]!
    16bc:	564e0074 	undefined
    16c0:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    16c4:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    16c8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    16cc:	646e6148 	strbtvs	r6, [lr], #-328
    16d0:	4172656c 	cmnmi	r2, ip, ror #10
    16d4:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    16d8:	74694265 	strbtvc	r4, [r9], #-613
    16dc:	74617453 	strbtvc	r7, [r1], #-1107
    16e0:	4e007375 	mcrmi	3, 0, r7, cr0, cr5, {3}
    16e4:	5f434956 	svcpl	0x00434956
    16e8:	45534142 	ldrbmi	r4, [r3, #-322]
    16ec:	43495250 	movtmi	r5, #37456	; 0x9250
    16f0:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    16f4:	46420047 	strbmi	r0, [r2], -r7, asr #32
    16f8:	4e005241 	cdpmi	2, 0, cr5, cr0, cr1, {2}
    16fc:	5f434956 	svcpl	0x00434956
    1700:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1704:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
    1708:	656e6e61 	strbvs	r6, [lr, #-3681]!
    170c:	6e65506c 	cdpvs	0, 6, cr5, cr5, cr12, {3}
    1710:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1714:	00746942 	rsbseq	r6, r4, r2, asr #18
    1718:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    171c:	4300736f 	movwmi	r7, #879	; 0x36f
    1720:	00525346 	subseq	r5, r2, r6, asr #6
    1724:	4349564e 	movtmi	r5, #38478	; 0x964e
    1728:	7465535f 	strbtvc	r5, [r5], #-863
    172c:	74737953 	ldrbtvc	r7, [r3], #-2387
    1730:	61486d65 	cmpvs	r8, r5, ror #26
    1734:	656c646e 	strbvs	r6, [ip, #-1134]!
    1738:	6e655072 	mcrvs	0, 3, r5, cr5, cr2, {3}
    173c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1740:	00746942 	rsbseq	r6, r4, r2, asr #18
    1744:	43524941 	cmpmi	r2, #1064960	; 0x104000
    1748:	564e0052 	undefined
    174c:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1750:	65567465 	ldrbvs	r7, [r6, #-1125]
    1754:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    1758:	6c626154 	stfvse	f6, [r2], #-336
    175c:	43490065 	movtmi	r0, #36965	; 0x9065
    1760:	4e005250 	mcrmi	2, 0, r5, cr0, cr0, {2}
    1764:	5f434956 	svcpl	0x00434956
    1768:	74696e49 	strbtvc	r6, [r9], #-3657
    176c:	50485300 	subpl	r5, r8, r0, lsl #6
    1770:	48530052 	ldmdami	r3, {r1, r4, r6}^
    1774:	00525343 	subseq	r5, r2, r3, asr #6
    1778:	4349564e 	movtmi	r5, #38478	; 0x964e
    177c:	7465475f 	strbtvc	r4, [r5], #-1887
    1780:	45534142 	ldrbmi	r4, [r3, #-322]
    1784:	00495250 	subeq	r5, r9, r0, asr r2
    1788:	41464d4d 	cmpmi	r6, sp, asr #26
    178c:	6d740052 	ldclvs	0, cr0, [r4, #-328]!
    1790:	62757370 	rsbsvs	r7, r5, #-1073741823	; 0xc0000001
    1794:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1798:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    179c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
    17a0:	646e6148 	strbtvs	r6, [lr], #-328
    17a4:	4372656c 	cmnmi	r2, #452984832	; 0x1b000000
    17a8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    17ac:	564e0067 	strbpl	r0, [lr], -r7, rrx
    17b0:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    17b4:	65747379 	ldrbvs	r7, [r4, #-889]!
    17b8:	43504c6d 	cmpmi	r0, #27904	; 0x6d00
    17bc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    17c0:	664f0067 	strbvs	r0, [pc], -r7, rrx
    17c4:	74657366 	strbtvc	r7, [r5], #-870
    17c8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    17cc:	74535f43 	ldrbvc	r5, [r3], #-3907
    17d0:	74637572 	strbtvc	r7, [r3], #-1394
    17d4:	74696e49 	strbtvc	r6, [r9], #-3657
    17d8:	45434900 	strbmi	r4, [r3, #-2304]
    17dc:	6d740052 	ldclvs	0, cr0, [r4, #-328]!
    17e0:	69727070 	ldmdbvs	r2!, {r4, r5, r6, ip, sp, lr}^
    17e4:	7469726f 	strbtvc	r7, [r9], #-623
    17e8:	54560079 	ldrbpl	r0, [r6], #-121
    17ec:	4900524f 	stmdbmi	r0, {r0, r1, r2, r3, r6, r9, ip, lr}
    17f0:	00525053 	subseq	r5, r2, r3, asr r0
    17f4:	52534644 	subspl	r4, r3, #71303168	; 0x4400000
    17f8:	53464800 	movtpl	r4, #26624	; 0x6800
    17fc:	564e0052 	undefined
    1800:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1804:	41465445 	cmpmi	r6, r5, asr #8
    1808:	4d544c55 	ldclmi	12, cr4, [r4, #-340]
    180c:	004b5341 	subeq	r5, fp, r1, asr #6
    1810:	52534641 	subspl	r4, r3, #68157440	; 0x4100000
    1814:	45534900 	ldrbmi	r4, [r3, #-2304]
    1818:	564e0052 	undefined
    181c:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    1820:	61467465 	cmpvs	r6, r5, ror #8
    1824:	48746c75 	ldmdami	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    1828:	6c646e61 	stclvs	14, cr6, [r4], #-388
    182c:	6f537265 	svcvs	0x00537265
    1830:	65637275 	strbvs	r7, [r3, #-629]!
    1834:	6d740073 	ldclvs	0, cr0, [r4, #-460]!
    1838:	4e003270 	mcrmi	2, 0, r3, cr0, cr0, {3}
    183c:	5f434956 	svcpl	0x00434956
    1840:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    1844:	65747379 	ldrbvs	r7, [r4, #-889]!
    1848:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    184c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    1850:	646e6550 	strbtvs	r6, [lr], #-1360
    1854:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1858:	74537469 	ldrbvc	r7, [r3], #-1129
    185c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1860:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1864:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1868:	53726165 	cmnpl	r2, #1073741849	; 0x40000019
    186c:	65747379 	ldrbvs	r7, [r4, #-889]!
    1870:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    1874:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    1878:	646e6550 	strbtvs	r6, [lr], #-1360
    187c:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1880:	66007469 	strvs	r7, [r0], -r9, ror #8
    1884:	746c7561 	strbtvc	r7, [ip], #-1377
    1888:	72756f73 	rsbsvc	r6, r5, #460	; 0x1cc
    188c:	00736563 	rsbseq	r6, r3, r3, ror #10
    1890:	74737953 	ldrbtvc	r7, [r3], #-2387
    1894:	61486d65 	cmpvs	r8, r5, ror #26
    1898:	656c646e 	strbvs	r6, [ip, #-1134]!
    189c:	65725072 	ldrbvs	r5, [r2, #-114]!
    18a0:	74706d65 	ldrbtvc	r6, [r0], #-3429
    18a4:	506e6f69 	rsbpl	r6, lr, r9, ror #30
    18a8:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    18ac:	00797469 	rsbseq	r7, r9, r9, ror #8
    18b0:	4349564e 	movtmi	r5, #38478	; 0x964e
    18b4:	7465475f 	strbtvc	r4, [r5], #-1887
    18b8:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    18bc:	6e6e6168 	powvsez	f6, f6, #0.0
    18c0:	65506c65 	ldrbvs	r6, [r0, #-3173]
    18c4:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    18c8:	74694267 	strbtvc	r4, [r9], #-615
    18cc:	74617453 	strbtvc	r7, [r1], #-1107
    18d0:	4e007375 	mcrmi	3, 0, r7, cr0, cr5, {3}
    18d4:	5f434956 	svcpl	0x00434956
    18d8:	44424353 	strbmi	r4, [r2], #-851
    18dc:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    18e0:	654e0074 	strbvs	r0, [lr, #-116]
    18e4:	69725077 	ldmdbvs	r2!, {r0, r1, r2, r4, r5, r6, ip, lr}^
    18e8:	7469726f 	strbtvc	r7, [r9], #-623
    18ec:	564e0079 	undefined
    18f0:	565f4349 	ldrbpl	r4, [pc], -r9, asr #6
    18f4:	54746365 	ldrbtpl	r6, [r4], #-869
    18f8:	61006261 	tstvs	r0, r1, ror #4
    18fc:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    1900:	71726965 	cmnvc	r2, r5, ror #18
    1904:	74617473 	strbtvc	r7, [r1], #-1139
    1908:	68007375 	stmdavs	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    190c:	6c646e61 	stclvs	14, cr6, [r4], #-388
    1910:	616d7265 	cmnvs	sp, r5, ror #4
    1914:	4c006b73 	stcmi	11, cr6, [r0], {115}
    1918:	6f50776f 	svcvs	0x0050776f
    191c:	4d726577 	cfldr64mi	mvdx6, [r2, #-476]!
    1920:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1924:	4349564e 	movtmi	r5, #38478	; 0x964e
    1928:	7465475f 	strbtvc	r4, [r5], #-1887
    192c:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    1930:	6e6e6168 	powvsez	f6, f6, #0.0
    1934:	63416c65 	movtvs	r6, #7269	; 0x1c65
    1938:	65766974 	ldrbvs	r6, [r6, #-2420]!
    193c:	53746942 	cmnpl	r4, #1081344	; 0x108000
    1940:	75746174 	ldrbvc	r6, [r4, #-372]!
    1944:	564e0073 	undefined
    1948:	445f4349 	ldrbmi	r4, [pc], #841	; 1950 <__Stack_Size+0x1550>
    194c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1950:	564e0074 	undefined
    1954:	505f4349 	subspl	r4, pc, r9, asr #6
    1958:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    195c:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
    1960:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    1964:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1968:	70006769 	andvc	r6, r0, r9, ror #14
    196c:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1970:	7269676e 	rsbvc	r6, r9, #28835840	; 0x1b80000
    1974:	61747371 	cmnvs	r4, r1, ror r3
    1978:	00737574 	rsbseq	r7, r3, r4, ror r5
    197c:	5f525750 	svcpl	0x00525750
    1980:	65746e45 	ldrbvs	r6, [r4, #-3653]!
    1984:	41545372 	cmpmi	r4, r2, ror r3
    1988:	5942444e 	stmdbpl	r2, {r1, r2, r3, r6, sl, lr}^
    198c:	65646f4d 	strbvs	r6, [r4, #-3917]!
    1990:	52575000 	subspl	r5, r7, #0	; 0x0
    1994:	656c435f 	strbvs	r4, [ip, #-863]!
    1998:	6c467261 	sfmvs	f7, 2, [r6], {97}
    199c:	50006761 	andpl	r6, r0, r1, ror #14
    19a0:	445f5257 	ldrbmi	r5, [pc], #599	; 19a8 <__Stack_Size+0x15a8>
    19a4:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    19a8:	57500074 	undefined
    19ac:	65525f52 	ldrbvs	r5, [r2, #-3922]
    19b0:	616c7567 	cmnvs	ip, r7, ror #10
    19b4:	00726f74 	rsbseq	r6, r2, r4, ror pc
    19b8:	5f525750 	svcpl	0x00525750
    19bc:	4c445650 	mcrrmi	6, 5, r5, r4, cr0
    19c0:	6c657665 	stclvs	6, cr7, [r5], #-404
    19c4:	52575000 	subspl	r5, r7, #0	; 0x0
    19c8:	414c465f 	cmpmi	ip, pc, asr r6
    19cc:	57500047 	ldrbpl	r0, [r0, -r7, asr #32]
    19d0:	56505f52 	usubaddxpl	r5, r0, r2
    19d4:	646d4344 	strbtvs	r4, [sp], #-836
    19d8:	6d747300 	ldclvs	3, cr7, [r4]
    19dc:	31663233 	cmncc	r6, r3, lsr r2
    19e0:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    19e4:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    19e8:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    19ec:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    19f0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    19f4:	7277705f 	rsbsvc	r7, r7, #95	; 0x5f
    19f8:	5000632e 	andpl	r6, r0, lr, lsr #6
    19fc:	455f5257 	ldrbmi	r5, [pc, #-599]	; 17ad <__Stack_Size+0x13ad>
    1a00:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1a04:	504f5453 	subpl	r5, pc, r3, asr r4
    1a08:	65646f4d 	strbvs	r6, [r4, #-3917]!
    1a0c:	52575000 	subspl	r5, r7, #0	; 0x0
    1a10:	4456505f 	ldrbmi	r5, [r6], #-95
    1a14:	6576654c 	ldrbvs	r6, [r6, #-1356]!
    1a18:	6e6f436c 	cdpvs	3, 6, cr4, cr15, cr12, {3}
    1a1c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1a20:	5f525750 	svcpl	0x00525750
    1a24:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1a28:	5367616c 	cmnpl	r7, #27	; 0x1b
    1a2c:	75746174 	ldrbvc	r6, [r4, #-372]!
    1a30:	57500073 	undefined
    1a34:	54535f52 	ldrbpl	r5, [r3], #-3922
    1a38:	6e45504f 	cdpvs	0, 4, cr5, cr5, cr15, {2}
    1a3c:	00797274 	rsbseq	r7, r9, r4, ror r2
    1a40:	5f525750 	svcpl	0x00525750
    1a44:	6b636142 	blvs	18d9f54 <__Stack_Size+0x18d9b54>
    1a48:	63417075 	movtvs	r7, #4213	; 0x1075
    1a4c:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    1a50:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1a54:	5f525750 	svcpl	0x00525750
    1a58:	656b6157 	strbvs	r6, [fp, #-343]!
    1a5c:	69507055 	ldmdbvs	r0, {r0, r2, r4, r6, ip, sp, lr}^
    1a60:	646d436e 	strbtvs	r4, [sp], #-878
    1a64:	42504100 	subsmi	r4, r0, #0	; 0x0
    1a68:	54535231 	ldrbpl	r5, [r3], #-561
    1a6c:	43520052 	cmpmi	r2, #82	; 0x52
    1a70:	43485f43 	movtmi	r5, #36675	; 0x8f43
    1a74:	52004b4c 	andpl	r4, r0, #77824	; 0x13000
    1a78:	415f4343 	cmpmi	pc, r3, asr #6
    1a7c:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
    1a80:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1a84:	00676966 	rsbeq	r6, r7, r6, ror #18
    1a88:	5f434352 	svcpl	0x00434352
    1a8c:	61656c43 	cmnvs	r5, r3, asr #24
    1a90:	50544972 	subspl	r4, r4, r2, ror r9
    1a94:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1a98:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1a9c:	43520074 	cmpmi	r2, #116	; 0x74
    1aa0:	50415f43 	subpl	r5, r1, r3, asr #30
    1aa4:	65503242 	ldrbvs	r3, [r0, #-578]
    1aa8:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1aac:	65736552 	ldrbvs	r6, [r3, #-1362]!
    1ab0:	646d4374 	strbtvs	r4, [sp], #-884
    1ab4:	43435200 	movtmi	r5, #12800	; 0x3200
    1ab8:	45534c5f 	ldrbmi	r4, [r3, #-3167]
    1abc:	43435200 	movtmi	r5, #12800	; 0x3200
    1ac0:	7465475f 	strbtvc	r4, [r5], #-1887
    1ac4:	74535449 	ldrbvc	r5, [r3], #-1097
    1ac8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1acc:	43444200 	movtmi	r4, #16896	; 0x4200
    1ad0:	43520052 	cmpmi	r2, #82	; 0x52
    1ad4:	50415f43 	subpl	r5, r1, r3, asr #30
    1ad8:	65503242 	ldrbvs	r3, [r0, #-578]
    1adc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1ae0:	43435200 	movtmi	r5, #12800	; 0x3200
    1ae4:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
    1ae8:	5200324b 	andpl	r3, r0, #-1342177276	; 0xb0000004
    1aec:	505f4343 	subspl	r4, pc, r3, asr #6
    1af0:	6d434c4c 	stclvs	12, cr4, [r3, #-304]
    1af4:	43520064 	cmpmi	r2, #100	; 0x64
    1af8:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1afc:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    1b00:	65707954 	ldrbvs	r7, [r0, #-2388]!
    1b04:	00666544 	rsbeq	r6, r6, r4, asr #10
    1b08:	5f434352 	svcpl	0x00434352
    1b0c:	4d4c4c50 	stclmi	12, cr4, [ip, #-320]
    1b10:	52006c75 	andpl	r6, r0, #29952	; 0x7500
    1b14:	415f4343 	cmpmi	pc, r3, asr #6
    1b18:	65504248 	ldrbvs	r4, [r0, #-584]
    1b1c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1b20:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1b24:	646d436b 	strbtvs	r4, [sp], #-875
    1b28:	47464300 	strbmi	r4, [r6, -r0, lsl #6]
    1b2c:	43480052 	movtmi	r0, #32850	; 0x8052
    1b30:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    1b34:	75716572 	ldrbvc	r6, [r1, #-1394]!
    1b38:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1b3c:	42504100 	subsmi	r4, r0, #0	; 0x0
    1b40:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
    1b44:	65727000 	ldrbvs	r7, [r2]!
    1b48:	52006373 	andpl	r6, r0, #-872415231	; 0xcc000001
    1b4c:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]
    1b50:	6f434f43 	svcvs	0x00434f43
    1b54:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1b58:	43435200 	movtmi	r5, #12800	; 0x3200
    1b5c:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1b60:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1b64:	5f434352 	svcpl	0x00434352
    1b68:	74696157 	strbtvc	r6, [r9], #-343
    1b6c:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    1b70:	74534553 	ldrbvc	r4, [r3], #-1363
    1b74:	55747261 	ldrbpl	r7, [r4, #-609]!
    1b78:	43520070 	cmpmi	r2, #112	; 0x70
    1b7c:	54525f43 	ldrbpl	r5, [r2], #-3907
    1b80:	4b4c4343 	blmi	1312894 <__Stack_Size+0x1312494>
    1b84:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1b88:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1b8c:	415f4343 	cmpmi	pc, r3, asr #6
    1b90:	50314250 	eorspl	r4, r1, r0, asr r2
    1b94:	70697265 	rsbvc	r7, r9, r5, ror #4
    1b98:	73655268 	cmnvc	r5, #-2147483642	; 0x80000006
    1b9c:	6d437465 	cfstrdvs	mvd7, [r3, #-404]
    1ba0:	43520064 	cmpmi	r2, #100	; 0x64
    1ba4:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1ba8:	6e6f434c 	cdpvs	3, 6, cr4, cr15, cr12, {2}
    1bac:	00676966 	rsbeq	r6, r7, r6, ror #18
    1bb0:	6d6c6c70 	stclvs	12, cr6, [ip, #-448]!
    1bb4:	006c6c75 	rsbeq	r6, ip, r5, ror ip
    1bb8:	5f434352 	svcpl	0x00434352
    1bbc:	43425355 	movtmi	r5, #9045	; 0x2355
    1bc0:	6f434b4c 	svcvs	0x00434b4c
    1bc4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1bc8:	43435200 	movtmi	r5, #12800	; 0x3200
    1bcc:	49534c5f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    1bd0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1bd4:	5f434352 	svcpl	0x00434352
    1bd8:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    1bdc:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    1be0:	756f534b 	strbvc	r5, [pc, #-843]!	; 189d <__Stack_Size+0x149d>
    1be4:	00656372 	rsbeq	r6, r5, r2, ror r3
    1be8:	32425041 	subcc	r5, r2, #65	; 0x41
    1bec:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
    1bf0:	43435200 	movtmi	r5, #12800	; 0x3200
    1bf4:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1bf8:	72655031 	rsbvc	r5, r5, #49	; 0x31
    1bfc:	00687069 	rsbeq	r7, r8, r9, rrx
    1c00:	736c6c70 	cmnvc	ip, #28672	; 0x7000
    1c04:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1c08:	48410065 	stmdami	r1, {r0, r2, r5, r6}^
    1c0c:	524e4542 	subpl	r4, lr, #276824064	; 0x10800000
    1c10:	43435200 	movtmi	r5, #12800	; 0x3200
    1c14:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
    1c18:	6f43314b 	svcvs	0x0043314b
    1c1c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1c20:	61747300 	cmnvs	r4, r0, lsl #6
    1c24:	72737574 	rsbsvc	r7, r3, #486539264	; 0x1d000000
    1c28:	52006765 	andpl	r6, r0, #26476544	; 0x1940000
    1c2c:	415f4343 	cmpmi	pc, r3, asr #6
    1c30:	50314250 	eorspl	r4, r1, r0, asr r2
    1c34:	70697265 	rsbvc	r7, r9, r5, ror #4
    1c38:	6f6c4368 	svcvs	0x006c4368
    1c3c:	6d436b63 	vstrvs	d22, [r3, #-396]
    1c40:	50410064 	subpl	r0, r1, r4, rrx
    1c44:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
    1c48:	74530052 	ldrbvc	r0, [r3], #-82
    1c4c:	55747261 	ldrbpl	r7, [r4, #-609]!
    1c50:	756f4370 	strbvc	r4, [pc, #-880]!	; 18e8 <__Stack_Size+0x14e8>
    1c54:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1c58:	43435200 	movtmi	r5, #12800	; 0x3200
    1c5c:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    1c60:	5270756b 	rsbspl	r7, r0, #448790528	; 0x1ac00000
    1c64:	74657365 	strbtvc	r7, [r5], #-869
    1c68:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1c6c:	5f434352 	svcpl	0x00434352
    1c70:	756a6441 	strbvc	r6, [sl, #-1089]!
    1c74:	53487473 	movtpl	r7, #33907	; 0x8473
    1c78:	6c614349 	stclvs	3, cr4, [r1], #-292
    1c7c:	61726269 	cmnvs	r2, r9, ror #4
    1c80:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    1c84:	756c6156 	strbvc	r6, [ip, #-342]!
    1c88:	44410065 	strbmi	r0, [r1], #-101
    1c8c:	4b4c4343 	blmi	13129a0 <__Stack_Size+0x13125a0>
    1c90:	6572465f 	ldrbvs	r4, [r2, #-1631]!
    1c94:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1c98:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    1c9c:	465f4343 	ldrbmi	r4, [pc], -r3, asr #6
    1ca0:	0047414c 	subeq	r4, r7, ip, asr #2
    1ca4:	5f434352 	svcpl	0x00434352
    1ca8:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1cac:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1cb0:	43520065 	cmpmi	r2, #101	; 0x65
    1cb4:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1cb8:	4b4c4353 	blmi	1312a0c <__Stack_Size+0x131260c>
    1cbc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1cc0:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1cc4:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1cc8:	6c467465 	cfstrdvs	mvd7, [r6], {101}
    1ccc:	74536761 	ldrbvc	r6, [r3], #-1889
    1cd0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1cd4:	43435200 	movtmi	r5, #12800	; 0x3200
    1cd8:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    1cdc:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1ce0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1ce4:	43520067 	cmpmi	r2, #103	; 0x67
    1ce8:	53555f43 	cmppl	r5, #268	; 0x10c
    1cec:	4b4c4342 	blmi	13129fc <__Stack_Size+0x13125fc>
    1cf0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1cf4:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1cf8:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1cfc:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    1d00:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1d04:	43435200 	movtmi	r5, #12800	; 0x3200
    1d08:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    1d0c:	004b4c43 	subeq	r4, fp, r3, asr #24
    1d10:	53455348 	movtpl	r5, #21320	; 0x5348
    1d14:	75746174 	ldrbvc	r6, [r4, #-372]!
    1d18:	43520073 	cmpmi	r2, #115	; 0x73
    1d1c:	53485f43 	movtpl	r5, #36675	; 0x8f43
    1d20:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
    1d24:	00676966 	rsbeq	r6, r7, r6, ror #18
    1d28:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1d2c:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    1d30:	75716572 	ldrbvc	r6, [r1, #-1394]!
    1d34:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1d38:	43435200 	movtmi	r5, #12800	; 0x3200
    1d3c:	6f6c435f 	svcvs	0x006c435f
    1d40:	00736b63 	rsbseq	r6, r3, r3, ror #22
    1d44:	4b4c4350 	blmi	1312a8c <__Stack_Size+0x131268c>
    1d48:	72465f32 	subvc	r5, r6, #200	; 0xc8
    1d4c:	65757165 	ldrbvs	r7, [r5, #-357]!
    1d50:	0079636e 	rsbseq	r6, r9, lr, ror #6
    1d54:	5f434352 	svcpl	0x00434352
    1d58:	6f435449 	svcvs	0x00435449
    1d5c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1d60:	43435200 	movtmi	r5, #12800	; 0x3200
    1d64:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1d68:	72655032 	rsbvc	r5, r5, #50	; 0x32
    1d6c:	43687069 	cmnmi	r8, #105	; 0x69
    1d70:	6b636f6c 	blvs	18ddb28 <__Stack_Size+0x18dd728>
    1d74:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1d78:	5f434352 	svcpl	0x00434352
    1d7c:	00455348 	subeq	r5, r5, r8, asr #6
    1d80:	5f434352 	svcpl	0x00434352
    1d84:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1d88:	6f534b4c 	svcvs	0x00534b4c
    1d8c:	65637275 	strbvs	r7, [r3, #-629]!
    1d90:	4c435000 	marmi	acc0, r5, r3
    1d94:	465f314b 	ldrbmi	r3, [pc], -fp, asr #2
    1d98:	75716572 	ldrbvc	r6, [r1, #-1394]!
    1d9c:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1da0:	43435200 	movtmi	r5, #12800	; 0x3200
    1da4:	45534c5f 	ldrbmi	r4, [r3, #-3167]
    1da8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1dac:	41006769 	tstmi	r0, r9, ror #14
    1db0:	48414250 	stmdami	r1, {r4, r6, r9, lr}^
    1db4:	65725042 	ldrbvs	r5, [r2, #-66]!
    1db8:	61546373 	cmpvs	r4, r3, ror r3
    1dbc:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1dc0:	5f434352 	svcpl	0x00434352
    1dc4:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1dc8:	6b636f6c 	blvs	18ddb80 <__Stack_Size+0x18dd780>
    1dcc:	65724673 	ldrbvs	r4, [r2, #-1651]!
    1dd0:	74730071 	ldrbtvc	r0, [r3], #-113
    1dd4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1dd8:	5f783031 	svcpl	0x00783031
    1ddc:	2f62696c 	svccs	0x0062696c
    1de0:	2f637273 	svccs	0x00637273
    1de4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1de8:	30316632 	eorscc	r6, r1, r2, lsr r6
    1dec:	63725f78 	cmnvs	r2, #480	; 0x1e0
    1df0:	00632e63 	rsbeq	r2, r3, r3, ror #28
    1df4:	5f434352 	svcpl	0x00434352
    1df8:	43435452 	movtmi	r5, #13394	; 0x3452
    1dfc:	6d434b4c 	vstrvs	d20, [r3, #-304]
    1e00:	43520064 	cmpmi	r2, #100	; 0x64
    1e04:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1e08:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    1e0c:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
    1e10:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
    1e14:	65747379 	ldrbvs	r7, [r4, #-889]!
    1e18:	646d436d 	strbtvs	r4, [sp], #-877
    1e1c:	43435200 	movtmi	r5, #12800	; 0x3200
    1e20:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
    1e24:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1e28:	00676966 	rsbeq	r6, r7, r6, ror #18
    1e2c:	5f434352 	svcpl	0x00434352
    1e30:	43495348 	movtmi	r5, #37704	; 0x9348
    1e34:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1e38:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]
    1e3c:	52004f43 	andpl	r4, r0, #268	; 0x10c
    1e40:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^
    1e44:	43520054 	cmpmi	r2, #84	; 0x54
    1e48:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1e4c:	72655042 	rsbvc	r5, r5, #66	; 0x42
    1e50:	00687069 	rsbeq	r7, r8, r9, rrx
    1e54:	5f434352 	svcpl	0x00434352
    1e58:	4b4c4350 	blmi	1312ba0 <__Stack_Size+0x13127a0>
    1e5c:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    1e60:	00676966 	rsbeq	r6, r7, r6, ror #18
    1e64:	50434441 	subpl	r4, r3, r1, asr #8
    1e68:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1e6c:	6c626154 	stfvse	f6, [r2], #-336
    1e70:	79530065 	ldmdbvc	r3, {r0, r2, r5, r6}^
    1e74:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1e78:	65475f6b 	strbvs	r5, [r7, #-3947]
    1e7c:	756f4374 	strbvc	r4, [pc, #-884]!	; 1b10 <__Stack_Size+0x1710>
    1e80:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1e84:	73795300 	cmnvc	r9, #0	; 0x0
    1e88:	6b636954 	blvs	18dc3e0 <__Stack_Size+0x18dbfe0>
    1e8c:	7465535f 	strbtvc	r5, [r5], #-863
    1e90:	6f6c6552 	svcvs	0x006c6552
    1e94:	53006461 	movwpl	r6, #1121	; 0x461
    1e98:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1e9c:	475f6b63 	ldrbmi	r6, [pc, -r3, ror #22]
    1ea0:	6c467465 	cfstrdvs	mvd7, [r6], {101}
    1ea4:	74536761 	ldrbvc	r6, [r3], #-1889
    1ea8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1eac:	73795300 	cmnvc	r9, #0	; 0x0
    1eb0:	6b636954 	blvs	18dc408 <__Stack_Size+0x18dc008>
    1eb4:	414c465f 	cmpmi	ip, pc, asr r6
    1eb8:	41430047 	cmpmi	r3, r7, asr #32
    1ebc:	0042494c 	subeq	r4, r2, ip, asr #18
    1ec0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1ec4:	30316632 	eorscc	r6, r1, r2, lsr r6
    1ec8:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1ecc:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    1ed0:	74732f63 	ldrbtvc	r2, [r3], #-3939
    1ed4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1ed8:	5f783031 	svcpl	0x00783031
    1edc:	74737973 	ldrbtvc	r7, [r3], #-2419
    1ee0:	2e6b6369 	cdpcs	3, 6, cr6, cr11, cr9, {3}
    1ee4:	54430063 	strbpl	r0, [r3], #-99
    1ee8:	53004c52 	movwpl	r4, #3154	; 0xc52
    1eec:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1ef0:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    1ef4:	746e756f 	strbtvc	r7, [lr], #-1391
    1ef8:	6d437265 	sfmvs	f7, 2, [r3, #-404]
    1efc:	79530064 	ldmdbvc	r3, {r2, r5, r6}^
    1f00:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1f04:	6f435f6b 	svcvs	0x00435f6b
    1f08:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    1f0c:	79530072 	ldmdbvc	r3, {r1, r4, r5, r6}^
    1f10:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1f14:	4c435f6b 	mcrrmi	15, 6, r5, r3, cr11
    1f18:	756f534b 	strbvc	r5, [pc, #-843]!	; 1bd5 <__Stack_Size+0x17d5>
    1f1c:	43656372 	cmnmi	r5, #-939524095	; 0xc8000001
    1f20:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1f24:	4f4c0067 	svcmi	0x004c0067
    1f28:	53004441 	movwpl	r4, #1089	; 0x441
    1f2c:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1f30:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    1f34:	6f534b4c 	svcvs	0x00534b4c
    1f38:	65637275 	strbvs	r7, [r3, #-629]!
    1f3c:	73795300 	cmnvc	r9, #0	; 0x0
    1f40:	6b636954 	blvs	18dc498 <__Stack_Size+0x18dc098>
    1f44:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    1f48:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1f4c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1f50:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1f54:	73614634 	cmnvc	r1, #54525952	; 0x3400000
    1f58:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1f5c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1f60:	5f4d4954 	svcpl	0x004d4954
    1f64:	5031434f 	eorspl	r4, r1, pc, asr #6
    1f68:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    1f6c:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    1f70:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1f74:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1f78:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    1f7c:	75727453 	ldrbvc	r7, [r2, #-1107]!
    1f80:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1f84:	54007469 	strpl	r7, [r0], #-1129
    1f88:	4f5f4d49 	svcmi	0x005f4d49
    1f8c:	72503443 	subsvc	r3, r0, #1124073472	; 0x43000000
    1f90:	616f6c65 	cmnvs	pc, r5, ror #24
    1f94:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    1f98:	00676966 	rsbeq	r6, r7, r6, ror #18
    1f9c:	5f4d4954 	svcpl	0x004d4954
    1fa0:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1fa4:	61706d6f 	cmnvs	r0, pc, ror #26
    1fa8:	00316572 	eorseq	r6, r1, r2, ror r5
    1fac:	5f4d4954 	svcpl	0x004d4954
    1fb0:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1fb4:	61706d6f 	cmnvs	r0, pc, ror #26
    1fb8:	00326572 	eorseq	r6, r2, r2, ror r5
    1fbc:	5f4d4954 	svcpl	0x004d4954
    1fc0:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1fc4:	61706d6f 	cmnvs	r0, pc, ror #26
    1fc8:	00346572 	eorseq	r6, r4, r2, ror r5
    1fcc:	5f4d4954 	svcpl	0x004d4954
    1fd0:	4e33434f 	cdpmi	3, 3, cr4, cr3, cr15, {2}
    1fd4:	616c6f50 	cmnvs	ip, r0, asr pc
    1fd8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1fdc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1fe0:	54006769 	strpl	r6, [r0], #-1897
    1fe4:	4f5f4d49 	svcmi	0x005f4d49
    1fe8:	65725043 	ldrbvs	r5, [r2, #-67]!
    1fec:	64616f6c 	strbtvs	r6, [r1], #-3948
    1ff0:	4d495400 	cfstrdmi	mvd5, [r9]
    1ff4:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    1ff8:	6c657250 	sfmvs	f7, 2, [r5], #-320
    1ffc:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    2000:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2004:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2008:	65475f4d 	strbvs	r5, [r7, #-3917]
    200c:	616c4674 	smcvs	50276
    2010:	61745367 	cmnvs	r4, r7, ror #6
    2014:	00737574 	rsbseq	r7, r3, r4, ror r5
    2018:	5f324954 	svcpl	0x00324954
    201c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2020:	54006769 	strpl	r6, [r0], #-1897
    2024:	4f5f4d49 	svcmi	0x005f4d49
    2028:	73614643 	cmnvc	r1, #70254592	; 0x4300000
    202c:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2030:	4b435f4d 	blmi	10d9d6c <__Stack_Size+0x10d996c>
    2034:	49540044 	ldmdbmi	r4, {r2, r6}^
    2038:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    203c:	74696e49 	strbtvc	r6, [r9], #-3657
    2040:	65707954 	ldrbvs	r7, [r0, #-2388]!
    2044:	00666544 	rsbeq	r6, r6, r4, asr #10
    2048:	5f4d4954 	svcpl	0x004d4954
    204c:	75706e49 	ldrbvc	r6, [r0, #-3657]!
    2050:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    2054:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    2058:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    205c:	54006563 	strpl	r6, [r0], #-1379
    2060:	445f4d49 	ldrbmi	r4, [pc], #3401	; 2068 <__Stack_Size+0x1c68>
    2064:	6142414d 	cmpvs	r2, sp, asr #2
    2068:	54006573 	strpl	r6, [r0], #-1395
    206c:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 132b <__Stack_Size+0xf2b>
    2070:	52547478 	subspl	r7, r4, #2013265920	; 0x78000000
    2074:	65725047 	ldrbvs	r5, [r2, #-71]!
    2078:	6c616373 	stclvs	3, cr6, [r1], #-460
    207c:	54007265 	strpl	r7, [r0], #-613
    2080:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2084:	434e7843 	movtmi	r7, #59459	; 0xe843
    2088:	6900646d 	stmdbvs	r0, {r0, r2, r3, r5, r6, sl, sp, lr}
    208c:	616e6574 	smcvs	58964
    2090:	00656c62 	rsbeq	r6, r5, r2, ror #24
    2094:	5f4d4954 	svcpl	0x004d4954
    2098:	5032434f 	eorspl	r4, r2, pc, asr #6
    209c:	6f6c6572 	svcvs	0x006c6572
    20a0:	6f436461 	svcvs	0x00436461
    20a4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    20a8:	4d495400 	cfstrdmi	mvd5, [r9]
    20ac:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    20b0:	4f646563 	svcmi	0x00646563
    20b4:	6f433243 	svcvs	0x00433243
    20b8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    20bc:	4d495400 	cfstrdmi	mvd5, [r9]
    20c0:	53434f5f 	movtpl	r4, #16223	; 0x3f5f
    20c4:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    20c8:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    20cc:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    20d0:	70555f4d 	subsvc	r5, r5, sp, asr #30
    20d4:	65746164 	ldrbvs	r6, [r4, #-356]!
    20d8:	75716552 	ldrbvc	r6, [r1, #-1362]!
    20dc:	43747365 	cmnmi	r4, #-1811939327	; 0x94000001
    20e0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    20e4:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    20e8:	65445f4d 	strbvs	r5, [r4, #-3917]
    20ec:	74696e49 	strbtvc	r6, [r9], #-3657
    20f0:	4d495400 	cfstrdmi	mvd5, [r9]
    20f4:	6c65535f 	stclvs	3, cr5, [r5], #-380
    20f8:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    20fc:	414d4443 	cmpmi	sp, r3, asr #8
    2100:	4d495400 	cfstrdmi	mvd5, [r9]
    2104:	4d504f5f 	ldclmi	15, cr4, [r0, #-380]
    2108:	0065646f 	rsbeq	r6, r5, pc, ror #8
    210c:	5f4d4954 	svcpl	0x004d4954
    2110:	4931434f 	ldmdbmi	r1!, {r0, r1, r2, r3, r6, r8, r9, lr}
    2114:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2118:	5f4d4954 	svcpl	0x004d4954
    211c:	5031434f 	eorspl	r4, r1, pc, asr #6
    2120:	6f6c6572 	svcvs	0x006c6572
    2124:	6f436461 	svcvs	0x00436461
    2128:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    212c:	4d495400 	cfstrdmi	mvd5, [r9]
    2130:	3143495f 	cmpcc	r3, pc, asr r9
    2134:	616c6f50 	cmnvs	ip, r0, asr pc
    2138:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    213c:	4d495400 	cfstrdmi	mvd5, [r9]
    2140:	7465475f 	strbtvc	r4, [r5], #-1887
    2144:	74706143 	ldrbtvc	r6, [r0], #-323
    2148:	31657275 	smccc	22309
    214c:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    2150:	72636d73 	rsbvc	r6, r3, #7360	; 0x1cc0
    2154:	4d495400 	cfstrdmi	mvd5, [r9]
    2158:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    215c:	74736146 	ldrbtvc	r6, [r3], #-326
    2160:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2164:	54006769 	strpl	r6, [r0], #-1897
    2168:	00784d49 	rsbseq	r4, r8, r9, asr #26
    216c:	5f4d4954 	svcpl	0x004d4954
    2170:	63726f46 	cmnvs	r2, #280	; 0x118
    2174:	63416465 	movtvs	r6, #5221	; 0x1465
    2178:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    217c:	4d495400 	cfstrdmi	mvd5, [r9]
    2180:	3243495f 	subcc	r4, r3, #1556480	; 0x17c000
    2184:	616c6f50 	cmnvs	ip, r0, asr pc
    2188:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    218c:	4d495400 	cfstrdmi	mvd5, [r9]
    2190:	7465535f 	strbtvc	r5, [r5], #-863
    2194:	50344349 	eorspl	r4, r4, r9, asr #6
    2198:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    219c:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    21a0:	4d495400 	cfstrdmi	mvd5, [r9]
    21a4:	616c535f 	cmnvs	ip, pc, asr r3
    21a8:	6f4d6576 	svcvs	0x004d6576
    21ac:	54006564 	strpl	r6, [r0], #-1380
    21b0:	4f5f4d49 	svcmi	0x005f4d49
    21b4:	53495353 	movtpl	r5, #37715	; 0x9353
    21b8:	65746174 	ldrbvs	r6, [r4, #-372]!
    21bc:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    21c0:	00317263 	eorseq	r7, r1, r3, ror #4
    21c4:	5f4d4954 	svcpl	0x004d4954
    21c8:	65707954 	ldrbvs	r7, [r0, #-2388]!
    21cc:	00666544 	rsbeq	r6, r6, r4, asr #10
    21d0:	5f4d4954 	svcpl	0x004d4954
    21d4:	4932434f 	ldmdbmi	r2!, {r0, r1, r2, r3, r6, r8, r9, lr}
    21d8:	0074696e 	rsbseq	r6, r4, lr, ror #18
    21dc:	5f4d4954 	svcpl	0x004d4954
    21e0:	43525445 	cmpmi	r2, #1157627904	; 0x45000000
    21e4:	6b636f6c 	blvs	18ddf9c <__Stack_Size+0x18ddb9c>
    21e8:	65646f4d 	strbvs	r6, [r4, #-3917]!
    21ec:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    21f0:	00676966 	rsbeq	r6, r7, r6, ror #18
    21f4:	5f314954 	svcpl	0x00314954
    21f8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    21fc:	54006769 	strpl	r6, [r0], #-1897
    2200:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    2204:	61437465 	cmpvs	r3, r5, ror #8
    2208:	72757470 	rsbsvc	r7, r5, #1879048192	; 0x70000000
    220c:	54003265 	strpl	r3, [r0], #-613
    2210:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    2214:	61437465 	cmpvs	r3, r5, ror #8
    2218:	72757470 	rsbsvc	r7, r5, #1879048192	; 0x70000000
    221c:	54003365 	strpl	r3, [r0], #-869
    2220:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    2224:	61437465 	cmpvs	r3, r5, ror #8
    2228:	72757470 	rsbsvc	r7, r5, #1879048192	; 0x70000000
    222c:	54003465 	strpl	r3, [r0], #-1125
    2230:	445f4d49 	ldrbmi	r4, [pc], #3401	; 2238 <__Stack_Size+0x1e38>
    2234:	7542414d 	strbvc	r4, [r2, #-333]
    2238:	4c747372 	ldclmi	3, cr7, [r4], #-456
    223c:	74676e65 	strbtvc	r6, [r7], #-3685
    2240:	49540068 	ldmdbmi	r4, {r3, r5, r6}^
    2244:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    2248:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    224c:	0067616c 	rsbeq	r6, r7, ip, ror #2
    2250:	5f4d4954 	svcpl	0x004d4954
    2254:	61656c43 	cmnvs	r5, r3, asr #24
    2258:	34434f72 	strbcc	r4, [r3], #-3954
    225c:	00666552 	rsbeq	r6, r6, r2, asr r5
    2260:	5f4d4954 	svcpl	0x004d4954
    2264:	78525449 	ldmdavc	r2, {r0, r3, r6, sl, ip, lr}^
    2268:	65747845 	ldrbvs	r7, [r4, #-2117]!
    226c:	6c616e72 	stclvs	14, cr6, [r1], #-456
    2270:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2274:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    2278:	00676966 	rsbeq	r6, r7, r6, ror #18
    227c:	5f4d4954 	svcpl	0x004d4954
    2280:	61656c43 	cmnvs	r5, r3, asr #24
    2284:	50544972 	subspl	r4, r4, r2, ror r9
    2288:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    228c:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2290:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2294:	4d445f4d 	stclmi	15, cr5, [r4, #-308]
    2298:	6e6f4341 	cdpvs	3, 6, cr4, cr15, cr1, {2}
    229c:	00676966 	rsbeq	r6, r7, r6, ror #18
    22a0:	5f4d4954 	svcpl	0x004d4954
    22a4:	50525241 	subspl	r5, r2, r1, asr #4
    22a8:	6f6c6572 	svcvs	0x006c6572
    22ac:	6f436461 	svcvs	0x00436461
    22b0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    22b4:	6d747300 	ldclvs	3, cr7, [r4]
    22b8:	31663233 	cmncc	r6, r3, lsr r2
    22bc:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    22c0:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    22c4:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    22c8:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    22cc:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    22d0:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!
    22d4:	5400632e 	strpl	r6, [r0], #-814
    22d8:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    22dc:	49525444 	ldmdbmi	r2, {r2, r6, sl, ip, lr}^
    22e0:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    22e4:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    22e8:	6d740074 	ldclvs	0, cr0, [r4, #-464]!
    22ec:	65636370 	strbvs	r6, [r3, #-880]!
    22f0:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    22f4:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    22f8:	6f6c4374 	svcvs	0x006c4374
    22fc:	69446b63 	stmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    2300:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    2304:	54006e6f 	strpl	r6, [r0], #-3695
    2308:	4f5f4d49 	svcmi	0x005f4d49
    230c:	61463243 	cmpvs	r6, r3, asr #4
    2310:	6f437473 	svcvs	0x00437473
    2314:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2318:	4d495400 	cfstrdmi	mvd5, [r9]
    231c:	6572425f 	ldrbvs	r4, [r2, #-607]!
    2320:	6f506b61 	svcvs	0x00506b61
    2324:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    2328:	54007974 	strpl	r7, [r0], #-2420
    232c:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2330:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2334:	74754f74 	ldrbtvc	r4, [r5], #-3956
    2338:	54747570 	ldrbtpl	r7, [r4], #-1392
    233c:	67676972 	undefined
    2340:	54007265 	strpl	r7, [r0], #-613
    2344:	545f4d49 	ldrbpl	r4, [pc], #3401	; 234c <__Stack_Size+0x1f4c>
    2348:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
    234c:	49657361 	stmdbmi	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    2350:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2354:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    2358:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    235c:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    2360:	7463656c 	strbtvc	r6, [r3], #-1388
    2364:	4d78434f 	ldclmi	3, cr4, [r8, #-316]!
    2368:	4d495400 	cfstrdmi	mvd5, [r9]
    236c:	414c465f 	cmpmi	ip, pc, asr r6
    2370:	49540047 	ldmdbmi	r4, {r0, r1, r2, r6}^
    2374:	4f4c5f4d 	svcmi	0x004c5f4d
    2378:	654c4b43 	strbvs	r4, [ip, #-2883]
    237c:	006c6576 	rsbeq	r6, ip, r6, ror r5
    2380:	5f4d4954 	svcpl	0x004d4954
    2384:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    2388:	746e756f 	strbtvc	r7, [lr], #-1391
    238c:	54007265 	strpl	r7, [r0], #-613
    2390:	445f4d49 	ldrbmi	r4, [pc], #3401	; 2398 <__Stack_Size+0x1f98>
    2394:	6f53414d 	svcvs	0x0053414d
    2398:	65637275 	strbvs	r7, [r3, #-629]!
    239c:	4d495400 	cfstrdmi	mvd5, [r9]
    23a0:	636e455f 	cmnvs	lr, #398458880	; 0x17c00000
    23a4:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
    23a8:	65646f4d 	strbvs	r6, [r4, #-3917]!
    23ac:	4d495400 	cfstrdmi	mvd5, [r9]
    23b0:	5043495f 	subpl	r4, r3, pc, asr r9
    23b4:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    23b8:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    23bc:	4d495400 	cfstrdmi	mvd5, [r9]
    23c0:	43434f5f 	movtmi	r4, #16223	; 0x3f5f
    23c4:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    23c8:	4d495400 	cfstrdmi	mvd5, [r9]
    23cc:	4353505f 	cmpmi	r3, #95	; 0x5f
    23d0:	6f6c6552 	svcvs	0x006c6552
    23d4:	6f4d6461 	svcvs	0x004d6461
    23d8:	54006564 	strpl	r6, [r0], #-1380
    23dc:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    23e0:	6d437843 	stclvs	8, cr7, [r3, #-268]
    23e4:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
    23e8:	65475f4d 	strbvs	r5, [r7, #-3917]
    23ec:	65725074 	ldrbvs	r5, [r2, #-116]!
    23f0:	6c616373 	stclvs	3, cr6, [r1], #-460
    23f4:	45007265 	strmi	r7, [r0, #-613]
    23f8:	52547478 	subspl	r7, r4, #2013265920	; 0x78000000
    23fc:	6c694647 	stclvs	6, cr4, [r9], #-284
    2400:	00726574 	rsbseq	r6, r2, r4, ror r5
    2404:	5f4d4954 	svcpl	0x004d4954
    2408:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    240c:	74696e49 	strbtvc	r6, [r9], #-3657
    2410:	65707954 	ldrbvs	r7, [r0, #-2388]!
    2414:	00666544 	rsbeq	r6, r6, r4, asr #10
    2418:	5f4d4954 	svcpl	0x004d4954
    241c:	656c6553 	strbvs	r6, [ip, #-1363]!
    2420:	61487463 	cmpvs	r8, r3, ror #8
    2424:	65536c6c 	ldrbvs	r6, [r3, #-3180]
    2428:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    242c:	4d495400 	cfstrdmi	mvd5, [r9]
    2430:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
    2434:	74617265 	strbtvc	r7, [r1], #-613
    2438:	65764565 	ldrbvs	r4, [r6, #-1381]!
    243c:	5400746e 	strpl	r7, [r0], #-1134
    2440:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2444:	43497465 	movtmi	r7, #37989	; 0x9465
    2448:	65725032 	ldrbvs	r5, [r2, #-50]!
    244c:	6c616373 	stclvs	3, cr6, [r1], #-460
    2450:	54007265 	strpl	r7, [r0], #-613
    2454:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2458:	004e7843 	subeq	r7, lr, r3, asr #16
    245c:	5f4d4954 	svcpl	0x004d4954
    2460:	61657242 	cmnvs	r5, r2, asr #4
    2464:	4954006b 	ldmdbmi	r4, {r0, r1, r3, r5, r6}^
    2468:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    246c:	74784578 	ldrbtvc	r4, [r8], #-1400
    2470:	616e7265 	cmnvs	lr, r5, ror #4
    2474:	4b4c436c 	blmi	131322c <__Stack_Size+0x1312e2c>
    2478:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    247c:	54006563 	strpl	r6, [r0], #-1379
    2480:	545f4d49 	ldrbpl	r4, [pc], #3401	; 2488 <__Stack_Size+0x2088>
    2484:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
    2488:	49657361 	stmdbmi	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    248c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2490:	5f4d4954 	svcpl	0x004d4954
    2494:	61647055 	qdsubvs	r7, r5, r4
    2498:	69446574 	stmdbvs	r4, {r2, r4, r5, r6, r8, sl, sp, lr}^
    249c:	6c626173 	stfvse	f6, [r2], #-460
    24a0:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    24a4:	00676966 	rsbeq	r6, r7, r6, ror #18
    24a8:	5f4d4954 	svcpl	0x004d4954
    24ac:	61647055 	qdsubvs	r7, r5, r4
    24b0:	6f536574 	svcvs	0x00536574
    24b4:	65637275 	strbvs	r7, [r3, #-629]!
    24b8:	4d495400 	cfstrdmi	mvd5, [r9]
    24bc:	4943495f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    24c0:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    24c4:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    24c8:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    24cc:	6f435f33 	svcvs	0x00435f33
    24d0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    24d4:	4d495400 	cfstrdmi	mvd5, [r9]
    24d8:	636e455f 	cmnvs	lr, #398458880	; 0x17c00000
    24dc:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
    24e0:	65746e49 	ldrbvs	r6, [r4, #-3657]!
    24e4:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    24e8:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    24ec:	00676966 	rsbeq	r6, r7, r6, ror #18
    24f0:	5f4d4954 	svcpl	0x004d4954
    24f4:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    24f8:	4d726574 	cfldr64mi	mvdx6, [r2, #-464]!
    24fc:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    2500:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2504:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2508:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    250c:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!
    2510:	65726170 	ldrbvs	r6, [r2, #-368]!
    2514:	49540033 	ldmdbmi	r4, {r0, r1, r4, r5}^
    2518:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    251c:	4f726165 	svcmi	0x00726165
    2520:	65523343 	ldrbvs	r3, [r2, #-835]
    2524:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    2528:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    252c:	696e4934 	stmdbvs	lr!, {r2, r4, r5, r8, fp, lr}^
    2530:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2534:	6f465f4d 	svcvs	0x00465f4d
    2538:	64656372 	strbtvs	r6, [r5], #-882
    253c:	4334434f 	teqmi	r4, #1006632961	; 0x3c000001
    2540:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2544:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    2548:	65475f4d 	strbvs	r5, [r7, #-3917]
    254c:	756f4374 	strbvc	r4, [pc, #-884]!	; 21e0 <__Stack_Size+0x1de0>
    2550:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2554:	4d495400 	cfstrdmi	mvd5, [r9]
    2558:	49434f5f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
    255c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2560:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    2564:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    2568:	65535f4d 	ldrbvs	r5, [r3, #-3917]
    256c:	7463656c 	strbtvc	r6, [r3], #-1388
    2570:	76616c53 	undefined
    2574:	646f4d65 	strbtvs	r4, [pc], #3429	; 257c <__Stack_Size+0x217c>
    2578:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    257c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    2580:	73614631 	cmnvc	r1, #51380224	; 0x3100000
    2584:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2588:	00676966 	rsbeq	r6, r7, r6, ror #18
    258c:	5f4d4954 	svcpl	0x004d4954
    2590:	43525445 	cmpmi	r2, #1157627904	; 0x45000000
    2594:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2598:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    259c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    25a0:	6f504e31 	svcvs	0x00504e31
    25a4:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    25a8:	6f437974 	svcvs	0x00437974
    25ac:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    25b0:	4d495400 	cfstrdmi	mvd5, [r9]
    25b4:	5043495f 	subpl	r4, r3, pc, asr r9
    25b8:	54004353 	strpl	r4, [r0], #-851
    25bc:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 187b <__Stack_Size+0x147b>
    25c0:	746e6576 	strbtvc	r6, [lr], #-1398
    25c4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    25c8:	74006563 	strvc	r6, [r0], #-1379
    25cc:	6363706d 	cmnvs	r3, #109	; 0x6d
    25d0:	0031726d 	eorseq	r7, r1, sp, ror #4
    25d4:	63706d74 	cmnvs	r0, #7424	; 0x1d00
    25d8:	32726d63 	rsbscc	r6, r2, #6336	; 0x18c0
    25dc:	4d495400 	cfstrdmi	mvd5, [r9]
    25e0:	6168435f 	cmnvs	r8, pc, asr r3
    25e4:	6c656e6e 	stclvs	14, cr6, [r5], #-440
    25e8:	4d495400 	cfstrdmi	mvd5, [r9]
    25ec:	6c65535f 	stclvs	3, cr5, [r5], #-380
    25f0:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    25f4:	54004d4f 	strpl	r4, [r0], #-3407
    25f8:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    25fc:	65725043 	ldrbvs	r5, [r2, #-67]!
    2600:	64616f6c 	strbtvs	r6, [r1], #-3948
    2604:	746e6f43 	strbtvc	r6, [lr], #-3907
    2608:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    260c:	706f6369 	rsbvc	r6, pc, r9, ror #6
    2610:	69736f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    2614:	65736574 	ldrbvs	r6, [r3, #-1396]!
    2618:	7463656c 	strbtvc	r6, [r3], #-1388
    261c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2620:	5f4d4954 	svcpl	0x004d4954
    2624:	65746e49 	ldrbvs	r6, [r4, #-3657]!
    2628:	6c616e72 	stclvs	14, cr6, [r1], #-456
    262c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2630:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    2634:	00676966 	rsbeq	r6, r7, r6, ror #18
    2638:	5f4d4954 	svcpl	0x004d4954
    263c:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    2640:	72503143 	subsvc	r3, r0, #-1073741808	; 0xc0000010
    2644:	61637365 	cmnvs	r3, r5, ror #6
    2648:	0072656c 	rsbseq	r6, r2, ip, ror #10
    264c:	5f4d4954 	svcpl	0x004d4954
    2650:	00784343 	rsbseq	r4, r8, r3, asr #6
    2654:	5f4d4954 	svcpl	0x004d4954
    2658:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    265c:	72503343 	subsvc	r3, r0, #201326593	; 0xc000001
    2660:	61637365 	cmnvs	r3, r5, ror #6
    2664:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2668:	5f4d4954 	svcpl	0x004d4954
    266c:	65534349 	ldrbvs	r4, [r3, #-841]
    2670:	7463656c 	strbtvc	r6, [r3], #-1388
    2674:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2678:	5f4d4954 	svcpl	0x004d4954
    267c:	43525445 	cmpmi	r2, #1157627904	; 0x45000000
    2680:	6b636f6c 	blvs	18de438 <__Stack_Size+0x18de038>
    2684:	65646f4d 	strbvs	r6, [r4, #-3917]!
    2688:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
    268c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2690:	63706d74 	cmnvs	r0, #7424	; 0x1d00
    2694:	78726d63 	ldmdavc	r2!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
    2698:	4d495400 	cfstrdmi	mvd5, [r9]
    269c:	6c65535f 	stclvs	3, cr5, [r5], #-380
    26a0:	4f746365 	svcmi	0x00746365
    26a4:	7550656e 	ldrbvc	r6, [r0, #-1390]
    26a8:	4d65736c 	stclmi	3, cr7, [r5, #-432]!
    26ac:	0065646f 	rsbeq	r6, r5, pc, ror #8
    26b0:	5f4d4954 	svcpl	0x004d4954
    26b4:	4f475254 	svcmi	0x00475254
    26b8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    26bc:	54006563 	strpl	r6, [r0], #-1379
    26c0:	4f5f4d49 	svcmi	0x005f4d49
    26c4:	53525353 	cmppl	r2, #1275068417	; 0x4c000001
    26c8:	65746174 	ldrbvs	r6, [r4, #-372]!
    26cc:	4d495400 	cfstrdmi	mvd5, [r9]
    26d0:	5043495f 	subpl	r4, r3, pc, asr r9
    26d4:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    26d8:	00797469 	rsbseq	r7, r9, r9, ror #8
    26dc:	5f4d4954 	svcpl	0x004d4954
    26e0:	6c727443 	cfldrdvs	mvd7, [r2], #-268
    26e4:	4f4d5750 	svcmi	0x004d5750
    26e8:	75707475 	ldrbvc	r7, [r0, #-1141]!
    26ec:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    26f0:	70706f63 	rsbsvc	r6, r0, r3, ror #30
    26f4:	7469736f 	strbtvc	r7, [r9], #-879
    26f8:	6c6f7065 	stclvs	0, cr7, [pc], #-404
    26fc:	74697261 	strbtvc	r7, [r9], #-609
    2700:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    2704:	44425f4d 	strbmi	r5, [r2], #-3917
    2708:	6f435254 	svcvs	0x00435254
    270c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2710:	4d495400 	cfstrdmi	mvd5, [r9]
    2714:	656c435f 	strbvs	r4, [ip, #-863]!
    2718:	434f7261 	movtmi	r7, #62049	; 0xf261
    271c:	66655232 	undefined
    2720:	4d495400 	cfstrdmi	mvd5, [r9]
    2724:	7849545f 	stmdavc	r9, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    2728:	65747845 	ldrbvs	r7, [r4, #-2117]!
    272c:	6c616e72 	stclvs	14, cr6, [r1], #-456
    2730:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2734:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    2738:	00676966 	rsbeq	r6, r7, r6, ror #18
    273c:	5f4d4954 	svcpl	0x004d4954
    2740:	7473614d 	ldrbtvc	r6, [r3], #-333
    2744:	6c537265 	lfmvs	f7, 2, [r3], {101}
    2748:	4d657661 	stclmi	6, cr7, [r5, #-388]!
    274c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2750:	5f4d4954 	svcpl	0x004d4954
    2754:	6f747541 	svcvs	0x00747541
    2758:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    275c:	74754f63 	ldrbtvc	r4, [r5], #-3939
    2760:	00747570 	rsbseq	r7, r4, r0, ror r5
    2764:	5f4d4954 	svcpl	0x004d4954
    2768:	41746553 	cmnmi	r4, r3, asr r5
    276c:	726f7475 	rsbvc	r7, pc, #1962934272	; 0x75000000
    2770:	616f6c65 	cmnvs	pc, r5, ror #24
    2774:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
    2778:	4d445f4d 	stclmi	15, cr5, [r4, #-308]
    277c:	646d4341 	strbtvs	r4, [sp], #-833
    2780:	4d495400 	cfstrdmi	mvd5, [r9]
    2784:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!
    2788:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
    278c:	72745365 	rsbsvc	r5, r4, #-1811939327	; 0x94000001
    2790:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    2794:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2798:	5f4d4954 	svcpl	0x004d4954
    279c:	6f435449 	svcvs	0x00435449
    27a0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    27a4:	4d495400 	cfstrdmi	mvd5, [r9]
    27a8:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    27ac:	4f646563 	svcmi	0x00646563
    27b0:	6f433143 	svcvs	0x00433143
    27b4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    27b8:	34495400 	strbcc	r5, [r9], #-1024
    27bc:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    27c0:	00676966 	rsbeq	r6, r7, r6, ror #18
    27c4:	5f4d4954 	svcpl	0x004d4954
    27c8:	64616544 	strbtvs	r6, [r1], #-1348
    27cc:	656d6954 	strbvs	r6, [sp, #-2388]!
    27d0:	4d495400 	cfstrdmi	mvd5, [r9]
    27d4:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    27d8:	74696e49 	strbtvc	r6, [r9], #-3657
    27dc:	4d495400 	cfstrdmi	mvd5, [r9]
    27e0:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    27e4:	6c6f504e 	stclvs	0, cr5, [pc], #-312
    27e8:	74697261 	strbtvc	r7, [r9], #-609
    27ec:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    27f0:	00676966 	rsbeq	r6, r7, r6, ror #18
    27f4:	5f4d4954 	svcpl	0x004d4954
    27f8:	5034434f 	eorspl	r4, r4, pc, asr #6
    27fc:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2800:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    2804:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2808:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    280c:	44425f4d 	strbmi	r5, [r2], #-3917
    2810:	74535254 	ldrbvc	r5, [r3], #-596
    2814:	74637572 	strbtvc	r7, [r3], #-1394
    2818:	74696e49 	strbtvc	r6, [r9], #-3657
    281c:	4d495400 	cfstrdmi	mvd5, [r9]
    2820:	656c435f 	strbvs	r4, [ip, #-863]!
    2824:	434f7261 	movtmi	r7, #62049	; 0xf261
    2828:	66655231 	undefined
    282c:	4d495400 	cfstrdmi	mvd5, [r9]
    2830:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    2834:	616c6f50 	cmnvs	ip, r0, asr pc
    2838:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    283c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2840:	54006769 	strpl	r6, [r0], #-1897
    2844:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 1b03 <__Stack_Size+0x1703>
    2848:	52547478 	subspl	r7, r4, #2013265920	; 0x78000000
    284c:	6c6f5047 	stclvs	0, cr5, [pc], #-284
    2850:	74697261 	strbtvc	r7, [r9], #-609
    2854:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    2858:	57505f4d 	ldrbpl	r5, [r0, -sp, asr #30]
    285c:	6f43494d 	svcvs	0x0043494d
    2860:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2864:	4d495400 	cfstrdmi	mvd5, [r9]
    2868:	7465475f 	strbtvc	r4, [r5], #-1887
    286c:	74535449 	ldrbvc	r5, [r3], #-1097
    2870:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2874:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    2878:	00327263 	eorseq	r7, r2, r3, ror #4
    287c:	5f4d4954 	svcpl	0x004d4954
    2880:	54005449 	strpl	r5, [r0], #-1097
    2884:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    2888:	6563726f 	strbvs	r7, [r3, #-623]!
    288c:	33434f64 	movtcc	r4, #16228	; 0x3f64
    2890:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2894:	54006769 	strpl	r6, [r0], #-1897
    2898:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    289c:	5400646d 	strpl	r6, [r0], #-1133
    28a0:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^
    28a4:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
    28a8:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    28ac:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    28b0:	746c6946 	strbtvc	r6, [ip], #-2374
    28b4:	54007265 	strpl	r7, [r0], #-613
    28b8:	535f4d49 	cmppl	pc, #4672	; 0x1240
    28bc:	63656c65 	cmnvs	r5, #25856	; 0x6500
    28c0:	73614d74 	cmnvc	r1, #7424	; 0x1d00
    28c4:	53726574 	cmnpl	r2, #486539264	; 0x1d000000
    28c8:	6576616c 	ldrbvs	r6, [r6, #-364]!
    28cc:	65646f4d 	strbvs	r6, [r4, #-3917]!
    28d0:	4d495400 	cfstrdmi	mvd5, [r9]
    28d4:	6c65535f 	stclvs	3, cr5, [r5], #-380
    28d8:	49746365 	ldmdbmi	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    28dc:	7475706e 	ldrbtvc	r7, [r5], #-110
    28e0:	67697254 	undefined
    28e4:	00726567 	rsbseq	r6, r2, r7, ror #10
    28e8:	5f4d4954 	svcpl	0x004d4954
    28ec:	73657250 	cmnvc	r5, #5	; 0x5
    28f0:	656c6163 	strbvs	r6, [ip, #-355]!
    28f4:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    28f8:	00676966 	rsbeq	r6, r7, r6, ror #18
    28fc:	5f4d4954 	svcpl	0x004d4954
    2900:	5032434f 	eorspl	r4, r2, pc, asr #6
    2904:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    2908:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    290c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2910:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
    2914:	65676574 	strbvs	r6, [r7, #-1396]!
    2918:	76696472 	undefined
    291c:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    2920:	41535500 	cmpmi	r3, r0, lsl #10
    2924:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2928:	00414850 	subeq	r4, r1, r0, asr r8
    292c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2930:	65535f54 	ldrbvs	r5, [r3, #-3924]
    2934:	65725074 	ldrbvs	r5, [r2, #-116]!
    2938:	6c616373 	stclvs	3, cr6, [r1], #-460
    293c:	55007265 	strpl	r7, [r0, #-613]
    2940:	54524153 	ldrbpl	r4, [r2], #-339
    2944:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2948:	53550074 	cmppl	r5, #116	; 0x74
    294c:	5f545241 	svcpl	0x00545241
    2950:	424e494c 	submi	r4, lr, #1245184	; 0x130000
    2954:	6b616572 	blvs	185bf24 <__Stack_Size+0x185bb24>
    2958:	65746544 	ldrbvs	r6, [r4, #-1348]!
    295c:	654c7463 	strbvs	r7, [ip, #-1123]
    2960:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2964:	41535500 	cmpmi	r3, r0, lsl #10
    2968:	545f5452 	ldrbpl	r5, [pc], #1106	; 2970 <__Stack_Size+0x2570>
    296c:	44657079 	strbtmi	r7, [r5], #-121
    2970:	55006665 	strpl	r6, [r0, #-1637]
    2974:	54524153 	ldrbpl	r4, [r2], #-339
    2978:	6f6c435f 	svcvs	0x006c435f
    297c:	6e496b63 	fnmacdvs	d22, d9, d19
    2980:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2984:	65446570 	strbvs	r6, [r4, #-1392]
    2988:	53550066 	cmppl	r5, #102	; 0x66
    298c:	5f545241 	svcpl	0x00545241
    2990:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2994:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2998:	65535f54 	ldrbvs	r5, [r3, #-3924]
    299c:	6144646e 	cmpvs	r4, lr, ror #8
    29a0:	55006174 	strpl	r6, [r0, #-372]
    29a4:	54524153 	ldrbpl	r4, [r2], #-339
    29a8:	6c61485f 	stclvs	8, cr4, [r1], #-380
    29ac:	70754466 	rsbsvc	r4, r5, r6, ror #8
    29b0:	4378656c 	cmnmi	r8, #452984832	; 0x1b000000
    29b4:	5500646d 	strpl	r6, [r0, #-1133]
    29b8:	54524153 	ldrbpl	r4, [r2], #-339
    29bc:	6b61575f 	blvs	1858740 <__Stack_Size+0x1858340>
    29c0:	00705565 	rsbseq	r5, r0, r5, ror #10
    29c4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    29c8:	4d445f54 	stclmi	15, cr5, [r4, #-336]
    29cc:	646d4341 	strbtvs	r4, [sp], #-833
    29d0:	41535500 	cmpmi	r3, r0, lsl #10
    29d4:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}
    29d8:	42747361 	rsbsmi	r7, r4, #-2080374783	; 0x84000001
    29dc:	55007469 	strpl	r7, [r0, #-1129]
    29e0:	54524153 	ldrbpl	r4, [r2], #-339
    29e4:	4472495f 	ldrbtmi	r4, [r2], #-2399
    29e8:	646f4d41 	strbtvs	r4, [pc], #3393	; 29f0 <__Stack_Size+0x25f0>
    29ec:	70610065 	rsbvc	r0, r1, r5, rrx
    29f0:	6f6c6362 	svcvs	0x006c6362
    29f4:	55006b63 	strpl	r6, [r0, #-2915]
    29f8:	54524153 	ldrbpl	r4, [r2], #-339
    29fc:	656c435f 	strbvs	r4, [ip, #-863]!
    2a00:	54497261 	strbpl	r7, [r9], #-609
    2a04:	646e6550 	strbtvs	r6, [lr], #-1360
    2a08:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    2a0c:	55007469 	strpl	r7, [r0, #-1129]
    2a10:	54524153 	ldrbpl	r4, [r2], #-339
    2a14:	6175475f 	cmnvs	r5, pc, asr r7
    2a18:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    2a1c:	5500656d 	strpl	r6, [r0, #-1389]
    2a20:	54524153 	ldrbpl	r4, [r2], #-339
    2a24:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    2a28:	61657242 	cmnvs	r5, r2, asr #4
    2a2c:	7465446b 	strbtvc	r4, [r5], #-1131
    2a30:	4c746365 	ldclmi	3, cr6, [r4], #-404
    2a34:	74676e65 	strbtvc	r6, [r7], #-3685
    2a38:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
    2a3c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2a40:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2a44:	4c465f54 	mcrrmi	15, 5, r5, r6, cr4
    2a48:	55004741 	strpl	r4, [r0, #-1857]
    2a4c:	54524153 	ldrbpl	r4, [r2], #-339
    2a50:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2a54:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2a58:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2a5c:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2a60:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    2a64:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2a68:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    2a6c:	53550074 	cmppl	r5, #116	; 0x74
    2a70:	5f545241 	svcpl	0x00545241
    2a74:	52414d44 	subpl	r4, r1, #4352	; 0x1100
    2a78:	55007165 	strpl	r7, [r0, #-357]
    2a7c:	54524153 	ldrbpl	r4, [r2], #-339
    2a80:	6f6c435f 	svcvs	0x006c435f
    2a84:	74536b63 	ldrbvc	r6, [r3], #-2915
    2a88:	74637572 	strbtvc	r7, [r3], #-1394
    2a8c:	74696e49 	strbtvc	r6, [r9], #-3657
    2a90:	61737500 	cmnvs	r3, r0, lsl #10
    2a94:	62787472 	rsbsvs	r7, r8, #1912602624	; 0x72000000
    2a98:	00657361 	rsbeq	r7, r5, r1, ror #6
    2a9c:	5f434352 	svcpl	0x00434352
    2aa0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2aa4:	7453736b 	ldrbvc	r7, [r3], #-875
    2aa8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2aac:	41535500 	cmpmi	r3, r0, lsl #10
    2ab0:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2ab4:	64417465 	strbvs	r7, [r1], #-1125
    2ab8:	73657264 	cmnvc	r5, #1073741830	; 0x40000006
    2abc:	53550073 	cmppl	r5, #115	; 0x73
    2ac0:	5f545241 	svcpl	0x00545241
    2ac4:	47746553 	undefined
    2ac8:	64726175 	ldrbtvs	r6, [r2], #-373
    2acc:	656d6954 	strbvs	r6, [sp, #-2388]!
    2ad0:	41535500 	cmpmi	r3, r0, lsl #10
    2ad4:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2ad8:	42646e65 	rsbmi	r6, r4, #1616	; 0x650
    2adc:	6b616572 	blvs	185c0ac <__Stack_Size+0x185bcac>
    2ae0:	41535500 	cmpmi	r3, r0, lsl #10
    2ae4:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^
    2ae8:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    2aec:	00676966 	rsbeq	r6, r7, r6, ror #18
    2af0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2af4:	55007854 	strpl	r7, [r0, #-2132]
    2af8:	54524153 	ldrbpl	r4, [r2], #-339
    2afc:	616d535f 	cmnvs	sp, pc, asr r3
    2b00:	61437472 	cmpvs	r3, r2, ror r4
    2b04:	6d436472 	cfstrdvs	mvd6, [r3, #-456]
    2b08:	53550064 	cmppl	r5, #100	; 0x64
    2b0c:	5f545241 	svcpl	0x00545241
    2b10:	74696e49 	strbtvc	r6, [r9], #-3657
    2b14:	75727453 	ldrbvc	r7, [r2, #-1107]!
    2b18:	55007463 	strpl	r7, [r0, #-1123]
    2b1c:	54524153 	ldrbpl	r4, [r2], #-339
    2b20:	6464415f 	strbtvs	r4, [r4], #-351
    2b24:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    2b28:	74696200 	strbtvc	r6, [r9], #-512
    2b2c:	00736f70 	rsbseq	r6, r3, r0, ror pc
    2b30:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2b34:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2b38:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    2b3c:	0067616c 	rsbeq	r6, r7, ip, ror #2
    2b40:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2b44:	65475f54 	strbvs	r5, [r7, #-3924]
    2b48:	53544974 	cmppl	r4, #1900544	; 0x1d0000
    2b4c:	75746174 	ldrbvc	r6, [r4, #-372]!
    2b50:	53550073 	cmppl	r5, #115	; 0x73
    2b54:	5f545241 	svcpl	0x00545241
    2b58:	41447249 	cmpmi	r4, r9, asr #4
    2b5c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2b60:	55006769 	strpl	r6, [r0, #-1897]
    2b64:	54524153 	ldrbpl	r4, [r2], #-339
    2b68:	6f6c435f 	svcvs	0x006c435f
    2b6c:	55006b63 	strpl	r6, [r0, #-2915]
    2b70:	54524153 	ldrbpl	r4, [r2], #-339
    2b74:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    2b78:	65766965 	ldrbvs	r6, [r6, #-2405]!
    2b7c:	6b615772 	blvs	185894c <__Stack_Size+0x185854c>
    2b80:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    2b84:	5500646d 	strpl	r6, [r0, #-1133]
    2b88:	54524153 	ldrbpl	r4, [r2], #-339
    2b8c:	4472495f 	ldrbtmi	r4, [r2], #-2399
    2b90:	646d4341 	strbtvs	r4, [sp], #-833
    2b94:	41535500 	cmpmi	r3, r0, lsl #10
    2b98:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}
    2b9c:	6d434e49 	stclvs	14, cr4, [r3, #-292]
    2ba0:	72660064 	rsbvc	r0, r6, #100	; 0x64
    2ba4:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    2ba8:	6c616e6f 	stclvs	14, cr6, [r1], #-444
    2bac:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    2bb0:	00726564 	rsbseq	r6, r2, r4, ror #10
    2bb4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2bb8:	6d535f54 	ldclvs	15, cr5, [r3, #-336]
    2bbc:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    2bc0:	4e647261 	cdpmi	2, 6, cr7, cr4, cr1, {3}
    2bc4:	434b4341 	movtmi	r4, #45889	; 0xb341
    2bc8:	5500646d 	strpl	r6, [r0, #-1133]
    2bcc:	54524153 	ldrbpl	r4, [r2], #-339
    2bd0:	7465475f 	strbtvc	r4, [r5], #-1887
    2bd4:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    2bd8:	74617453 	strbtvc	r7, [r1], #-1107
    2bdc:	55007375 	strpl	r7, [r0, #-885]
    2be0:	54524153 	ldrbpl	r4, [r2], #-339
    2be4:	0054495f 	subseq	r4, r4, pc, asr r9
    2be8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2bec:	6c435f54 	mcrrvs	15, 5, r5, r3, cr4
    2bf0:	496b636f 	stmdbmi	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    2bf4:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2bf8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2bfc:	61575f54 	cmpvs	r7, r4, asr pc
    2c00:	7055656b 	subsvc	r6, r5, fp, ror #10
    2c04:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2c08:	55006769 	strpl	r6, [r0, #-1897]
    2c0c:	54524153 	ldrbpl	r4, [r2], #-339
    2c10:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    2c14:	65766965 	ldrbvs	r6, [r6, #-2405]!
    2c18:	61746144 	cmnvs	r4, r4, asr #2
    2c1c:	41535500 	cmpmi	r3, r0, lsl #10
    2c20:	505f5452 	subspl	r5, pc, r2, asr r4
    2c24:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    2c28:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    2c2c:	41535500 	cmpmi	r3, r0, lsl #10
    2c30:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2c34:	004c4f50 	subeq	r4, ip, r0, asr pc
    2c38:	616d7469 	cmnvs	sp, r9, ror #8
    2c3c:	73006b73 	movwvc	r6, #2931	; 0xb73
    2c40:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    2c44:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2c48:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    2c4c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2c50:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!
    2c54:	31663233 	cmncc	r6, r3, lsr r2
    2c58:	755f7830 	ldrbvc	r7, [pc, #-2096]	; 2430 <__Stack_Size+0x2030>
    2c5c:	74726173 	ldrbtvc	r6, [r2], #-371
    2c60:	7500632e 	strvc	r6, [r0, #-814]
    2c64:	74726173 	ldrbtvc	r6, [r2], #-371
    2c68:	00676572 	rsbeq	r6, r7, r2, ror r5
    2c6c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2c70:	74535f54 	ldrbvc	r5, [r3], #-3924
    2c74:	74637572 	strbtvc	r7, [r3], #-1394
    2c78:	74696e49 	strbtvc	r6, [r9], #-3657
    2c7c:	73655f00 	cmnvc	r5, #0	; 0x0
    2c80:	6b636174 	blvs	18db258 <__Stack_Size+0x18dae58>
    2c84:	64735f00 	ldrbtvs	r5, [r3], #-3840
    2c88:	00617461 	rsbeq	r7, r1, r1, ror #8
    2c8c:	65736552 	ldrbvs	r6, [r3, #-1362]!
    2c90:	61485f74 	cmpvs	r8, r4, ror pc
    2c94:	656c646e 	strbvs	r6, [ip, #-1134]!
    2c98:	75700072 	ldrbvc	r0, [r0, #-114]!
    2c9c:	7365446c 	cmnvc	r5, #1811939328	; 0x6c000000
    2ca0:	735f0074 	cmpvc	pc, #116	; 0x74
    2ca4:	74616469 	strbtvc	r6, [r1], #-1129
    2ca8:	655f0061 	ldrbvs	r0, [pc, #-97]	; 2c4f <__Stack_Size+0x284f>
    2cac:	00737362 	rsbseq	r7, r3, r2, ror #6
    2cb0:	6164655f 	cmnvs	r4, pc, asr r5
    2cb4:	73006174 	movwvc	r6, #372	; 0x174
    2cb8:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    2cbc:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2cc0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    2cc4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2cc8:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!
    2ccc:	31663233 	cmncc	r6, r3, lsr r2
    2cd0:	765f7830 	undefined
    2cd4:	6f746365 	svcvs	0x00746365
    2cd8:	00632e72 	rsbeq	r2, r3, r2, ror lr
    2cdc:	66705f67 	ldrbtvs	r5, [r0], -r7, ror #30
    2ce0:	6365566e 	cmnvs	r5, #115343360	; 0x6e00000
    2ce4:	73726f74 	cmnvc	r2, #464	; 0x1d0
    2ce8:	6c757000 	ldclvs	0, cr7, [r5]
    2cec:	00637253 	rsbeq	r7, r3, r3, asr r2
    2cf0:	7362735f 	cmnvc	r2, #2080374785	; 0x7c000001
    2cf4:	6f6c0073 	svcvs	0x006c0073
    2cf8:	6c20676e 	stcvs	7, cr6, [r0], #-440
    2cfc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
    2d00:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2d04:	775c3a63 	ldrbvc	r3, [ip, -r3, ror #20]
    2d08:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    2d0c:	625c736d 	subsvs	r7, ip, #-1275068415	; 0xb4000001
    2d10:	646c6975 	strbtvs	r6, [ip], #-2421
    2d14:	6363675c 	cmnvs	r3, #24117248	; 0x1700000
    2d18:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    2d1c:	615c646c 	cmpvs	ip, ip, ror #8
    2d20:	652d6d72 	strvs	r6, [sp, #-3442]!
    2d24:	5c696261 	sfmpl	f6, 2, [r9], #-388
    2d28:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    2d2c:	6c5c6269 	lfmvs	f6, 2, [ip], {105}
    2d30:	5c636269 	sfmpl	f6, 2, [r3], #-420
    2d34:	6c647473 	cfstrdvs	mvd7, [r4], #-460
    2d38:	2e006269 	cdpcs	2, 0, cr6, cr0, cr9, {3}
    2d3c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2d40:	2f2e2e2f 	svccs	0x002e2e2f
    2d44:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2d48:	63672f2e 	cmnvs	r7, #184	; 0xb8
    2d4c:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    2d50:	2f302e33 	svccs	0x00302e33
    2d54:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    2d58:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    2d5c:	2f636269 	svccs	0x00636269
    2d60:	6c647473 	cfstrdvs	mvd7, [r4], #-460
    2d64:	612f6269 	teqvs	pc, r9, ror #4
    2d68:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2d6c:	00632e74 	rsbeq	r2, r3, r4, ror lr
    2d70:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
    2d74:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
    2d78:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
    2d7c:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    2d80:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
    2d84:	5f00746e 	svcpl	0x0000746e
    2d88:	5f74655f 	svcpl	0x0074655f
    2d8c:	00617863 	rsbeq	r7, r1, r3, ror #16
    2d90:	74655f5f 	strbtvc	r5, [r5], #-3935
    2d94:	656e6f5f 	strbvs	r6, [lr, #-3935]!
    2d98:	00746978 	rsbseq	r6, r4, r8, ror r9
    2d9c:	74615f5f 	strbtvc	r5, [r1], #-3935
    2da0:	74697865 	strbtvc	r7, [r9], #-2149
    2da4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2da8:	5f007365 	svcpl	0x00007365
    2dac:	5f74655f 	svcpl	0x0074655f
    2db0:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    2db4:	5f007469 	svcpl	0x00007469
    2db8:	5f6f7364 	svcpl	0x006f7364
    2dbc:	646e6168 	strbtvs	r6, [lr], #-360
    2dc0:	2e00656c 	cfsh32cs	mvfx6, mvfx0, #60
    2dc4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2dc8:	2f2e2e2f 	svccs	0x002e2e2f
    2dcc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2dd0:	63672f2e 	cmnvs	r7, #184	; 0xb8
    2dd4:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    2dd8:	2f302e33 	svccs	0x00302e33
    2ddc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    2de0:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    2de4:	2f636269 	svccs	0x00636269
    2de8:	6c647473 	cfstrdvs	mvd7, [r4], #-460
    2dec:	652f6269 	strvs	r6, [pc, #-617]!	; 2b8b <__Stack_Size+0x278b>
    2df0:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
    2df4:	735f0063 	cmpvc	pc, #99	; 0x63
    2df8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    2dfc:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
    2e00:	00383464 	eorseq	r3, r8, r4, ror #8
    2e04:	656d655f 	strbvs	r6, [sp, #-1375]!
    2e08:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
    2e0c:	5f007963 	svcpl	0x00007963
    2e10:	74726377 	ldrbtvc	r6, [r2], #-887
    2e14:	5f626d6f 	svcpl	0x00626d6f
    2e18:	74617473 	strbtvc	r7, [r1], #-1139
    2e1c:	775f0065 	ldrbvc	r0, [pc, -r5, rrx]
    2e20:	74727363 	ldrbtvc	r7, [r2], #-867
    2e24:	73626d6f 	cmnvc	r2, #7104	; 0x1bc0
    2e28:	6174735f 	cmnvs	r4, pc, asr r3
    2e2c:	5f006574 	svcpl	0x00006574
    2e30:	7366626c 	cmnvc	r6, #-1073741818	; 0xc0000006
    2e34:	00657a69 	rsbeq	r7, r5, r9, ror #20
    2e38:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
    2e3c:	63776f74 	cmnvs	r7, #464	; 0x1d0
    2e40:	6174735f 	cmnvs	r4, pc, asr r3
    2e44:	5f006574 	svcpl	0x00006574
    2e48:	6f746377 	svcvs	0x00746377
    2e4c:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
    2e50:	65746174 	ldrbvs	r6, [r4, #-372]!
    2e54:	745f5f00 	ldrbvc	r5, [pc], #3840	; 2e5c <__Stack_Size+0x2a5c>
    2e58:	65735f6d 	ldrbvs	r5, [r3, #-3949]!
    2e5c:	755f0063 	ldrbvc	r0, [pc, #-99]	; 2e01 <__Stack_Size+0x2a01>
    2e60:	00667562 	rsbeq	r7, r6, r2, ror #10
    2e64:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
    2e68:	5f5f0065 	svcpl	0x005f0065
    2e6c:	685f6d74 	ldmdavs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    2e70:	0072756f 	rsbseq	r7, r2, pc, ror #10
    2e74:	66735f5f 	uhsubaddxvs	r5, r3, pc
    2e78:	6e6f5f00 	cdpvs	15, 6, cr5, cr15, cr0, {0}
    2e7c:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    2e80:	72615f74 	rsbvc	r5, r1, #464	; 0x1d0
    2e84:	5f007367 	svcpl	0x00007367
    2e88:	6b6f6f63 	blvs	1bdec1c <__Stack_Size+0x1bde81c>
    2e8c:	5f006569 	svcpl	0x00006569
    2e90:	6c67735f 	stclvs	3, cr7, [r7], #-380
    2e94:	5f006575 	svcpl	0x00006575
    2e98:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    2e9c:	695f0073 	ldmdbvs	pc, {r0, r1, r4, r5, r6}^
    2ea0:	78635f73 	stmdavc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2ea4:	735f0061 	cmpvc	pc, #97	; 0x61
    2ea8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    2eac:	6c625f00 	stclvs	15, cr5, [r2]
    2eb0:	7a69736b 	bvc	1a5fc64 <__Stack_Size+0x1a5f864>
    2eb4:	635f0065 	cmpvs	pc, #101	; 0x65
    2eb8:	75627476 	strbvc	r7, [r2, #-1142]!
    2ebc:	6f5f0066 	svcvs	0x005f0066
    2ec0:	65736666 	ldrbvs	r6, [r3, #-1638]!
    2ec4:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]
    2ec8:	74727362 	ldrbtvc	r7, [r2], #-866
    2ecc:	7363776f 	cmnvc	r3, #29097984	; 0x1bc0000
    2ed0:	6174735f 	cmnvs	r4, pc, asr r3
    2ed4:	5f006574 	svcpl	0x00006574
    2ed8:	6c72626d 	lfmvs	f6, 2, [r2], #-436
    2edc:	735f6e65 	cmpvc	pc, #1616	; 0x650
    2ee0:	65746174 	ldrbvs	r6, [r4, #-372]!
    2ee4:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
    2ee8:	73677261 	cmnvc	r7, #268435462	; 0x10000006
    2eec:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
    2ef0:	735f0073 	cmpvc	pc, #115	; 0x73
    2ef4:	006e6769 	rsbeq	r6, lr, r9, ror #14
    2ef8:	6f6c665f 	svcvs	0x006c665f
    2efc:	745f6b63 	ldrbvc	r6, [pc], #2915	; 2f04 <__Stack_Size+0x2b04>
    2f00:	74735f00 	ldrbtvc	r5, [r3], #-3840
    2f04:	72726564 	rsbsvc	r6, r2, #419430400	; 0x19000000
    2f08:	69425f00 	stmdbvs	r2, {r8, r9, sl, fp, ip, lr}^
    2f0c:	746e6967 	strbtvc	r6, [lr], #-2407
    2f10:	65725f00 	ldrbvs	r5, [r2, #-3840]!
    2f14:	5f006461 	svcpl	0x00006461
    2f18:	75736572 	ldrbvc	r6, [r3, #-1394]!
    2f1c:	6b5f746c 	blvs	17e00d4 <__Stack_Size+0x17dfcd4>
    2f20:	745f5f00 	ldrbvc	r5, [pc], #3840	; 2f28 <__Stack_Size+0x2b28>
    2f24:	5f5f006d 	svcpl	0x005f006d
    2f28:	62686377 	rsbvs	r6, r8, #-603979775	; 0xdc000001
    2f2c:	74735f00 	ldrbtvc	r5, [r3], #-3840
    2f30:	74756f64 	ldrbtvc	r6, [r5], #-3940
    2f34:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
    2f38:	6e656c74 	mcrvs	12, 3, r6, cr5, cr4, {3}
    2f3c:	69665f00 	stmdbvs	r6!, {r8, r9, sl, fp, ip, lr}^
    2f40:	5f00656c 	svcpl	0x0000656c
    2f44:	626f696e 	rsbvs	r6, pc, #1802240	; 0x1b8000
    2f48:	615f0073 	cmpvs	pc, r3, ror r0
    2f4c:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2f50:	5f003074 	svcpl	0x00003074
    2f54:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    2f58:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
    2f5c:	5f006675 	svcpl	0x00006675
    2f60:	74637361 	strbtvc	r7, [r3], #-865
    2f64:	5f656d69 	svcpl	0x00656d69
    2f68:	00667562 	rsbeq	r7, r6, r2, ror #10
    2f6c:	63775f5f 	cmnvs	r7, #380	; 0x17c
    2f70:	69770068 	ldmdbvs	r7!, {r3, r5, r6}^
    2f74:	745f746e 	ldrbvc	r7, [pc], #1134	; 2f7c <__Stack_Size+0x2b7c>
    2f78:	6f6c5f00 	svcvs	0x006c5f00
    2f7c:	5f006b63 	svcpl	0x00006b63
    2f80:	746c756d 	strbtvc	r7, [ip], #-1389
    2f84:	72775f00 	rsbsvc	r5, r7, #0	; 0x0
    2f88:	00657469 	rsbeq	r7, r5, r9, ror #8
    2f8c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!
    2f90:	6165795f 	cmnvs	r5, pc, asr r9
    2f94:	6e5f0072 	mrcvs	0, 2, r0, cr15, cr2, {3}
    2f98:	66747865 	ldrbtvs	r7, [r4], -r5, ror #16
    2f9c:	745f5f00 	ldrbvc	r5, [pc], #3840	; 2fa4 <__Stack_Size+0x2ba4>
    2fa0:	6f6d5f6d 	svcvs	0x006d5f6d
    2fa4:	5f5f006e 	svcpl	0x005f006e
    2fa8:	64696473 	strbtvs	r6, [r9], #-1139
    2fac:	74696e69 	strbtvc	r6, [r9], #-3689
    2fb0:	61675f00 	cmnvs	r7, r0, lsl #30
    2fb4:	5f616d6d 	svcpl	0x00616d6d
    2fb8:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    2fbc:	006d6167 	rsbeq	r6, sp, r7, ror #2
    2fc0:	6572665f 	ldrbvs	r6, [r2, #-1631]!
    2fc4:	73696c65 	cmnvc	r9, #25856	; 0x6500
    2fc8:	4c5f0074 	mrrcmi	0, 7, r0, pc, cr4
    2fcc:	5f4b434f 	svcpl	0x004b434f
    2fd0:	55434552 	strbpl	r4, [r3, #-1362]
    2fd4:	56495352 	undefined
    2fd8:	00545f45 	subseq	r5, r4, r5, asr #30
    2fdc:	77656e5f 	undefined
    2fe0:	745f5f00 	ldrbvc	r5, [pc], #3840	; 2fe8 <__Stack_Size+0x2be8>
    2fe4:	64795f6d 	ldrbtvs	r5, [r9], #-3949
    2fe8:	5f007961 	svcpl	0x00007961
    2fec:	7562735f 	strbvc	r7, [r2, #-863]!
    2ff0:	695f0066 	ldmdbvs	pc, {r1, r2, r5, r6}^
    2ff4:	0073626f 	rsbseq	r6, r3, pc, ror #4
    2ff8:	49465f5f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    2ffc:	5f00454c 	svcpl	0x0000454c
    3000:	7473626d 	ldrbtvc	r6, [r3], #-621
    3004:	5f657461 	svcpl	0x00657461
    3008:	5f5f0074 	svcpl	0x005f0074
    300c:	4c494673 	mcrrmi	6, 7, r4, r9, cr3
    3010:	725f0045 	subsvc	r0, pc, #69	; 0x45
    3014:	5f646e61 	svcpl	0x00646e61
    3018:	7478656e 	ldrbtvc	r6, [r8], #-1390
    301c:	626d5f00 	rsbvs	r5, sp, #0	; 0x0
    3020:	5f6e656c 	svcpl	0x006e656c
    3024:	74617473 	strbtvc	r7, [r1], #-1139
    3028:	695f0065 	ldmdbvs	pc, {r0, r2, r5, r6}^
    302c:	5f00636e 	svcpl	0x0000636e
    3030:	00646e69 	rsbeq	r6, r4, r9, ror #28
    3034:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
    3038:	746e6572 	strbtvc	r6, [lr], #-1394
    303c:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    3040:	00656c61 	rsbeq	r6, r5, r1, ror #24
    3044:	6c635f5f 	stclvs	15, cr5, [r3], #-380
    3048:	756e6165 	strbvc	r6, [lr, #-357]!
    304c:	6d5f0070 	ldclvs	0, cr0, [pc, #-448]
    3050:	64777861 	ldrbtvs	r7, [r7], #-2145
    3054:	725f0073 	subsvc	r0, pc, #115	; 0x73
    3058:	746e6565 	strbtvc	r6, [lr], #-1381
    305c:	65735f00 	ldrbvs	r5, [r3, #-3840]!
    3060:	5f006465 	svcpl	0x00006465
    3064:	756f635f 	strbvc	r6, [pc, #-863]!	; 2d0d <__Stack_Size+0x290d>
    3068:	5f00746e 	svcpl	0x0000746e
    306c:	6c61765f 	stclvs	6, cr7, [r1], #-380
    3070:	5f006575 	svcpl	0x00006575
    3074:	6b656573 	blvs	195c648 <__Stack_Size+0x195c248>
    3078:	70665f00 	rsbvc	r5, r6, r0, lsl #30
    307c:	745f736f 	ldrbvc	r7, [pc], #879	; 3084 <__Stack_Size+0x2c84>
    3080:	72655f00 	rsbvc	r5, r5, #0	; 0x0
    3084:	006f6e72 	rsbeq	r6, pc, r2, ror lr
    3088:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!
    308c:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
    3090:	74735f00 	ldrbtvc	r5, [r3], #-3840
    3094:	6b6f7472 	blvs	1be0264 <__Stack_Size+0x1bdfe64>
    3098:	73616c5f 	cmnvc	r1, #24320	; 0x5f00
    309c:	665f0074 	undefined
    30a0:	7079746e 	rsbsvc	r7, r9, lr, ror #8
    30a4:	5f007365 	svcpl	0x00007365
    30a8:	00646461 	rsbeq	r6, r4, r1, ror #8
    30ac:	4c555f5f 	mrrcmi	15, 5, r5, r5, cr15
    30b0:	00676e6f 	rsbeq	r6, r7, pc, ror #28
    30b4:	7465675f 	strbtvc	r6, [r5], #-1887
    30b8:	65746164 	ldrbvs	r6, [r4, #-356]!
    30bc:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
    30c0:	6c675f00 	stclvs	15, cr5, [r7]
    30c4:	6c61626f 	sfmvs	f6, 2, [r1], #-444
    30c8:	706d695f 	rsbvc	r6, sp, pc, asr r9
    30cc:	5f657275 	svcpl	0x00657275
    30d0:	00727470 	rsbseq	r7, r2, r0, ror r4
    30d4:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
    30d8:	746e6572 	strbtvc	r6, [lr], #-1394
    30dc:	7461635f 	strbtvc	r6, [r1], #-863
    30e0:	726f6765 	rsbvc	r6, pc, #26476544	; 0x1940000
    30e4:	6f630079 	svcvs	0x00630079
    30e8:	5f006564 	svcpl	0x00006564
    30ec:	73756e75 	cmnvc	r5, #1872	; 0x750
    30f0:	725f6465 	subsvc	r6, pc, #1694498816	; 0x65000000
    30f4:	00646e61 	rsbeq	r6, r4, r1, ror #28
    30f8:	7364775f 	cmnvc	r4, #24903680	; 0x17c0000
    30fc:	745f5f00 	ldrbvc	r5, [pc], #3840	; 3104 <__Stack_Size+0x2d04>
    3100:	64775f6d 	ldrbtvs	r5, [r7], #-3949
    3104:	5f007961 	svcpl	0x00007961
    3108:	65756c67 	ldrbvs	r6, [r5, #-3175]!
    310c:	6d6e5f00 	stclvs	15, cr5, [lr]
    3110:	6f6c6c61 	svcvs	0x006c6c61
    3114:	6c5f0063 	mrrcvs	0, 6, r0, pc, cr3
    3118:	5f613436 	svcpl	0x00613436
    311c:	00667562 	rsbeq	r7, r6, r2, ror #10
    3120:	6769735f 	undefined
    3124:	6e75665f 	mrcvs	6, 3, r6, cr5, cr15, {2}
    3128:	6e5f0063 	cdpvs	0, 5, cr0, cr15, cr3, {3}
    312c:	00667562 	rsbeq	r7, r6, r2, ror #10
    3130:	756e755f 	strbvc	r7, [lr, #-1375]!
    3134:	00646573 	rsbeq	r6, r4, r3, ror r5
    3138:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!
    313c:	6473695f 	ldrbtvs	r6, [r3], #-2399
    3140:	5f007473 	svcpl	0x00007473
    3144:	61636f6c 	cmnvs	r3, ip, ror #30
    3148:	6d69746c 	cfstrdvs	mvd7, [r9, #-432]!
    314c:	75625f65 	strbvc	r5, [r2, #-3941]!
    3150:	725f0066 	subsvc	r0, pc, #102	; 0x66
    3154:	5f003834 	svcpl	0x00003834
    3158:	6f74626d 	svcvs	0x0074626d
    315c:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
    3160:	65746174 	ldrbvs	r6, [r4, #-372]!
    3164:	35705f00 	ldrbcc	r5, [r0, #-3840]!
    3168:	5f5f0073 	svcpl	0x005f0073
    316c:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]
    3170:	00796164 	rsbseq	r6, r9, r4, ror #2
    3174:	75706d69 	ldrbvc	r6, [r0, #-3433]!
    3178:	645f6572 	ldrbvs	r6, [pc], #1394	; 3180 <__Stack_Size+0x2d80>
    317c:	00617461 	rsbeq	r7, r1, r1, ror #8
    3180:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3184:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3188:	2f2e2e2f 	svccs	0x002e2e2f
    318c:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    3190:	342d6363 	strtcc	r6, [sp], #-867
    3194:	302e332e 	eorcc	r3, lr, lr, lsr #6
    3198:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    319c:	2f62696c 	svccs	0x0062696c
    31a0:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    31a4:	6565722f 	strbvs	r7, [r5, #-559]!
    31a8:	692f746e 	stmdbvs	pc!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    31ac:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    31b0:	00632e65 	rsbeq	r2, r3, r5, ror #28
    31b4:	775c3a63 	ldrbvc	r3, [ip, -r3, ror #20]
    31b8:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    31bc:	625c736d 	subsvs	r7, ip, #-1275068415	; 0xb4000001
    31c0:	646c6975 	strbtvs	r6, [ip], #-2421
    31c4:	6363675c 	cmnvs	r3, #24117248	; 0x1700000
    31c8:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    31cc:	615c646c 	cmpvs	ip, ip, ror #8
    31d0:	652d6d72 	strvs	r6, [sp, #-3442]!
    31d4:	5c696261 	sfmpl	f6, 2, [r9], #-388
    31d8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    31dc:	6c5c6269 	lfmvs	f6, 2, [ip], {105}
    31e0:	5c636269 	sfmpl	f6, 2, [r3], #-420
    31e4:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    31e8:	5f5f0074 	svcpl	0x005f0074
    31ec:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
    31f0:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
    31f4:	735f7961 	cmpvc	pc, #1589248	; 0x184000
    31f8:	74726174 	ldrbtvc	r6, [r2], #-372
    31fc:	7a697300 	bvc	1a5fe04 <__Stack_Size+0x1a5fa04>
    3200:	00745f65 	rsbseq	r5, r4, r5, ror #30
    3204:	69665f5f 	stmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    3208:	615f696e 	cmpvs	pc, lr, ror #18
    320c:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    3210:	646e655f 	strbtvs	r6, [lr], #-1375
    3214:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    3218:	6e696572 	mcrvs	5, 3, r6, cr9, cr2, {3}
    321c:	615f7469 	cmpvs	pc, r9, ror #8
    3220:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    3224:	646e655f 	strbtvs	r6, [lr], #-1375
    3228:	2f2e2e00 	svccs	0x002e2e00
    322c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3230:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3234:	2f2e2e2f 	svccs	0x002e2e2f
    3238:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    323c:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    3240:	656e2f30 	strbvs	r2, [lr, #-3888]!
    3244:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3248:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    324c:	696d2f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    3250:	692f6373 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    3254:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
    3258:	5f5f0063 	svcpl	0x005f0063
    325c:	74696e69 	strbtvc	r6, [r9], #-3689
    3260:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
    3264:	655f7961 	ldrbvs	r7, [pc, #-2401]	; 290b <__Stack_Size+0x250b>
    3268:	5f00646e 	svcpl	0x0000646e
    326c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    3270:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
    3274:	615f7469 	cmpvs	pc, r9, ror #8
    3278:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    327c:	5c3a6300 	ldcpl	3, cr6, [sl]
    3280:	616e6977 	smcvs	59031
    3284:	5c736d72 	ldclpl	13, cr6, [r3], #-456
    3288:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    328c:	63675c64 	cmnvs	r7, #25600	; 0x6400
    3290:	75622d63 	strbvc	r2, [r2, #-3427]!
    3294:	5c646c69 	stclpl	12, cr6, [r4], #-420
    3298:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!
    329c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    32a0:	77656e5c 	undefined
    32a4:	5c62696c 	stclpl	9, cr6, [r2], #-432
    32a8:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    32ac:	73696d5c 	cmnvc	r9, #5888	; 0x1700
    32b0:	5f5f0063 	svcpl	0x005f0063
    32b4:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    32b8:	6e69665f 	mcrvs	6, 3, r6, cr9, cr15, {2}
    32bc:	72615f69 	rsbvc	r5, r1, #420	; 0x1a4
    32c0:	00796172 	rsbseq	r6, r9, r2, ror r1
    32c4:	72705f5f 	rsbsvc	r5, r0, #380	; 0x17c
    32c8:	696e6965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    32cc:	72615f74 	rsbvc	r5, r1, #464	; 0x1d0
    32d0:	5f796172 	svcpl	0x00796172
    32d4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    32d8:	5f5f0074 	svcpl	0x005f0074
    32dc:	74696e69 	strbtvc	r6, [r9], #-3689
    32e0:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
    32e4:	735f7961 	cmpvc	pc, #1589248	; 0x184000
    32e8:	74726174 	ldrbtvc	r6, [r2], #-372
    32ec:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    32f0:	64656e67 	strbtvs	r6, [r5], #-3687
    32f4:	6464615f 	strbtvs	r6, [r4], #-351
    32f8:	3a630072 	bcc	18c34c8 <__Stack_Size+0x18c30c8>
    32fc:	6e69775c 	mcrvs	7, 3, r7, cr9, cr12, {2}
    3300:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    3304:	6975625c 	ldmdbvs	r5!, {r2, r3, r4, r6, r9, sp, lr}^
    3308:	675c646c 	ldrbvs	r6, [ip, -ip, ror #8]
    330c:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
    3310:	646c6975 	strbtvs	r6, [ip], #-2421
    3314:	6d72615c 	ldfvse	f6, [r2, #-368]!
    3318:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    331c:	656e5c69 	strbvs	r5, [lr, #-3177]!
    3320:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3324:	62696c5c 	rsbvs	r6, r9, #23552	; 0x5c00
    3328:	74735c63 	ldrbtvc	r5, [r3], #-3171
    332c:	676e6972 	undefined
    3330:	2f2e2e00 	svccs	0x002e2e00
    3334:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3338:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    333c:	2f2e2e2f 	svccs	0x002e2e2f
    3340:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    3344:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    3348:	656e2f30 	strbvs	r2, [lr, #-3888]!
    334c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    3350:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3354:	74732f63 	ldrbtvc	r2, [r3], #-3939
    3358:	676e6972 	undefined
    335c:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!
    3360:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
    3364:	656d0063 	strbvs	r0, [sp, #-99]!
    3368:	7465736d 	strbtvc	r7, [r5], #-877
    336c:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    3370:	00726566 	rsbseq	r6, r2, r6, ror #10
    3374:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3378:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    337c:	2f2e2e2f 	svccs	0x002e2e2f
    3380:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    3384:	342d6363 	strtcc	r6, [sp], #-867
    3388:	302e332e 	eorcc	r3, lr, lr, lsr #6
    338c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3390:	2f62696c 	svccs	0x0062696c
    3394:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    3398:	6474732f 	ldrbtvs	r7, [r4], #-815
    339c:	2f62696c 	svccs	0x0062696c
    33a0:	74615f5f 	strbtvc	r5, [r1], #-3935
    33a4:	74697865 	strbtvc	r7, [r9], #-2149
    33a8:	7400632e 	strvc	r6, [r0], #-814
    33ac:	00657079 	rsbeq	r7, r5, r9, ror r0
    33b0:	65725f5f 	ldrbvs	r5, [r2, #-3935]!
    33b4:	74736967 	ldrbtvc	r6, [r3], #-2407
    33b8:	655f7265 	ldrbvs	r7, [pc, #-613]	; 315b <__Stack_Size+0x2d5b>
    33bc:	70746978 	rsbsvc	r6, r4, r8, ror r9
    33c0:	00636f72 	rsbeq	r6, r3, r2, ror pc
    33c4:	61635f5f 	cmnvs	r3, pc, asr pc
    33c8:	655f6c6c 	ldrbvs	r6, [pc, #-3180]	; 2764 <__Stack_Size+0x2364>
    33cc:	70746978 	rsbsvc	r6, r4, r8, ror r9
    33d0:	73636f72 	cmnvc	r3, #456	; 0x1c8
    33d4:	2f2e2e00 	svccs	0x002e2e00
    33d8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    33dc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    33e0:	2f2e2e2f 	svccs	0x002e2e2f
    33e4:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    33e8:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    33ec:	656e2f30 	strbvs	r2, [lr, #-3888]!
    33f0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    33f4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    33f8:	74732f63 	ldrbtvc	r2, [r3], #-3939
    33fc:	62696c64 	rsbvs	r6, r9, #25600	; 0x6400
    3400:	635f5f2f 	cmpvs	pc, #188	; 0xbc
    3404:	5f6c6c61 	svcpl	0x006c6c61
    3408:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    340c:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    3410:	73616c00 	cmnvc	r1, #0	; 0x0
    3414:	72007074 	andvc	r7, r0, #116	; 0x74
    3418:	61747365 	cmnvs	r4, r5, ror #6
    341c:	Address 0x0000341c is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000094 	muleq	r0, r4, r0
       4:	00000096 	muleq	r0, r6, r0
       8:	965d0001 	ldrbls	r0, [sp], -r1
       c:	c0000000 	andgt	r0, r0, r0
      10:	02000000 	andeq	r0, r0, #0	; 0x0
      14:	00087d00 	andeq	r7, r8, r0, lsl #26
      18:	00000000 	andeq	r0, r0, r0
      1c:	94000000 	strls	r0, [r0]
      20:	9a000000 	bls	28 <_Minimum_Stack_Size-0xd8>
      24:	01000000 	tsteq	r0, r0
      28:	009a5000 	addseq	r5, sl, r0
      2c:	00c00000 	sbceq	r0, r0, r0
      30:	00010000 	andeq	r0, r1, r0
      34:	00000054 	andeq	r0, r0, r4, asr r0
      38:	00000000 	andeq	r0, r0, r0
      3c:	0000c000 	andeq	ip, r0, r0
      40:	0000c200 	andeq	ip, r0, r0, lsl #4
      44:	5d000100 	stfpls	f0, [r0]
      48:	000000c2 	andeq	r0, r0, r2, asr #1
      4c:	000000c8 	andeq	r0, r0, r8, asr #1
      50:	047d0002 	ldrbteq	r0, [sp], #-2
      54:	000000c8 	andeq	r0, r0, r8, asr #1
      58:	000000d6 	ldrdeq	r0, [r0], -r6
      5c:	087d0002 	ldmdaeq	sp!, {r1}^
	...
      68:	000000d8 	ldrdeq	r0, [r0], -r8
      6c:	000000da 	ldrdeq	r0, [r0], -sl
      70:	da5d0001 	ble	174007c <__Stack_Size+0x173fc7c>
      74:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
      78:	02000000 	andeq	r0, r0, #0	; 0x0
      7c:	de0c7d00 	cdple	13, 0, cr7, cr12, cr0, {0}
      80:	10000000 	andne	r0, r0, r0
      84:	02000001 	andeq	r0, r0, #1	; 0x1
      88:	00107d00 	andseq	r7, r0, r0, lsl #26
      8c:	00000000 	andeq	r0, r0, r0
      90:	10000000 	andne	r0, r0, r0
      94:	12000001 	andne	r0, r0, #1	; 0x1
      98:	01000001 	tsteq	r0, r1
      9c:	01125d00 	tsteq	r2, r0, lsl #26
      a0:	01180000 	tsteq	r8, r0
      a4:	00020000 	andeq	r0, r2, r0
      a8:	0118047d 	tsteq	r8, sp, ror r4
      ac:	01640000 	cmneq	r4, r0
      b0:	00020000 	andeq	r0, r2, r0
      b4:	0000087d 	andeq	r0, r0, sp, ror r8
      b8:	00000000 	andeq	r0, r0, r0
      bc:	01640000 	cmneq	r4, r0
      c0:	01660000 	cmneq	r6, r0
      c4:	00010000 	andeq	r0, r1, r0
      c8:	0001665d 	andeq	r6, r1, sp, asr r6
      cc:	00016800 	andeq	r6, r1, r0, lsl #16
      d0:	7d000200 	sfmvc	f0, 4, [r0]
      d4:	00016810 	andeq	r6, r1, r0, lsl r8
      d8:	0001f400 	andeq	pc, r1, r0, lsl #8
      dc:	7d000200 	sfmvc	f0, 4, [r0]
      e0:	00000030 	andeq	r0, r0, r0, lsr r0
      e4:	00000000 	andeq	r0, r0, r0
      e8:	0001f400 	andeq	pc, r1, r0, lsl #8
      ec:	0001f600 	andeq	pc, r1, r0, lsl #12
      f0:	5d000100 	stfpls	f0, [r0]
      f4:	000001f6 	strdeq	r0, [r0], -r6
      f8:	000001fa 	strdeq	r0, [r0], -sl
      fc:	047d0002 	ldrbteq	r0, [sp], #-2
     100:	000001fa 	strdeq	r0, [r0], -sl
     104:	00000214 	andeq	r0, r0, r4, lsl r2
     108:	087d0002 	ldmdaeq	sp!, {r1}^
	...
     114:	000001f4 	strdeq	r0, [r0], -r4
     118:	000001f8 	strdeq	r0, [r0], -r8
     11c:	f8500001 	undefined instruction 0xf8500001
     120:	00000001 	andeq	r0, r0, r1
     124:	01000002 	tsteq	r0, r2
     128:	00005100 	andeq	r5, r0, r0, lsl #2
     12c:	00000000 	andeq	r0, r0, r0
     130:	02140000 	andseq	r0, r4, #0	; 0x0
     134:	02180000 	andseq	r0, r8, #0	; 0x0
     138:	00010000 	andeq	r0, r1, r0
     13c:	0002185d 	andeq	r1, r2, sp, asr r8
     140:	00023c00 	andeq	r3, r2, r0, lsl #24
     144:	7d000200 	sfmvc	f0, 4, [r0]
     148:	00000008 	andeq	r0, r0, r8
     14c:	00000000 	andeq	r0, r0, r0
     150:	00021400 	andeq	r1, r2, r0, lsl #8
     154:	00021e00 	andeq	r1, r2, r0, lsl #28
     158:	50000100 	andpl	r0, r0, r0, lsl #2
     15c:	0000021e 	andeq	r0, r0, lr, lsl r2
     160:	0000023c 	andeq	r0, r0, ip, lsr r2
     164:	00540001 	subseq	r0, r4, r1
     168:	00000000 	andeq	r0, r0, r0
     16c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     170:	28000002 	stmdacs	r0, {r1}
     174:	01000002 	tsteq	r0, r2
     178:	02305000 	eorseq	r5, r0, #0	; 0x0
     17c:	023a0000 	eorseq	r0, sl, #0	; 0x0
     180:	00010000 	andeq	r0, r1, r0
     184:	00000050 	andeq	r0, r0, r0, asr r0
     188:	00000000 	andeq	r0, r0, r0
     18c:	00023c00 	andeq	r3, r2, r0, lsl #24
     190:	00023e00 	andeq	r3, r2, r0, lsl #28
     194:	5d000100 	stfpls	f0, [r0]
     198:	0000023e 	andeq	r0, r0, lr, lsr r2
     19c:	00000250 	andeq	r0, r0, r0, asr r2
     1a0:	087d0002 	ldmdaeq	sp!, {r1}^
	...
     1ac:	0000023c 	andeq	r0, r0, ip, lsr r2
     1b0:	00000242 	andeq	r0, r0, r2, asr #4
     1b4:	42500001 	subsmi	r0, r0, #1	; 0x1
     1b8:	50000002 	andpl	r0, r0, r2
     1bc:	01000002 	tsteq	r0, r2
     1c0:	00005400 	andeq	r5, r0, r0, lsl #8
     1c4:	00000000 	andeq	r0, r0, r0
     1c8:	02500000 	subseq	r0, r0, #0	; 0x0
     1cc:	02520000 	subseq	r0, r2, #0	; 0x0
     1d0:	00010000 	andeq	r0, r1, r0
     1d4:	0002525d 	andeq	r5, r2, sp, asr r2
     1d8:	00025600 	andeq	r5, r2, r0, lsl #12
     1dc:	7d000200 	sfmvc	f0, 4, [r0]
     1e0:	0002560c 	andeq	r5, r2, ip, lsl #12
     1e4:	00026a00 	andeq	r6, r2, r0, lsl #20
     1e8:	7d000200 	sfmvc	f0, 4, [r0]
     1ec:	00000010 	andeq	r0, r0, r0, lsl r0
     1f0:	00000000 	andeq	r0, r0, r0
     1f4:	00025000 	andeq	r5, r2, r0
     1f8:	00025a00 	andeq	r5, r2, r0, lsl #20
     1fc:	50000100 	andpl	r0, r0, r0, lsl #2
     200:	0000025a 	andeq	r0, r0, sl, asr r2
     204:	0000026a 	andeq	r0, r0, sl, ror #4
     208:	00550001 	subseq	r0, r5, r1
     20c:	00000000 	andeq	r0, r0, r0
     210:	6c000000 	stcvs	0, cr0, [r0], {0}
     214:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
     218:	01000002 	tsteq	r0, r2
     21c:	026e5d00 	rsbeq	r5, lr, #0	; 0x0
     220:	02720000 	rsbseq	r0, r2, #0	; 0x0
     224:	00020000 	andeq	r0, r2, r0
     228:	0272047d 	rsbseq	r0, r2, #2097152000	; 0x7d000000
     22c:	02c00000 	sbceq	r0, r0, #0	; 0x0
     230:	00020000 	andeq	r0, r2, r0
     234:	0000087d 	andeq	r0, r0, sp, ror r8
     238:	00000000 	andeq	r0, r0, r0
     23c:	026c0000 	rsbeq	r0, ip, #0	; 0x0
     240:	02700000 	rsbseq	r0, r0, #0	; 0x0
     244:	00010000 	andeq	r0, r1, r0
     248:	00000050 	andeq	r0, r0, r0, asr r0
     24c:	00000000 	andeq	r0, r0, r0
     250:	0002c000 	andeq	ip, r2, r0
     254:	0002c200 	andeq	ip, r2, r0, lsl #4
     258:	5d000100 	stfpls	f0, [r0]
     25c:	000002c2 	andeq	r0, r0, r2, asr #5
     260:	000002c6 	andeq	r0, r0, r6, asr #5
     264:	047d0002 	ldrbteq	r0, [sp], #-2
     268:	000002c6 	andeq	r0, r0, r6, asr #5
     26c:	00000354 	andeq	r0, r0, r4, asr r3
     270:	087d0002 	ldmdaeq	sp!, {r1}^
	...
     27c:	00000354 	andeq	r0, r0, r4, asr r3
     280:	00000356 	andeq	r0, r0, r6, asr r3
     284:	565d0001 	ldrbpl	r0, [sp], -r1
     288:	98000003 	stmdals	r0, {r0, r1}
     28c:	02000003 	andeq	r0, r0, #3	; 0x3
     290:	00087d00 	andeq	r7, r8, r0, lsl #26
     294:	00000000 	andeq	r0, r0, r0
     298:	54000000 	strpl	r0, [r0]
     29c:	5c000003 	stcpl	0, cr0, [r0], {3}
     2a0:	01000003 	tsteq	r0, r3
     2a4:	035c5000 	cmpeq	ip, #0	; 0x0
     2a8:	03980000 	orrseq	r0, r8, #0	; 0x0
     2ac:	00010000 	andeq	r0, r1, r0
     2b0:	00000054 	andeq	r0, r0, r4, asr r0
     2b4:	00000000 	andeq	r0, r0, r0
     2b8:	00039800 	andeq	r9, r3, r0, lsl #16
     2bc:	00039a00 	andeq	r9, r3, r0, lsl #20
     2c0:	5d000100 	stfpls	f0, [r0]
     2c4:	0000039a 	muleq	r0, sl, r3
     2c8:	0000039e 	muleq	r0, lr, r3
     2cc:	047d0002 	ldrbteq	r0, [sp], #-2
     2d0:	0000039e 	muleq	r0, lr, r3
     2d4:	000003ac 	andeq	r0, r0, ip, lsr #7
     2d8:	087d0002 	ldmdaeq	sp!, {r1}^
	...
     2e4:	000003ac 	andeq	r0, r0, ip, lsr #7
     2e8:	000003ae 	andeq	r0, r0, lr, lsr #7
     2ec:	ae5d0001 	cdpge	0, 5, cr0, cr13, cr1, {0}
     2f0:	b0000003 	andlt	r0, r0, r3
     2f4:	02000003 	andeq	r0, r0, #3	; 0x3
     2f8:	b0107d00 	andslt	r7, r0, r0, lsl #26
     2fc:	2c000003 	stccs	0, cr0, [r0], {3}
     300:	02000004 	andeq	r0, r0, #4	; 0x4
     304:	00207d00 	eoreq	r7, r0, r0, lsl #26
     308:	00000000 	andeq	r0, r0, r0
     30c:	ac000000 	stcge	0, cr0, [r0], {0}
     310:	b4000003 	strlt	r0, [r0], #-3
     314:	01000003 	tsteq	r0, r3
     318:	03b45000 	undefined instruction 0x03b45000
     31c:	042c0000 	strteq	r0, [ip]
     320:	00010000 	andeq	r0, r1, r0
     324:	00000055 	andeq	r0, r0, r5, asr r0
     328:	00000000 	andeq	r0, r0, r0
     32c:	0003ac00 	andeq	sl, r3, r0, lsl #24
     330:	0003ba00 	andeq	fp, r3, r0, lsl #20
     334:	51000100 	tstpl	r0, r0, lsl #2
     338:	000003ba 	strheq	r0, [r0], -sl
     33c:	0000042c 	andeq	r0, r0, ip, lsr #8
     340:	00540001 	subseq	r0, r4, r1
     344:	00000000 	andeq	r0, r0, r0
     348:	2c000000 	stccs	0, cr0, [r0], {0}
     34c:	2e000004 	cdpcs	0, 0, cr0, cr0, cr4, {0}
     350:	01000004 	tsteq	r0, r4
     354:	042e5d00 	strteq	r5, [lr], #-3328
     358:	04320000 	ldrteq	r0, [r2]
     35c:	00020000 	andeq	r0, r2, r0
     360:	0432047d 	ldrteq	r0, [r2], #-1149
     364:	043c0000 	ldrteq	r0, [ip]
     368:	00020000 	andeq	r0, r2, r0
     36c:	0000087d 	andeq	r0, r0, sp, ror r8
     370:	00000000 	andeq	r0, r0, r0
     374:	042c0000 	strteq	r0, [ip]
     378:	04340000 	ldrteq	r0, [r4]
     37c:	00010000 	andeq	r0, r1, r0
     380:	00043450 	andeq	r3, r4, r0, asr r4
     384:	00043800 	andeq	r3, r4, r0, lsl #16
     388:	51000100 	tstpl	r0, r0, lsl #2
	...
     394:	0000043c 	andeq	r0, r0, ip, lsr r4
     398:	0000043e 	andeq	r0, r0, lr, lsr r4
     39c:	3e5d0001 	cdpcc	0, 5, cr0, cr13, cr1, {0}
     3a0:	40000004 	andmi	r0, r0, r4
     3a4:	02000004 	andeq	r0, r0, #4	; 0x4
     3a8:	40107d00 	andsmi	r7, r0, r0, lsl #26
     3ac:	c4000004 	strgt	r0, [r0], #-4
     3b0:	02000004 	andeq	r0, r0, #4	; 0x4
     3b4:	00187d00 	andseq	r7, r8, r0, lsl #26
     3b8:	00000000 	andeq	r0, r0, r0
     3bc:	c4000000 	strgt	r0, [r0]
     3c0:	c6000004 	strgt	r0, [r0], -r4
     3c4:	01000004 	tsteq	r0, r4
     3c8:	04c65d00 	strbeq	r5, [r6], #3328
     3cc:	04cc0000 	strbeq	r0, [ip]
     3d0:	00020000 	andeq	r0, r2, r0
     3d4:	04cc107d 	strbeq	r1, [ip], #125
     3d8:	05160000 	ldreq	r0, [r6]
     3dc:	00020000 	andeq	r0, r2, r0
     3e0:	0000187d 	andeq	r1, r0, sp, ror r8
     3e4:	00000000 	andeq	r0, r0, r0
     3e8:	05180000 	ldreq	r0, [r8]
     3ec:	051a0000 	ldreq	r0, [sl]
     3f0:	00010000 	andeq	r0, r1, r0
     3f4:	00051a5d 	andeq	r1, r5, sp, asr sl
     3f8:	00051c00 	andeq	r1, r5, r0, lsl #24
     3fc:	7d000200 	sfmvc	f0, 4, [r0]
     400:	00051c04 	andeq	r1, r5, r4, lsl #24
     404:	00059c00 	andeq	r9, r5, r0, lsl #24
     408:	7d000200 	sfmvc	f0, 4, [r0]
     40c:	00000008 	andeq	r0, r0, r8
     410:	00000000 	andeq	r0, r0, r0
     414:	00059c00 	andeq	r9, r5, r0, lsl #24
     418:	00059e00 	andeq	r9, r5, r0, lsl #28
     41c:	5d000100 	stfpls	f0, [r0]
     420:	0000059e 	muleq	r0, lr, r5
     424:	000005a0 	andeq	r0, r0, r0, lsr #11
     428:	147d0002 	ldrbtne	r0, [sp], #-2
     42c:	000005a0 	andeq	r0, r0, r0, lsr #11
     430:	00000664 	andeq	r0, r0, r4, ror #12
     434:	187d0002 	ldmdane	sp!, {r1}^
	...
     440:	00000108 	.word	0x00000108
     444:	0000010a 	.word	0x0000010a
     448:	0a5d0001 	.word	0x0a5d0001
     44c:	0c000001 	.word	0x0c000001
     450:	02000001 	.word	0x02000001
     454:	0c047d00 	.word	0x0c047d00
     458:	14000001 	.word	0x14000001
     45c:	02000001 	.word	0x02000001
     460:	00087d00 	.word	0x00087d00
     464:	00000000 	.word	0x00000000
     468:	14000000 	.word	0x14000000
     46c:	16000001 	.word	0x16000001
     470:	01000001 	.word	0x01000001
     474:	01165d00 	.word	0x01165d00
     478:	01180000 	.word	0x01180000
     47c:	00020000 	.word	0x00020000
     480:	0118047d 	.word	0x0118047d
     484:	01200000 	.word	0x01200000
     488:	00020000 	.word	0x00020000
     48c:	0000087d 	.word	0x0000087d
     490:	00000000 	.word	0x00000000
     494:	01200000 	.word	0x01200000
     498:	01220000 	.word	0x01220000
     49c:	00010000 	.word	0x00010000
     4a0:	0001225d 	.word	0x0001225d
     4a4:	00012400 	.word	0x00012400
     4a8:	7d000200 	.word	0x7d000200
     4ac:	00012404 	.word	0x00012404
     4b0:	00012c00 	.word	0x00012c00
     4b4:	7d000200 	.word	0x7d000200
     4b8:	00000008 	.word	0x00000008
	...
     4c4:	00000200 	.word	0x00000200
     4c8:	5d000100 	.word	0x5d000100
     4cc:	00000002 	.word	0x00000002
     4d0:	00000004 	.word	0x00000004
     4d4:	047d0002 	.word	0x047d0002
     4d8:	00000004 	.word	0x00000004
     4dc:	0000000c 	.word	0x0000000c
     4e0:	087d0002 	.word	0x087d0002
	...
     4ec:	0000000c 	.word	0x0000000c
     4f0:	0000000e 	.word	0x0000000e
     4f4:	0e5d0001 	.word	0x0e5d0001
     4f8:	14000000 	.word	0x14000000
     4fc:	02000000 	.word	0x02000000
     500:	14047d00 	.word	0x14047d00
     504:	20000000 	.word	0x20000000
     508:	02000000 	.word	0x02000000
     50c:	00087d00 	.word	0x00087d00
     510:	00000000 	.word	0x00000000
     514:	0c000000 	.word	0x0c000000
     518:	12000000 	.word	0x12000000
     51c:	01000000 	.word	0x01000000
     520:	00125000 	.word	0x00125000
     524:	001c0000 	.word	0x001c0000
     528:	00010000 	.word	0x00010000
     52c:	00000053 	.word	0x00000053
     530:	00000000 	.word	0x00000000
     534:	00002000 	.word	0x00002000
     538:	00002200 	.word	0x00002200
     53c:	5d000100 	.word	0x5d000100
     540:	00000022 	.word	0x00000022
     544:	00000046 	.word	0x00000046
     548:	107d0002 	.word	0x107d0002
	...
     554:	00000020 	.word	0x00000020
     558:	0000002a 	.word	0x0000002a
     55c:	2a500001 	.word	0x2a500001
     560:	46000000 	.word	0x46000000
     564:	01000000 	.word	0x01000000
     568:	00005600 	.word	0x00005600
     56c:	00000000 	.word	0x00000000
     570:	00200000 	.word	0x00200000
     574:	002a0000 	.word	0x002a0000
     578:	00010000 	.word	0x00010000
     57c:	00002a51 	.word	0x00002a51
     580:	00004600 	.word	0x00004600
     584:	55000100 	.word	0x55000100
	...
     590:	00000048 	.word	0x00000048
     594:	0000004a 	.word	0x0000004a
     598:	4a5d0001 	.word	0x4a5d0001
     59c:	64000000 	.word	0x64000000
     5a0:	02000000 	.word	0x02000000
     5a4:	00107d00 	.word	0x00107d00
     5a8:	00000000 	.word	0x00000000
     5ac:	48000000 	.word	0x48000000
     5b0:	52000000 	.word	0x52000000
     5b4:	01000000 	.word	0x01000000
     5b8:	00525000 	.word	0x00525000
     5bc:	00640000 	.word	0x00640000
     5c0:	00010000 	.word	0x00010000
     5c4:	00000056 	.word	0x00000056
     5c8:	00000000 	.word	0x00000000
     5cc:	00004800 	.word	0x00004800
     5d0:	00005200 	.word	0x00005200
     5d4:	51000100 	.word	0x51000100
     5d8:	00000052 	.word	0x00000052
     5dc:	00000064 	.word	0x00000064
     5e0:	00550001 	.word	0x00550001
     5e4:	00000000 	.word	0x00000000
     5e8:	64000000 	.word	0x64000000
     5ec:	66000000 	.word	0x66000000
     5f0:	01000000 	.word	0x01000000
     5f4:	00665d00 	.word	0x00665d00
     5f8:	00680000 	.word	0x00680000
     5fc:	00020000 	.word	0x00020000
     600:	0068047d 	.word	0x0068047d
     604:	00700000 	.word	0x00700000
     608:	00020000 	.word	0x00020000
     60c:	0000087d 	.word	0x0000087d
     610:	00000000 	.word	0x00000000
     614:	00700000 	.word	0x00700000
     618:	00720000 	.word	0x00720000
     61c:	00010000 	.word	0x00010000
     620:	0000725d 	.word	0x0000725d
     624:	00007400 	.word	0x00007400
     628:	7d000200 	.word	0x7d000200
     62c:	00007404 	.word	0x00007404
     630:	00007c00 	.word	0x00007c00
     634:	7d000200 	.word	0x7d000200
     638:	00000008 	.word	0x00000008
     63c:	00000000 	.word	0x00000000
     640:	00007c00 	.word	0x00007c00
     644:	00007e00 	.word	0x00007e00
     648:	5d000100 	.word	0x5d000100
     64c:	0000007e 	.word	0x0000007e
     650:	00000082 	.word	0x00000082
     654:	047d0002 	.word	0x047d0002
     658:	00000082 	.word	0x00000082
     65c:	0000008c 	.word	0x0000008c
     660:	087d0002 	.word	0x087d0002
	...
     66c:	0000007c 	.word	0x0000007c
     670:	00000080 	.word	0x00000080
     674:	00500001 	.word	0x00500001
     678:	00000000 	.word	0x00000000
     67c:	7c000000 	.word	0x7c000000
     680:	86000000 	.word	0x86000000
     684:	01000000 	.word	0x01000000
     688:	00005100 	.word	0x00005100
     68c:	00000000 	.word	0x00000000
     690:	003c0000 	.word	0x003c0000
     694:	00480000 	.word	0x00480000
     698:	00010000 	.word	0x00010000
     69c:	00000050 	.word	0x00000050
     6a0:	00000000 	.word	0x00000000
     6a4:	00005c00 	.word	0x00005c00
     6a8:	00006200 	.word	0x00006200
     6ac:	50000100 	.word	0x50000100
	...
     6b8:	00000068 	.word	0x00000068
     6bc:	0000006c 	.word	0x0000006c
     6c0:	00500001 	.word	0x00500001
     6c4:	00000000 	.word	0x00000000
     6c8:	70000000 	.word	0x70000000
     6cc:	72000000 	.word	0x72000000
     6d0:	01000000 	.word	0x01000000
     6d4:	00005000 	.word	0x00005000
     6d8:	00000000 	.word	0x00000000
     6dc:	00740000 	.word	0x00740000
     6e0:	00780000 	.word	0x00780000
     6e4:	00010000 	.word	0x00010000
     6e8:	00000050 	.word	0x00000050
     6ec:	00000000 	.word	0x00000000
     6f0:	00007800 	.word	0x00007800
     6f4:	00007a00 	.word	0x00007a00
     6f8:	50000100 	.word	0x50000100
	...
     704:	0000007c 	.word	0x0000007c
     708:	0000007e 	.word	0x0000007e
     70c:	7e5d0001 	.word	0x7e5d0001
     710:	82000000 	.word	0x82000000
     714:	02000000 	.word	0x02000000
     718:	820c7d00 	.word	0x820c7d00
     71c:	e4000000 	.word	0xe4000000
     720:	02000001 	.word	0x02000001
     724:	00107d00 	.word	0x00107d00
     728:	00000000 	.word	0x00000000
     72c:	d0000000 	.word	0xd0000000
     730:	de000000 	.word	0xde000000
     734:	01000000 	.word	0x01000000
     738:	00f25000 	.word	0x00f25000
     73c:	014e0000 	.word	0x014e0000
     740:	00010000 	.word	0x00010000
     744:	00018650 	.word	0x00018650
     748:	00018e00 	.word	0x00018e00
     74c:	51000100 	.word	0x51000100
     750:	0000018e 	.word	0x0000018e
     754:	00000196 	.word	0x00000196
     758:	96500001 	.word	0x96500001
     75c:	b8000001 	.word	0xb8000001
     760:	01000001 	.word	0x01000001
     764:	01c85100 	.word	0x01c85100
     768:	01e40000 	.word	0x01e40000
     76c:	00010000 	.word	0x00010000
     770:	00000050 	.word	0x00000050
     774:	00000000 	.word	0x00000000
     778:	0000ec00 	.word	0x0000ec00
     77c:	0000f200 	.word	0x0000f200
     780:	51000100 	.word	0x51000100
     784:	0000011a 	.word	0x0000011a
     788:	00000164 	.word	0x00000164
     78c:	8e510001 	.word	0x8e510001
     790:	96000001 	.word	0x96000001
     794:	01000001 	.word	0x01000001
     798:	01c85100 	.word	0x01c85100
     79c:	01e40000 	.word	0x01e40000
     7a0:	00010000 	.word	0x00010000
     7a4:	00000051 	.word	0x00000051
     7a8:	00000000 	.word	0x00000000
     7ac:	00018a00 	.word	0x00018a00
     7b0:	00018e00 	.word	0x00018e00
     7b4:	52000100 	.word	0x52000100
     7b8:	00000196 	.word	0x00000196
     7bc:	000001ae 	.word	0x000001ae
     7c0:	00520001 	.word	0x00520001
     7c4:	00000000 	.word	0x00000000
     7c8:	e4000000 	.word	0xe4000000
     7cc:	e6000001 	.word	0xe6000001
     7d0:	01000001 	.word	0x01000001
     7d4:	01e65d00 	.word	0x01e65d00
     7d8:	01ea0000 	.word	0x01ea0000
     7dc:	00020000 	.word	0x00020000
     7e0:	01ea0c7d 	.word	0x01ea0c7d
     7e4:	02a80000 	.word	0x02a80000
     7e8:	00020000 	.word	0x00020000
     7ec:	0000107d 	.word	0x0000107d
     7f0:	00000000 	.word	0x00000000
     7f4:	022e0000 	.word	0x022e0000
     7f8:	025c0000 	.word	0x025c0000
     7fc:	00010000 	.word	0x00010000
     800:	00025c51 	.word	0x00025c51
     804:	00026800 	.word	0x00026800
     808:	51000100 	.word	0x51000100
	...
     814:	00000230 	.word	0x00000230
     818:	0000024a 	.word	0x0000024a
     81c:	00520001 	.word	0x00520001
     820:	00000000 	.word	0x00000000
     824:	a8000000 	.word	0xa8000000
     828:	aa000002 	.word	0xaa000002
     82c:	01000002 	.word	0x01000002
     830:	02aa5d00 	.word	0x02aa5d00
     834:	02c80000 	.word	0x02c80000
     838:	00020000 	.word	0x00020000
     83c:	0000087d 	.word	0x0000087d
     840:	00000000 	.word	0x00000000
     844:	02c80000 	.word	0x02c80000
     848:	02ca0000 	.word	0x02ca0000
     84c:	00010000 	.word	0x00010000
     850:	0002ca5d 	.word	0x0002ca5d
     854:	0002ce00 	.word	0x0002ce00
     858:	7d000200 	.word	0x7d000200
     85c:	0002ce04 	.word	0x0002ce04
     860:	00030000 	.word	0x00030000
     864:	7d000200 	.word	0x7d000200
     868:	00000008 	.word	0x00000008
     86c:	00000000 	.word	0x00000000
     870:	0002c800 	.word	0x0002c800
     874:	0002f000 	.word	0x0002f000
     878:	50000100 	.word	0x50000100
     87c:	000002f4 	.word	0x000002f4
     880:	00000300 	.word	0x00000300
     884:	00500001 	.word	0x00500001
     888:	00000000 	.word	0x00000000
     88c:	c8000000 	.word	0xc8000000
     890:	f0000002 	.word	0xf0000002
     894:	01000002 	.word	0x01000002
     898:	02f45100 	.word	0x02f45100
     89c:	03000000 	.word	0x03000000
     8a0:	00010000 	.word	0x00010000
     8a4:	00000051 	.word	0x00000051
     8a8:	00000000 	.word	0x00000000
     8ac:	0002c800 	.word	0x0002c800
     8b0:	0002d400 	.word	0x0002d400
     8b4:	52000100 	.word	0x52000100
     8b8:	000002d4 	.word	0x000002d4
     8bc:	000002f0 	.word	0x000002f0
     8c0:	f45c0001 	.word	0xf45c0001
     8c4:	00000002 	.word	0x00000002
     8c8:	01000003 	.word	0x01000003
     8cc:	00005c00 	.word	0x00005c00
     8d0:	00000000 	.word	0x00000000
     8d4:	03000000 	.word	0x03000000
     8d8:	03020000 	.word	0x03020000
     8dc:	00010000 	.word	0x00010000
     8e0:	0003025d 	.word	0x0003025d
     8e4:	00030600 	.word	0x00030600
     8e8:	7d000200 	.word	0x7d000200
     8ec:	00030604 	.word	0x00030604
     8f0:	00033c00 	.word	0x00033c00
     8f4:	7d000200 	.word	0x7d000200
     8f8:	00000008 	.word	0x00000008
     8fc:	00000000 	.word	0x00000000
     900:	00030000 	.word	0x00030000
     904:	00031e00 	.word	0x00031e00
     908:	50000100 	.word	0x50000100
     90c:	0000032e 	.word	0x0000032e
     910:	0000033c 	.word	0x0000033c
     914:	00500001 	.word	0x00500001
	...
     920:	1e000003 	.word	0x1e000003
     924:	01000003 	.word	0x01000003
     928:	032e5100 	.word	0x032e5100
     92c:	033c0000 	.word	0x033c0000
     930:	00010000 	.word	0x00010000
     934:	00000051 	.word	0x00000051
     938:	00000000 	.word	0x00000000
     93c:	00032200 	.word	0x00032200
     940:	00032e00 	.word	0x00032e00
     944:	52000100 	.word	0x52000100
	...
     950:	0000033c 	.word	0x0000033c
     954:	0000033e 	.word	0x0000033e
     958:	3e5d0001 	.word	0x3e5d0001
     95c:	42000003 	.word	0x42000003
     960:	02000003 	.word	0x02000003
     964:	42047d00 	.word	0x42047d00
     968:	6c000003 	.word	0x6c000003
     96c:	02000003 	.word	0x02000003
     970:	00087d00 	.word	0x00087d00
     974:	00000000 	.word	0x00000000
     978:	3c000000 	.word	0x3c000000
     97c:	5e000003 	.word	0x5e000003
     980:	01000003 	.word	0x01000003
     984:	03625000 	.word	0x03625000
     988:	036c0000 	.word	0x036c0000
     98c:	00010000 	.word	0x00010000
     990:	00000050 	.word	0x00000050
     994:	00000000 	.word	0x00000000
     998:	00033c00 	.word	0x00033c00
     99c:	00035e00 	.word	0x00035e00
     9a0:	51000100 	.word	0x51000100
     9a4:	00000362 	.word	0x00000362
     9a8:	0000036c 	.word	0x0000036c
     9ac:	00510001 	.word	0x00510001
     9b0:	00000000 	.word	0x00000000
     9b4:	3c000000 	.word	0x3c000000
     9b8:	48000003 	.word	0x48000003
     9bc:	01000003 	.word	0x01000003
     9c0:	03485200 	.word	0x03485200
     9c4:	035e0000 	.word	0x035e0000
     9c8:	00010000 	.word	0x00010000
     9cc:	0003625c 	.word	0x0003625c
     9d0:	00036c00 	.word	0x00036c00
     9d4:	5c000100 	.word	0x5c000100
	...
     9e0:	0000036c 	.word	0x0000036c
     9e4:	0000036e 	.word	0x0000036e
     9e8:	6e5d0001 	.word	0x6e5d0001
     9ec:	72000003 	.word	0x72000003
     9f0:	02000003 	.word	0x02000003
     9f4:	72047d00 	.word	0x72047d00
     9f8:	a4000003 	.word	0xa4000003
     9fc:	02000003 	.word	0x02000003
     a00:	00087d00 	.word	0x00087d00
     a04:	00000000 	.word	0x00000000
     a08:	6c000000 	.word	0x6c000000
     a0c:	8c000003 	.word	0x8c000003
     a10:	01000003 	.word	0x01000003
     a14:	03945000 	.word	0x03945000
     a18:	03a40000 	.word	0x03a40000
     a1c:	00010000 	.word	0x00010000
     a20:	00000050 	.word	0x00000050
     a24:	00000000 	.word	0x00000000
     a28:	00036c00 	.word	0x00036c00
     a2c:	00038c00 	.word	0x00038c00
     a30:	51000100 	.word	0x51000100
     a34:	00000394 	.word	0x00000394
     a38:	000003a4 	.word	0x000003a4
     a3c:	00510001 	.word	0x00510001
     a40:	00000000 	.word	0x00000000
     a44:	a4000000 	.word	0xa4000000
     a48:	a6000003 	.word	0xa6000003
     a4c:	01000003 	.word	0x01000003
     a50:	03a65d00 	.word	0x03a65d00
     a54:	03aa0000 	.word	0x03aa0000
     a58:	00020000 	.word	0x00020000
     a5c:	03aa047d 	.word	0x03aa047d
     a60:	03cc0000 	.word	0x03cc0000
     a64:	00020000 	.word	0x00020000
     a68:	0000087d 	.word	0x0000087d
     a6c:	00000000 	.word	0x00000000
     a70:	03a40000 	.word	0x03a40000
     a74:	03be0000 	.word	0x03be0000
     a78:	00010000 	.word	0x00010000
     a7c:	0003c250 	.word	0x0003c250
     a80:	0003cc00 	.word	0x0003cc00
     a84:	50000100 	.word	0x50000100
	...
     a90:	000003cc 	.word	0x000003cc
     a94:	000003ce 	.word	0x000003ce
     a98:	ce5d0001 	.word	0xce5d0001
     a9c:	d0000003 	.word	0xd0000003
     aa0:	02000003 	.word	0x02000003
     aa4:	d0047d00 	.word	0xd0047d00
     aa8:	d8000003 	.word	0xd8000003
     aac:	02000003 	.word	0x02000003
     ab0:	00087d00 	.word	0x00087d00
     ab4:	00000000 	.word	0x00000000
     ab8:	d8000000 	.word	0xd8000000
     abc:	da000003 	.word	0xda000003
     ac0:	01000003 	.word	0x01000003
     ac4:	03da5d00 	.word	0x03da5d00
     ac8:	03e40000 	.word	0x03e40000
     acc:	00020000 	.word	0x00020000
     ad0:	03e4047d 	.word	0x03e4047d
     ad4:	040c0000 	.word	0x040c0000
     ad8:	00020000 	.word	0x00020000
     adc:	0000087d 	.word	0x0000087d
     ae0:	00000000 	.word	0x00000000
     ae4:	03d80000 	.word	0x03d80000
     ae8:	03ea0000 	.word	0x03ea0000
     aec:	00010000 	.word	0x00010000
     af0:	00000050 	.word	0x00000050
     af4:	00000000 	.word	0x00000000
     af8:	0003d800 	.word	0x0003d800
     afc:	0003de00 	.word	0x0003de00
     b00:	51000100 	.word	0x51000100
	...
     b10:	0000000e 	.word	0x0000000e
     b14:	00500001 	.word	0x00500001
     b18:	00000000 	.word	0x00000000
     b1c:	18000000 	.word	0x18000000
     b20:	26000000 	.word	0x26000000
     b24:	01000000 	.word	0x01000000
     b28:	00005000 	.word	0x00005000
     b2c:	00000000 	.word	0x00000000
     b30:	00300000 	.word	0x00300000
     b34:	003e0000 	.word	0x003e0000
     b38:	00010000 	.word	0x00010000
     b3c:	00000050 	.word	0x00000050
     b40:	00000000 	.word	0x00000000
     b44:	0000c400 	.word	0x0000c400
     b48:	0000d000 	.word	0x0000d000
     b4c:	50000100 	.word	0x50000100
     b50:	000000d2 	.word	0x000000d2
     b54:	000000de 	.word	0x000000de
     b58:	00500001 	.word	0x00500001
     b5c:	00000000 	.word	0x00000000
     b60:	d0000000 	.word	0xd0000000
     b64:	d2000000 	.word	0xd2000000
     b68:	01000000 	.word	0x01000000
     b6c:	00de5000 	.word	0x00de5000
     b70:	00de0000 	.word	0x00de0000
     b74:	00010000 	.word	0x00010000
     b78:	00000050 	.word	0x00000050
     b7c:	00000000 	.word	0x00000000
     b80:	0000fc00 	.word	0x0000fc00
     b84:	0000fe00 	.word	0x0000fe00
     b88:	50000100 	.word	0x50000100
     b8c:	00000108 	.word	0x00000108
     b90:	0000010a 	.word	0x0000010a
     b94:	16500001 	.word	0x16500001
     b98:	16000001 	.word	0x16000001
     b9c:	01000001 	.word	0x01000001
     ba0:	00005000 	.word	0x00005000
     ba4:	00000000 	.word	0x00000000
     ba8:	011c0000 	.word	0x011c0000
     bac:	011e0000 	.word	0x011e0000
     bb0:	00010000 	.word	0x00010000
     bb4:	00011e5d 	.word	0x00011e5d
     bb8:	00012200 	.word	0x00012200
     bbc:	7d000200 	.word	0x7d000200
     bc0:	00012208 	.word	0x00012208
     bc4:	0001b000 	.word	0x0001b000
     bc8:	7d000200 	.word	0x7d000200
     bcc:	00000010 	.word	0x00000010
     bd0:	00000000 	.word	0x00000000
     bd4:	00011c00 	.word	0x00011c00
     bd8:	00012c00 	.word	0x00012c00
     bdc:	50000100 	.word	0x50000100
     be0:	0000012c 	.word	0x0000012c
     be4:	000001b0 	.word	0x000001b0
     be8:	00510001 	.word	0x00510001
     bec:	00000000 	.word	0x00000000
     bf0:	2e000000 	.word	0x2e000000
     bf4:	30000001 	.word	0x30000001
     bf8:	01000001 	.word	0x01000001
     bfc:	013a5000 	.word	0x013a5000
     c00:	013c0000 	.word	0x013c0000
     c04:	00010000 	.word	0x00010000
     c08:	00014850 	.word	0x00014850
     c0c:	0001a800 	.word	0x0001a800
     c10:	50000100 	.word	0x50000100
	...
     c1c:	0000014a 	.word	0x0000014a
     c20:	0000014c 	.word	0x0000014c
     c24:	7c910002 	.word	0x7c910002
     c28:	0000014c 	.word	0x0000014c
     c2c:	00000152 	.word	0x00000152
     c30:	047d0002 	.word	0x047d0002
     c34:	00000152 	.word	0x00000152
     c38:	00000158 	.word	0x00000158
     c3c:	7c910002 	.word	0x7c910002
     c40:	00000158 	.word	0x00000158
     c44:	0000015e 	.word	0x0000015e
     c48:	047d0002 	.word	0x047d0002
     c4c:	0000015e 	.word	0x0000015e
     c50:	00000186 	.word	0x00000186
     c54:	7c910002 	.word	0x7c910002
     c58:	0000018e 	.word	0x0000018e
     c5c:	000001b0 	.word	0x000001b0
     c60:	7c910002 	.word	0x7c910002
	...
     c6c:	000001b0 	.word	0x000001b0
     c70:	000001b2 	.word	0x000001b2
     c74:	b25d0001 	.word	0xb25d0001
     c78:	b8000001 	.word	0xb8000001
     c7c:	02000001 	.word	0x02000001
     c80:	b8147d00 	.word	0xb8147d00
     c84:	0c000001 	.word	0x0c000001
     c88:	02000002 	.word	0x02000002
     c8c:	00187d00 	.word	0x00187d00
     c90:	00000000 	.word	0x00000000
     c94:	b0000000 	.word	0xb0000000
     c98:	c4000001 	.word	0xc4000001
     c9c:	01000001 	.word	0x01000001
     ca0:	01c45000 	.word	0x01c45000
     ca4:	020c0000 	.word	0x020c0000
     ca8:	00010000 	.word	0x00010000
     cac:	00000055 	.word	0x00000055
     cb0:	00000000 	.word	0x00000000
     cb4:	0001b000 	.word	0x0001b000
     cb8:	0001cc00 	.word	0x0001cc00
     cbc:	51000100 	.word	0x51000100
     cc0:	000001cc 	.word	0x000001cc
     cc4:	0000020c 	.word	0x0000020c
     cc8:	00560001 	.word	0x00560001
     ccc:	00000000 	.word	0x00000000
     cd0:	b0000000 	.word	0xb0000000
     cd4:	cc000001 	.word	0xcc000001
     cd8:	01000001 	.word	0x01000001
     cdc:	01cc5200 	.word	0x01cc5200
     ce0:	020c0000 	.word	0x020c0000
     ce4:	00010000 	.word	0x00010000
     ce8:	00000057 	.word	0x00000057
     cec:	00000000 	.word	0x00000000
     cf0:	0001ce00 	.word	0x0001ce00
     cf4:	0001ea00 	.word	0x0001ea00
     cf8:	50000100 	.word	0x50000100
     cfc:	000001f0 	.word	0x000001f0
     d00:	000001fc 	.word	0x000001fc
     d04:	00500001 	.word	0x00500001
     d08:	00000000 	.word	0x00000000
     d0c:	0c000000 	.word	0x0c000000
     d10:	0e000002 	.word	0x0e000002
     d14:	01000002 	.word	0x01000002
     d18:	020e5d00 	.word	0x020e5d00
     d1c:	02120000 	.word	0x02120000
     d20:	00020000 	.word	0x00020000
     d24:	02120c7d 	.word	0x02120c7d
     d28:	02a80000 	.word	0x02a80000
     d2c:	00020000 	.word	0x00020000
     d30:	0000107d 	.word	0x0000107d
     d34:	00000000 	.word	0x00000000
     d38:	020c0000 	.word	0x020c0000
     d3c:	02160000 	.word	0x02160000
     d40:	00010000 	.word	0x00010000
     d44:	00021650 	.word	0x00021650
     d48:	0002a800 	.word	0x0002a800
     d4c:	55000100 	.word	0x55000100
	...
     d58:	0000021c 	.word	0x0000021c
     d5c:	00000226 	.word	0x00000226
     d60:	46500001 	.word	0x46500001
     d64:	72000002 	.word	0x72000002
     d68:	01000002 	.word	0x01000002
     d6c:	02785000 	.word	0x02785000
     d70:	02980000 	.word	0x02980000
     d74:	00010000 	.word	0x00010000
     d78:	00000050 	.word	0x00000050
     d7c:	00000000 	.word	0x00000000
     d80:	0002a800 	.word	0x0002a800
     d84:	0002aa00 	.word	0x0002aa00
     d88:	5d000100 	.word	0x5d000100
     d8c:	000002aa 	.word	0x000002aa
     d90:	00000368 	.word	0x00000368
     d94:	087d0002 	.word	0x087d0002
	...
     da0:	000002a8 	.word	0x000002a8
     da4:	000002ae 	.word	0x000002ae
     da8:	ae500001 	.word	0xae500001
     dac:	68000002 	.word	0x68000002
     db0:	01000003 	.word	0x01000003
     db4:	00005400 	.word	0x00005400
     db8:	00000000 	.word	0x00000000
     dbc:	02ca0000 	.word	0x02ca0000
     dc0:	02de0000 	.word	0x02de0000
     dc4:	00010000 	.word	0x00010000
     dc8:	0002de51 	.word	0x0002de51
     dcc:	00030200 	.word	0x00030200
     dd0:	51000100 	.word	0x51000100
     dd4:	00000302 	.word	0x00000302
     dd8:	00000326 	.word	0x00000326
     ddc:	26510001 	.word	0x26510001
     de0:	46000003 	.word	0x46000003
     de4:	01000003 	.word	0x01000003
     de8:	03465100 	.word	0x03465100
     dec:	034c0000 	.word	0x034c0000
     df0:	00010000 	.word	0x00010000
     df4:	00000051 	.word	0x00000051
     df8:	00000000 	.word	0x00000000
     dfc:	0002e400 	.word	0x0002e400
     e00:	00030200 	.word	0x00030200
     e04:	52000100 	.word	0x52000100
     e08:	00000302 	.word	0x00000302
     e0c:	00000308 	.word	0x00000308
     e10:	00520001 	.word	0x00520001
     e14:	00000000 	.word	0x00000000
     e18:	08000000 	.word	0x08000000
     e1c:	26000003 	.word	0x26000003
     e20:	01000003 	.word	0x01000003
     e24:	03265200 	.word	0x03265200
     e28:	03280000 	.word	0x03280000
     e2c:	00010000 	.word	0x00010000
     e30:	00000052 	.word	0x00000052
     e34:	00000000 	.word	0x00000000
     e38:	00032800 	.word	0x00032800
     e3c:	00034600 	.word	0x00034600
     e40:	52000100 	.word	0x52000100
     e44:	00000346 	.word	0x00000346
     e48:	00000352 	.word	0x00000352
     e4c:	00520001 	.word	0x00520001
     e50:	00000000 	.word	0x00000000
     e54:	b4000000 	.word	0xb4000000
     e58:	d8000002 	.word	0xd8000002
     e5c:	01000002 	.word	0x01000002
     e60:	02de5000 	.word	0x02de5000
     e64:	02fc0000 	.word	0x02fc0000
     e68:	00010000 	.word	0x00010000
     e6c:	00030250 	.word	0x00030250
     e70:	00032000 	.word	0x00032000
     e74:	50000100 	.word	0x50000100
     e78:	00000326 	.word	0x00000326
     e7c:	00000340 	.word	0x00000340
     e80:	46500001 	.word	0x46500001
     e84:	58000003 	.word	0x58000003
     e88:	01000003 	.word	0x01000003
     e8c:	00005000 	.word	0x00005000
     e90:	00000000 	.word	0x00000000
     e94:	03680000 	.word	0x03680000
     e98:	036a0000 	.word	0x036a0000
     e9c:	00010000 	.word	0x00010000
     ea0:	00036a5d 	.word	0x00036a5d
     ea4:	0003ac00 	.word	0x0003ac00
     ea8:	7d000200 	.word	0x7d000200
     eac:	00000010 	.word	0x00000010
     eb0:	00000000 	.word	0x00000000
     eb4:	00036800 	.word	0x00036800
     eb8:	00036e00 	.word	0x00036e00
     ebc:	50000100 	.word	0x50000100
     ec0:	0000036e 	.word	0x0000036e
     ec4:	000003ac 	.word	0x000003ac
     ec8:	00560001 	.word	0x00560001
     ecc:	00000000 	.word	0x00000000
     ed0:	68000000 	.word	0x68000000
     ed4:	74000003 	.word	0x74000003
     ed8:	01000003 	.word	0x01000003
     edc:	03745100 	.word	0x03745100
     ee0:	03ac0000 	.word	0x03ac0000
     ee4:	00010000 	.word	0x00010000
     ee8:	00000055 	.word	0x00000055
     eec:	00000000 	.word	0x00000000
     ef0:	00037600 	.word	0x00037600
     ef4:	00037e00 	.word	0x00037e00
     ef8:	50000100 	.word	0x50000100
     efc:	00000396 	.word	0x00000396
     f00:	000003a2 	.word	0x000003a2
     f04:	00500001 	.word	0x00500001
     f08:	00000000 	.word	0x00000000
     f0c:	ac000000 	.word	0xac000000
     f10:	ae000003 	.word	0xae000003
     f14:	01000003 	.word	0x01000003
     f18:	03ae5d00 	.word	0x03ae5d00
     f1c:	03e40000 	.word	0x03e40000
     f20:	00020000 	.word	0x00020000
     f24:	0000107d 	.word	0x0000107d
     f28:	00000000 	.word	0x00000000
     f2c:	03ac0000 	.word	0x03ac0000
     f30:	03b20000 	.word	0x03b20000
     f34:	00010000 	.word	0x00010000
     f38:	0003b250 	.word	0x0003b250
     f3c:	0003e400 	.word	0x0003e400
     f40:	56000100 	.word	0x56000100
	...
     f4c:	000003ac 	.word	0x000003ac
     f50:	000003b8 	.word	0x000003b8
     f54:	b8510001 	.word	0xb8510001
     f58:	e4000003 	.word	0xe4000003
     f5c:	01000003 	.word	0x01000003
     f60:	00005500 	.word	0x00005500
     f64:	00000000 	.word	0x00000000
     f68:	03ba0000 	.word	0x03ba0000
     f6c:	03c00000 	.word	0x03c00000
     f70:	00010000 	.word	0x00010000
     f74:	0003d050 	.word	0x0003d050
     f78:	0003dc00 	.word	0x0003dc00
     f7c:	50000100 	.word	0x50000100
	...
     f88:	000003e4 	.word	0x000003e4
     f8c:	000003e6 	.word	0x000003e6
     f90:	e65d0001 	.word	0xe65d0001
     f94:	2c000003 	.word	0x2c000003
     f98:	02000004 	.word	0x02000004
     f9c:	00107d00 	.word	0x00107d00
     fa0:	00000000 	.word	0x00000000
     fa4:	e4000000 	.word	0xe4000000
     fa8:	ea000003 	.word	0xea000003
     fac:	01000003 	.word	0x01000003
     fb0:	03ea5000 	.word	0x03ea5000
     fb4:	042c0000 	.word	0x042c0000
     fb8:	00010000 	.word	0x00010000
     fbc:	00000056 	.word	0x00000056
     fc0:	00000000 	.word	0x00000000
     fc4:	0003e400 	.word	0x0003e400
     fc8:	0003f000 	.word	0x0003f000
     fcc:	51000100 	.word	0x51000100
     fd0:	000003f0 	.word	0x000003f0
     fd4:	0000042c 	.word	0x0000042c
     fd8:	00550001 	.word	0x00550001
     fdc:	00000000 	.word	0x00000000
     fe0:	f2000000 	.word	0xf2000000
     fe4:	f8000003 	.word	0xf8000003
     fe8:	01000003 	.word	0x01000003
     fec:	040a5000 	.word	0x040a5000
     ff0:	04120000 	.word	0x04120000
     ff4:	00010000 	.word	0x00010000
     ff8:	00041650 	.word	0x00041650
     ffc:	00042400 	.word	0x00042400
    1000:	50000100 	.word	0x50000100
	...
    100c:	0000042c 	.word	0x0000042c
    1010:	0000042e 	.word	0x0000042e
    1014:	2e5d0001 	.word	0x2e5d0001
    1018:	a4000004 	.word	0xa4000004
    101c:	02000004 	.word	0x02000004
    1020:	00087d00 	.word	0x00087d00
    1024:	00000000 	.word	0x00000000
    1028:	38000000 	.word	0x38000000
    102c:	42000004 	.word	0x42000004
    1030:	01000004 	.word	0x01000004
    1034:	04625000 	.word	0x04625000
    1038:	04800000 	.word	0x04800000
    103c:	00010000 	.word	0x00010000
    1040:	00048650 	.word	0x00048650
    1044:	00049400 	.word	0x00049400
    1048:	50000100 	.word	0x50000100
	...
    1054:	000004a4 	.word	0x000004a4
    1058:	000004a6 	.word	0x000004a6
    105c:	a65d0001 	.word	0xa65d0001
    1060:	e0000004 	.word	0xe0000004
    1064:	02000004 	.word	0x02000004
    1068:	00087d00 	.word	0x00087d00
    106c:	00000000 	.word	0x00000000
    1070:	b0000000 	.word	0xb0000000
    1074:	c0000004 	.word	0xc0000004
    1078:	01000004 	.word	0x01000004
    107c:	04ce5000 	.word	0x04ce5000
    1080:	04da0000 	.word	0x04da0000
    1084:	00010000 	.word	0x00010000
    1088:	00000050 	.word	0x00000050
    108c:	00000000 	.word	0x00000000
    1090:	0004e000 	.word	0x0004e000
    1094:	0004e200 	.word	0x0004e200
    1098:	5d000100 	.word	0x5d000100
    109c:	000004e2 	.word	0x000004e2
    10a0:	000004e6 	.word	0x000004e6
    10a4:	0c7d0002 	.word	0x0c7d0002
    10a8:	000004e6 	.word	0x000004e6
    10ac:	00000528 	.word	0x00000528
    10b0:	107d0002 	.word	0x107d0002
	...
    10bc:	000004e0 	.word	0x000004e0
    10c0:	000004ea 	.word	0x000004ea
    10c4:	ea500001 	.word	0xea500001
    10c8:	28000004 	.word	0x28000004
    10cc:	01000005 	.word	0x01000005
    10d0:	00005500 	.word	0x00005500
    10d4:	00000000 	.word	0x00000000
    10d8:	04f00000 	.word	0x04f00000
    10dc:	04f80000 	.word	0x04f80000
    10e0:	00010000 	.word	0x00010000
    10e4:	00051250 	.word	0x00051250
    10e8:	00051e00 	.word	0x00051e00
    10ec:	50000100 	.word	0x50000100
	...
    10fc:	00000002 	.word	0x00000002
    1100:	025d0001 	.word	0x025d0001
    1104:	1c000000 	.word	0x1c000000
    1108:	02000000 	.word	0x02000000
    110c:	1c147d00 	.word	0x1c147d00
    1110:	a6000000 	.word	0xa6000000
    1114:	02000000 	.word	0x02000000
    1118:	00207d00 	.word	0x00207d00
	...
    1124:	22000000 	.word	0x22000000
    1128:	01000000 	.word	0x01000000
    112c:	005c5100 	.word	0x005c5100
    1130:	00640000 	.word	0x00640000
    1134:	00010000 	.word	0x00010000
    1138:	0000a251 	.word	0x0000a251
    113c:	0000a600 	.word	0x0000a600
    1140:	51000100 	.word	0x51000100
	...
    114c:	00000022 	.word	0x00000022
    1150:	00000034 	.word	0x00000034
    1154:	54530001 	.word	0x54530001
    1158:	6a000000 	.word	0x6a000000
    115c:	01000000 	.word	0x01000000
    1160:	006e5300 	.word	0x006e5300
    1164:	007a0000 	.word	0x007a0000
    1168:	00010000 	.word	0x00010000
    116c:	00009a53 	.word	0x00009a53
    1170:	0000a600 	.word	0x0000a600
    1174:	53000100 	.word	0x53000100
	...
    1180:	000000b8 	.word	0x000000b8
    1184:	000000c2 	.word	0x000000c2
    1188:	00500001 	.word	0x00500001
    118c:	00000000 	.word	0x00000000
    1190:	c4000000 	.word	0xc4000000
    1194:	c6000000 	.word	0xc6000000
    1198:	01000000 	.word	0x01000000
    119c:	00005000 	.word	0x00005000
    11a0:	00000000 	.word	0x00000000
    11a4:	00cc0000 	.word	0x00cc0000
    11a8:	00d60000 	.word	0x00d60000
    11ac:	00010000 	.word	0x00010000
    11b0:	00000050 	.word	0x00000050
    11b4:	00000000 	.word	0x00000000
    11b8:	0000d800 	.word	0x0000d800
    11bc:	0000da00 	.word	0x0000da00
    11c0:	50000100 	.word	0x50000100
	...
    11cc:	00000108 	.word	0x00000108
    11d0:	00000118 	.word	0x00000118
    11d4:	00510001 	.word	0x00510001
    11d8:	00000000 	.word	0x00000000
    11dc:	10000000 	.word	0x10000000
    11e0:	14000001 	.word	0x14000001
    11e4:	01000001 	.word	0x01000001
    11e8:	01145300 	.word	0x01145300
    11ec:	01180000 	.word	0x01180000
    11f0:	00010000 	.word	0x00010000
    11f4:	00011852 	.word	0x00011852
    11f8:	00011c00 	.word	0x00011c00
    11fc:	51000100 	.word	0x51000100
    1200:	0000011c 	.word	0x0000011c
    1204:	0000011e 	.word	0x0000011e
    1208:	1e530001 	.word	0x1e530001
    120c:	28000001 	.word	0x28000001
    1210:	01000001 	.word	0x01000001
    1214:	00005100 	.word	0x00005100
    1218:	00000000 	.word	0x00000000
    121c:	01340000 	.word	0x01340000
    1220:	01360000 	.word	0x01360000
    1224:	00010000 	.word	0x00010000
    1228:	0001365d 	.word	0x0001365d
    122c:	00019400 	.word	0x00019400
    1230:	7d000200 	.word	0x7d000200
    1234:	0000000c 	.word	0x0000000c
    1238:	00000000 	.word	0x00000000
    123c:	00013400 	.word	0x00013400
    1240:	00014000 	.word	0x00014000
    1244:	51000100 	.word	0x51000100
    1248:	00000140 	.word	0x00000140
    124c:	00000194 	.word	0x00000194
    1250:	00550001 	.word	0x00550001
    1254:	00000000 	.word	0x00000000
    1258:	4a000000 	.word	0x4a000000
    125c:	52000001 	.word	0x52000001
    1260:	01000001 	.word	0x01000001
    1264:	01525c00 	.word	0x01525c00
    1268:	015a0000 	.word	0x015a0000
    126c:	00010000 	.word	0x00010000
    1270:	00015a52 	.word	0x00015a52
    1274:	00017800 	.word	0x00017800
    1278:	5c000100 	.word	0x5c000100
    127c:	00000178 	.word	0x00000178
    1280:	0000017c 	.word	0x0000017c
    1284:	7c530001 	.word	0x7c530001
    1288:	94000001 	.word	0x94000001
    128c:	01000001 	.word	0x01000001
    1290:	00005200 	.word	0x00005200
    1294:	00000000 	.word	0x00000000
    1298:	01940000 	.word	0x01940000
    129c:	01960000 	.word	0x01960000
    12a0:	00010000 	.word	0x00010000
    12a4:	0001965d 	.word	0x0001965d
    12a8:	0001c800 	.word	0x0001c800
    12ac:	7d000200 	.word	0x7d000200
    12b0:	00000008 	.word	0x00000008
    12b4:	00000000 	.word	0x00000000
    12b8:	00019400 	.word	0x00019400
    12bc:	0001a200 	.word	0x0001a200
    12c0:	50000100 	.word	0x50000100
	...
    12cc:	00000194 	.word	0x00000194
    12d0:	000001a8 	.word	0x000001a8
    12d4:	00510001 	.word	0x00510001
    12d8:	00000000 	.word	0x00000000
    12dc:	c8000000 	.word	0xc8000000
    12e0:	ca000001 	.word	0xca000001
    12e4:	01000001 	.word	0x01000001
    12e8:	01ca5d00 	.word	0x01ca5d00
    12ec:	01d00000 	.word	0x01d00000
    12f0:	00020000 	.word	0x00020000
    12f4:	01d0047d 	.word	0x01d0047d
    12f8:	01e00000 	.word	0x01e00000
    12fc:	00020000 	.word	0x00020000
    1300:	0000087d 	.word	0x0000087d
    1304:	00000000 	.word	0x00000000
    1308:	01e00000 	.word	0x01e00000
    130c:	01e20000 	.word	0x01e20000
    1310:	00010000 	.word	0x00010000
    1314:	0001e25d 	.word	0x0001e25d
    1318:	0001e600 	.word	0x0001e600
    131c:	7d000200 	.word	0x7d000200
    1320:	0001e604 	.word	0x0001e604
    1324:	00028800 	.word	0x00028800
    1328:	7d000200 	.word	0x7d000200
    132c:	00000010 	.word	0x00000010
    1330:	00000000 	.word	0x00000000
    1334:	0001e000 	.word	0x0001e000
    1338:	0001e800 	.word	0x0001e800
    133c:	50000100 	.word	0x50000100
    1340:	000001ea 	.word	0x000001ea
    1344:	00000288 	.word	0x00000288
    1348:	047d0002 	.word	0x047d0002
	...
    1354:	00000064 	.word	0x00000064
    1358:	00000068 	.word	0x00000068
    135c:	00500001 	.word	0x00500001
    1360:	00000000 	.word	0x00000000
    1364:	78000000 	.word	0x78000000
    1368:	7a000000 	.word	0x7a000000
    136c:	01000000 	.word	0x01000000
    1370:	007a5d00 	.word	0x007a5d00
    1374:	00f40000 	.word	0x00f40000
    1378:	00020000 	.word	0x00020000
    137c:	00000c7d 	.word	0x00000c7d
    1380:	00000000 	.word	0x00000000
    1384:	00780000 	.word	0x00780000
    1388:	00a20000 	.word	0x00a20000
    138c:	00010000 	.word	0x00010000
    1390:	0000d850 	.word	0x0000d850
    1394:	0000f400 	.word	0x0000f400
    1398:	50000100 	.word	0x50000100
	...
    13a4:	00000092 	.word	0x00000092
    13a8:	00000098 	.word	0x00000098
    13ac:	98520001 	.word	0x98520001
    13b0:	a6000000 	.word	0xa6000000
    13b4:	01000000 	.word	0x01000000
    13b8:	00a65100 	.word	0x00a65100
    13bc:	00be0000 	.word	0x00be0000
    13c0:	00010000 	.word	0x00010000
    13c4:	00000053 	.word	0x00000053
    13c8:	00000000 	.word	0x00000000
    13cc:	0000bc00 	.word	0x0000bc00
    13d0:	0000c400 	.word	0x0000c400
    13d4:	51000100 	.word	0x51000100
    13d8:	000000c4 	.word	0x000000c4
    13dc:	000000ce 	.word	0x000000ce
    13e0:	00530001 	.word	0x00530001
    13e4:	00000000 	.word	0x00000000
    13e8:	ae000000 	.word	0xae000000
    13ec:	cc000000 	.word	0xcc000000
    13f0:	01000000 	.word	0x01000000
    13f4:	00005200 	.word	0x00005200
    13f8:	00000000 	.word	0x00000000
    13fc:	01180000 	.word	0x01180000
    1400:	01220000 	.word	0x01220000
    1404:	00010000 	.word	0x00010000
    1408:	00000050 	.word	0x00000050
    140c:	00000000 	.word	0x00000000
    1410:	00014800 	.word	0x00014800
    1414:	00015000 	.word	0x00015000
    1418:	50000100 	.word	0x50000100
	...
    1424:	00000170 	.word	0x00000170
    1428:	0000017a 	.word	0x0000017a
    142c:	00500001 	.word	0x00500001
    1430:	00000000 	.word	0x00000000
    1434:	a0000000 	.word	0xa0000000
    1438:	a4000001 	.word	0xa4000001
    143c:	01000001 	.word	0x01000001
    1440:	00005100 	.word	0x00005100
    1444:	00000000 	.word	0x00000000
    1448:	01f00000 	.word	0x01f00000
    144c:	01f40000 	.word	0x01f40000
    1450:	00010000 	.word	0x00010000
    1454:	00000050 	.word	0x00000050
    1458:	00000000 	.word	0x00000000
    145c:	00021800 	.word	0x00021800
    1460:	00021a00 	.word	0x00021a00
    1464:	5d000100 	.word	0x5d000100
    1468:	0000021a 	.word	0x0000021a
    146c:	00000270 	.word	0x00000270
    1470:	087d0002 	.word	0x087d0002
	...
    147c:	00000218 	.word	0x00000218
    1480:	00000242 	.word	0x00000242
    1484:	00500001 	.word	0x00500001
    1488:	00000000 	.word	0x00000000
    148c:	18000000 	.word	0x18000000
    1490:	30000002 	.word	0x30000002
    1494:	01000002 	.word	0x01000002
    1498:	00005100 	.word	0x00005100
    149c:	00000000 	.word	0x00000000
    14a0:	02180000 	.word	0x02180000
    14a4:	023a0000 	.word	0x023a0000
    14a8:	00010000 	.word	0x00010000
    14ac:	00000052 	.word	0x00000052
    14b0:	00000000 	.word	0x00000000
    14b4:	00024000 	.word	0x00024000
    14b8:	00025200 	.word	0x00025200
    14bc:	51000100 	.word	0x51000100
	...
    14c8:	00000228 	.word	0x00000228
    14cc:	00000230 	.word	0x00000230
    14d0:	30530001 	.word	0x30530001
    14d4:	3c000002 	.word	0x3c000002
    14d8:	01000002 	.word	0x01000002
    14dc:	023c5100 	.word	0x023c5100
    14e0:	024e0000 	.word	0x024e0000
    14e4:	00010000 	.word	0x00010000
    14e8:	00000052 	.word	0x00000052
    14ec:	00000000 	.word	0x00000000
    14f0:	00027000 	.word	0x00027000
    14f4:	00027200 	.word	0x00027200
    14f8:	50000100 	.word	0x50000100
	...
    1504:	00000272 	.word	0x00000272
    1508:	00000276 	.word	0x00000276
    150c:	7a500001 	.word	0x7a500001
    1510:	90000002 	.word	0x90000002
    1514:	01000002 	.word	0x01000002
    1518:	00005300 	.word	0x00005300
    151c:	00000000 	.word	0x00000000
    1520:	02900000 	.word	0x02900000
    1524:	02940000 	.word	0x02940000
    1528:	00010000 	.word	0x00010000
    152c:	00000050 	.word	0x00000050
    1530:	00000000 	.word	0x00000000
    1534:	0002a800 	.word	0x0002a800
    1538:	0002ac00 	.word	0x0002ac00
    153c:	50000100 	.word	0x50000100
	...
    1548:	000002c0 	.word	0x000002c0
    154c:	000002c2 	.word	0x000002c2
    1550:	00500001 	.word	0x00500001
    1554:	00000000 	.word	0x00000000
    1558:	e0000000 	.word	0xe0000000
    155c:	ec000002 	.word	0xec000002
    1560:	01000002 	.word	0x01000002
    1564:	02ee5000 	.word	0x02ee5000
    1568:	030c0000 	.word	0x030c0000
    156c:	00010000 	.word	0x00010000
    1570:	00031a50 	.word	0x00031a50
    1574:	00031e00 	.word	0x00031e00
    1578:	50000100 	.word	0x50000100
	...
    1584:	000002ec 	.word	0x000002ec
    1588:	000002ee 	.word	0x000002ee
    158c:	0c500001 	.word	0x0c500001
    1590:	1a000003 	.word	0x1a000003
    1594:	01000003 	.word	0x01000003
    1598:	031e5000 	.word	0x031e5000
    159c:	031e0000 	.word	0x031e0000
    15a0:	00010000 	.word	0x00010000
    15a4:	00000050 	.word	0x00000050
    15a8:	00000000 	.word	0x00000000
    15ac:	0002e600 	.word	0x0002e600
    15b0:	0002ea00 	.word	0x0002ea00
    15b4:	53000100 	.word	0x53000100
    15b8:	000002ee 	.word	0x000002ee
    15bc:	000002f6 	.word	0x000002f6
    15c0:	1a530001 	.word	0x1a530001
    15c4:	1c000003 	.word	0x1c000003
    15c8:	01000003 	.word	0x01000003
    15cc:	00005300 	.word	0x00005300
    15d0:	00000000 	.word	0x00000000
    15d4:	03040000 	.word	0x03040000
    15d8:	031a0000 	.word	0x031a0000
    15dc:	00010000 	.word	0x00010000
    15e0:	00031e52 	.word	0x00031e52
    15e4:	00032400 	.word	0x00032400
    15e8:	52000100 	.word	0x52000100
	...
    15f4:	00000324 	.word	0x00000324
    15f8:	00000330 	.word	0x00000330
    15fc:	00500001 	.word	0x00500001
    1600:	00000000 	.word	0x00000000
    1604:	30000000 	.word	0x30000000
    1608:	32000003 	.word	0x32000003
    160c:	01000003 	.word	0x01000003
    1610:	00005000 	.word	0x00005000
    1614:	00000000 	.word	0x00000000
    1618:	03380000 	.word	0x03380000
    161c:	033a0000 	.word	0x033a0000
    1620:	00010000 	.word	0x00010000
    1624:	00033a5d 	.word	0x00033a5d
    1628:	00033c00 	.word	0x00033c00
    162c:	7d000200 	.word	0x7d000200
    1630:	00033c04 	.word	0x00033c04
    1634:	00034400 	.word	0x00034400
    1638:	7d000200 	.word	0x7d000200
    163c:	00000008 	.word	0x00000008
    1640:	00000000 	.word	0x00000000
    1644:	00034400 	.word	0x00034400
    1648:	00034600 	.word	0x00034600
    164c:	5d000100 	.word	0x5d000100
    1650:	00000346 	.word	0x00000346
    1654:	0000034a 	.word	0x0000034a
    1658:	047d0002 	.word	0x047d0002
    165c:	0000034a 	.word	0x0000034a
    1660:	00000352 	.word	0x00000352
    1664:	087d0002 	.word	0x087d0002
	...
    1670:	00000344 	.word	0x00000344
    1674:	00000348 	.word	0x00000348
    1678:	00500001 	.word	0x00500001
    167c:	00000000 	.word	0x00000000
    1680:	54000000 	.word	0x54000000
    1684:	56000003 	.word	0x56000003
    1688:	01000003 	.word	0x01000003
    168c:	03565d00 	.word	0x03565d00
    1690:	03580000 	.word	0x03580000
    1694:	00020000 	.word	0x00020000
    1698:	0358047d 	.word	0x0358047d
    169c:	03600000 	.word	0x03600000
    16a0:	00020000 	.word	0x00020000
    16a4:	0000087d 	.word	0x0000087d
    16a8:	00000000 	.word	0x00000000
    16ac:	03600000 	.word	0x03600000
    16b0:	03620000 	.word	0x03620000
    16b4:	00010000 	.word	0x00010000
    16b8:	0003625d 	.word	0x0003625d
    16bc:	00036400 	.word	0x00036400
    16c0:	7d000200 	.word	0x7d000200
    16c4:	00036404 	.word	0x00036404
    16c8:	00036c00 	.word	0x00036c00
    16cc:	7d000200 	.word	0x7d000200
    16d0:	00000008 	.word	0x00000008
    16d4:	00000000 	.word	0x00000000
    16d8:	00036c00 	.word	0x00036c00
    16dc:	00036e00 	.word	0x00036e00
    16e0:	5d000100 	.word	0x5d000100
    16e4:	0000036e 	.word	0x0000036e
    16e8:	00000370 	.word	0x00000370
    16ec:	047d0002 	.word	0x047d0002
    16f0:	00000370 	.word	0x00000370
    16f4:	00000378 	.word	0x00000378
    16f8:	087d0002 	.word	0x087d0002
	...
    1704:	00000378 	.word	0x00000378
    1708:	0000037a 	.word	0x0000037a
    170c:	7a5d0001 	.word	0x7a5d0001
    1710:	7c000003 	.word	0x7c000003
    1714:	02000003 	.word	0x02000003
    1718:	7c047d00 	.word	0x7c047d00
    171c:	84000003 	.word	0x84000003
    1720:	02000003 	.word	0x02000003
    1724:	00087d00 	.word	0x00087d00
    1728:	00000000 	.word	0x00000000
    172c:	0000      	.short	0x0000
    172e:	00          	.byte	0x00
    172f:	18          	.byte	0x18
    1730:	22000000 	.word	0x22000000
    1734:	01000000 	.word	0x01000000
    1738:	00005000 	.word	0x00005000
    173c:	00000000 	.word	0x00000000
    1740:	001c0000 	.word	0x001c0000
    1744:	00220000 	.word	0x00220000
    1748:	00010000 	.word	0x00010000
    174c:	00002253 	.word	0x00002253
    1750:	00002c00 	.word	0x00002c00
    1754:	50000100 	.word	0x50000100
	...
    1760:	00000038 	.word	0x00000038
    1764:	00000044 	.word	0x00000044
    1768:	00500001 	.word	0x00500001
    176c:	00000000 	.word	0x00000000
    1770:	5c000000 	.word	0x5c000000
    1774:	60000000 	.word	0x60000000
    1778:	01000000 	.word	0x01000000
    177c:	00605d00 	.word	0x00605d00
    1780:	00640000 	.word	0x00640000
    1784:	00020000 	.word	0x00020000
    1788:	0064047d 	.word	0x0064047d
    178c:	00900000 	.word	0x00900000
    1790:	00020000 	.word	0x00020000
    1794:	0000087d 	.word	0x0000087d
    1798:	00000000 	.word	0x00000000
    179c:	00900000 	.word	0x00900000
    17a0:	00940000 	.word	0x00940000
    17a4:	00010000 	.word	0x00010000
    17a8:	0000945d 	.word	0x0000945d
    17ac:	00009800 	.word	0x00009800
    17b0:	7d000200 	.word	0x7d000200
    17b4:	00009804 	.word	0x00009804
    17b8:	0000c800 	.word	0x0000c800
    17bc:	7d000200 	.word	0x7d000200
    17c0:	00000008 	.word	0x00000008
    17c4:	00000000 	.word	0x00000000
    17c8:	00009000 	.word	0x00009000
    17cc:	00009e00 	.word	0x00009e00
    17d0:	50000100 	.word	0x50000100
	...
    17dc:	00000090 	.word	0x00000090
    17e0:	000000ba 	.word	0x000000ba
    17e4:	bc510001 	.word	0xbc510001
    17e8:	c0000000 	.word	0xc0000000
    17ec:	01000000 	.word	0x01000000
    17f0:	00005100 	.word	0x00005100
    17f4:	00000000 	.word	0x00000000
    17f8:	00960000 	.word	0x00960000
    17fc:	009e0000 	.word	0x009e0000
    1800:	00010000 	.word	0x00010000
    1804:	00009e53 	.word	0x00009e53
    1808:	0000ba00 	.word	0x0000ba00
    180c:	50000100 	.word	0x50000100
    1810:	000000bc 	.word	0x000000bc
    1814:	000000c0 	.word	0x000000c0
    1818:	00500001 	.word	0x00500001
    181c:	00000000 	.word	0x00000000
    1820:	c8000000 	.word	0xc8000000
    1824:	ca000000 	.word	0xca000000
    1828:	01000000 	.word	0x01000000
    182c:	00ca5d00 	.word	0x00ca5d00
    1830:	00e00000 	.word	0x00e00000
    1834:	00020000 	.word	0x00020000
    1838:	0000087d 	.word	0x0000087d
    183c:	00000000 	.word	0x00000000
    1840:	00740000 	.word	0x00740000
    1844:	00760000 	.word	0x00760000
    1848:	00010000 	.word	0x00010000
    184c:	0000765d 	.word	0x0000765d
    1850:	0000a400 	.word	0x0000a400
    1854:	7d000200 	.word	0x7d000200
    1858:	00000008 	.word	0x00000008
    185c:	00000000 	.word	0x00000000
    1860:	00007c00 	.word	0x00007c00
    1864:	00008200 	.word	0x00008200
    1868:	7d000200 	.word	0x7d000200
    186c:	00008204 	.word	0x00008204
    1870:	00008a00 	.word	0x00008a00
    1874:	53000100 	.word	0x53000100
    1878:	0000008a 	.word	0x0000008a
    187c:	000000a4 	.word	0x000000a4
    1880:	047d0002 	.word	0x047d0002
	...
    188c:	00000096 	.word	0x00000096
    1890:	00000098 	.word	0x00000098
    1894:	00500001 	.word	0x00500001
    1898:	00000000 	.word	0x00000000
    189c:	c4000000 	.word	0xc4000000
    18a0:	ce000000 	.word	0xce000000
    18a4:	01000000 	.word	0x01000000
    18a8:	00005000 	.word	0x00005000
    18ac:	00000000 	.word	0x00000000
    18b0:	00c80000 	.word	0x00c80000
    18b4:	00cc0000 	.word	0x00cc0000
    18b8:	00010000 	.word	0x00010000
    18bc:	0000d053 	.word	0x0000d053
    18c0:	0000d800 	.word	0x0000d800
    18c4:	50000100 	.word	0x50000100
	...
    18d0:	000000e4 	.word	0x000000e4
    18d4:	000000ee 	.word	0x000000ee
    18d8:	00500001 	.word	0x00500001
    18dc:	00000000 	.word	0x00000000
    18e0:	e8000000 	.word	0xe8000000
    18e4:	ee000000 	.word	0xee000000
    18e8:	01000000 	.word	0x01000000
    18ec:	00ee5300 	.word	0x00ee5300
    18f0:	00f80000 	.word	0x00f80000
    18f4:	00010000 	.word	0x00010000
    18f8:	00000050 	.word	0x00000050
    18fc:	00000000 	.word	0x00000000
    1900:	00010800 	.word	0x00010800
    1904:	00011200 	.word	0x00011200
    1908:	50000100 	.word	0x50000100
	...
    1914:	0000010c 	.word	0x0000010c
    1918:	00000112 	.word	0x00000112
    191c:	12530001 	.word	0x12530001
    1920:	1c000001 	.word	0x1c000001
    1924:	01000001 	.word	0x01000001
    1928:	00005000 	.word	0x00005000
    192c:	00000000 	.word	0x00000000
    1930:	011c0000 	.word	0x011c0000
    1934:	01260000 	.word	0x01260000
    1938:	00010000 	.word	0x00010000
    193c:	00000050 	.word	0x00000050
    1940:	00000000 	.word	0x00000000
    1944:	00012000 	.word	0x00012000
    1948:	00012600 	.word	0x00012600
    194c:	53000100 	.word	0x53000100
    1950:	00000126 	.word	0x00000126
    1954:	00000130 	.word	0x00000130
    1958:	00500001 	.word	0x00500001
    195c:	00000000 	.word	0x00000000
    1960:	6c000000 	.word	0x6c000000
    1964:	76000001 	.word	0x76000001
    1968:	01000001 	.word	0x01000001
    196c:	00005000 	.word	0x00005000
    1970:	00000000 	.word	0x00000000
    1974:	01700000 	.word	0x01700000
    1978:	01760000 	.word	0x01760000
    197c:	00010000 	.word	0x00010000
    1980:	00017653 	.word	0x00017653
    1984:	00018000 	.word	0x00018000
    1988:	50000100 	.word	0x50000100
	...
    1994:	000001ac 	.word	0x000001ac
    1998:	000001b2 	.word	0x000001b2
    199c:	00500001 	.word	0x00500001
    19a0:	00000000 	.word	0x00000000
    19a4:	c8000000 	.word	0xc8000000
    19a8:	d6000001 	.word	0xd6000001
    19ac:	01000001 	.word	0x01000001
    19b0:	01d65000 	.word	0x01d65000
    19b4:	02800000 	.word	0x02800000
    19b8:	00010000 	.word	0x00010000
    19bc:	0000005c 	.word	0x0000005c
    19c0:	00000000 	.word	0x00000000
    19c4:	00022a00 	.word	0x00022a00
    19c8:	00022c00 	.word	0x00022c00
    19cc:	53000100 	.word	0x53000100
    19d0:	0000023e 	.word	0x0000023e
    19d4:	00000240 	.word	0x00000240
    19d8:	50530001 	.word	0x50530001
    19dc:	52000002 	.word	0x52000002
    19e0:	01000002 	.word	0x01000002
    19e4:	02625300 	.word	0x02625300
    19e8:	02640000 	.word	0x02640000
    19ec:	00010000 	.word	0x00010000
    19f0:	00000053 	.word	0x00000053
    19f4:	00000000 	.word	0x00000000
    19f8:	0001e400 	.word	0x0001e400
    19fc:	00021a00 	.word	0x00021a00
    1a00:	52000100 	.word	0x52000100
    1a04:	0000021c 	.word	0x0000021c
    1a08:	00000226 	.word	0x00000226
    1a0c:	00520001 	.word	0x00520001
    1a10:	00000000 	.word	0x00000000
    1a14:	30000000 	.word	0x30000000
    1a18:	66000003 	.word	0x66000003
    1a1c:	01000003 	.word	0x01000003
    1a20:	00005000 	.word	0x00005000
    1a24:	00000000 	.word	0x00000000
    1a28:	03320000 	.word	0x03320000
    1a2c:	033a0000 	.word	0x033a0000
    1a30:	00010000 	.word	0x00010000
    1a34:	00034853 	.word	0x00034853
    1a38:	00035000 	.word	0x00035000
    1a3c:	53000100 	.word	0x53000100
    1a40:	0000035e 	.word	0x0000035e
    1a44:	00000360 	.word	0x00000360
    1a48:	00530001 	.word	0x00530001
    1a4c:	00000000 	.word	0x00000000
    1a50:	46000000 	.word	0x46000000
    1a54:	48000003 	.word	0x48000003
    1a58:	01000003 	.word	0x01000003
    1a5c:	035c5300 	.word	0x035c5300
    1a60:	035e0000 	.word	0x035e0000
    1a64:	00010000 	.word	0x00010000
    1a68:	00036253 	.word	0x00036253
    1a6c:	00037400 	.word	0x00037400
    1a70:	53000100 	.word	0x53000100
	...
    1a7c:	00000384 	.word	0x00000384
    1a80:	00000390 	.word	0x00000390
    1a84:	00500001 	.word	0x00500001
    1a88:	00000000 	.word	0x00000000
    1a8c:	7c000000 	.word	0x7c000000
    1a90:	84000000 	.word	0x84000000
    1a94:	01000000 	.word	0x01000000
    1a98:	00845000 	.word	0x00845000
    1a9c:	00a40000 	.word	0x00a40000
    1aa0:	00010000 	.word	0x00010000
    1aa4:	00000052 	.word	0x00000052
    1aa8:	00000000 	.word	0x00000000
    1aac:	00009000 	.word	0x00009000
    1ab0:	00009200 	.word	0x00009200
    1ab4:	50000100 	.word	0x50000100
    1ab8:	00000096 	.word	0x00000096
    1abc:	00000098 	.word	0x00000098
    1ac0:	00500001 	.word	0x00500001
	...
    1acc:	04000000 	.word	0x04000000
    1ad0:	01000000 	.word	0x01000000
    1ad4:	00045d00 	.word	0x00045d00
    1ad8:	00540000 	.word	0x00540000
    1adc:	00020000 	.word	0x00020000
    1ae0:	0000087d 	.word	0x0000087d
	...
    1aec:	00020000 	.word	0x00020000
    1af0:	00010000 	.word	0x00010000
    1af4:	00001650 	.word	0x00001650
    1af8:	00005400 	.word	0x00005400
    1afc:	7d000200 	.word	0x7d000200
    1b00:	00000004 	.word	0x00000004
	...
    1b0c:	00004200 	.word	0x00004200
    1b10:	51000100 	.word	0x51000100
    1b14:	00000042 	.word	0x00000042
    1b18:	00000054 	.word	0x00000054
    1b1c:	005c0001 	.word	0x005c0001
    1b20:	00000000 	.word	0x00000000
    1b24:	54000000 	.word	0x54000000
    1b28:	68000000 	.word	0x68000000
    1b2c:	01000000 	.word	0x01000000
    1b30:	00685d00 	.word	0x00685d00
    1b34:	009e0000 	.word	0x009e0000
    1b38:	00020000 	.word	0x00020000
    1b3c:	009e147d 	.word	0x009e147d
    1b40:	01040000 	.word	0x01040000
    1b44:	00020000 	.word	0x00020000
    1b48:	0000207d 	.word	0x0000207d
    1b4c:	00000000 	.word	0x00000000
    1b50:	00540000 	.word	0x00540000
    1b54:	00560000 	.word	0x00560000
    1b58:	00010000 	.word	0x00010000
    1b5c:	0000a850 	.word	0x0000a850
    1b60:	00010400 	.word	0x00010400
    1b64:	7d000200 	.word	0x7d000200
    1b68:	00000004 	.word	0x00000004
    1b6c:	00000000 	.word	0x00000000
    1b70:	00005400 	.word	0x00005400
    1b74:	00006400 	.word	0x00006400
    1b78:	51000100 	.word	0x51000100
    1b7c:	00000064 	.word	0x00000064
    1b80:	00000104 	.word	0x00000104
    1b84:	005c0001 	.word	0x005c0001
    1b88:	00000000 	.word	0x00000000
    1b8c:	72000000 	.word	0x72000000
    1b90:	ea000000 	.word	0xea000000
    1b94:	01000000 	.word	0x01000000
    1b98:	00ea5600 	.word	0x00ea5600
    1b9c:	01040000 	.word	0x01040000
    1ba0:	00010000 	.word	0x00010000
    1ba4:	00000053 	.word	0x00000053
    1ba8:	00000000 	.word	0x00000000
    1bac:	00007a00 	.word	0x00007a00
    1bb0:	00008000 	.word	0x00008000
    1bb4:	51000100 	.word	0x51000100
    1bb8:	00000080 	.word	0x00000080
    1bbc:	00000082 	.word	0x00000082
    1bc0:	82530001 	.word	0x82530001
    1bc4:	86000000 	.word	0x86000000
    1bc8:	01000000 	.word	0x01000000
    1bcc:	00865100 	.word	0x00865100
    1bd0:	00ae0000 	.word	0x00ae0000
    1bd4:	00010000 	.word	0x00010000
    1bd8:	0000ae54 	.word	0x0000ae54
    1bdc:	0000c200 	.word	0x0000c200
    1be0:	52000100 	.word	0x52000100
    1be4:	000000c2 	.word	0x000000c2
    1be8:	000000d2 	.word	0x000000d2
    1bec:	d2530001 	.word	0xd2530001
    1bf0:	04000000 	.word	0x04000000
    1bf4:	01000001 	.word	0x01000001
    1bf8:	00005400 	.word	0x00005400
    1bfc:	00000000 	.word	0x00000000
    1c00:	006a0000 	.word	0x006a0000
    1c04:	00ce0000 	.word	0x00ce0000
    1c08:	00010000 	.word	0x00010000
    1c0c:	0000ce55 	.word	0x0000ce55
    1c10:	0000e200 	.word	0x0000e200
    1c14:	51000100 	.word	0x51000100
    1c18:	000000e2 	.word	0x000000e2
    1c1c:	000000e6 	.word	0x000000e6
    1c20:	e6530001 	.word	0xe6530001
    1c24:	04000000 	.word	0x04000000
    1c28:	01000001 	.word	0x01000001
    1c2c:	00005500 	.word	0x00005500
    1c30:	00000000 	.word	0x00000000
    1c34:	01040000 	.word	0x01040000
    1c38:	01080000 	.word	0x01080000
    1c3c:	00010000 	.word	0x00010000
    1c40:	0001085d 	.word	0x0001085d
    1c44:	00014800 	.word	0x00014800
    1c48:	7d000200 	.word	0x7d000200
    1c4c:	00014814 	.word	0x00014814
    1c50:	0001bc00 	.word	0x0001bc00
    1c54:	7d000200 	.word	0x7d000200
    1c58:	00000020 	.word	0x00000020
    1c5c:	00000000 	.word	0x00000000
    1c60:	00010400 	.word	0x00010400
    1c64:	00010600 	.word	0x00010600
    1c68:	50000100 	.word	0x50000100
    1c6c:	00000152 	.word	0x00000152
    1c70:	000001bc 	.word	0x000001bc
    1c74:	047d0002 	.word	0x047d0002
	...
    1c80:	00000104 	.word	0x00000104
    1c84:	00000156 	.word	0x00000156
    1c88:	56510001 	.word	0x56510001
    1c8c:	bc000001 	.word	0xbc000001
    1c90:	01000001 	.word	0x01000001
    1c94:	00005c00 	.word	0x00005c00
    1c98:	00000000 	.word	0x00000000
    1c9c:	01220000 	.word	0x01220000
    1ca0:	019e0000 	.word	0x019e0000
    1ca4:	00010000 	.word	0x00010000
    1ca8:	00019e56 	.word	0x00019e56
    1cac:	0001a600 	.word	0x0001a600
    1cb0:	53000100 	.word	0x53000100
    1cb4:	000001a8 	.word	0x000001a8
    1cb8:	000001bc 	.word	0x000001bc
    1cbc:	00530001 	.word	0x00530001
    1cc0:	00000000 	.word	0x00000000
    1cc4:	1a000000 	.word	0x1a000000
    1cc8:	2a000001 	.word	0x2a000001
    1ccc:	01000001 	.word	0x01000001
    1cd0:	012e5300 	.word	0x012e5300
    1cd4:	01320000 	.word	0x01320000
    1cd8:	00010000 	.word	0x00010000
    1cdc:	00013453 	.word	0x00013453
    1ce0:	00015a00 	.word	0x00015a00
    1ce4:	54000100 	.word	0x54000100
    1ce8:	0000015a 	.word	0x0000015a
    1cec:	0000016c 	.word	0x0000016c
    1cf0:	70520001 	.word	0x70520001
    1cf4:	7c000001 	.word	0x7c000001
    1cf8:	01000001 	.word	0x01000001
    1cfc:	017e5300 	.word	0x017e5300
    1d00:	01bc0000 	.word	0x01bc0000
    1d04:	00010000 	.word	0x00010000
    1d08:	00000054 	.word	0x00000054
    1d0c:	00000000 	.word	0x00000000
    1d10:	00011c00 	.word	0x00011c00
    1d14:	00018600 	.word	0x00018600
    1d18:	55000100 	.word	0x55000100
    1d1c:	00000186 	.word	0x00000186
    1d20:	0000018e 	.word	0x0000018e
    1d24:	94530001 	.word	0x94530001
    1d28:	98000001 	.word	0x98000001
    1d2c:	01000001 	.word	0x01000001
    1d30:	019a5300 	.word	0x019a5300
    1d34:	01bc0000 	.word	0x01bc0000
    1d38:	00010000 	.word	0x00010000
    1d3c:	00000055 	.word	0x00000055
    1d40:	00000000 	.word	0x00000000
    1d44:	0001bc00 	.word	0x0001bc00
    1d48:	0001c000 	.word	0x0001c000
    1d4c:	5d000100 	.word	0x5d000100
    1d50:	000001c0 	.word	0x000001c0
    1d54:	00000200 	.word	0x00000200
    1d58:	147d0002 	.word	0x147d0002
    1d5c:	00000200 	.word	0x00000200
    1d60:	00000270 	.word	0x00000270
    1d64:	207d0002 	.word	0x207d0002
	...
    1d70:	000001bc 	.word	0x000001bc
    1d74:	000001be 	.word	0x000001be
    1d78:	0a500001 	.word	0x0a500001
    1d7c:	70000002 	.word	0x70000002
    1d80:	02000002 	.word	0x02000002
    1d84:	00047d00 	.word	0x00047d00
    1d88:	00000000 	.word	0x00000000
    1d8c:	bc000000 	.word	0xbc000000
    1d90:	0e000001 	.word	0x0e000001
    1d94:	01000002 	.word	0x01000002
    1d98:	020e5100 	.word	0x020e5100
    1d9c:	02700000 	.word	0x02700000
    1da0:	00010000 	.word	0x00010000
    1da4:	0000005c 	.word	0x0000005c
    1da8:	00000000 	.word	0x00000000
    1dac:	0001da00 	.word	0x0001da00
    1db0:	00025600 	.word	0x00025600
    1db4:	56000100 	.word	0x56000100
    1db8:	00000256 	.word	0x00000256
    1dbc:	00000270 	.word	0x00000270
    1dc0:	00530001 	.word	0x00530001
    1dc4:	00000000 	.word	0x00000000
    1dc8:	d2000000 	.word	0xd2000000
    1dcc:	e2000001 	.word	0xe2000001
    1dd0:	01000001 	.word	0x01000001
    1dd4:	01e65300 	.word	0x01e65300
    1dd8:	01ea0000 	.word	0x01ea0000
    1ddc:	00010000 	.word	0x00010000
    1de0:	0001ec53 	.word	0x0001ec53
    1de4:	00021200 	.word	0x00021200
    1de8:	54000100 	.word	0x54000100
    1dec:	00000212 	.word	0x00000212
    1df0:	00000224 	.word	0x00000224
    1df4:	28520001 	.word	0x28520001
    1df8:	34000002 	.word	0x34000002
    1dfc:	01000002 	.word	0x01000002
    1e00:	02365300 	.word	0x02365300
    1e04:	02700000 	.word	0x02700000
    1e08:	00010000 	.word	0x00010000
    1e0c:	00000054 	.word	0x00000054
    1e10:	00000000 	.word	0x00000000
    1e14:	0001d400 	.word	0x0001d400
    1e18:	00023e00 	.word	0x00023e00
    1e1c:	55000100 	.word	0x55000100
    1e20:	0000023e 	.word	0x0000023e
    1e24:	00000246 	.word	0x00000246
    1e28:	4c530001 	.word	0x4c530001
    1e2c:	50000002 	.word	0x50000002
    1e30:	01000002 	.word	0x01000002
    1e34:	02525300 	.word	0x02525300
    1e38:	02700000 	.word	0x02700000
    1e3c:	00010000 	.word	0x00010000
    1e40:	00000055 	.word	0x00000055
    1e44:	00000000 	.word	0x00000000
    1e48:	00027000 	.word	0x00027000
    1e4c:	00027400 	.word	0x00027400
    1e50:	5d000100 	.word	0x5d000100
    1e54:	00000274 	.word	0x00000274
    1e58:	00000282 	.word	0x00000282
    1e5c:	147d0002 	.word	0x147d0002
    1e60:	00000282 	.word	0x00000282
    1e64:	00000304 	.word	0x00000304
    1e68:	287d0002 	.word	0x287d0002
	...
    1e74:	00000270 	.word	0x00000270
    1e78:	00000272 	.word	0x00000272
    1e7c:	b4500001 	.word	0xb4500001
    1e80:	04000002 	.word	0x04000002
    1e84:	02000003 	.word	0x02000003
    1e88:	000c7d00 	.word	0x000c7d00
    1e8c:	00000000 	.word	0x00000000
    1e90:	70000000 	.word	0x70000000
    1e94:	b8000002 	.word	0xb8000002
    1e98:	01000002 	.word	0x01000002
    1e9c:	02b85100 	.word	0x02b85100
    1ea0:	03040000 	.word	0x03040000
    1ea4:	00010000 	.word	0x00010000
    1ea8:	00000054 	.word	0x00000054
    1eac:	00000000 	.word	0x00000000
    1eb0:	00029400 	.word	0x00029400
    1eb4:	0002cc00 	.word	0x0002cc00
    1eb8:	55000100 	.word	0x55000100
    1ebc:	000002cc 	.word	0x000002cc
    1ec0:	000002d4 	.word	0x000002d4
    1ec4:	d6530001 	.word	0xd6530001
    1ec8:	e2000002 	.word	0xe2000002
    1ecc:	01000002 	.word	0x01000002
    1ed0:	00005300 	.word	0x00005300
    1ed4:	00000000 	.word	0x00000000
    1ed8:	02860000 	.word	0x02860000
    1edc:	02e20000 	.word	0x02e20000
    1ee0:	00020000 	.word	0x00020000
    1ee4:	02e2087d 	.word	0x02e2087d
    1ee8:	02ea0000 	.word	0x02ea0000
    1eec:	00010000 	.word	0x00010000
    1ef0:	0002ee53 	.word	0x0002ee53
    1ef4:	0002f200 	.word	0x0002f200
    1ef8:	53000100 	.word	0x53000100
    1efc:	000002f4 	.word	0x000002f4
    1f00:	00000304 	.word	0x00000304
    1f04:	00530001 	.word	0x00530001
    1f08:	00000000 	.word	0x00000000
    1f0c:	8e000000 	.word	0x8e000000
    1f10:	bc000002 	.word	0xbc000002
    1f14:	01000002 	.word	0x01000002
    1f18:	02bc5c00 	.word	0x02bc5c00
    1f1c:	02c40000 	.word	0x02c40000
    1f20:	00010000 	.word	0x00010000
    1f24:	0002c853 	.word	0x0002c853
    1f28:	00030400 	.word	0x00030400
    1f2c:	5c000100 	.word	0x5c000100
	...
    1f38:	00000304 	.word	0x00000304
    1f3c:	00000308 	.word	0x00000308
    1f40:	085d0001 	.word	0x085d0001
    1f44:	70000003 	.word	0x70000003
    1f48:	02000004 	.word	0x02000004
    1f4c:	000c7d00 	.word	0x000c7d00
    1f50:	00000000 	.word	0x00000000
    1f54:	04000000 	.word	0x04000000
    1f58:	0e000003 	.word	0x0e000003
    1f5c:	01000003 	.word	0x01000003
    1f60:	030e5000 	.word	0x030e5000
    1f64:	04700000 	.word	0x04700000
    1f68:	00010000 	.word	0x00010000
    1f6c:	00000054 	.word	0x00000054
    1f70:	00000000 	.word	0x00000000
    1f74:	00030400 	.word	0x00030400
    1f78:	00030e00 	.word	0x00030e00
    1f7c:	51000100 	.word	0x51000100
    1f80:	0000030e 	.word	0x0000030e
    1f84:	00000470 	.word	0x00000470
    1f88:	00550001 	.word	0x00550001
    1f8c:	00000000 	.word	0x00000000
    1f90:	44000000 	.word	0x44000000
    1f94:	4c000003 	.word	0x4c000003
    1f98:	01000003 	.word	0x01000003
    1f9c:	00005300 	.word	0x00005300
    1fa0:	00000000 	.word	0x00000000
    1fa4:	03320000 	.word	0x03320000
    1fa8:	034e0000 	.word	0x034e0000
    1fac:	00010000 	.word	0x00010000
    1fb0:	00000052 	.word	0x00000052
    1fb4:	00000000 	.word	0x00000000
    1fb8:	00038000 	.word	0x00038000
    1fbc:	00038e00 	.word	0x00038e00
    1fc0:	53000100 	.word	0x53000100
    1fc4:	00000392 	.word	0x00000392
    1fc8:	0000039a 	.word	0x0000039a
    1fcc:	9e530001 	.word	0x9e530001
    1fd0:	a8000003 	.word	0xa8000003
    1fd4:	01000003 	.word	0x01000003
    1fd8:	00005300 	.word	0x00005300
    1fdc:	00000000 	.word	0x00000000
    1fe0:	03a20000 	.word	0x03a20000
    1fe4:	03aa0000 	.word	0x03aa0000
    1fe8:	00010000 	.word	0x00010000
    1fec:	00000052 	.word	0x00000052
    1ff0:	00000000 	.word	0x00000000
    1ff4:	0003fc00 	.word	0x0003fc00
    1ff8:	00040600 	.word	0x00040600
    1ffc:	53000100 	.word	0x53000100
	...
    2008:	00000400 	.word	0x00000400
    200c:	00000408 	.word	0x00000408
    2010:	00520001 	.word	0x00520001
    2014:	00000000 	.word	0x00000000
    2018:	4c000000 	.word	0x4c000000
    201c:	56000004 	.word	0x56000004
    2020:	01000004 	.word	0x01000004
    2024:	00005300 	.word	0x00005300
    2028:	00000000 	.word	0x00000000
    202c:	04500000 	.word	0x04500000
    2030:	04580000 	.word	0x04580000
    2034:	00010000 	.word	0x00010000
    2038:	00000052 	.word	0x00000052
    203c:	00000000 	.word	0x00000000
    2040:	00047000 	.word	0x00047000
    2044:	00047400 	.word	0x00047400
    2048:	5d000100 	.word	0x5d000100
    204c:	00000474 	.word	0x00000474
    2050:	000005ca 	.word	0x000005ca
    2054:	147d0002 	.word	0x147d0002
	...
    2060:	00000470 	.word	0x00000470
    2064:	0000047c 	.word	0x0000047c
    2068:	7c510001 	.word	0x7c510001
    206c:	ca000004 	.word	0xca000004
    2070:	01000005 	.word	0x01000005
    2074:	00005c00 	.word	0x00005c00
    2078:	00000000 	.word	0x00000000
    207c:	04ba0000 	.word	0x04ba0000
    2080:	04c80000 	.word	0x04c80000
    2084:	00010000 	.word	0x00010000
    2088:	00000053 	.word	0x00000053
    208c:	00000000 	.word	0x00000000
    2090:	0004b400 	.word	0x0004b400
    2094:	0004ee00 	.word	0x0004ee00
    2098:	52000100 	.word	0x52000100
	...
    20a4:	000004f2 	.word	0x000004f2
    20a8:	00000500 	.word	0x00000500
    20ac:	04530001 	.word	0x04530001
    20b0:	16000005 	.word	0x16000005
    20b4:	01000005 	.word	0x01000005
    20b8:	00005300 	.word	0x00005300
    20bc:	00000000 	.word	0x00000000
    20c0:	05100000 	.word	0x05100000
    20c4:	052c0000 	.word	0x052c0000
    20c8:	00010000 	.word	0x00010000
    20cc:	0005c652 	.word	0x0005c652
    20d0:	0005ca00 	.word	0x0005ca00
    20d4:	52000100 	.word	0x52000100
	...
    20e0:	00000540 	.word	0x00000540
    20e4:	0000054e 	.word	0x0000054e
    20e8:	52530001 	.word	0x52530001
    20ec:	5a000005 	.word	0x5a000005
    20f0:	01000005 	.word	0x01000005
    20f4:	055e5300 	.word	0x055e5300
    20f8:	05680000 	.word	0x05680000
    20fc:	00010000 	.word	0x00010000
    2100:	00000053 	.word	0x00000053
    2104:	00000000 	.word	0x00000000
    2108:	00056200 	.word	0x00056200
    210c:	00059200 	.word	0x00059200
    2110:	52000100 	.word	0x52000100
	...
    211c:	000005ae 	.word	0x000005ae
    2120:	000005b6 	.word	0x000005b6
    2124:	00530001 	.word	0x00530001
    2128:	00000000 	.word	0x00000000
    212c:	a0000000 	.word	0xa0000000
    2130:	a2000006 	.word	0xa2000006
    2134:	01000006 	.word	0x01000006
    2138:	00005200 	.word	0x00005200
    213c:	00000000 	.word	0x00000000
    2140:	06d00000 	.word	0x06d00000
    2144:	06dc0000 	.word	0x06dc0000
    2148:	00010000 	.word	0x00010000
    214c:	00000051 	.word	0x00000051
    2150:	00000000 	.word	0x00000000
    2154:	0006d600 	.word	0x0006d600
    2158:	0006dc00 	.word	0x0006dc00
    215c:	53000100 	.word	0x53000100
    2160:	000006dc 	.word	0x000006dc
    2164:	000006ea 	.word	0x000006ea
    2168:	00510001 	.word	0x00510001
    216c:	00000000 	.word	0x00000000
    2170:	ec000000 	.word	0xec000000
    2174:	ee000006 	.word	0xee000006
    2178:	01000006 	.word	0x01000006
    217c:	06ee5d00 	.word	0x06ee5d00
    2180:	077e0000 	.word	0x077e0000
    2184:	00020000 	.word	0x00020000
    2188:	0000087d 	.word	0x0000087d
    218c:	00000000 	.word	0x00000000
    2190:	06ec0000 	.word	0x06ec0000
    2194:	06f40000 	.word	0x06f40000
    2198:	00010000 	.word	0x00010000
    219c:	0006f451 	.word	0x0006f451
    21a0:	00077e00 	.word	0x00077e00
    21a4:	54000100 	.word	0x54000100
	...
    21b0:	000006ec 	.word	0x000006ec
    21b4:	000006f8 	.word	0x000006f8
    21b8:	f8520001 	.word	0xf8520001
    21bc:	7e000006 	.word	0x7e000006
    21c0:	01000007 	.word	0x01000007
    21c4:	00005100 	.word	0x00005100
    21c8:	00000000 	.word	0x00000000
    21cc:	06ec0000 	.word	0x06ec0000
    21d0:	06f80000 	.word	0x06f80000
    21d4:	00010000 	.word	0x00010000
    21d8:	0006f853 	.word	0x0006f853
    21dc:	00077e00 	.word	0x00077e00
    21e0:	5c000100 	.word	0x5c000100
	...
    21ec:	0000070c 	.word	0x0000070c
    21f0:	00000724 	.word	0x00000724
    21f4:	2a530001 	.word	0x2a530001
    21f8:	2e000007 	.word	0x2e000007
    21fc:	01000007 	.word	0x01000007
    2200:	075e5300 	.word	0x075e5300
    2204:	07640000 	.word	0x07640000
    2208:	00010000 	.word	0x00010000
    220c:	00000053 	.word	0x00000053
    2210:	00000000 	.word	0x00000000
    2214:	00072c00 	.word	0x00072c00
    2218:	00072e00 	.word	0x00072e00
    221c:	52000100 	.word	0x52000100
    2220:	0000075e 	.word	0x0000075e
    2224:	0000077e 	.word	0x0000077e
    2228:	00520001 	.word	0x00520001
    222c:	00000000 	.word	0x00000000
    2230:	5c000000 	.word	0x5c000000
    2234:	64000007 	.word	0x64000007
    2238:	01000007 	.word	0x01000007
    223c:	00005300 	.word	0x00005300
    2240:	00000000 	.word	0x00000000
    2244:	07680000 	.word	0x07680000
    2248:	07740000 	.word	0x07740000
    224c:	00010000 	.word	0x00010000
    2250:	00000053 	.word	0x00000053
    2254:	00000000 	.word	0x00000000
    2258:	00078000 	.word	0x00078000
    225c:	00078c00 	.word	0x00078c00
    2260:	51000100 	.word	0x51000100
	...
    226c:	00000780 	.word	0x00000780
    2270:	0000078e 	.word	0x0000078e
    2274:	00520001 	.word	0x00520001
    2278:	00000000 	.word	0x00000000
    227c:	80000000 	.word	0x80000000
    2280:	98000007 	.word	0x98000007
    2284:	01000007 	.word	0x01000007
    2288:	00005300 	.word	0x00005300
    228c:	00000000 	.word	0x00000000
    2290:	07a80000 	.word	0x07a80000
    2294:	07b40000 	.word	0x07b40000
    2298:	00010000 	.word	0x00010000
    229c:	00000051 	.word	0x00000051
    22a0:	00000000 	.word	0x00000000
    22a4:	0007a800 	.word	0x0007a800
    22a8:	0007b600 	.word	0x0007b600
    22ac:	52000100 	.word	0x52000100
	...
    22b8:	000007a8 	.word	0x000007a8
    22bc:	000007c0 	.word	0x000007c0
    22c0:	00530001 	.word	0x00530001
    22c4:	00000000 	.word	0x00000000
    22c8:	cc000000 	.word	0xcc000000
    22cc:	d8000007 	.word	0xd8000007
    22d0:	01000007 	.word	0x01000007
    22d4:	00005100 	.word	0x00005100
    22d8:	00000000 	.word	0x00000000
    22dc:	07cc0000 	.word	0x07cc0000
    22e0:	07da0000 	.word	0x07da0000
    22e4:	00010000 	.word	0x00010000
    22e8:	00000052 	.word	0x00000052
    22ec:	00000000 	.word	0x00000000
    22f0:	0007ec00 	.word	0x0007ec00
    22f4:	0007f800 	.word	0x0007f800
    22f8:	51000100 	.word	0x51000100
	...
    2304:	000007f2 	.word	0x000007f2
    2308:	000007f8 	.word	0x000007f8
    230c:	f8530001 	.word	0xf8530001
    2310:	fc000007 	.word	0xfc000007
    2314:	01000007 	.word	0x01000007
    2318:	00005100 	.word	0x00005100
    231c:	00000000 	.word	0x00000000
    2320:	07fc0000 	.word	0x07fc0000
    2324:	08080000 	.word	0x08080000
    2328:	00010000 	.word	0x00010000
    232c:	00000051 	.word	0x00000051
    2330:	00000000 	.word	0x00000000
    2334:	00080200 	.word	0x00080200
    2338:	00080800 	.word	0x00080800
    233c:	53000100 	.word	0x53000100
    2340:	00000808 	.word	0x00000808
    2344:	0000080c 	.word	0x0000080c
    2348:	00510001 	.word	0x00510001
    234c:	00000000 	.word	0x00000000
    2350:	0c000000 	.word	0x0c000000
    2354:	12000008 	.word	0x12000008
    2358:	01000008 	.word	0x01000008
    235c:	08125d00 	.word	0x08125d00
    2360:	08520000 	.word	0x08520000
    2364:	00020000 	.word	0x00020000
    2368:	00000c7d 	.word	0x00000c7d
    236c:	00000000 	.word	0x00000000
    2370:	080c0000 	.word	0x080c0000
    2374:	08440000 	.word	0x08440000
    2378:	00010000 	.word	0x00010000
    237c:	00000051 	.word	0x00000051
    2380:	00000000 	.word	0x00000000
    2384:	00080c00 	.word	0x00080c00
    2388:	00083400 	.word	0x00083400
    238c:	52000100 	.word	0x52000100
	...
    2398:	00000828 	.word	0x00000828
    239c:	00000844 	.word	0x00000844
    23a0:	445c0001 	.word	0x445c0001
    23a4:	52000008 	.word	0x52000008
    23a8:	01000008 	.word	0x01000008
    23ac:	00005100 	.word	0x00005100
    23b0:	00000000 	.word	0x00000000
    23b4:	08540000 	.word	0x08540000
    23b8:	08600000 	.word	0x08600000
    23bc:	00010000 	.word	0x00010000
    23c0:	00000051 	.word	0x00000051
    23c4:	00000000 	.word	0x00000000
    23c8:	00085a00 	.word	0x00085a00
    23cc:	00086000 	.word	0x00086000
    23d0:	53000100 	.word	0x53000100
    23d4:	00000860 	.word	0x00000860
    23d8:	00000864 	.word	0x00000864
    23dc:	00510001 	.word	0x00510001
    23e0:	00000000 	.word	0x00000000
    23e4:	6a000000 	.word	0x6a000000
    23e8:	72000008 	.word	0x72000008
    23ec:	01000008 	.word	0x01000008
    23f0:	08745300 	.word	0x08745300
    23f4:	08780000 	.word	0x08780000
    23f8:	00010000 	.word	0x00010000
    23fc:	00000053 	.word	0x00000053
    2400:	00000000 	.word	0x00000000
    2404:	00087800 	.word	0x00087800
    2408:	00088400 	.word	0x00088400
    240c:	51000100 	.word	0x51000100
	...
    2418:	0000087e 	.word	0x0000087e
    241c:	00000884 	.word	0x00000884
    2420:	84530001 	.word	0x84530001
    2424:	88000008 	.word	0x88000008
    2428:	01000008 	.word	0x01000008
    242c:	00005100 	.word	0x00005100
    2430:	00000000 	.word	0x00000000
    2434:	088e0000 	.word	0x088e0000
    2438:	08960000 	.word	0x08960000
    243c:	00010000 	.word	0x00010000
    2440:	00089853 	.word	0x00089853
    2444:	00089c00 	.word	0x00089c00
    2448:	53000100 	.word	0x53000100
	...
    2454:	0000090c 	.word	0x0000090c
    2458:	00000918 	.word	0x00000918
    245c:	00510001 	.word	0x00510001
    2460:	00000000 	.word	0x00000000
    2464:	12000000 	.word	0x12000000
    2468:	18000009 	.word	0x18000009
    246c:	01000009 	.word	0x01000009
    2470:	09185300 	.word	0x09185300
    2474:	091c0000 	.word	0x091c0000
    2478:	00010000 	.word	0x00010000
    247c:	00000051 	.word	0x00000051
    2480:	00000000 	.word	0x00000000
    2484:	00092200 	.word	0x00092200
    2488:	00092a00 	.word	0x00092a00
    248c:	53000100 	.word	0x53000100
    2490:	0000092c 	.word	0x0000092c
    2494:	00000930 	.word	0x00000930
    2498:	00530001 	.word	0x00530001
    249c:	00000000 	.word	0x00000000
    24a0:	30000000 	.word	0x30000000
    24a4:	3c000009 	.word	0x3c000009
    24a8:	01000009 	.word	0x01000009
    24ac:	00005100 	.word	0x00005100
    24b0:	00000000 	.word	0x00000000
    24b4:	09360000 	.word	0x09360000
    24b8:	093c0000 	.word	0x093c0000
    24bc:	00010000 	.word	0x00010000
    24c0:	00093c53 	.word	0x00093c53
    24c4:	00094000 	.word	0x00094000
    24c8:	51000100 	.word	0x51000100
	...
    24d4:	00000946 	.word	0x00000946
    24d8:	0000094e 	.word	0x0000094e
    24dc:	50530001 	.word	0x50530001
    24e0:	54000009 	.word	0x54000009
    24e4:	01000009 	.word	0x01000009
    24e8:	00005300 	.word	0x00005300
    24ec:	00000000 	.word	0x00000000
    24f0:	09540000 	.word	0x09540000
    24f4:	09600000 	.word	0x09600000
    24f8:	00010000 	.word	0x00010000
    24fc:	00000051 	.word	0x00000051
    2500:	00000000 	.word	0x00000000
    2504:	00095a00 	.word	0x00095a00
    2508:	00096000 	.word	0x00096000
    250c:	53000100 	.word	0x53000100
    2510:	00000960 	.word	0x00000960
    2514:	00000964 	.word	0x00000964
    2518:	00510001 	.word	0x00510001
    251c:	00000000 	.word	0x00000000
    2520:	6a000000 	.word	0x6a000000
    2524:	72000009 	.word	0x72000009
    2528:	01000009 	.word	0x01000009
    252c:	09745300 	.word	0x09745300
    2530:	09780000 	.word	0x09780000
    2534:	00010000 	.word	0x00010000
    2538:	00000053 	.word	0x00000053
    253c:	00000000 	.word	0x00000000
    2540:	00097800 	.word	0x00097800
    2544:	00098400 	.word	0x00098400
    2548:	51000100 	.word	0x51000100
	...
    2554:	0000097e 	.word	0x0000097e
    2558:	00000984 	.word	0x00000984
    255c:	84530001 	.word	0x84530001
    2560:	88000009 	.word	0x88000009
    2564:	01000009 	.word	0x01000009
    2568:	00005100 	.word	0x00005100
    256c:	00000000 	.word	0x00000000
    2570:	098e0000 	.word	0x098e0000
    2574:	09960000 	.word	0x09960000
    2578:	00010000 	.word	0x00010000
    257c:	00099853 	.word	0x00099853
    2580:	00099c00 	.word	0x00099c00
    2584:	53000100 	.word	0x53000100
	...
    2590:	0000099c 	.word	0x0000099c
    2594:	000009a8 	.word	0x000009a8
    2598:	00510001 	.word	0x00510001
    259c:	00000000 	.word	0x00000000
    25a0:	a2000000 	.word	0xa2000000
    25a4:	a8000009 	.word	0xa8000009
    25a8:	01000009 	.word	0x01000009
    25ac:	09a85300 	.word	0x09a85300
    25b0:	09ac0000 	.word	0x09ac0000
    25b4:	00010000 	.word	0x00010000
    25b8:	00000051 	.word	0x00000051
    25bc:	00000000 	.word	0x00000000
    25c0:	0009b000 	.word	0x0009b000
    25c4:	0009b600 	.word	0x0009b600
    25c8:	53000100 	.word	0x53000100
    25cc:	000009b8 	.word	0x000009b8
    25d0:	000009bc 	.word	0x000009bc
    25d4:	00530001 	.word	0x00530001
    25d8:	00000000 	.word	0x00000000
    25dc:	bc000000 	.word	0xbc000000
    25e0:	c8000009 	.word	0xc8000009
    25e4:	01000009 	.word	0x01000009
    25e8:	00005100 	.word	0x00005100
    25ec:	00000000 	.word	0x00000000
    25f0:	09c20000 	.word	0x09c20000
    25f4:	09c80000 	.word	0x09c80000
    25f8:	00010000 	.word	0x00010000
    25fc:	0009c853 	.word	0x0009c853
    2600:	0009cc00 	.word	0x0009cc00
    2604:	51000100 	.word	0x51000100
	...
    2610:	000009d0 	.word	0x000009d0
    2614:	000009d6 	.word	0x000009d6
    2618:	d8530001 	.word	0xd8530001
    261c:	dc000009 	.word	0xdc000009
    2620:	01000009 	.word	0x01000009
    2624:	00005300 	.word	0x00005300
    2628:	00000000 	.word	0x00000000
    262c:	09dc0000 	.word	0x09dc0000
    2630:	09e80000 	.word	0x09e80000
    2634:	00010000 	.word	0x00010000
    2638:	00000051 	.word	0x00000051
    263c:	00000000 	.word	0x00000000
    2640:	0009e200 	.word	0x0009e200
    2644:	0009e800 	.word	0x0009e800
    2648:	53000100 	.word	0x53000100
    264c:	000009e8 	.word	0x000009e8
    2650:	000009ec 	.word	0x000009ec
    2654:	00510001 	.word	0x00510001
    2658:	00000000 	.word	0x00000000
    265c:	ec000000 	.word	0xec000000
    2660:	f8000009 	.word	0xf8000009
    2664:	01000009 	.word	0x01000009
    2668:	00005100 	.word	0x00005100
    266c:	00000000 	.word	0x00000000
    2670:	09f20000 	.word	0x09f20000
    2674:	09f80000 	.word	0x09f80000
    2678:	00010000 	.word	0x00010000
    267c:	0009f853 	.word	0x0009f853
    2680:	0009fc00 	.word	0x0009fc00
    2684:	51000100 	.word	0x51000100
	...
    2690:	00000a02 	.word	0x00000a02
    2694:	00000a0a 	.word	0x00000a0a
    2698:	0c530001 	.word	0x0c530001
    269c:	1000000a 	.word	0x1000000a
    26a0:	0100000a 	.word	0x0100000a
    26a4:	00005300 	.word	0x00005300
    26a8:	00000000 	.word	0x00000000
    26ac:	0a160000 	.word	0x0a160000
    26b0:	0a1e0000 	.word	0x0a1e0000
    26b4:	00010000 	.word	0x00010000
    26b8:	000a2053 	.word	0x000a2053
    26bc:	000a2400 	.word	0x000a2400
    26c0:	53000100 	.word	0x53000100
	...
    26cc:	00000a2a 	.word	0x00000a2a
    26d0:	00000a32 	.word	0x00000a32
    26d4:	34530001 	.word	0x34530001
    26d8:	3800000a 	.word	0x3800000a
    26dc:	0100000a 	.word	0x0100000a
    26e0:	00005300 	.word	0x00005300
    26e4:	00000000 	.word	0x00000000
    26e8:	0a3e0000 	.word	0x0a3e0000
    26ec:	0a460000 	.word	0x0a460000
    26f0:	00010000 	.word	0x00010000
    26f4:	000a4853 	.word	0x000a4853
    26f8:	000a4c00 	.word	0x000a4c00
    26fc:	53000100 	.word	0x53000100
	...
    2708:	00000a52 	.word	0x00000a52
    270c:	00000a5a 	.word	0x00000a5a
    2710:	5c530001 	.word	0x5c530001
    2714:	6000000a 	.word	0x6000000a
    2718:	0100000a 	.word	0x0100000a
    271c:	00005300 	.word	0x00005300
    2720:	00000000 	.word	0x00000000
    2724:	0a600000 	.word	0x0a600000
    2728:	0a660000 	.word	0x0a660000
    272c:	00010000 	.word	0x00010000
    2730:	00000052 	.word	0x00000052
    2734:	00000000 	.word	0x00000000
    2738:	000a8000 	.word	0x000a8000
    273c:	000a8600 	.word	0x000a8600
    2740:	52000100 	.word	0x52000100
	...
    274c:	00000aa0 	.word	0x00000aa0
    2750:	00000aaa 	.word	0x00000aaa
    2754:	aa5d0001 	.word	0xaa5d0001
    2758:	0800000a 	.word	0x0800000a
    275c:	0200000b 	.word	0x0200000b
    2760:	00087d00 	.word	0x00087d00
    2764:	00000000 	.word	0x00000000
    2768:	a0000000 	.word	0xa0000000
    276c:	a800000a 	.word	0xa800000a
    2770:	0100000a 	.word	0x0100000a
    2774:	0ac25000 	.word	0x0ac25000
    2778:	0b080000 	.word	0x0b080000
    277c:	00020000 	.word	0x00020000
    2780:	0000047d 	.word	0x0000047d
    2784:	00000000 	.word	0x00000000
    2788:	0aa00000 	.word	0x0aa00000
    278c:	0acc0000 	.word	0x0acc0000
    2790:	00010000 	.word	0x00010000
    2794:	000ae251 	.word	0x000ae251
    2798:	000aee00 	.word	0x000aee00
    279c:	51000100 	.word	0x51000100
	...
    27a8:	00000aa0 	.word	0x00000aa0
    27ac:	00000aa8 	.word	0x00000aa8
    27b0:	a8520001 	.word	0xa8520001
    27b4:	0800000a 	.word	0x0800000a
    27b8:	0100000b 	.word	0x0100000b
    27bc:	00005c00 	.word	0x00005c00
    27c0:	00000000 	.word	0x00000000
    27c4:	0b5c0000 	.word	0x0b5c0000
    27c8:	0b6e0000 	.word	0x0b6e0000
    27cc:	00010000 	.word	0x00010000
    27d0:	00000051 	.word	0x00000051
    27d4:	00000000 	.word	0x00000000
    27d8:	000b7400 	.word	0x000b7400
    27dc:	000b8600 	.word	0x000b8600
    27e0:	51000100 	.word	0x51000100
	...
    27ec:	00000b8c 	.word	0x00000b8c
    27f0:	00000b9e 	.word	0x00000b9e
    27f4:	00510001 	.word	0x00510001
    27f8:	00000000 	.word	0x00000000
    27fc:	a4000000 	.word	0xa4000000
    2800:	b600000b 	.word	0xb600000b
    2804:	0100000b 	.word	0x0100000b
    2808:	00005100 	.word	0x00005100
    280c:	00000000 	.word	0x00000000
    2810:	0bd80000 	.word	0x0bd80000
    2814:	0bea0000 	.word	0x0bea0000
    2818:	00010000 	.word	0x00010000
    281c:	00000051 	.word	0x00000051
    2820:	00000000 	.word	0x00000000
    2824:	000c0c00 	.word	0x000c0c00
    2828:	000c1e00 	.word	0x000c1e00
    282c:	51000100 	.word	0x51000100
	...
    2838:	00000c40 	.word	0x00000c40
    283c:	00000c4c 	.word	0x00000c4c
    2840:	00510001 	.word	0x00510001
    2844:	00000000 	.word	0x00000000
    2848:	50000000 	.word	0x50000000
    284c:	5200000c 	.word	0x5200000c
    2850:	0100000c 	.word	0x0100000c
    2854:	00005000 	.word	0x00005000
    2858:	00000000 	.word	0x00000000
    285c:	0c580000 	.word	0x0c580000
    2860:	0c5a0000 	.word	0x0c5a0000
    2864:	00010000 	.word	0x00010000
    2868:	00000050 	.word	0x00000050
    286c:	00000000 	.word	0x00000000
    2870:	000c6000 	.word	0x000c6000
    2874:	000c6200 	.word	0x000c6200
    2878:	50000100 	.word	0x50000100
	...
    2884:	00000c68 	.word	0x00000c68
    2888:	00000c6c 	.word	0x00000c6c
    288c:	00500001 	.word	0x00500001
    2890:	00000000 	.word	0x00000000
    2894:	70000000 	.word	0x70000000
    2898:	7200000c 	.word	0x7200000c
    289c:	0100000c 	.word	0x0100000c
    28a0:	00005000 	.word	0x00005000
    28a4:	00000000 	.word	0x00000000
    28a8:	0c780000 	.word	0x0c780000
    28ac:	0c7a0000 	.word	0x0c7a0000
    28b0:	00010000 	.word	0x00010000
    28b4:	00000050 	.word	0x00000050
    28b8:	00000000 	.word	0x00000000
    28bc:	000c8000 	.word	0x000c8000
    28c0:	000c8a00 	.word	0x000c8a00
    28c4:	50000100 	.word	0x50000100
	...
    28d0:	00000c8c 	.word	0x00000c8c
    28d4:	00000c90 	.word	0x00000c90
    28d8:	00510001 	.word	0x00510001
    28dc:	00000000 	.word	0x00000000
    28e0:	98000000 	.word	0x98000000
    28e4:	a400000c 	.word	0xa400000c
    28e8:	0100000c 	.word	0x0100000c
    28ec:	00005000 	.word	0x00005000
    28f0:	00000000 	.word	0x00000000
    28f4:	0cb00000 	.word	0x0cb00000
    28f8:	0cb40000 	.word	0x0cb40000
    28fc:	00010000 	.word	0x00010000
    2900:	00000051 	.word	0x00000051
    2904:	00000000 	.word	0x00000000
    2908:	000cbc00 	.word	0x000cbc00
    290c:	000cbe00 	.word	0x000cbe00
    2910:	5d000100 	.word	0x5d000100
    2914:	00000cbe 	.word	0x00000cbe
    2918:	00000cc2 	.word	0x00000cc2
    291c:	047d0002 	.word	0x047d0002
    2920:	00000cc2 	.word	0x00000cc2
    2924:	00000d88 	.word	0x00000d88
    2928:	107d0002 	.word	0x107d0002
	...
    2934:	00000cbc 	.word	0x00000cbc
    2938:	00000cc4 	.word	0x00000cc4
    293c:	c6500001 	.word	0xc6500001
    2940:	8800000c 	.word	0x8800000c
    2944:	0200000d 	.word	0x0200000d
    2948:	00047d00 	.word	0x00047d00
    294c:	00000000 	.word	0x00000000
    2950:	20000000 	.word	0x20000000
    2954:	32000000 	.word	0x32000000
    2958:	01000000 	.word	0x01000000
    295c:	00005100 	.word	0x00005100
    2960:	00000000 	.word	0x00000000
    2964:	00740000 	.word	0x00740000
    2968:	00820000 	.word	0x00820000
    296c:	00010000 	.word	0x00010000
    2970:	0000825d 	.word	0x0000825d
    2974:	0000b200 	.word	0x0000b200
    2978:	7d000200 	.word	0x7d000200
    297c:	00000008 	.word	0x00000008
    2980:	00000000 	.word	0x00000000
    2984:	00007400 	.word	0x00007400
    2988:	00008c00 	.word	0x00008c00
    298c:	50000100 	.word	0x50000100
	...
    2998:	00000074 	.word	0x00000074
    299c:	00000076 	.word	0x00000076
    29a0:	76510001 	.word	0x76510001
    29a4:	80000000 	.word	0x80000000
    29a8:	01000000 	.word	0x01000000
    29ac:	00005300 	.word	0x00005300
    29b0:	00000000 	.word	0x00000000
    29b4:	00900000 	.word	0x00900000
    29b8:	00920000 	.word	0x00920000
    29bc:	00010000 	.word	0x00010000
    29c0:	00009a50 	.word	0x00009a50
    29c4:	00009c00 	.word	0x00009c00
    29c8:	50000100 	.word	0x50000100
    29cc:	0000009e 	.word	0x0000009e
    29d0:	000000b2 	.word	0x000000b2
    29d4:	00500001 	.word	0x00500001
    29d8:	00000000 	.word	0x00000000
    29dc:	e4000000 	.word	0xe4000000
    29e0:	f6000000 	.word	0xf6000000
    29e4:	01000000 	.word	0x01000000
    29e8:	00005100 	.word	0x00005100
    29ec:	00000000 	.word	0x00000000
    29f0:	01180000 	.word	0x01180000
    29f4:	012a0000 	.word	0x012a0000
    29f8:	00010000 	.word	0x00010000
    29fc:	00000051 	.word	0x00000051
    2a00:	00000000 	.word	0x00000000
    2a04:	00014c00 	.word	0x00014c00
    2a08:	00014e00 	.word	0x00014e00
    2a0c:	51000100 	.word	0x51000100
	...
    2a18:	00000154 	.word	0x00000154
    2a1c:	00000156 	.word	0x00000156
    2a20:	00500001 	.word	0x00500001
    2a24:	00000000 	.word	0x00000000
    2a28:	e4000000 	.word	0xe4000000
    2a2c:	f6000001 	.word	0xf6000001
    2a30:	01000001 	.word	0x01000001
    2a34:	00005100 	.word	0x00005100
    2a38:	00000000 	.word	0x00000000
    2a3c:	02180000 	.word	0x02180000
    2a40:	02220000 	.word	0x02220000
    2a44:	00010000 	.word	0x00010000
    2a48:	00000050 	.word	0x00000050
    2a4c:	00000000 	.word	0x00000000
    2a50:	00022400 	.word	0x00022400
    2a54:	00022800 	.word	0x00022800
    2a58:	51000100 	.word	0x51000100
	...
    2a64:	00000230 	.word	0x00000230
    2a68:	0000026c 	.word	0x0000026c
    2a6c:	00500001 	.word	0x00500001
    2a70:	00000000 	.word	0x00000000
    2a74:	30000000 	.word	0x30000000
    2a78:	32000002 	.word	0x32000002
    2a7c:	01000002 	.word	0x01000002
    2a80:	02325100 	.word	0x02325100
    2a84:	023c0000 	.word	0x023c0000
    2a88:	00010000 	.word	0x00010000
    2a8c:	00023c53 	.word	0x00023c53
    2a90:	00027a00 	.word	0x00027a00
    2a94:	51000100 	.word	0x51000100
	...
    2aa0:	00000240 	.word	0x00000240
    2aa4:	0000025a 	.word	0x0000025a
    2aa8:	5a520001 	.word	0x5a520001
    2aac:	7a000002 	.word	0x7a000002
    2ab0:	01000002 	.word	0x01000002
    2ab4:	00005c00 	.word	0x00005c00
    2ab8:	00000000 	.word	0x00000000
    2abc:	02360000 	.word	0x02360000
    2ac0:	025a0000 	.word	0x025a0000
    2ac4:	00010000 	.word	0x00010000
    2ac8:	0000005c 	.word	0x0000005c
    2acc:	00000000 	.word	0x00000000
    2ad0:	00027c00 	.word	0x00027c00
    2ad4:	00027e00 	.word	0x00027e00
    2ad8:	51000100 	.word	0x51000100
	...
    2ae4:	0000028c 	.word	0x0000028c
    2ae8:	000002a0 	.word	0x000002a0
    2aec:	a05d0001 	.word	0xa05d0001
    2af0:	cc000002 	.word	0xcc000002
    2af4:	02000002 	.word	0x02000002
    2af8:	cc107d00 	.word	0xcc107d00
    2afc:	28000002 	.word	0x28000002
    2b00:	02000003 	.word	0x02000003
    2b04:	00307d00 	.word	0x00307d00
    2b08:	00000000 	.word	0x00000000
    2b0c:	8c000000 	.word	0x8c000000
    2b10:	8e000002 	.word	0x8e000002
    2b14:	01000002 	.word	0x01000002
    2b18:	02d45000 	.word	0x02d45000
    2b1c:	03280000 	.word	0x03280000
    2b20:	00020000 	.word	0x00020000
    2b24:	0000047d 	.word	0x0000047d
    2b28:	00000000 	.word	0x00000000
    2b2c:	028c0000 	.word	0x028c0000
    2b30:	02a60000 	.word	0x02a60000
    2b34:	00010000 	.word	0x00010000
    2b38:	0002a651 	.word	0x0002a651
    2b3c:	00032800 	.word	0x00032800
    2b40:	56000100 	.word	0x56000100
	...
    2b4c:	00000294 	.word	0x00000294
    2b50:	0000029a 	.word	0x0000029a
    2b54:	aa530001 	.word	0xaa530001
    2b58:	c2000002 	.word	0xc2000002
    2b5c:	01000002 	.word	0x01000002
    2b60:	02c65200 	.word	0x02c65200
    2b64:	02ce0000 	.word	0x02ce0000
    2b68:	00010000 	.word	0x00010000
    2b6c:	00000053 	.word	0x00000053
    2b70:	00000000 	.word	0x00000000
    2b74:	0002e600 	.word	0x0002e600
    2b78:	0002ee00 	.word	0x0002ee00
    2b7c:	53000100 	.word	0x53000100
	...
    2b88:	00000328 	.word	0x00000328
    2b8c:	0000032a 	.word	0x0000032a
    2b90:	2a5d0001 	.word	0x2a5d0001
    2b94:	2e000003 	.word	0x2e000003
    2b98:	02000003 	.word	0x02000003
    2b9c:	2e047d00 	.word	0x2e047d00
    2ba0:	bc000003 	.word	0xbc000003
    2ba4:	02000003 	.word	0x02000003
    2ba8:	00107d00 	.word	0x00107d00
    2bac:	00000000 	.word	0x00000000
    2bb0:	28000000 	.word	0x28000000
    2bb4:	30000003 	.word	0x30000003
    2bb8:	01000003 	.word	0x01000003
    2bbc:	03325000 	.word	0x03325000
    2bc0:	03bc0000 	.word	0x03bc0000
    2bc4:	00020000 	.word	0x00020000
    2bc8:	0000047d 	.word	0x0000047d
	...
    2bd4:	000a0000 	.word	0x000a0000
    2bd8:	00010000 	.word	0x00010000
    2bdc:	00000a5d 	.word	0x00000a5d
    2be0:	00005400 	.word	0x00005400
    2be4:	7d000200 	.word	0x7d000200
    2be8:	00000008 	.word	0x00000008
    2bec:	00000000 	.word	0x00000000
    2bf0:	00002600 	.word	0x00002600
    2bf4:	00003800 	.word	0x00003800
    2bf8:	53000100 	.word	0x53000100
	...
    2c08:	00000004 	.word	0x00000004
    2c0c:	045d0001 	.word	0x045d0001
    2c10:	10000000 	.word	0x10000000
    2c14:	02000000 	.word	0x02000000
    2c18:	10047d00 	.word	0x10047d00
    2c1c:	28000000 	.word	0x28000000
    2c20:	02000000 	.word	0x02000000
    2c24:	00087d00 	.word	0x00087d00
	...
    2c30:	0c000000 	.word	0x0c000000
    2c34:	01000000 	.word	0x01000000
    2c38:	000c5000 	.word	0x000c5000
    2c3c:	001c0000 	.word	0x001c0000
    2c40:	00010000 	.word	0x00010000
    2c44:	00000051 	.word	0x00000051
	...
    2c50:	00000c00 	.word	0x00000c00
    2c54:	50000100 	.word	0x50000100
    2c58:	0000000c 	.word	0x0000000c
    2c5c:	00000030 	.word	0x00000030
    2c60:	00540001 	.word	0x00540001
	...
    2c6c:	04000000 	.word	0x04000000
    2c70:	01000000 	.word	0x01000000
    2c74:	00045d00 	.word	0x00045d00
    2c78:	00480000 	.word	0x00480000
    2c7c:	00020000 	.word	0x00020000
    2c80:	0000107d 	.word	0x0000107d
    2c84:	00000000 	.word	0x00000000
    2c88:	00480000 	.word	0x00480000
    2c8c:	004c0000 	.word	0x004c0000
    2c90:	00010000 	.word	0x00010000
    2c94:	00004c5d 	.word	0x00004c5d
    2c98:	0000c800 	.word	0x0000c800
    2c9c:	7d000200 	.word	0x7d000200
    2ca0:	00000010 	.word	0x00000010
	...
    2cac:	00000800 	.word	0x00000800
    2cb0:	5d000100 	.word	0x5d000100
    2cb4:	00000008 	.word	0x00000008
    2cb8:	000000d0 	.word	0x000000d0
    2cbc:	087d0002 	.word	0x087d0002
	...
    2ccc:	00000018 	.word	0x00000018
    2cd0:	18500001 	.word	0x18500001
    2cd4:	20000000 	.word	0x20000000
    2cd8:	01000000 	.word	0x01000000
    2cdc:	00205400 	.word	0x00205400
    2ce0:	00380000 	.word	0x00380000
    2ce4:	00010000 	.word	0x00010000
    2ce8:	00003850 	.word	0x00003850
    2cec:	0000d000 	.word	0x0000d000
    2cf0:	54000100 	.word	0x54000100
	...
    2d00:	0000002c 	.word	0x0000002c
    2d04:	a4510001 	.word	0xa4510001
    2d08:	b0000000 	.word	0xb0000000
    2d0c:	01000000 	.word	0x01000000
    2d10:	00c45100 	.word	0x00c45100
    2d14:	00d00000 	.word	0x00d00000
    2d18:	00010000 	.word	0x00010000
    2d1c:	00000051 	.word	0x00000051
	...
    2d28:	00003800 	.word	0x00003800
    2d2c:	52000100 	.word	0x52000100
    2d30:	00000038 	.word	0x00000038
    2d34:	00000060 	.word	0x00000060
    2d38:	605c0001 	.word	0x605c0001
    2d3c:	90000000 	.word	0x90000000
    2d40:	01000000 	.word	0x01000000
    2d44:	00a05200 	.word	0x00a05200
    2d48:	00d00000 	.word	0x00d00000
    2d4c:	00010000 	.word	0x00010000
    2d50:	00000052 	.word	0x00000052
    2d54:	00000000 	.word	0x00000000
    2d58:	00000c00 	.word	0x00000c00
    2d5c:	00003000 	.word	0x00003000
    2d60:	5c000100 	.word	0x5c000100
    2d64:	000000a4 	.word	0x000000a4
    2d68:	000000d0 	.word	0x000000d0
    2d6c:	005c0001 	.word	0x005c0001
    2d70:	00000000 	.word	0x00000000
    2d74:	28000000 	.word	0x28000000
    2d78:	2c000000 	.word	0x2c000000
    2d7c:	01000000 	.word	0x01000000
    2d80:	002c5300 	.word	0x002c5300
    2d84:	00b00000 	.word	0x00b00000
    2d88:	00010000 	.word	0x00010000
    2d8c:	0000c451 	.word	0x0000c451
    2d90:	0000d000 	.word	0x0000d000
    2d94:	51000100 	.word	0x51000100
	...
    2da0:	00000034 	.word	0x00000034
    2da4:	0000005c 	.word	0x0000005c
    2da8:	70530001 	.word	0x70530001
    2dac:	74000000 	.word	0x74000000
    2db0:	01000000 	.word	0x01000000
    2db4:	00745000 	.word	0x00745000
    2db8:	00840000 	.word	0x00840000
    2dbc:	00010000 	.word	0x00010000
    2dc0:	00008453 	.word	0x00008453
    2dc4:	0000c800 	.word	0x0000c800
    2dc8:	50000100 	.word	0x50000100
	...
    2dd8:	00000008 	.word	0x00000008
    2ddc:	085d0001 	.word	0x085d0001
    2de0:	9c000000 	.word	0x9c000000
    2de4:	02000000 	.word	0x02000000
    2de8:	00147d00 	.word	0x00147d00
	...
    2df4:	20000000 	.word	0x20000000
    2df8:	01000000 	.word	0x01000000
    2dfc:	00205000 	.word	0x00205000
    2e00:	009c0000 	.word	0x009c0000
    2e04:	00010000 	.word	0x00010000
    2e08:	00000055 	.word	0x00000055
	...
    2e14:	00003c00 	.word	0x00003c00
    2e18:	51000100 	.word	0x51000100
    2e1c:	0000003c 	.word	0x0000003c
    2e20:	0000009c 	.word	0x0000009c
    2e24:	00580001 	.word	0x00580001
	...
    2e30:	3c000000 	.word	0x3c000000
    2e34:	01000000 	.word	0x01000000
    2e38:	003c5200 	.word	0x003c5200
    2e3c:	009c0000 	.word	0x009c0000
    2e40:	00010000 	.word	0x00010000
    2e44:	00000056 	.word	0x00000056
	...
    2e50:	00003c00 	.word	0x00003c00
    2e54:	53000100 	.word	0x53000100
    2e58:	0000003c 	.word	0x0000003c
    2e5c:	0000009c 	.word	0x0000009c
    2e60:	00570001 	.word	0x00570001
	...
    2e6c:	04000000 	.word	0x04000000
    2e70:	01000000 	.word	0x01000000
    2e74:	00045d00 	.word	0x00045d00
    2e78:	00100000 	.word	0x00100000
    2e7c:	00020000 	.word	0x00020000
    2e80:	0010247d 	.word	0x0010247d
    2e84:	010c0000 	.word	0x010c0000
    2e88:	00020000 	.word	0x00020000
    2e8c:	0000307d 	.word	0x0000307d
	...
    2e98:	00240000 	.word	0x00240000
    2e9c:	00010000 	.word	0x00010000
    2ea0:	00002450 	.word	0x00002450
    2ea4:	0000c000 	.word	0x0000c000
    2ea8:	7d000200 	.word	0x7d000200
    2eac:	0000c004 	.word	0x0000c004
    2eb0:	0000d400 	.word	0x0000d400
    2eb4:	91000200 	.word	0x91000200
    2eb8:	0000d470 	.word	0x0000d470
    2ebc:	0000e800 	.word	0x0000e800
    2ec0:	7d000200 	.word	0x7d000200
    2ec4:	0000e804 	.word	0x0000e804
    2ec8:	0000f400 	.word	0x0000f400
    2ecc:	91000200 	.word	0x91000200
    2ed0:	0000f470 	.word	0x0000f470
    2ed4:	00010c00 	.word	0x00010c00
    2ed8:	7d000200 	.word	0x7d000200
    2edc:	00000004 	.word	0x00000004
	...
    2ee8:	00002400 	.word	0x00002400
    2eec:	51000100 	.word	0x51000100
    2ef0:	00000024 	.word	0x00000024
    2ef4:	0000010c 	.word	0x0000010c
    2ef8:	00570001 	.word	0x00570001
    2efc:	00000000 	.word	0x00000000
    2f00:	44000000 	.word	0x44000000
    2f04:	c0000000 	.word	0xc0000000
    2f08:	01000000 	.word	0x01000000
    2f0c:	00d45c00 	.word	0x00d45c00
    2f10:	00dc0000 	.word	0x00dc0000
    2f14:	00010000 	.word	0x00010000
    2f18:	0000f85c 	.word	0x0000f85c
    2f1c:	00010400 	.word	0x00010400
    2f20:	5c000100 	.word	0x5c000100
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	524f4305 	subpl	r4, pc, #335544320	; 0x14000000
  14:	2d584554 	cfldr64cs	mvdx4, [r8, #-336]
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	084d070a 	stmdaeq	sp, {r1, r3, r8, r9, sl}^
  20:	12020901 	andne	r0, r2, #16384	; 0x4000
  24:	15011404 	strne	r1, [r1, #-1028]
  28:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  2c:	1a011901 	bne	46438 <__Stack_Size+0x46038>
  30:	Address 0x00000030 is out of bounds.


Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 	undefined instruction 0xffffffff
	...
  20:	0000011e 	andeq	r0, r0, lr, lsl r1
  24:	00000120 	andeq	r0, r0, r0, lsr #2
  28:	00000126 	andeq	r0, r0, r6, lsr #2
  2c:	0000014a 	andeq	r0, r0, sl, asr #2
  30:	00000122 	andeq	r0, r0, r2, lsr #2
  34:	00000124 	andeq	r0, r0, r4, lsr #2
	...
  40:	0000011e 	andeq	r0, r0, lr, lsl r1
  44:	00000120 	andeq	r0, r0, r0, lsr #2
  48:	00000130 	andeq	r0, r0, r0, lsr r1
  4c:	0000014a 	andeq	r0, r0, sl, asr #2
  50:	00000122 	andeq	r0, r0, r2, lsr #2
  54:	00000124 	andeq	r0, r0, r4, lsr #2
	...
  60:	0000014a 	andeq	r0, r0, sl, asr #2
  64:	0000015e 	andeq	r0, r0, lr, asr r1
  68:	00000188 	andeq	r0, r0, r8, lsl #3
  6c:	0000018e 	andeq	r0, r0, lr, lsl #3
	...
  78:	0000014a 	andeq	r0, r0, sl, asr #2
  7c:	0000015e 	andeq	r0, r0, lr, asr r1
  80:	00000188 	andeq	r0, r0, r8, lsl #3
  84:	0000018e 	andeq	r0, r0, lr, lsl #3
	...
  90:	0000015e 	andeq	r0, r0, lr, asr r1
  94:	00000182 	andeq	r0, r0, r2, lsl #3
  98:	00000186 	andeq	r0, r0, r6, lsl #3
  9c:	00000188 	andeq	r0, r0, r8, lsl #3
	...
  a8:	0000015e 	andeq	r0, r0, lr, asr r1
  ac:	00000160 	andeq	r0, r0, r0, ror #2
  b0:	00000186 	andeq	r0, r0, r6, lsl #3
  b4:	00000188 	andeq	r0, r0, r8, lsl #3
  b8:	0000016a 	andeq	r0, r0, sl, ror #2
  bc:	00000182 	andeq	r0, r0, r2, lsl #3
	...
  c8:	00000078 	andeq	r0, r0, r8, ror r0
  cc:	0000007a 	andeq	r0, r0, sl, ror r0
  d0:	0000007c 	andeq	r0, r0, ip, ror r0
  d4:	0000007e 	andeq	r0, r0, lr, ror r0
	...
  e0:	00000078 	andeq	r0, r0, r8, ror r0
  e4:	0000007a 	andeq	r0, r0, sl, ror r0
  e8:	0000007c 	andeq	r0, r0, ip, ror r0
  ec:	0000007e 	andeq	r0, r0, lr, ror r0
	...
  f8:	0000030e 	andeq	r0, r0, lr, lsl #6
  fc:	00000310 	andeq	r0, r0, r0, lsl r3
 100:	00000320 	andeq	r0, r0, r0, lsr #6
 104:	0000034a 	andeq	r0, r0, sl, asr #6
 108:	00000312 	andeq	r0, r0, r2, lsl r3
 10c:	0000031a 	andeq	r0, r0, sl, lsl r3
	...
 118:	0000030e 	andeq	r0, r0, lr, lsl #6
 11c:	00000310 	andeq	r0, r0, r0, lsl r3
 120:	00000320 	andeq	r0, r0, r0, lsr #6
 124:	0000034a 	andeq	r0, r0, sl, asr #6
 128:	00000312 	andeq	r0, r0, r2, lsl r3
 12c:	0000031a 	andeq	r0, r0, sl, lsl r3
	...
 138:	0000034a 	andeq	r0, r0, sl, asr #6
 13c:	0000034c 	andeq	r0, r0, ip, asr #6
 140:	0000034e 	andeq	r0, r0, lr, asr #6
 144:	00000360 	andeq	r0, r0, r0, ror #6
	...
 150:	00000364 	andeq	r0, r0, r4, ror #6
 154:	00000366 	andeq	r0, r0, r6, ror #6
 158:	00000376 	andeq	r0, r0, r6, ror r3
 15c:	000003a6 	andeq	r0, r0, r6, lsr #7
 160:	0000036a 	andeq	r0, r0, sl, ror #6
 164:	00000372 	andeq	r0, r0, r2, ror r3
	...
 170:	00000364 	andeq	r0, r0, r4, ror #6
 174:	00000366 	andeq	r0, r0, r6, ror #6
 178:	00000376 	andeq	r0, r0, r6, ror r3
 17c:	000003a6 	andeq	r0, r0, r6, lsr #7
 180:	0000036a 	andeq	r0, r0, sl, ror #6
 184:	00000372 	andeq	r0, r0, r2, ror r3
	...
 190:	000003a6 	andeq	r0, r0, r6, lsr #7
 194:	000003a8 	andeq	r0, r0, r8, lsr #7
 198:	000003aa 	andeq	r0, r0, sl, lsr #7
 19c:	000003c2 	andeq	r0, r0, r2, asr #7
	...
 1a8:	00000404 	andeq	r0, r0, r4, lsl #8
 1ac:	00000406 	andeq	r0, r0, r6, lsl #8
 1b0:	00000408 	andeq	r0, r0, r8, lsl #8
 1b4:	0000041a 	andeq	r0, r0, sl, lsl r4
	...
 1c0:	00000454 	andeq	r0, r0, r4, asr r4
 1c4:	00000456 	andeq	r0, r0, r6, asr r4
 1c8:	00000458 	andeq	r0, r0, r8, asr r4
 1cc:	0000046e 	andeq	r0, r0, lr, ror #8
	...
 1d8:	000004c6 	andeq	r0, r0, r6, asr #9
 1dc:	000004c8 	andeq	r0, r0, r8, asr #9
 1e0:	000004cc 	andeq	r0, r0, ip, asr #9
 1e4:	000004de 	ldrdeq	r0, [r0], -lr
	...
 1f0:	00000566 	andeq	r0, r0, r6, ror #10
 1f4:	00000568 	andeq	r0, r0, r8, ror #10
 1f8:	0000056c 	andeq	r0, r0, ip, ror #10
 1fc:	00000582 	andeq	r0, r0, r2, lsl #11
	...
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	00000024 	andeq	r0, r0, r4, lsr #32
 210:	00000070 	andeq	r0, r0, r0, ror r0
 214:	0000010c 	andeq	r0, r0, ip, lsl #2
 218:	00000044 	andeq	r0, r0, r4, asr #32
 21c:	00000058 	andeq	r0, r0, r8, asr r0
	...
 228:	ffffffff 	undefined instruction 0xffffffff
	...
