
CM530.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000134  08003000  08003000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001458  08003134  08003134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  20000000  20000000  00008000  2**2
                  ALLOC
  3 ._usrstack    00000100  20000004  20000004  00008000  2**0
                  ALLOC
  4 .comment      00000240  00000000  00000000  0000458c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  000047d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000013ad  00000000  00000000  00004a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005720  00000000  00000000  00005ded  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016a6  00000000  00000000  0000b50d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130c  00000000  00000000  0000cbb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f20  00000000  00000000  0000dec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001f94  00000000  00000000  0000ede0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001458  00000000  00000000  00010d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .ARM.attributes 00000031  00000000  00000000  000121cc  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000138  00000000  00000000  00012200  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08003000 <g_pfnVectors>:
 8003000:	20010000 	.word	0x20010000
 8003004:	08004525 	.word	0x08004525
 8003008:	0800333d 	.word	0x0800333d
 800300c:	08003341 	.word	0x08003341
 8003010:	08003345 	.word	0x08003345
 8003014:	08003349 	.word	0x08003349
 8003018:	0800334d 	.word	0x0800334d
	...
 800302c:	08003355 	.word	0x08003355
 8003030:	08003351 	.word	0x08003351
 8003034:	00000000 	.word	0x00000000
 8003038:	08003359 	.word	0x08003359
 800303c:	0800344d 	.word	0x0800344d
 8003040:	0800335d 	.word	0x0800335d
 8003044:	08003361 	.word	0x08003361
 8003048:	08003365 	.word	0x08003365
 800304c:	08003369 	.word	0x08003369
 8003050:	0800336d 	.word	0x0800336d
 8003054:	08003371 	.word	0x08003371
 8003058:	08003375 	.word	0x08003375
 800305c:	08003379 	.word	0x08003379
 8003060:	0800337d 	.word	0x0800337d
 8003064:	08003381 	.word	0x08003381
 8003068:	08003385 	.word	0x08003385
	...
 8003088:	080033a5 	.word	0x080033a5
 800308c:	080033a9 	.word	0x080033a9
 8003090:	080033ad 	.word	0x080033ad
 8003094:	080033b1 	.word	0x080033b1
 8003098:	080033b5 	.word	0x080033b5
 800309c:	080033b9 	.word	0x080033b9
 80030a0:	080033bd 	.word	0x080033bd
 80030a4:	080033c1 	.word	0x080033c1
 80030a8:	080033c5 	.word	0x080033c5
 80030ac:	080033c9 	.word	0x080033c9
 80030b0:	080033cd 	.word	0x080033cd
 80030b4:	080033d1 	.word	0x080033d1
 80030b8:	080033d5 	.word	0x080033d5
 80030bc:	080033d9 	.word	0x080033d9
 80030c0:	080033dd 	.word	0x080033dd
 80030c4:	080033e1 	.word	0x080033e1
 80030c8:	080033e5 	.word	0x080033e5
 80030cc:	080033e9 	.word	0x080033e9
 80030d0:	080033ed 	.word	0x080033ed
 80030d4:	080033f1 	.word	0x080033f1
 80030d8:	080033f5 	.word	0x080033f5
 80030dc:	080033f9 	.word	0x080033f9
 80030e0:	080033fd 	.word	0x080033fd
 80030e4:	08003401 	.word	0x08003401
 80030e8:	08003405 	.word	0x08003405
 80030ec:	08003409 	.word	0x08003409
 80030f0:	0800340d 	.word	0x0800340d
 80030f4:	08003411 	.word	0x08003411
 80030f8:	08003415 	.word	0x08003415
 80030fc:	08003419 	.word	0x08003419
 8003100:	0800341d 	.word	0x0800341d
 8003104:	08003421 	.word	0x08003421
 8003108:	08003425 	.word	0x08003425
 800310c:	08003429 	.word	0x08003429
 8003110:	0800342d 	.word	0x0800342d
 8003114:	08003431 	.word	0x08003431
 8003118:	08003435 	.word	0x08003435
 800311c:	08003439 	.word	0x08003439
 8003120:	0800343d 	.word	0x0800343d
 8003124:	08003441 	.word	0x08003441
 8003128:	08003445 	.word	0x08003445
 800312c:	08003449 	.word	0x08003449
 8003130:	0000f85f 	.word	0x0000f85f

Disassembly of section .text:

08003134 <__ISR_DELAY>:
	  SysTick_ITConfig(ENABLE);
}

void __ISR_DELAY(void)
{
	if (gwTimingDelay != 0x00)
 8003134:	4a03      	ldr	r2, [pc, #12]	(8003144 <__ISR_DELAY+0x10>)
 8003136:	6813      	ldr	r3, [r2, #0]
 8003138:	b113      	cbz	r3, 8003140 <__ISR_DELAY+0xc>
		gwTimingDelay--;
 800313a:	6813      	ldr	r3, [r2, #0]
 800313c:	3b01      	subs	r3, #1
 800313e:	6013      	str	r3, [r2, #0]
}
 8003140:	4770      	bx	lr
 8003142:	46c0      	nop			(mov r8, r8)
 8003144:	20000000 	.word	0x20000000

08003148 <mDelay>:

void mDelay(u32 nTime)
{
 8003148:	b510      	push	{r4, lr}
 800314a:	4604      	mov	r4, r0
	  /* Enable the SysTick Counter */
	  SysTick_CounterCmd(SysTick_Counter_Enable);
 800314c:	2001      	movs	r0, #1
 800314e:	f001 f973 	bl	8004438 <SysTick_CounterCmd>

	  gwTimingDelay = nTime;
 8003152:	4b07      	ldr	r3, [pc, #28]	(8003170 <mDelay+0x28>)
 8003154:	601c      	str	r4, [r3, #0]

	  while(gwTimingDelay != 0);
 8003156:	461a      	mov	r2, r3
 8003158:	6813      	ldr	r3, [r2, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1fc      	bne.n	8003158 <mDelay+0x10>

	  /* Disable SysTick Counter */
	  SysTick_CounterCmd(SysTick_Counter_Disable);
 800315e:	f06f 0001 	mvn.w	r0, #1	; 0x1
 8003162:	f001 f969 	bl	8004438 <SysTick_CounterCmd>
	  /* Clear SysTick Counter */
	  SysTick_CounterCmd(SysTick_Counter_Clear);
 8003166:	2000      	movs	r0, #0
 8003168:	f001 f966 	bl	8004438 <SysTick_CounterCmd>
}
 800316c:	bd10      	pop	{r4, pc}
 800316e:	46c0      	nop			(mov r8, r8)
 8003170:	20000000 	.word	0x20000000

08003174 <SysTick_Configuration>:
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
}

void SysTick_Configuration(void)
{
 8003174:	b500      	push	{lr}
	  /* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
	  SysTick_SetReload(9000);
 8003176:	f242 3028 	movw	r0, #9000	; 0x2328
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
}

void SysTick_Configuration(void)
{
 800317a:	b081      	sub	sp, #4
	  /* SysTick end of count event each 1ms with input clock equal to 9MHz (HCLK/8, default) */
	  SysTick_SetReload(9000);
 800317c:	f001 f956 	bl	800442c <SysTick_SetReload>

	  /* Enable SysTick interrupt */
	  SysTick_ITConfig(ENABLE);
 8003180:	2001      	movs	r0, #1
 8003182:	f001 f96f 	bl	8004464 <SysTick_ITConfig>
}
 8003186:	b001      	add	sp, #4
 8003188:	bd00      	pop	{pc}
 800318a:	46c0      	nop			(mov r8, r8)

0800318c <GPIO_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Configuration(void)
{
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	b082      	sub	sp, #8
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);
 8003190:	ac01      	add	r4, sp, #4
 8003192:	4620      	mov	r0, r4
 8003194:	f000 fc48 	bl	8003a28 <GPIO_StructInit>

	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = 	 PIN_LED_AUX | PIN_LED_MANAGE | PIN_LED_PROGRAM | PIN_LED_PLAY;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003198:	2603      	movs	r6, #3
{
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);

	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = 	 PIN_LED_AUX | PIN_LED_MANAGE | PIN_LED_PROGRAM | PIN_LED_PLAY;
 800319a:	f24f 0300 	movw	r3, #61440	; 0xf000
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800319e:	2510      	movs	r5, #16
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80031a0:	4621      	mov	r1, r4
 80031a2:	480b      	ldr	r0, [pc, #44]	(80031d0 <GPIO_Configuration+0x44>)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);

	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = 	 PIN_LED_AUX | PIN_LED_MANAGE | PIN_LED_PROGRAM | PIN_LED_PLAY;
 80031a4:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80031a8:	f88d 6006 	strb.w	r6, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80031ac:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80031b0:	f000 fbe6 	bl	8003980 <GPIO_Init>

	// PORTC CONFIG
	GPIO_InitStructure.GPIO_Pin = 	 PIN_LED_POWER | PIN_LED_TX | PIN_LED_RX;
 80031b4:	f24e 0300 	movw	r3, #57344	; 0xe000
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80031b8:	4806      	ldr	r0, [pc, #24]	(80031d4 <GPIO_Configuration+0x48>)
 80031ba:	4621      	mov	r1, r4
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	// PORTC CONFIG
	GPIO_InitStructure.GPIO_Pin = 	 PIN_LED_POWER | PIN_LED_TX | PIN_LED_RX;
 80031bc:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80031c0:	f88d 6006 	strb.w	r6, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80031c4:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80031c8:	f000 fbda 	bl	8003980 <GPIO_Init>
}
 80031cc:	b002      	add	sp, #8
 80031ce:	bd70      	pop	{r4, r5, r6, pc}
 80031d0:	40010c00 	.word	0x40010c00
 80031d4:	40011000 	.word	0x40011000

080031d8 <NVIC_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Configuration(void)
{
 80031d8:	b500      	push	{lr}
	#ifdef  VECT_TAB_RAM
		// Set the Vector Table base location at 0x20000000
		NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
	#else  // VECT_TAB_FLASH
		// Set the Vector Table base location at 0x08003000
		NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 80031da:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Configuration(void)
{
 80031de:	b081      	sub	sp, #4
	#ifdef  VECT_TAB_RAM
		// Set the Vector Table base location at 0x20000000
		NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
	#else  // VECT_TAB_FLASH
		// Set the Vector Table base location at 0x08003000
		NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 80031e0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80031e4:	f000 fde0 	bl	8003da8 <NVIC_SetVectorTable>
	#endif
}
 80031e8:	b001      	add	sp, #4
 80031ea:	bd00      	pop	{pc}

080031ec <RCC_Configuration>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_Configuration(void)
{
 80031ec:	b500      	push	{lr}
 80031ee:	b081      	sub	sp, #4
	ErrorStatus HSEStartUpStatus;
	/* RCC system reset(for debug purpose) */
	RCC_DeInit();
 80031f0:	f000 ff3c 	bl	800406c <RCC_DeInit>

	/* Enable HSE */
	RCC_HSEConfig(RCC_HSE_ON);
 80031f4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80031f8:	f000 ff58 	bl	80040ac <RCC_HSEConfig>

	/* Wait till HSE is ready */
	HSEStartUpStatus = RCC_WaitForHSEStartUp();
 80031fc:	f000 ff70 	bl	80040e0 <RCC_WaitForHSEStartUp>

	if(HSEStartUpStatus == SUCCESS)
 8003200:	2801      	cmp	r0, #1
 8003202:	d124      	bne.n	800324e <RCC_Configuration+0x62>
	{
		/* Enable Prefetch Buffer */
		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8003204:	2010      	movs	r0, #16
 8003206:	f000 f93f 	bl	8003488 <FLASH_PrefetchBufferCmd>

		/* Flash 2 wait state */
		FLASH_SetLatency(FLASH_Latency_2);
 800320a:	2002      	movs	r0, #2
 800320c:	f000 f924 	bl	8003458 <FLASH_SetLatency>

		/* HCLK = SYSCLK */
		RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8003210:	2000      	movs	r0, #0
 8003212:	f000 ffaf 	bl	8004174 <RCC_HCLKConfig>

		/* PCLK2 = HCLK */
		RCC_PCLK2Config(RCC_HCLK_Div1);
 8003216:	2000      	movs	r0, #0
 8003218:	f000 ffc0 	bl	800419c <RCC_PCLK2Config>

		/* PCLK1 = HCLK/2 */
		RCC_PCLK1Config(RCC_HCLK_Div2);
 800321c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003220:	f000 ffb2 	bl	8004188 <RCC_PCLK1Config>

		/* PLLCLK = 8MHz * 9 = 72 MHz */
		RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8003224:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003228:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 800322c:	f000 ff80 	bl	8004130 <RCC_PLLConfig>

		/* Enable PLL */
		RCC_PLLCmd(ENABLE);
 8003230:	2001      	movs	r0, #1
 8003232:	f000 ff87 	bl	8004144 <RCC_PLLCmd>

		/* Wait till PLL is ready */
		while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
 8003236:	2039      	movs	r0, #57
 8003238:	f001 f8b0 	bl	800439c <RCC_GetFlagStatus>
 800323c:	2800      	cmp	r0, #0
 800323e:	d0fa      	beq.n	8003236 <RCC_Configuration+0x4a>
		{
		}

		/* Select PLL as system clock source */
		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8003240:	2002      	movs	r0, #2
 8003242:	f000 ff85 	bl	8004150 <RCC_SYSCLKConfig>

		/* Wait till PLL is used as system clock source */
		while(RCC_GetSYSCLKSource() != 0x08)
 8003246:	f000 ff8d 	bl	8004164 <RCC_GetSYSCLKSource>
 800324a:	2808      	cmp	r0, #8
 800324c:	d1fb      	bne.n	8003246 <RCC_Configuration+0x5a>
	}

	/* Enable peripheral clocks --------------------------------------------------*/

	/* Enable GPIOB and GPIOC clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC, ENABLE);
 800324e:	2018      	movs	r0, #24
 8003250:	2101      	movs	r1, #1
 8003252:	f001 f859 	bl	8004308 <RCC_APB2PeriphClockCmd>

	PWR_BackupAccessCmd(ENABLE);
 8003256:	2001      	movs	r0, #1
 8003258:	f000 fe98 	bl	8003f8c <PWR_BackupAccessCmd>
}
 800325c:	b001      	add	sp, #4
 800325e:	bd00      	pop	{pc}

08003260 <main>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
int main(void)
{
 8003260:	b500      	push	{lr}
 8003262:	b081      	sub	sp, #4
	/* System Clocks Configuration */
	RCC_Configuration();
 8003264:	f7ff ffc2 	bl	80031ec <RCC_Configuration>
	#ifdef  VECT_TAB_RAM
		// Set the Vector Table base location at 0x20000000
		NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
	#else  // VECT_TAB_FLASH
		// Set the Vector Table base location at 0x08003000
		NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 8003268:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800326c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003270:	f000 fd9a 	bl	8003da8 <NVIC_SetVectorTable>

	/* NVIC configuration */
	NVIC_Configuration();

	/* Configure the GPIO ports */
	GPIO_Configuration();
 8003274:	f7ff ff8a 	bl	800318c <GPIO_Configuration>

	SysTick_Configuration();
 8003278:	f7ff ff7c 	bl	8003174 <SysTick_Configuration>

	while(1)
	{
		GPIO_SetBits(PORT_LED_POWER, PIN_LED_POWER);
 800327c:	482d      	ldr	r0, [pc, #180]	(8003334 <main+0xd4>)
 800327e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003282:	f000 fbed 	bl	8003a60 <GPIO_SetBits>
		GPIO_ResetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
 8003286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800328a:	482b      	ldr	r0, [pc, #172]	(8003338 <main+0xd8>)
 800328c:	f000 fbea 	bl	8003a64 <GPIO_ResetBits>
		mDelay(250);
 8003290:	20fa      	movs	r0, #250
 8003292:	f7ff ff59 	bl	8003148 <mDelay>

		GPIO_SetBits(PORT_LED_MANAGE, PIN_LED_MANAGE);
 8003296:	4828      	ldr	r0, [pc, #160]	(8003338 <main+0xd8>)
 8003298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800329c:	f000 fbe0 	bl	8003a60 <GPIO_SetBits>
		GPIO_ResetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);
 80032a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032a4:	4824      	ldr	r0, [pc, #144]	(8003338 <main+0xd8>)
 80032a6:	f000 fbdd 	bl	8003a64 <GPIO_ResetBits>
		mDelay(250);
 80032aa:	20fa      	movs	r0, #250
 80032ac:	f7ff ff4c 	bl	8003148 <mDelay>

		GPIO_SetBits(PORT_LED_PROGRAM, PIN_LED_PROGRAM);
 80032b0:	4821      	ldr	r0, [pc, #132]	(8003338 <main+0xd8>)
 80032b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032b6:	f000 fbd3 	bl	8003a60 <GPIO_SetBits>
		GPIO_ResetBits(PORT_LED_PLAY, PIN_LED_PLAY);
 80032ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032be:	481e      	ldr	r0, [pc, #120]	(8003338 <main+0xd8>)
 80032c0:	f000 fbd0 	bl	8003a64 <GPIO_ResetBits>
		mDelay(250);
 80032c4:	20fa      	movs	r0, #250
 80032c6:	f7ff ff3f 	bl	8003148 <mDelay>

		GPIO_SetBits(PORT_LED_PLAY, PIN_LED_PLAY);
 80032ca:	481b      	ldr	r0, [pc, #108]	(8003338 <main+0xd8>)
 80032cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032d0:	f000 fbc6 	bl	8003a60 <GPIO_SetBits>
		GPIO_ResetBits(PORT_LED_TX, PIN_LED_TX);
 80032d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032d8:	4816      	ldr	r0, [pc, #88]	(8003334 <main+0xd4>)
 80032da:	f000 fbc3 	bl	8003a64 <GPIO_ResetBits>
		mDelay(250);
 80032de:	20fa      	movs	r0, #250
 80032e0:	f7ff ff32 	bl	8003148 <mDelay>

		GPIO_SetBits(PORT_LED_TX, PIN_LED_TX);
 80032e4:	4813      	ldr	r0, [pc, #76]	(8003334 <main+0xd4>)
 80032e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032ea:	f000 fbb9 	bl	8003a60 <GPIO_SetBits>
		GPIO_ResetBits(PORT_LED_RX, PIN_LED_RX);
 80032ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032f2:	4810      	ldr	r0, [pc, #64]	(8003334 <main+0xd4>)
 80032f4:	f000 fbb6 	bl	8003a64 <GPIO_ResetBits>
		mDelay(250);
 80032f8:	20fa      	movs	r0, #250
 80032fa:	f7ff ff25 	bl	8003148 <mDelay>

		GPIO_SetBits(PORT_LED_RX, PIN_LED_RX);
 80032fe:	480d      	ldr	r0, [pc, #52]	(8003334 <main+0xd4>)
 8003300:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003304:	f000 fbac 	bl	8003a60 <GPIO_SetBits>
		GPIO_ResetBits(PORT_LED_AUX, PIN_LED_AUX);
 8003308:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800330c:	480a      	ldr	r0, [pc, #40]	(8003338 <main+0xd8>)
 800330e:	f000 fba9 	bl	8003a64 <GPIO_ResetBits>
		mDelay(250);
 8003312:	20fa      	movs	r0, #250
 8003314:	f7ff ff18 	bl	8003148 <mDelay>

		GPIO_SetBits(PORT_LED_AUX, PIN_LED_AUX);
 8003318:	4807      	ldr	r0, [pc, #28]	(8003338 <main+0xd8>)
 800331a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800331e:	f000 fb9f 	bl	8003a60 <GPIO_SetBits>
		GPIO_ResetBits(PORT_LED_POWER, PIN_LED_POWER);
 8003322:	4804      	ldr	r0, [pc, #16]	(8003334 <main+0xd4>)
 8003324:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003328:	f000 fb9c 	bl	8003a64 <GPIO_ResetBits>
		mDelay(250);
 800332c:	20fa      	movs	r0, #250
 800332e:	f7ff ff0b 	bl	8003148 <mDelay>
 8003332:	e7a3      	b.n	800327c <main+0x1c>
 8003334:	40011000 	.word	0x40011000
 8003338:	40010c00 	.word	0x40010c00

0800333c <NMIException>:
* Output         : None
* Return         : None
*******************************************************************************/
void NMIException(void)
{
}
 800333c:	4770      	bx	lr
 800333e:	46c0      	nop			(mov r8, r8)

08003340 <HardFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFaultException(void)
{
 8003340:	e7fe      	b.n	8003340 <HardFaultException>
 8003342:	46c0      	nop			(mov r8, r8)

08003344 <MemManageException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManageException(void)
{
 8003344:	e7fe      	b.n	8003344 <MemManageException>
 8003346:	46c0      	nop			(mov r8, r8)

08003348 <BusFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFaultException(void)
{
 8003348:	e7fe      	b.n	8003348 <BusFaultException>
 800334a:	46c0      	nop			(mov r8, r8)

0800334c <UsageFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFaultException(void)
{
 800334c:	e7fe      	b.n	800334c <UsageFaultException>
 800334e:	46c0      	nop			(mov r8, r8)

08003350 <DebugMonitor>:
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMonitor(void)
{
}
 8003350:	4770      	bx	lr
 8003352:	46c0      	nop			(mov r8, r8)

08003354 <SVCHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SVCHandler(void)
{
}
 8003354:	4770      	bx	lr
 8003356:	46c0      	nop			(mov r8, r8)

08003358 <PendSVC>:
* Output         : None
* Return         : None
*******************************************************************************/
void PendSVC(void)
{
}
 8003358:	4770      	bx	lr
 800335a:	46c0      	nop			(mov r8, r8)

0800335c <WWDG_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void WWDG_IRQHandler(void)
{
}
 800335c:	4770      	bx	lr
 800335e:	46c0      	nop			(mov r8, r8)

08003360 <PVD_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void PVD_IRQHandler(void)
{
}
 8003360:	4770      	bx	lr
 8003362:	46c0      	nop			(mov r8, r8)

08003364 <TAMPER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TAMPER_IRQHandler(void)
{
}
 8003364:	4770      	bx	lr
 8003366:	46c0      	nop			(mov r8, r8)

08003368 <RTC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_IRQHandler(void)
{
}
 8003368:	4770      	bx	lr
 800336a:	46c0      	nop			(mov r8, r8)

0800336c <FLASH_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_IRQHandler(void)
{
}
 800336c:	4770      	bx	lr
 800336e:	46c0      	nop			(mov r8, r8)

08003370 <RCC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_IRQHandler(void)
{
}
 8003370:	4770      	bx	lr
 8003372:	46c0      	nop			(mov r8, r8)

08003374 <EXTI0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI0_IRQHandler(void)
{
}
 8003374:	4770      	bx	lr
 8003376:	46c0      	nop			(mov r8, r8)

08003378 <EXTI1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI1_IRQHandler(void)
{
}
 8003378:	4770      	bx	lr
 800337a:	46c0      	nop			(mov r8, r8)

0800337c <EXTI2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI2_IRQHandler(void)
{
}
 800337c:	4770      	bx	lr
 800337e:	46c0      	nop			(mov r8, r8)

08003380 <EXTI3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void)
{
}
 8003380:	4770      	bx	lr
 8003382:	46c0      	nop			(mov r8, r8)

08003384 <EXTI4_IRQHandler>:
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void)
{

}
 8003384:	4770      	bx	lr
 8003386:	46c0      	nop			(mov r8, r8)

08003388 <DMA1_Channel1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel1_IRQHandler(void)
{
}
 8003388:	4770      	bx	lr
 800338a:	46c0      	nop			(mov r8, r8)

0800338c <DMA1_Channel2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel2_IRQHandler(void)
{
}
 800338c:	4770      	bx	lr
 800338e:	46c0      	nop			(mov r8, r8)

08003390 <DMA1_Channel3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel3_IRQHandler(void)
{
}
 8003390:	4770      	bx	lr
 8003392:	46c0      	nop			(mov r8, r8)

08003394 <DMA1_Channel4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel4_IRQHandler(void)
{
}
 8003394:	4770      	bx	lr
 8003396:	46c0      	nop			(mov r8, r8)

08003398 <DMA1_Channel5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel5_IRQHandler(void)
{
}
 8003398:	4770      	bx	lr
 800339a:	46c0      	nop			(mov r8, r8)

0800339c <DMA1_Channel6_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel6_IRQHandler(void)
{
}
 800339c:	4770      	bx	lr
 800339e:	46c0      	nop			(mov r8, r8)

080033a0 <DMA1_Channel7_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel7_IRQHandler(void)
{
}
 80033a0:	4770      	bx	lr
 80033a2:	46c0      	nop			(mov r8, r8)

080033a4 <ADC1_2_IRQHandler>:
*******************************************************************************/

void ADC1_2_IRQHandler(void)
{

}
 80033a4:	4770      	bx	lr
 80033a6:	46c0      	nop			(mov r8, r8)

080033a8 <USB_HP_CAN_TX_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
}
 80033a8:	4770      	bx	lr
 80033aa:	46c0      	nop			(mov r8, r8)

080033ac <USB_LP_CAN_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void)
{
}
 80033ac:	4770      	bx	lr
 80033ae:	46c0      	nop			(mov r8, r8)

080033b0 <CAN_RX1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_RX1_IRQHandler(void)
{
}
 80033b0:	4770      	bx	lr
 80033b2:	46c0      	nop			(mov r8, r8)

080033b4 <CAN_SCE_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_SCE_IRQHandler(void)
{
}
 80033b4:	4770      	bx	lr
 80033b6:	46c0      	nop			(mov r8, r8)

080033b8 <EXTI9_5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI9_5_IRQHandler(void)
{
}
 80033b8:	4770      	bx	lr
 80033ba:	46c0      	nop			(mov r8, r8)

080033bc <TIM1_BRK_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_BRK_IRQHandler(void)
{
}
 80033bc:	4770      	bx	lr
 80033be:	46c0      	nop			(mov r8, r8)

080033c0 <TIM1_UP_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
}
 80033c0:	4770      	bx	lr
 80033c2:	46c0      	nop			(mov r8, r8)

080033c4 <TIM1_TRG_COM_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void)
{
}
 80033c4:	4770      	bx	lr
 80033c6:	46c0      	nop			(mov r8, r8)

080033c8 <TIM1_CC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_CC_IRQHandler(void)
{
}
 80033c8:	4770      	bx	lr
 80033ca:	46c0      	nop			(mov r8, r8)

080033cc <TIM2_IRQHandler>:
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void)
{

}
 80033cc:	4770      	bx	lr
 80033ce:	46c0      	nop			(mov r8, r8)

080033d0 <TIM3_IRQHandler>:
* Return         : None
*******************************************************************************/
void TIM3_IRQHandler(void)
{

}
 80033d0:	4770      	bx	lr
 80033d2:	46c0      	nop			(mov r8, r8)

080033d4 <TIM4_IRQHandler>:
* Return         : None
*******************************************************************************/
void TIM4_IRQHandler(void)
{

}
 80033d4:	4770      	bx	lr
 80033d6:	46c0      	nop			(mov r8, r8)

080033d8 <I2C1_EV_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
}
 80033d8:	4770      	bx	lr
 80033da:	46c0      	nop			(mov r8, r8)

080033dc <I2C1_ER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_ER_IRQHandler(void)
{
}
 80033dc:	4770      	bx	lr
 80033de:	46c0      	nop			(mov r8, r8)

080033e0 <I2C2_EV_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_EV_IRQHandler(void)
{
}
 80033e0:	4770      	bx	lr
 80033e2:	46c0      	nop			(mov r8, r8)

080033e4 <I2C2_ER_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_ER_IRQHandler(void)
{
}
 80033e4:	4770      	bx	lr
 80033e6:	46c0      	nop			(mov r8, r8)

080033e8 <SPI1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SPI1_IRQHandler(void)
{
}
 80033e8:	4770      	bx	lr
 80033ea:	46c0      	nop			(mov r8, r8)

080033ec <SPI2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SPI2_IRQHandler(void)
{
}
 80033ec:	4770      	bx	lr
 80033ee:	46c0      	nop			(mov r8, r8)

080033f0 <USART1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USART1_IRQHandler(void)
{
}
 80033f0:	4770      	bx	lr
 80033f2:	46c0      	nop			(mov r8, r8)

080033f4 <USART2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void)
{
}
 80033f4:	4770      	bx	lr
 80033f6:	46c0      	nop			(mov r8, r8)

080033f8 <USART3_IRQHandler>:
* Return         : None
*******************************************************************************/
void USART3_IRQHandler(void)
{

}
 80033f8:	4770      	bx	lr
 80033fa:	46c0      	nop			(mov r8, r8)

080033fc <EXTI15_10_IRQHandler>:
* Return         : None
*******************************************************************************/
void EXTI15_10_IRQHandler(void)
{

}
 80033fc:	4770      	bx	lr
 80033fe:	46c0      	nop			(mov r8, r8)

08003400 <RTCAlarm_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void RTCAlarm_IRQHandler(void)
{
}
 8003400:	4770      	bx	lr
 8003402:	46c0      	nop			(mov r8, r8)

08003404 <USBWakeUp_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
}
 8003404:	4770      	bx	lr
 8003406:	46c0      	nop			(mov r8, r8)

08003408 <TIM8_BRK_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_BRK_IRQHandler(void)
{
}
 8003408:	4770      	bx	lr
 800340a:	46c0      	nop			(mov r8, r8)

0800340c <TIM8_UP_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_UP_IRQHandler(void)
{
}
 800340c:	4770      	bx	lr
 800340e:	46c0      	nop			(mov r8, r8)

08003410 <TIM8_TRG_COM_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_TRG_COM_IRQHandler(void)
{
}
 8003410:	4770      	bx	lr
 8003412:	46c0      	nop			(mov r8, r8)

08003414 <TIM8_CC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_CC_IRQHandler(void)
{
}
 8003414:	4770      	bx	lr
 8003416:	46c0      	nop			(mov r8, r8)

08003418 <ADC3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void ADC3_IRQHandler(void)
{
}
 8003418:	4770      	bx	lr
 800341a:	46c0      	nop			(mov r8, r8)

0800341c <FSMC_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void FSMC_IRQHandler(void)
{
}
 800341c:	4770      	bx	lr
 800341e:	46c0      	nop			(mov r8, r8)

08003420 <SDIO_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SDIO_IRQHandler(void)
{
}
 8003420:	4770      	bx	lr
 8003422:	46c0      	nop			(mov r8, r8)

08003424 <TIM5_IRQHandler>:
* Return         : None
*******************************************************************************/
void TIM5_IRQHandler(void)
{

}
 8003424:	4770      	bx	lr
 8003426:	46c0      	nop			(mov r8, r8)

08003428 <SPI3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void SPI3_IRQHandler(void)
{
}
 8003428:	4770      	bx	lr
 800342a:	46c0      	nop			(mov r8, r8)

0800342c <UART4_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void UART4_IRQHandler(void)
{
}
 800342c:	4770      	bx	lr
 800342e:	46c0      	nop			(mov r8, r8)

08003430 <UART5_IRQHandler>:
*******************************************************************************/
void UART5_IRQHandler(void)
{


}
 8003430:	4770      	bx	lr
 8003432:	46c0      	nop			(mov r8, r8)

08003434 <TIM6_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM6_IRQHandler(void)
{
}
 8003434:	4770      	bx	lr
 8003436:	46c0      	nop			(mov r8, r8)

08003438 <TIM7_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void TIM7_IRQHandler(void)
{
}
 8003438:	4770      	bx	lr
 800343a:	46c0      	nop			(mov r8, r8)

0800343c <DMA2_Channel1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel1_IRQHandler(void)
{
}
 800343c:	4770      	bx	lr
 800343e:	46c0      	nop			(mov r8, r8)

08003440 <DMA2_Channel2_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel2_IRQHandler(void)
{
}
 8003440:	4770      	bx	lr
 8003442:	46c0      	nop			(mov r8, r8)

08003444 <DMA2_Channel3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel3_IRQHandler(void)
{
}
 8003444:	4770      	bx	lr
 8003446:	46c0      	nop			(mov r8, r8)

08003448 <DMA2_Channel4_5_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel4_5_IRQHandler(void)
{
}
 8003448:	4770      	bx	lr
 800344a:	46c0      	nop			(mov r8, r8)

0800344c <SysTickHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SysTickHandler(void)
{
 800344c:	b500      	push	{lr}
 800344e:	b081      	sub	sp, #4
	__ISR_DELAY();
 8003450:	f7ff fe70 	bl	8003134 <__ISR_DELAY>
}
 8003454:	b001      	add	sp, #4
 8003456:	bd00      	pop	{pc}

08003458 <FLASH_SetLatency>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Sets the Latency value */
  FLASH->ACR &= ACR_LATENCY_Mask;
 8003458:	4a04      	ldr	r2, [pc, #16]	(800346c <FLASH_SetLatency+0x14>)
 800345a:	6813      	ldr	r3, [r2, #0]
 800345c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003460:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_Latency;
 8003462:	6813      	ldr	r3, [r2, #0]
 8003464:	4318      	orrs	r0, r3
 8003466:	6010      	str	r0, [r2, #0]
}
 8003468:	4770      	bx	lr
 800346a:	46c0      	nop			(mov r8, r8)
 800346c:	40022000 	.word	0x40022000

08003470 <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 8003470:	4a04      	ldr	r2, [pc, #16]	(8003484 <FLASH_HalfCycleAccessCmd+0x14>)
 8003472:	6813      	ldr	r3, [r2, #0]
 8003474:	f023 0308 	bic.w	r3, r3, #8	; 0x8
 8003478:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 800347a:	6813      	ldr	r3, [r2, #0]
 800347c:	4318      	orrs	r0, r3
 800347e:	6010      	str	r0, [r2, #0]
}
 8003480:	4770      	bx	lr
 8003482:	46c0      	nop			(mov r8, r8)
 8003484:	40022000 	.word	0x40022000

08003488 <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 8003488:	4a04      	ldr	r2, [pc, #16]	(800349c <FLASH_PrefetchBufferCmd+0x14>)
 800348a:	6813      	ldr	r3, [r2, #0]
 800348c:	f023 0310 	bic.w	r3, r3, #16	; 0x10
 8003490:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 8003492:	6813      	ldr	r3, [r2, #0]
 8003494:	4318      	orrs	r0, r3
 8003496:	6010      	str	r0, [r2, #0]
}
 8003498:	4770      	bx	lr
 800349a:	46c0      	nop			(mov r8, r8)
 800349c:	40022000 	.word	0x40022000

080034a0 <FLASH_Unlock>:
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 80034a0:	4b03      	ldr	r3, [pc, #12]	(80034b0 <FLASH_Unlock+0x10>)
 80034a2:	4a04      	ldr	r2, [pc, #16]	(80034b4 <FLASH_Unlock+0x14>)
 80034a4:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 80034a6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80034aa:	605a      	str	r2, [r3, #4]
}
 80034ac:	4770      	bx	lr
 80034ae:	46c0      	nop			(mov r8, r8)
 80034b0:	40022000 	.word	0x40022000
 80034b4:	45670123 	.word	0x45670123

080034b8 <FLASH_Lock>:
* Return         : None
*******************************************************************************/
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
 80034b8:	4a02      	ldr	r2, [pc, #8]	(80034c4 <FLASH_Lock+0xc>)
 80034ba:	6913      	ldr	r3, [r2, #16]
 80034bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c0:	6113      	str	r3, [r2, #16]
}
 80034c2:	4770      	bx	lr
 80034c4:	40022000 	.word	0x40022000

080034c8 <FLASH_GetUserOptionByte>:
*                  and RST_STDBY(Bit2).
*******************************************************************************/
u32 FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (u32)(FLASH->OBR >> 2);
 80034c8:	4b01      	ldr	r3, [pc, #4]	(80034d0 <FLASH_GetUserOptionByte+0x8>)
 80034ca:	69d8      	ldr	r0, [r3, #28]
 80034cc:	0880      	lsrs	r0, r0, #2
}
 80034ce:	4770      	bx	lr
 80034d0:	40022000 	.word	0x40022000

080034d4 <FLASH_GetWriteProtectionOptionByte>:
* Return         : The FLASH Write Protection  Option Bytes Register value
*******************************************************************************/
u32 FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Falsh write protection Register value */
  return (u32)(FLASH->WRPR);
 80034d4:	4b01      	ldr	r3, [pc, #4]	(80034dc <FLASH_GetWriteProtectionOptionByte+0x8>)
 80034d6:	6a18      	ldr	r0, [r3, #32]
}
 80034d8:	4770      	bx	lr
 80034da:	46c0      	nop			(mov r8, r8)
 80034dc:	40022000 	.word	0x40022000

080034e0 <FLASH_GetReadOutProtectionStatus>:
*******************************************************************************/
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;

  if ((FLASH->OBR & RDPRT_Mask) != (u32)RESET)
 80034e0:	4b02      	ldr	r3, [pc, #8]	(80034ec <FLASH_GetReadOutProtectionStatus+0xc>)
 80034e2:	69d8      	ldr	r0, [r3, #28]
 80034e4:	0840      	lsrs	r0, r0, #1
 80034e6:	f000 0001 	and.w	r0, r0, #1	; 0x1
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 80034ea:	4770      	bx	lr
 80034ec:	40022000 	.word	0x40022000

080034f0 <FLASH_GetPrefetchBufferStatus>:
*******************************************************************************/
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (u32)RESET)
 80034f0:	4b02      	ldr	r3, [pc, #8]	(80034fc <FLASH_GetPrefetchBufferStatus+0xc>)
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	0940      	lsrs	r0, r0, #5
 80034f6:	f000 0001 	and.w	r0, r0, #1	; 0x1
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 80034fa:	4770      	bx	lr
 80034fc:	40022000 	.word	0x40022000

08003500 <FLASH_ITConfig>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8003500:	b121      	cbz	r1, 800350c <FLASH_ITConfig+0xc>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8003502:	4a05      	ldr	r2, [pc, #20]	(8003518 <FLASH_ITConfig+0x18>)
 8003504:	6913      	ldr	r3, [r2, #16]
 8003506:	ea40 0303 	orr.w	r3, r0, r3
 800350a:	e003      	b.n	8003514 <FLASH_ITConfig+0x14>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(u32)FLASH_IT;
 800350c:	4a02      	ldr	r2, [pc, #8]	(8003518 <FLASH_ITConfig+0x18>)
 800350e:	6913      	ldr	r3, [r2, #16]
 8003510:	ea23 0300 	bic.w	r3, r3, r0
 8003514:	6113      	str	r3, [r2, #16]
  }
}
 8003516:	4770      	bx	lr
 8003518:	40022000 	.word	0x40022000

0800351c <FLASH_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;

  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 800351c:	2801      	cmp	r0, #1
 800351e:	d104      	bne.n	800352a <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (u32)RESET)
 8003520:	4b05      	ldr	r3, [pc, #20]	(8003538 <FLASH_GetFlagStatus+0x1c>)
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	f003 0001 	and.w	r0, r3, #1	; 0x1
 8003528:	e005      	b.n	8003536 <FLASH_GetFlagStatus+0x1a>
      bitstatus = RESET;
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (u32)RESET)
 800352a:	4b03      	ldr	r3, [pc, #12]	(8003538 <FLASH_GetFlagStatus+0x1c>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	4218      	tst	r0, r3
 8003530:	bf0c      	ite	eq
 8003532:	2000      	moveq	r0, #0
 8003534:	2001      	movne	r0, #1
      bitstatus = RESET;
    }
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 8003536:	4770      	bx	lr
 8003538:	40022000 	.word	0x40022000

0800353c <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800353c:	4b01      	ldr	r3, [pc, #4]	(8003544 <FLASH_ClearFlag+0x8>)
 800353e:	60d8      	str	r0, [r3, #12]
}
 8003540:	4770      	bx	lr
 8003542:	46c0      	nop			(mov r8, r8)
 8003544:	40022000 	.word	0x40022000

08003548 <FLASH_GetStatus>:
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8003548:	4a09      	ldr	r2, [pc, #36]	(8003570 <FLASH_GetStatus+0x28>)
 800354a:	68d3      	ldr	r3, [r2, #12]
 800354c:	f013 0f01 	tst.w	r3, #1	; 0x1
 8003550:	d001      	beq.n	8003556 <FLASH_GetStatus+0xe>
 8003552:	2001      	movs	r0, #1
 8003554:	e00b      	b.n	800356e <FLASH_GetStatus+0x26>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 8003556:	68d3      	ldr	r3, [r2, #12]
 8003558:	f013 0f04 	tst.w	r3, #4	; 0x4
 800355c:	d001      	beq.n	8003562 <FLASH_GetStatus+0x1a>
 800355e:	2002      	movs	r0, #2
 8003560:	e005      	b.n	800356e <FLASH_GetStatus+0x26>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 8003562:	68d3      	ldr	r3, [r2, #12]
 8003564:	f013 0f10 	tst.w	r3, #16	; 0x10
 8003568:	bf14      	ite	ne
 800356a:	2003      	movne	r0, #3
 800356c:	2004      	moveq	r0, #4
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 800356e:	4770      	bx	lr
 8003570:	40022000 	.word	0x40022000

08003574 <FLASH_WaitForLastOperation>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 8003574:	b510      	push	{r4, lr}
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8003576:	4a23      	ldr	r2, [pc, #140]	(8003604 <FLASH_WaitForLastOperation+0x90>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 8003578:	b082      	sub	sp, #8
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800357a:	68d3      	ldr	r3, [r2, #12]
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 800357c:	4601      	mov	r1, r0
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800357e:	f013 0f01 	tst.w	r3, #1	; 0x1
 8003582:	d001      	beq.n	8003588 <FLASH_WaitForLastOperation+0x14>
 8003584:	2001      	movs	r0, #1
 8003586:	e02a      	b.n	80035de <FLASH_WaitForLastOperation+0x6a>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 8003588:	68d3      	ldr	r3, [r2, #12]
 800358a:	f013 0f04 	tst.w	r3, #4	; 0x4
 800358e:	d001      	beq.n	8003594 <FLASH_WaitForLastOperation+0x20>
 8003590:	2002      	movs	r0, #2
 8003592:	e024      	b.n	80035de <FLASH_WaitForLastOperation+0x6a>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 8003594:	68d3      	ldr	r3, [r2, #12]
 8003596:	f013 0f10 	tst.w	r3, #16	; 0x10
 800359a:	bf14      	ite	ne
 800359c:	2003      	movne	r0, #3
 800359e:	2004      	moveq	r0, #4
 80035a0:	e01d      	b.n	80035de <FLASH_WaitForLastOperation+0x6a>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 80035a2:	9401      	str	r4, [sp, #4]

  for(i = 0xFF; i != 0; i--)
 80035a4:	f8cd c004 	str.w	ip, [sp, #4]
 80035a8:	e002      	b.n	80035b0 <FLASH_WaitForLastOperation+0x3c>
 80035aa:	9b01      	ldr	r3, [sp, #4]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	9301      	str	r3, [sp, #4]
 80035b0:	9b01      	ldr	r3, [sp, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f9      	bne.n	80035aa <FLASH_WaitForLastOperation+0x36>
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80035b6:	68d3      	ldr	r3, [r2, #12]
 80035b8:	f013 0f01 	tst.w	r3, #1	; 0x1
 80035bc:	d001      	beq.n	80035c2 <FLASH_WaitForLastOperation+0x4e>
 80035be:	2001      	movs	r0, #1
 80035c0:	e00b      	b.n	80035da <FLASH_WaitForLastOperation+0x66>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 80035c2:	68d3      	ldr	r3, [r2, #12]
 80035c4:	f013 0f04 	tst.w	r3, #4	; 0x4
 80035c8:	d001      	beq.n	80035ce <FLASH_WaitForLastOperation+0x5a>
 80035ca:	2002      	movs	r0, #2
 80035cc:	e005      	b.n	80035da <FLASH_WaitForLastOperation+0x66>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 80035ce:	68d3      	ldr	r3, [r2, #12]
 80035d0:	f013 0f10 	tst.w	r3, #16	; 0x10
 80035d4:	bf14      	ite	ne
 80035d6:	2003      	movne	r0, #3
 80035d8:	2004      	moveq	r0, #4
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    status = FLASH_GetStatus();
    Timeout--;
 80035da:	3901      	subs	r1, #1
 80035dc:	e003      	b.n	80035e6 <FLASH_WaitForLastOperation+0x72>
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80035de:	4a09      	ldr	r2, [pc, #36]	(8003604 <FLASH_WaitForLastOperation+0x90>)
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 80035e0:	2400      	movs	r4, #0

  for(i = 0xFF; i != 0; i--)
 80035e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80035e6:	1e0b      	subs	r3, r1, #0
 80035e8:	bf18      	it	ne
 80035ea:	2301      	movne	r3, #1
 80035ec:	2801      	cmp	r0, #1
 80035ee:	bf14      	ite	ne
 80035f0:	2300      	movne	r3, #0
 80035f2:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1d3      	bne.n	80035a2 <FLASH_WaitForLastOperation+0x2e>
    delay();
    status = FLASH_GetStatus();
    Timeout--;
  }

  if(Timeout == 0x00 )
 80035fa:	2900      	cmp	r1, #0
 80035fc:	bf08      	it	eq
 80035fe:	2005      	moveq	r0, #5
    status = FLASH_TIMEOUT;
  }

  /* Return the operation status */
  return status;
}
 8003600:	b002      	add	sp, #8
 8003602:	bd10      	pop	{r4, pc}
 8003604:	40022000 	.word	0x40022000

08003608 <FLASH_UserOptionByteConfig>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8003608:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 800360a:	4b13      	ldr	r3, [pc, #76]	(8003658 <FLASH_UserOptionByteConfig+0x50>)
 800360c:	4c13      	ldr	r4, [pc, #76]	(800365c <FLASH_UserOptionByteConfig+0x54>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 800360e:	b081      	sub	sp, #4
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8003610:	60a3      	str	r3, [r4, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 8003612:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8003616:	4605      	mov	r5, r0
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
 8003618:	60a3      	str	r3, [r4, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800361a:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 800361c:	460e      	mov	r6, r1
 800361e:	4617      	mov	r7, r2
  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003620:	f7ff ffa8 	bl	8003574 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8003624:	2804      	cmp	r0, #4
 8003626:	d115      	bne.n	8003654 <FLASH_UserOptionByteConfig+0x4c>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8003628:	6923      	ldr	r3, [r4, #16]
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 800362a:	4a0d      	ldr	r2, [pc, #52]	(8003660 <FLASH_UserOptionByteConfig+0x58>)
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 800362c:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 8003630:	6123      	str	r3, [r4, #16]
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 8003632:	f045 03f8 	orr.w	r3, r5, #248	; 0xf8
 8003636:	ea46 0303 	orr.w	r3, r6, r3
 800363a:	ea47 0303 	orr.w	r3, r7, r3
 800363e:	8053      	strh	r3, [r2, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003640:	200f      	movs	r0, #15
 8003642:	f7ff ff97 	bl	8003574 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8003646:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8003648:	bf1f      	itttt	ne
 800364a:	6922      	ldrne	r2, [r4, #16]
 800364c:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8003650:	4013      	andne	r3, r2
 8003652:	6123      	strne	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 8003654:	b001      	add	sp, #4
 8003656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003658:	45670123 	.word	0x45670123
 800365c:	40022000 	.word	0x40022000
 8003660:	1ffff800 	.word	0x1ffff800

08003664 <FLASH_ReadOutProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 8003664:	b530      	push	{r4, r5, lr}
 8003666:	4605      	mov	r5, r0
 8003668:	b081      	sub	sp, #4
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  status = FLASH_WaitForLastOperation(EraseTimeout);
 800366a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800366e:	f7ff ff81 	bl	8003574 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8003672:	2804      	cmp	r0, #4
 8003674:	d13c      	bne.n	80036f0 <FLASH_ReadOutProtection+0x8c>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8003676:	4c1f      	ldr	r4, [pc, #124]	(80036f4 <FLASH_ReadOutProtection+0x90>)
 8003678:	4b1f      	ldr	r3, [pc, #124]	(80036f8 <FLASH_ReadOutProtection+0x94>)

    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800367a:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800367e:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8003680:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8003684:	60a3      	str	r3, [r4, #8]

    FLASH->CR |= CR_OPTER_Set;
 8003686:	6923      	ldr	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8003688:	301b      	adds	r0, #27
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;

    FLASH->CR |= CR_OPTER_Set;
 800368a:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 800368e:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 8003690:	6923      	ldr	r3, [r4, #16]
 8003692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003696:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8003698:	f7ff ff6c 	bl	8003574 <FLASH_WaitForLastOperation>

    if(status == FLASH_COMPLETE)
 800369c:	2804      	cmp	r0, #4
 800369e:	d120      	bne.n	80036e2 <FLASH_ReadOutProtection+0x7e>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80036a0:	6923      	ldr	r3, [r4, #16]
 80036a2:	f641 72df 	movw	r2, #8159	; 0x1fdf
 80036a6:	ea03 0202 	and.w	r2, r3, r2
 80036aa:	6122      	str	r2, [r4, #16]

      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set; 
 80036ac:	6923      	ldr	r3, [r4, #16]
 80036ae:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 80036b2:	6123      	str	r3, [r4, #16]

      if(NewState != DISABLE)
 80036b4:	b11d      	cbz	r5, 80036be <FLASH_ReadOutProtection+0x5a>
      {
        OB->RDP = 0x00;
 80036b6:	4b11      	ldr	r3, [pc, #68]	(80036fc <FLASH_ReadOutProtection+0x98>)
 80036b8:	f04f 0200 	mov.w	r2, #0	; 0x0
 80036bc:	e002      	b.n	80036c4 <FLASH_ReadOutProtection+0x60>
      }
      else
      {
        OB->RDP = RDP_Key;  
 80036be:	4b0f      	ldr	r3, [pc, #60]	(80036fc <FLASH_ReadOutProtection+0x98>)
 80036c0:	f04f 02a5 	mov.w	r2, #165	; 0xa5
 80036c4:	801a      	strh	r2, [r3, #0]
      }

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 80036c6:	f640 70ff 	movw	r0, #4095	; 0xfff
 80036ca:	f7ff ff53 	bl	8003574 <FLASH_WaitForLastOperation>
    
      if(status != FLASH_BUSY)
 80036ce:	2801      	cmp	r0, #1
 80036d0:	d00e      	beq.n	80036f0 <FLASH_ReadOutProtection+0x8c>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 80036d2:	4908      	ldr	r1, [pc, #32]	(80036f4 <FLASH_ReadOutProtection+0x90>)
 80036d4:	f641 73ef 	movw	r3, #8175	; 0x1fef
 80036d8:	690a      	ldr	r2, [r1, #16]
 80036da:	ea02 0303 	and.w	r3, r2, r3
 80036de:	610b      	str	r3, [r1, #16]
 80036e0:	e006      	b.n	80036f0 <FLASH_ReadOutProtection+0x8c>
      }
    }
    else 
    {
      if(status != FLASH_BUSY)
 80036e2:	2801      	cmp	r0, #1
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= CR_OPTER_Reset;
 80036e4:	bf1f      	itttt	ne
 80036e6:	6922      	ldrne	r2, [r4, #16]
 80036e8:	f641 73df 	movwne	r3, #8159	; 0x1fdf
 80036ec:	4013      	andne	r3, r2
 80036ee:	6123      	strne	r3, [r4, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;      
}
 80036f0:	b001      	add	sp, #4
 80036f2:	bd30      	pop	{r4, r5, pc}
 80036f4:	40022000 	.word	0x40022000
 80036f8:	45670123 	.word	0x45670123
 80036fc:	1ffff800 	.word	0x1ffff800

08003700 <FLASH_EnableWriteProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EnableWriteProtection(u32 FLASH_Pages)
{
 8003700:	b510      	push	{r4, lr}
 8003702:	4604      	mov	r4, r0
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003704:	200f      	movs	r0, #15
 8003706:	f7ff ff35 	bl	8003574 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800370a:	2804      	cmp	r0, #4
 800370c:	d150      	bne.n	80037b0 <FLASH_EnableWriteProtection+0xb0>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800370e:	4a29      	ldr	r2, [pc, #164]	(80037b4 <FLASH_EnableWriteProtection+0xb4>)
 8003710:	4b29      	ldr	r3, [pc, #164]	(80037b8 <FLASH_EnableWriteProtection+0xb8>)
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
 8003712:	ea6f 0404 	mvn.w	r4, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8003716:	6093      	str	r3, [r2, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8003718:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 800371c:	6093      	str	r3, [r2, #8]
    FLASH->CR |= CR_OPTPG_Set;
 800371e:	6913      	ldr	r3, [r2, #16]
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
 8003720:	b2e1      	uxtb	r1, r4
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 8003722:	f043 0310 	orr.w	r3, r3, #16	; 0x10

    if(WRP0_Data != 0xFF)
 8003726:	29ff      	cmp	r1, #255
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 8003728:	6113      	str	r3, [r2, #16]

    if(WRP0_Data != 0xFF)
 800372a:	d004      	beq.n	8003736 <FLASH_EnableWriteProtection+0x36>
    {
      OB->WRP0 = WRP0_Data;
 800372c:	4b23      	ldr	r3, [pc, #140]	(80037bc <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800372e:	200f      	movs	r0, #15
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;

    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 8003730:	8119      	strh	r1, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003732:	f7ff ff1f 	bl	8003574 <FLASH_WaitForLastOperation>
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
 8003736:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 800373a:	0a1a      	lsrs	r2, r3, #8
      OB->WRP0 = WRP0_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 800373c:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 8003740:	bf18      	it	ne
 8003742:	2301      	movne	r3, #1
 8003744:	2804      	cmp	r0, #4
 8003746:	bf14      	ite	ne
 8003748:	2300      	movne	r3, #0
 800374a:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 800374e:	b123      	cbz	r3, 800375a <FLASH_EnableWriteProtection+0x5a>
    {
      OB->WRP1 = WRP1_Data;
 8003750:	4b1a      	ldr	r3, [pc, #104]	(80037bc <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003752:	200f      	movs	r0, #15
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 8003754:	815a      	strh	r2, [r3, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003756:	f7ff ff0d 	bl	8003574 <FLASH_WaitForLastOperation>
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
 800375a:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 800375e:	0c1a      	lsrs	r2, r3, #16
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 8003760:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 8003764:	bf18      	it	ne
 8003766:	2301      	movne	r3, #1
 8003768:	2804      	cmp	r0, #4
 800376a:	bf14      	ite	ne
 800376c:	2300      	movne	r3, #0
 800376e:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 8003772:	b123      	cbz	r3, 800377e <FLASH_EnableWriteProtection+0x7e>
    {
      OB->WRP2 = WRP2_Data;
 8003774:	4b11      	ldr	r3, [pc, #68]	(80037bc <FLASH_EnableWriteProtection+0xbc>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003776:	200f      	movs	r0, #15
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
    {
      OB->WRP2 = WRP2_Data;
 8003778:	819a      	strh	r2, [r3, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800377a:	f7ff fefb 	bl	8003574 <FLASH_WaitForLastOperation>
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
 800377e:	0e22      	lsrs	r2, r4, #24
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8003780:	f1b2 03ff 	subs.w	r3, r2, #255	; 0xff
 8003784:	bf18      	it	ne
 8003786:	2301      	movne	r3, #1
 8003788:	2804      	cmp	r0, #4
 800378a:	bf14      	ite	ne
 800378c:	2300      	movne	r3, #0
 800378e:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
 8003792:	b123      	cbz	r3, 800379e <FLASH_EnableWriteProtection+0x9e>
    {
      OB->WRP3 = WRP3_Data;
 8003794:	4b09      	ldr	r3, [pc, #36]	(80037bc <FLASH_EnableWriteProtection+0xbc>)
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003796:	200f      	movs	r0, #15
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
 8003798:	81da      	strh	r2, [r3, #14]
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800379a:	f7ff feeb 	bl	8003574 <FLASH_WaitForLastOperation>
    }
          
    if(status != FLASH_BUSY)
 800379e:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 80037a0:	bf1f      	itttt	ne
 80037a2:	4904      	ldrne	r1, [pc, #16]	(80037b4 <FLASH_EnableWriteProtection+0xb4>)
 80037a4:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80037a8:	690a      	ldrne	r2, [r1, #16]
 80037aa:	4013      	andne	r3, r2
 80037ac:	bf18      	it	ne
 80037ae:	610b      	strne	r3, [r1, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
 80037b0:	bd10      	pop	{r4, pc}
 80037b2:	46c0      	nop			(mov r8, r8)
 80037b4:	40022000 	.word	0x40022000
 80037b8:	45670123 	.word	0x45670123
 80037bc:	1ffff800 	.word	0x1ffff800

080037c0 <FLASH_ProgramOptionByteData>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 80037c0:	b570      	push	{r4, r5, r6, lr}
 80037c2:	4606      	mov	r6, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80037c4:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 80037c6:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80037c8:	f7ff fed4 	bl	8003574 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 80037cc:	2804      	cmp	r0, #4
 80037ce:	d114      	bne.n	80037fa <FLASH_ProgramOptionByteData+0x3a>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80037d0:	4c0a      	ldr	r4, [pc, #40]	(80037fc <FLASH_ProgramOptionByteData+0x3c>)
 80037d2:	4b0b      	ldr	r3, [pc, #44]	(8003800 <FLASH_ProgramOptionByteData+0x40>)
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
    *(vu16*)Address = Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80037d4:	200f      	movs	r0, #15
  status = FLASH_WaitForLastOperation(ProgramTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80037d6:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80037d8:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80037dc:	60a3      	str	r3, [r4, #8]

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 80037de:	6923      	ldr	r3, [r4, #16]
 80037e0:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 80037e4:	6123      	str	r3, [r4, #16]
    *(vu16*)Address = Data;
 80037e6:	8035      	strh	r5, [r6, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80037e8:	f7ff fec4 	bl	8003574 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 80037ec:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 80037ee:	bf1f      	itttt	ne
 80037f0:	6922      	ldrne	r2, [r4, #16]
 80037f2:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80037f6:	4013      	andne	r3, r2
 80037f8:	6123      	strne	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte Data Program Status */
  return status;      
}
 80037fa:	bd70      	pop	{r4, r5, r6, pc}
 80037fc:	40022000 	.word	0x40022000
 8003800:	45670123 	.word	0x45670123

08003804 <FLASH_ProgramHalfWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003808:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 800380a:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800380c:	f7ff feb2 	bl	8003574 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8003810:	2804      	cmp	r0, #4
 8003812:	d10f      	bne.n	8003834 <FLASH_ProgramHalfWord+0x30>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8003814:	4c08      	ldr	r4, [pc, #32]	(8003838 <FLASH_ProgramHalfWord+0x34>)
  
    *(vu16*)Address = Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003816:	200f      	movs	r0, #15
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8003818:	6923      	ldr	r3, [r4, #16]
 800381a:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 800381e:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = Data;
 8003820:	8035      	strh	r5, [r6, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003822:	f7ff fea7 	bl	8003574 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8003826:	2801      	cmp	r0, #1
    {
      /* if the program operation is completed, disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 8003828:	bf1f      	itttt	ne
 800382a:	6922      	ldrne	r2, [r4, #16]
 800382c:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 8003830:	4013      	andne	r3, r2
 8003832:	6123      	strne	r3, [r4, #16]
    }
  } 
  /* Return the Program Status */
  return status;
}
 8003834:	bd70      	pop	{r4, r5, r6, pc}
 8003836:	46c0      	nop			(mov r8, r8)
 8003838:	40022000 	.word	0x40022000

0800383c <FLASH_ProgramWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	4606      	mov	r6, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003840:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8003842:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003844:	f7ff fe96 	bl	8003574 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8003848:	2804      	cmp	r0, #4
 800384a:	d117      	bne.n	800387c <FLASH_ProgramWord+0x40>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 800384c:	4c0c      	ldr	r4, [pc, #48]	(8003880 <FLASH_ProgramWord+0x44>)
  
    *(vu16*)Address = (u16)Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800384e:	200f      	movs	r0, #15
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8003850:	6923      	ldr	r3, [r4, #16]
 8003852:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8003856:	6123      	str	r3, [r4, #16]
  
    *(vu16*)Address = (u16)Data;
 8003858:	b2ab      	uxth	r3, r5
 800385a:	8033      	strh	r3, [r6, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800385c:	f7ff fe8a 	bl	8003574 <FLASH_WaitForLastOperation>
 
    if(status == FLASH_COMPLETE)
 8003860:	2804      	cmp	r0, #4
 8003862:	d104      	bne.n	800386e <FLASH_ProgramWord+0x32>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      *(vu16*)(Address + 2) = Data >> 16;
 8003864:	0c2b      	lsrs	r3, r5, #16
 8003866:	8073      	strh	r3, [r6, #2]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8003868:	200f      	movs	r0, #15
 800386a:	f7ff fe83 	bl	8003574 <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_PG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 800386e:	2801      	cmp	r0, #1
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
 8003870:	bf1f      	itttt	ne
 8003872:	6922      	ldrne	r2, [r4, #16]
 8003874:	f641 73fe 	movwne	r3, #8190	; 0x1ffe
 8003878:	4013      	andne	r3, r2
 800387a:	6123      	strne	r3, [r4, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 800387c:	bd70      	pop	{r4, r5, r6, pc}
 800387e:	46c0      	nop			(mov r8, r8)
 8003880:	40022000 	.word	0x40022000

08003884 <FLASH_EraseOptionBytes>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseOptionBytes(void)
{
 8003884:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8003886:	f640 70ff 	movw	r0, #4095	; 0xfff
 800388a:	f7ff fe73 	bl	8003574 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 800388e:	2804      	cmp	r0, #4
 8003890:	d12c      	bne.n	80038ec <FLASH_EraseOptionBytes+0x68>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8003892:	4c17      	ldr	r4, [pc, #92]	(80038f0 <FLASH_EraseOptionBytes+0x6c>)
 8003894:	4b17      	ldr	r3, [pc, #92]	(80038f4 <FLASH_EraseOptionBytes+0x70>)
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8003896:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800389a:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 800389c:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80038a0:	60a3      	str	r3, [r4, #8]
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 80038a2:	6923      	ldr	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80038a4:	301b      	adds	r0, #27
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 80038a6:	f043 0320 	orr.w	r3, r3, #32	; 0x20
 80038aa:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 80038ac:	6923      	ldr	r3, [r4, #16]
 80038ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038b2:	6123      	str	r3, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80038b4:	f7ff fe5e 	bl	8003574 <FLASH_WaitForLastOperation>
    
    if(status == FLASH_COMPLETE)
 80038b8:	2804      	cmp	r0, #4
 80038ba:	d110      	bne.n	80038de <FLASH_EraseOptionBytes+0x5a>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80038bc:	6922      	ldr	r2, [r4, #16]
 80038be:	f641 73df 	movw	r3, #8159	; 0x1fdf
 80038c2:	ea02 0303 	and.w	r3, r2, r3
 80038c6:	6123      	str	r3, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 80038c8:	6923      	ldr	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 80038ca:	f04f 02a5 	mov.w	r2, #165	; 0xa5
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 80038ce:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 80038d2:	6123      	str	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 80038d4:	4b08      	ldr	r3, [pc, #32]	(80038f8 <FLASH_EraseOptionBytes+0x74>)

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80038d6:	200f      	movs	r0, #15
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 80038d8:	801a      	strh	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80038da:	f7ff fe4b 	bl	8003574 <FLASH_WaitForLastOperation>
        FLASH->CR &= CR_OPTPG_Reset;
      }
    }
    else
    {
      if (status != FLASH_BUSY)
 80038de:	2801      	cmp	r0, #1
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 80038e0:	bf1f      	itttt	ne
 80038e2:	6922      	ldrne	r2, [r4, #16]
 80038e4:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80038e8:	4013      	andne	r3, r2
 80038ea:	6123      	strne	r3, [r4, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 80038ec:	bd10      	pop	{r4, pc}
 80038ee:	46c0      	nop			(mov r8, r8)
 80038f0:	40022000 	.word	0x40022000
 80038f4:	45670123 	.word	0x45670123
 80038f8:	1ffff800 	.word	0x1ffff800

080038fc <FLASH_EraseAllPages>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseAllPages(void)
{
 80038fc:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 80038fe:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003902:	f7ff fe37 	bl	8003574 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8003906:	2804      	cmp	r0, #4
 8003908:	d113      	bne.n	8003932 <FLASH_EraseAllPages+0x36>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 800390a:	4c0a      	ldr	r4, [pc, #40]	(8003934 <FLASH_EraseAllPages+0x38>)
 800390c:	6923      	ldr	r3, [r4, #16]
 800390e:	4303      	orrs	r3, r0
 8003910:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 8003912:	6923      	ldr	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8003914:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
     FLASH->CR |= CR_STRT_Set;
 8003918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800391c:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800391e:	301b      	adds	r0, #27
 8003920:	f7ff fe28 	bl	8003574 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8003924:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= CR_MER_Reset;
 8003926:	bf1f      	itttt	ne
 8003928:	6922      	ldrne	r2, [r4, #16]
 800392a:	f641 73fb 	movwne	r3, #8187	; 0x1ffb
 800392e:	4013      	andne	r3, r2
 8003930:	6123      	strne	r3, [r4, #16]
    }
  }	   
  /* Return the Erase Status */
  return status;
}
 8003932:	bd10      	pop	{r4, pc}
 8003934:	40022000 	.word	0x40022000

08003938 <FLASH_ErasePage>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ErasePage(u32 Page_Address)
{
 8003938:	b530      	push	{r4, r5, lr}
 800393a:	4605      	mov	r5, r0
 800393c:	b081      	sub	sp, #4

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 800393e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003942:	f7ff fe17 	bl	8003574 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8003946:	2804      	cmp	r0, #4
 8003948:	d115      	bne.n	8003976 <FLASH_ErasePage+0x3e>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 800394a:	4c0c      	ldr	r4, [pc, #48]	(800397c <FLASH_ErasePage+0x44>)
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800394c:	f500 607e 	add.w	r0, r0, #4064	; 0xfe0
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8003950:	6923      	ldr	r3, [r4, #16]
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8003952:	301b      	adds	r0, #27
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8003954:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8003958:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 800395a:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 800395c:	6923      	ldr	r3, [r4, #16]
 800395e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003962:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8003964:	f7ff fe06 	bl	8003574 <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8003968:	2801      	cmp	r0, #1
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
 800396a:	bf1f      	itttt	ne
 800396c:	6922      	ldrne	r2, [r4, #16]
 800396e:	f641 73fd 	movwne	r3, #8189	; 0x1ffd
 8003972:	4013      	andne	r3, r2
 8003974:	6123      	strne	r3, [r4, #16]
    }
  }
  /* Return the Erase Status */
  return status;
}
 8003976:	b001      	add	sp, #4
 8003978:	bd30      	pop	{r4, r5, pc}
 800397a:	46c0      	nop			(mov r8, r8)
 800397c:	40022000 	.word	0x40022000

08003980 <GPIO_Init>:
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003980:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 8003982:	78cd      	ldrb	r5, [r1, #3]
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8003984:	880e      	ldrh	r6, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);

  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
 8003986:	f015 0f10 	tst.w	r5, #16	; 0x10
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 800398a:	bf18      	it	ne
 800398c:	788b      	ldrbne	r3, [r1, #2]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 800398e:	f005 070f 	and.w	r7, r5, #15	; 0xf
  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 8003992:	bf18      	it	ne
 8003994:	431f      	orrne	r7, r3
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8003996:	f016 0fff 	tst.w	r6, #255	; 0xff
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800399a:	b083      	sub	sp, #12
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 800399c:	d01e      	beq.n	80039dc <GPIO_Init+0x5c>
  {
    tmpreg = GPIOx->CRL;
 800399e:	6804      	ldr	r4, [r0, #0]
 80039a0:	2100      	movs	r1, #0

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((u32)0x01) << pinpos;
 80039a2:	2201      	movs	r2, #1
 80039a4:	fa12 f301 	lsls.w	r3, r2, r1
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80039a8:	ea03 0c06 	and.w	ip, r3, r6

      if (currentpin == pos)
 80039ac:	459c      	cmp	ip, r3
 80039ae:	d111      	bne.n	80039d4 <GPIO_Init+0x54>
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
 80039b0:	008a      	lsls	r2, r1, #2
        tmpreg &= ~pinmask;
 80039b2:	230f      	movs	r3, #15
 80039b4:	4093      	lsls	r3, r2

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80039b6:	fa17 f202 	lsls.w	r2, r7, r2
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 80039ba:	ea24 0403 	bic.w	r4, r4, r3

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80039be:	4314      	orrs	r4, r2

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80039c0:	2d28      	cmp	r5, #40
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 80039c2:	9301      	str	r3, [sp, #4]
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((u32)0x01) << pinpos);
 80039c4:	bf08      	it	eq
 80039c6:	f8c0 c014 	streq.w	ip, [r0, #20]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80039ca:	d003      	beq.n	80039d4 <GPIO_Init+0x54>
          GPIOx->BRR = (((u32)0x01) << pinpos);
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80039cc:	2d48      	cmp	r5, #72
          {
            GPIOx->BSRR = (((u32)0x01) << pinpos);
 80039ce:	bf08      	it	eq
 80039d0:	f8c0 c010 	streq.w	ip, [r0, #16]
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80039d4:	3101      	adds	r1, #1
 80039d6:	2908      	cmp	r1, #8
 80039d8:	d1e3      	bne.n	80039a2 <GPIO_Init+0x22>
            GPIOx->BSRR = (((u32)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80039da:	6004      	str	r4, [r0, #0]
  }

/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80039dc:	2eff      	cmp	r6, #255
 80039de:	d920      	bls.n	8003a22 <GPIO_Init+0xa2>
  {
    tmpreg = GPIOx->CRH;
 80039e0:	6844      	ldr	r4, [r0, #4]
 80039e2:	2100      	movs	r1, #0
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((u32)0x01) << (pinpos + 0x08));
 80039e4:	2201      	movs	r2, #1
 80039e6:	f101 0308 	add.w	r3, r1, #8	; 0x8
 80039ea:	fa12 f303 	lsls.w	r3, r2, r3
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80039ee:	ea03 0c06 	and.w	ip, r3, r6
      if (currentpin == pos)
 80039f2:	459c      	cmp	ip, r3
 80039f4:	d111      	bne.n	8003a1a <GPIO_Init+0x9a>
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
 80039f6:	008a      	lsls	r2, r1, #2
        tmpreg &= ~pinmask;
 80039f8:	230f      	movs	r3, #15
 80039fa:	4093      	lsls	r3, r2

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80039fc:	fa17 f202 	lsls.w	r2, r7, r2
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 8003a00:	ea24 0403 	bic.w	r4, r4, r3

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8003a04:	4314      	orrs	r4, r2

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8003a06:	2d28      	cmp	r5, #40
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 8003a08:	9301      	str	r3, [sp, #4]
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
 8003a0a:	bf08      	it	eq
 8003a0c:	f8c0 c014 	streq.w	ip, [r0, #20]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8003a10:	d003      	beq.n	8003a1a <GPIO_Init+0x9a>
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8003a12:	2d48      	cmp	r5, #72
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
 8003a14:	bf08      	it	eq
 8003a16:	f8c0 c010 	streq.w	ip, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8003a1a:	3101      	adds	r1, #1
 8003a1c:	2908      	cmp	r1, #8
 8003a1e:	d1e1      	bne.n	80039e4 <GPIO_Init+0x64>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8003a20:	6044      	str	r4, [r0, #4]
  }
}
 8003a22:	b003      	add	sp, #12
 8003a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a26:	46c0      	nop			(mov r8, r8)

08003a28 <GPIO_StructInit>:
* Return         : None
*******************************************************************************/
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8003a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a2c:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	7083      	strb	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003a32:	2304      	movs	r3, #4
 8003a34:	70c3      	strb	r3, [r0, #3]
}
 8003a36:	4770      	bx	lr

08003a38 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
 8003a38:	6883      	ldr	r3, [r0, #8]
 8003a3a:	4219      	tst	r1, r3
 8003a3c:	bf0c      	ite	eq
 8003a3e:	2000      	moveq	r0, #0
 8003a40:	2001      	movne	r0, #1
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 8003a42:	4770      	bx	lr

08003a44 <GPIO_ReadInputData>:
u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((u16)GPIOx->IDR);
 8003a44:	6880      	ldr	r0, [r0, #8]
 8003a46:	b280      	uxth	r0, r0
}
 8003a48:	4770      	bx	lr
 8003a4a:	46c0      	nop			(mov r8, r8)

08003a4c <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
 8003a4c:	68c3      	ldr	r3, [r0, #12]
 8003a4e:	4219      	tst	r1, r3
 8003a50:	bf0c      	ite	eq
 8003a52:	2000      	moveq	r0, #0
 8003a54:	2001      	movne	r0, #1
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 8003a56:	4770      	bx	lr

08003a58 <GPIO_ReadOutputData>:
u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((u16)GPIOx->ODR);
 8003a58:	68c0      	ldr	r0, [r0, #12]
 8003a5a:	b280      	uxth	r0, r0
}
 8003a5c:	4770      	bx	lr
 8003a5e:	46c0      	nop			(mov r8, r8)

08003a60 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8003a60:	6101      	str	r1, [r0, #16]
}
 8003a62:	4770      	bx	lr

08003a64 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8003a64:	6141      	str	r1, [r0, #20]
}
 8003a66:	4770      	bx	lr

08003a68 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8003a68:	b10a      	cbz	r2, 8003a6e <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a6a:	6101      	str	r1, [r0, #16]
 8003a6c:	e000      	b.n	8003a70 <GPIO_WriteBit+0x8>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8003a6e:	6141      	str	r1, [r0, #20]
  }
}
 8003a70:	4770      	bx	lr
 8003a72:	46c0      	nop			(mov r8, r8)

08003a74 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8003a74:	60c1      	str	r1, [r0, #12]
}
 8003a76:	4770      	bx	lr

08003a78 <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8003a78:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8003a7c:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8003a7e:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8003a80:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8003a82:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8003a84:	6983      	ldr	r3, [r0, #24]
}
 8003a86:	4770      	bx	lr

08003a88 <GPIO_EventOutputConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8003a88:	f8df c018 	ldr.w	ip, [pc, #24]	; 8003aa4 <GPIO_EventOutputConfig+0x1c>
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8003a8c:	f64f 7380 	movw	r3, #65408	; 0xff80

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8003a90:	f8dc 2000 	ldr.w	r2, [ip]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
  tmpreg |= (u32)GPIO_PortSource << 0x04;
 8003a94:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8003a98:	ea02 0303 	and.w	r3, r2, r3
  tmpreg |= (u32)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 8003a9c:	4319      	orrs	r1, r3

  AFIO->EVCR = tmpreg;
 8003a9e:	f8cc 1000 	str.w	r1, [ip]
}
 8003aa2:	4770      	bx	lr
 8003aa4:	40010000 	.word	0x40010000

08003aa8 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
 8003aa8:	4b01      	ldr	r3, [pc, #4]	(8003ab0 <GPIO_EventOutputCmd+0x8>)
 8003aaa:	6018      	str	r0, [r3, #0]
}
 8003aac:	4770      	bx	lr
 8003aae:	46c0      	nop			(mov r8, r8)
 8003ab0:	4220001c 	.word	0x4220001c

08003ab4 <GPIO_PinRemapConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 8003ab4:	b530      	push	{r4, r5, lr}
  tmpreg = AFIO->MAPR;

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8003ab6:	f400 1340 	and.w	r3, r0, #3145728	; 0x300000
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 8003aba:	0404      	lsls	r4, r0, #16
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 8003abc:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 8003abe:	4914      	ldr	r1, [pc, #80]	(8003b10 <GPIO_PinRemapConfig+0x5c>)

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 8003ac0:	0c24      	lsrs	r4, r4, #16

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8003ac2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 8003ac6:	f8d1 c004 	ldr.w	ip, [r1, #4]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8003aca:	d106      	bne.n	8003ada <GPIO_PinRemapConfig+0x26>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8003acc:	684b      	ldr	r3, [r1, #4]
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8003ace:	f02c 6270 	bic.w	r2, ip, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8003ad2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003ad6:	604b      	str	r3, [r1, #4]
 8003ad8:	e010      	b.n	8003afc <GPIO_PinRemapConfig+0x48>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8003ada:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8003ade:	d005      	beq.n	8003aec <GPIO_PinRemapConfig+0x38>
  {
    tmp1 = ((u32)0x03) << tmpmask;
    tmpreg &= ~tmp1;
 8003ae0:	f400 2270 	and.w	r2, r0, #983040	; 0xf0000
 8003ae4:	0c12      	lsrs	r2, r2, #16
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	4093      	lsls	r3, r2
 8003aea:	e003      	b.n	8003af4 <GPIO_PinRemapConfig+0x40>
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8003aec:	0d43      	lsrs	r3, r0, #21
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	fa14 f303 	lsls.w	r3, r4, r3
 8003af4:	ea2c 0303 	bic.w	r3, ip, r3
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8003af8:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 8003afc:	b125      	cbz	r5, 8003b08 <GPIO_PinRemapConfig+0x54>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8003afe:	0d43      	lsrs	r3, r0, #21
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	fa14 f303 	lsls.w	r3, r4, r3
 8003b06:	431a      	orrs	r2, r3
  }

  AFIO->MAPR = tmpreg;
 8003b08:	4b01      	ldr	r3, [pc, #4]	(8003b10 <GPIO_PinRemapConfig+0x5c>)
 8003b0a:	605a      	str	r2, [r3, #4]
}
 8003b0c:	bd30      	pop	{r4, r5, pc}
 8003b0e:	46c0      	nop			(mov r8, r8)
 8003b10:	40010000 	.word	0x40010000

08003b14 <GPIO_EXTILineConfig>:
*                   This parameter can be GPIO_PinSourcex where x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
{
 8003b14:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 8003b16:	f001 0403 	and.w	r4, r1, #3	; 0x3
 8003b1a:	00a4      	lsls	r4, r4, #2

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8003b1c:	230f      	movs	r3, #15
 8003b1e:	40a3      	lsls	r3, r4
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 8003b20:	40a0      	lsls	r0, r4
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8003b22:	f8df c020 	ldr.w	ip, [pc, #32]	; 8003b44 <GPIO_EXTILineConfig+0x30>
 8003b26:	0889      	lsrs	r1, r1, #2
 8003b28:	3102      	adds	r1, #2
 8003b2a:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 8003b2e:	ea22 0203 	bic.w	r2, r2, r3
 8003b32:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 8003b36:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
 8003b3a:	4318      	orrs	r0, r3
 8003b3c:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
}
 8003b40:	bd10      	pop	{r4, pc}
 8003b42:	46c0      	nop			(mov r8, r8)
 8003b44:	40010000 	.word	0x40010000

08003b48 <GPIO_AFIODeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 8003b48:	b500      	push	{lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	2101      	movs	r1, #1
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 8003b4e:	b081      	sub	sp, #4
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8003b50:	f000 fbf6 	bl	8004340 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8003b54:	2001      	movs	r0, #1
 8003b56:	2100      	movs	r1, #0
 8003b58:	f000 fbf2 	bl	8004340 <RCC_APB2PeriphResetCmd>
}
 8003b5c:	b001      	add	sp, #4
 8003b5e:	bd00      	pop	{pc}

08003b60 <GPIO_DeInit>:
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8003b60:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8003b62:	4b27      	ldr	r3, [pc, #156]	(8003c00 <GPIO_DeInit+0xa0>)
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8003b64:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8003b66:	4298      	cmp	r0, r3
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8003b68:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8003b6a:	d02b      	beq.n	8003bc4 <GPIO_DeInit+0x64>
 8003b6c:	d80c      	bhi.n	8003b88 <GPIO_DeInit+0x28>
 8003b6e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8003b72:	4298      	cmp	r0, r3
 8003b74:	d01a      	beq.n	8003bac <GPIO_DeInit+0x4c>
 8003b76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b7a:	4298      	cmp	r0, r3
 8003b7c:	d01c      	beq.n	8003bb8 <GPIO_DeInit+0x58>
 8003b7e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8003b82:	4298      	cmp	r0, r3
 8003b84:	d13a      	bne.n	8003bfc <GPIO_DeInit+0x9c>
 8003b86:	e00b      	b.n	8003ba0 <GPIO_DeInit+0x40>
 8003b88:	4b1e      	ldr	r3, [pc, #120]	(8003c04 <GPIO_DeInit+0xa4>)
 8003b8a:	4298      	cmp	r0, r3
 8003b8c:	d026      	beq.n	8003bdc <GPIO_DeInit+0x7c>
 8003b8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b92:	4298      	cmp	r0, r3
 8003b94:	d028      	beq.n	8003be8 <GPIO_DeInit+0x88>
 8003b96:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8003b9a:	4298      	cmp	r0, r3
 8003b9c:	d12e      	bne.n	8003bfc <GPIO_DeInit+0x9c>
 8003b9e:	e017      	b.n	8003bd0 <GPIO_DeInit+0x70>
  {
    case GPIOA_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8003ba0:	2004      	movs	r0, #4
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	f000 fbcc 	bl	8004340 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8003ba8:	2004      	movs	r0, #4
 8003baa:	e024      	b.n	8003bf6 <GPIO_DeInit+0x96>
      break;

    case GPIOB_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8003bac:	2008      	movs	r0, #8
 8003bae:	2101      	movs	r1, #1
 8003bb0:	f000 fbc6 	bl	8004340 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 8003bb4:	2008      	movs	r0, #8
 8003bb6:	e01e      	b.n	8003bf6 <GPIO_DeInit+0x96>
      break;

    case GPIOC_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003bb8:	2010      	movs	r0, #16
 8003bba:	2101      	movs	r1, #1
 8003bbc:	f000 fbc0 	bl	8004340 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8003bc0:	2010      	movs	r0, #16
 8003bc2:	e018      	b.n	8003bf6 <GPIO_DeInit+0x96>
      break;

    case GPIOD_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8003bc4:	2020      	movs	r0, #32
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	f000 fbba 	bl	8004340 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 8003bcc:	2020      	movs	r0, #32
 8003bce:	e012      	b.n	8003bf6 <GPIO_DeInit+0x96>
      break;
      
    case GPIOE_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8003bd0:	2040      	movs	r0, #64
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	f000 fbb4 	bl	8004340 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8003bd8:	2040      	movs	r0, #64
 8003bda:	e00c      	b.n	8003bf6 <GPIO_DeInit+0x96>
      break; 

    case GPIOF_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 8003bdc:	2080      	movs	r0, #128
 8003bde:	2101      	movs	r1, #1
 8003be0:	f000 fbae 	bl	8004340 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 8003be4:	2080      	movs	r0, #128
 8003be6:	e006      	b.n	8003bf6 <GPIO_DeInit+0x96>
      break;

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 8003be8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003bec:	2101      	movs	r1, #1
 8003bee:	f000 fba7 	bl	8004340 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8003bf2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	f000 fba2 	bl	8004340 <RCC_APB2PeriphResetCmd>
      break;                       

    default:
      break;
  }
}
 8003bfc:	b003      	add	sp, #12
 8003bfe:	bd00      	pop	{pc}
 8003c00:	40011400 	.word	0x40011400
 8003c04:	40011c00 	.word	0x40011c00

08003c08 <NVIC_DeInit>:
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 8003c08:	4b0b      	ldr	r3, [pc, #44]	(8003c38 <NVIC_DeInit+0x30>)
 8003c0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  NVIC->ICER[1] = 0x0FFFFFFF;
 8003c0e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 8003c12:	f8c3 1080 	str.w	r1, [r3, #128]
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 8003c16:	4618      	mov	r0, r3
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
 8003c18:	f8c3 2084 	str.w	r2, [r3, #132]
  NVIC->ICPR[0] = 0xFFFFFFFF;
 8003c1c:	f8c3 1180 	str.w	r1, [r3, #384]
  NVIC->ICPR[1] = 0x0FFFFFFF;
 8003c20:	f8c3 2184 	str.w	r2, [r3, #388]
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 8003c24:	2100      	movs	r1, #0
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
 8003c26:	2200      	movs	r2, #0
  
  for(index = 0; index < 0x0F; index++)
  {
     NVIC->IPR[index] = 0x00000000;
 8003c28:	f102 03c0 	add.w	r3, r2, #192	; 0xc0
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 8003c2c:	3201      	adds	r2, #1
 8003c2e:	2a0f      	cmp	r2, #15
  {
     NVIC->IPR[index] = 0x00000000;
 8003c30:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 8003c34:	d1f8      	bne.n	8003c28 <NVIC_DeInit+0x20>
  {
     NVIC->IPR[index] = 0x00000000;
  } 
}
 8003c36:	4770      	bx	lr
 8003c38:	e000e100 	.word	0xe000e100

08003c3c <NVIC_SCBDeInit>:
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 8003c3c:	4a09      	ldr	r2, [pc, #36]	(8003c64 <NVIC_SCBDeInit+0x28>)
 8003c3e:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
  SCB->VTOR = 0x00000000;
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 8003c42:	4909      	ldr	r1, [pc, #36]	(8003c68 <NVIC_SCBDeInit+0x2c>)
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 8003c44:	6053      	str	r3, [r2, #4]
  SCB->VTOR = 0x00000000;
 8003c46:	2300      	movs	r3, #0
 8003c48:	6093      	str	r3, [r2, #8]
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 8003c4a:	60d1      	str	r1, [r2, #12]
  SCB->SCR = 0x00000000;
 8003c4c:	6113      	str	r3, [r2, #16]
  SCB->CCR = 0x00000000;
 8003c4e:	6153      	str	r3, [r2, #20]
  for(index = 0; index < 0x03; index++)
  {
     SCB->SHPR[index] = 0;
 8003c50:	6193      	str	r3, [r2, #24]
 8003c52:	61d3      	str	r3, [r2, #28]
 8003c54:	6213      	str	r3, [r2, #32]
  }
  SCB->SHCSR = 0x00000000;
 8003c56:	6253      	str	r3, [r2, #36]
  SCB->CFSR = 0xFFFFFFFF;
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	6293      	str	r3, [r2, #40]
  SCB->HFSR = 0xFFFFFFFF;
 8003c5c:	62d3      	str	r3, [r2, #44]
  SCB->DFSR = 0xFFFFFFFF;
 8003c5e:	6313      	str	r3, [r2, #48]
}
 8003c60:	4770      	bx	lr
 8003c62:	46c0      	nop			(mov r8, r8)
 8003c64:	e000ed00 	.word	0xe000ed00
 8003c68:	05fa0000 	.word	0x05fa0000

08003c6c <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8003c6c:	f040 60be 	orr.w	r0, r0, #99614720	; 0x5f00000
 8003c70:	4b02      	ldr	r3, [pc, #8]	(8003c7c <NVIC_PriorityGroupConfig+0x10>)
 8003c72:	f440 2020 	orr.w	r0, r0, #655360	; 0xa0000
 8003c76:	60d8      	str	r0, [r3, #12]
}
 8003c78:	4770      	bx	lr
 8003c7a:	46c0      	nop			(mov r8, r8)
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <NVIC_Init>:
*                    specified NVIC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003c80:	b530      	push	{r4, r5, lr}
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003c82:	78c3      	ldrb	r3, [r0, #3]
 8003c84:	7805      	ldrb	r5, [r0, #0]
 8003c86:	b35b      	cbz	r3, 8003ce0 <NVIC_Init+0x60>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8003c88:	4b1a      	ldr	r3, [pc, #104]	(8003cf4 <NVIC_Init+0x74>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003c8a:	7841      	ldrb	r1, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8003c8c:	68da      	ldr	r2, [r3, #12]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8003c8e:	4c1a      	ldr	r4, [pc, #104]	(8003cf8 <NVIC_Init+0x78>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8003c90:	ea6f 0202 	mvn.w	r2, r2
 8003c94:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003c98:	0a12      	lsrs	r2, r2, #8
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003c9a:	f1c2 0304 	rsb	r3, r2, #4	; 0x4
 8003c9e:	4099      	lsls	r1, r3
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8003ca0:	230f      	movs	r3, #15
 8003ca2:	40d3      	lsrs	r3, r2
 8003ca4:	7882      	ldrb	r2, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8003ca6:	f005 0003 	and.w	r0, r5, #3	; 0x3
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8003caa:	4013      	ands	r3, r2
 8003cac:	430b      	orrs	r3, r1

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8003cae:	00c0      	lsls	r0, r0, #3
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 8003cb0:	011b      	lsls	r3, r3, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8003cb2:	22ff      	movs	r2, #255
 8003cb4:	4082      	lsls	r2, r0
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8003cb6:	4083      	lsls	r3, r0
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8003cb8:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 8003cbc:	f10c 0cc0 	add.w	ip, ip, #192	; 0xc0
 8003cc0:	f854 102c 	ldr.w	r1, [r4, ip, lsl #2]
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
    tmppriority &= tmpmask;  
    tmpreg |= tmppriority;
 8003cc4:	4013      	ands	r3, r2
    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 8003cc6:	ea21 0102 	bic.w	r1, r1, r2
    tmppriority &= tmpmask;  
    tmpreg |= tmppriority;
 8003cca:	430b      	orrs	r3, r1

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 8003ccc:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8003cd0:	f005 021f 	and.w	r2, r5, #31	; 0x1f
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	4093      	lsls	r3, r2
 8003cd8:	0969      	lsrs	r1, r5, #5
 8003cda:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
 8003cde:	e008      	b.n	8003cf2 <NVIC_Init+0x72>
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8003ce0:	f005 021f 	and.w	r2, r5, #31	; 0x1f
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	4093      	lsls	r3, r2
 8003ce8:	0969      	lsrs	r1, r5, #5
 8003cea:	4a03      	ldr	r2, [pc, #12]	(8003cf8 <NVIC_Init+0x78>)
 8003cec:	3120      	adds	r1, #32
 8003cee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
}
 8003cf2:	bd30      	pop	{r4, r5, pc}
 8003cf4:	e000ed00 	.word	0xe000ed00
 8003cf8:	e000e100 	.word	0xe000e100

08003cfc <NVIC_StructInit>:
* Return         : None
*******************************************************************************/
void NVIC_StructInit(NVIC_InitTypeDef* NVIC_InitStruct)
{
  /* NVIC_InitStruct members default value */
  NVIC_InitStruct->NVIC_IRQChannel = 0x00;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	7003      	strb	r3, [r0, #0]
  NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority = 0x00;
 8003d00:	7043      	strb	r3, [r0, #1]
  NVIC_InitStruct->NVIC_IRQChannelSubPriority = 0x00;
 8003d02:	7083      	strb	r3, [r0, #2]
  NVIC_InitStruct->NVIC_IRQChannelCmd = DISABLE;
 8003d04:	70c3      	strb	r3, [r0, #3]
}
 8003d06:	4770      	bx	lr

08003d08 <NVIC_GetCurrentPendingIRQChannel>:
* Output         : None
* Return         : Pending IRQ Channel Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentPendingIRQChannel(void)
{
  return ((u16)((SCB->ICSR & (u32)0x003FF000) >> 0x0C));
 8003d08:	4b03      	ldr	r3, [pc, #12]	(8003d18 <NVIC_GetCurrentPendingIRQChannel+0x10>)
 8003d0a:	4804      	ldr	r0, [pc, #16]	(8003d1c <NVIC_GetCurrentPendingIRQChannel+0x14>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	ea03 0000 	and.w	r0, r3, r0
 8003d12:	0b00      	lsrs	r0, r0, #12
}
 8003d14:	4770      	bx	lr
 8003d16:	46c0      	nop			(mov r8, r8)
 8003d18:	e000ed00 	.word	0xe000ed00
 8003d1c:	003ff000 	.word	0x003ff000

08003d20 <NVIC_GetIRQChannelPendingBitStatus>:
  u32 tmp = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 8003d20:	f000 031f 	and.w	r3, r0, #31	; 0x1f
 8003d24:	2201      	movs	r2, #1
 8003d26:	409a      	lsls	r2, r3

  if (((NVIC->ISPR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp)
 8003d28:	0940      	lsrs	r0, r0, #5
 8003d2a:	4b05      	ldr	r3, [pc, #20]	(8003d40 <NVIC_GetIRQChannelPendingBitStatus+0x20>)
 8003d2c:	3040      	adds	r0, #64
 8003d2e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003d32:	4010      	ands	r0, r2
 8003d34:	4290      	cmp	r0, r2
 8003d36:	bf14      	ite	ne
 8003d38:	2000      	movne	r0, #0
 8003d3a:	2001      	moveq	r0, #1
  else
  {
    pendingirqstatus = RESET;
  }
  return pendingirqstatus;
}
 8003d3c:	4770      	bx	lr
 8003d3e:	46c0      	nop			(mov r8, r8)
 8003d40:	e000e100 	.word	0xe000e100

08003d44 <NVIC_SetIRQChannelPendingBit>:
void NVIC_SetIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  *(vu32*) 0xE000EF00 = (u32)NVIC_IRQChannel;
 8003d44:	4b01      	ldr	r3, [pc, #4]	(8003d4c <NVIC_SetIRQChannelPendingBit+0x8>)
 8003d46:	6018      	str	r0, [r3, #0]
}
 8003d48:	4770      	bx	lr
 8003d4a:	46c0      	nop			(mov r8, r8)
 8003d4c:	e000ef00 	.word	0xe000ef00

08003d50 <NVIC_ClearIRQChannelPendingBit>:
void NVIC_ClearIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  NVIC->ICPR[(NVIC_IRQChannel >> 0x05)] = (u32)0x01 << (NVIC_IRQChannel & (u32)0x1F);
 8003d50:	0941      	lsrs	r1, r0, #5
 8003d52:	2301      	movs	r3, #1
 8003d54:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8003d58:	4083      	lsls	r3, r0
 8003d5a:	4a02      	ldr	r2, [pc, #8]	(8003d64 <NVIC_ClearIRQChannelPendingBit+0x14>)
 8003d5c:	3160      	adds	r1, #96
 8003d5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8003d62:	4770      	bx	lr
 8003d64:	e000e100 	.word	0xe000e100

08003d68 <NVIC_GetCurrentActiveHandler>:
* Output         : None
* Return         : Active Handler Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentActiveHandler(void)
{
  return ((u16)(SCB->ICSR & (u32)0x3FF));
 8003d68:	4b02      	ldr	r3, [pc, #8]	(8003d74 <NVIC_GetCurrentActiveHandler+0xc>)
 8003d6a:	6858      	ldr	r0, [r3, #4]
 8003d6c:	0580      	lsls	r0, r0, #22
 8003d6e:	0d80      	lsrs	r0, r0, #22
}
 8003d70:	4770      	bx	lr
 8003d72:	46c0      	nop			(mov r8, r8)
 8003d74:	e000ed00 	.word	0xe000ed00

08003d78 <NVIC_GetIRQChannelActiveBitStatus>:
  u32 tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 8003d78:	f000 031f 	and.w	r3, r0, #31	; 0x1f
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	409a      	lsls	r2, r3

  if (((NVIC->IABR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp )
 8003d80:	0940      	lsrs	r0, r0, #5
 8003d82:	4b05      	ldr	r3, [pc, #20]	(8003d98 <NVIC_GetIRQChannelActiveBitStatus+0x20>)
 8003d84:	3080      	adds	r0, #128
 8003d86:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003d8a:	4010      	ands	r0, r2
 8003d8c:	4290      	cmp	r0, r2
 8003d8e:	bf14      	ite	ne
 8003d90:	2000      	movne	r0, #0
 8003d92:	2001      	moveq	r0, #1
  else
  {
    activeirqstatus = RESET;
  }
  return activeirqstatus;
}
 8003d94:	4770      	bx	lr
 8003d96:	46c0      	nop			(mov r8, r8)
 8003d98:	e000e100 	.word	0xe000e100

08003d9c <NVIC_GetCPUID>:
* Output         : None
* Return         : CPU ID.
*******************************************************************************/
u32 NVIC_GetCPUID(void)
{
  return (SCB->CPUID);
 8003d9c:	4b01      	ldr	r3, [pc, #4]	(8003da4 <NVIC_GetCPUID+0x8>)
 8003d9e:	6818      	ldr	r0, [r3, #0]
}
 8003da0:	4770      	bx	lr
 8003da2:	46c0      	nop			(mov r8, r8)
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (u32)0x1FFFFF80);
 8003da8:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8003dac:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8003db0:	4b01      	ldr	r3, [pc, #4]	(8003db8 <NVIC_SetVectorTable+0x10>)
 8003db2:	4301      	orrs	r1, r0
 8003db4:	6099      	str	r1, [r3, #8]
}
 8003db6:	4770      	bx	lr
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <NVIC_GenerateSystemReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateSystemReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x04;
 8003dbc:	4a01      	ldr	r2, [pc, #4]	(8003dc4 <NVIC_GenerateSystemReset+0x8>)
 8003dbe:	4b02      	ldr	r3, [pc, #8]	(8003dc8 <NVIC_GenerateSystemReset+0xc>)
 8003dc0:	60da      	str	r2, [r3, #12]
}
 8003dc2:	4770      	bx	lr
 8003dc4:	05fa0004 	.word	0x05fa0004
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <NVIC_GenerateCoreReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateCoreReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x01;
 8003dcc:	4a01      	ldr	r2, [pc, #4]	(8003dd4 <NVIC_GenerateCoreReset+0x8>)
 8003dce:	4b02      	ldr	r3, [pc, #8]	(8003dd8 <NVIC_GenerateCoreReset+0xc>)
 8003dd0:	60da      	str	r2, [r3, #12]
}
 8003dd2:	4770      	bx	lr
 8003dd4:	05fa0001 	.word	0x05fa0001
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <NVIC_SystemLPConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8003ddc:	b121      	cbz	r1, 8003de8 <NVIC_SystemLPConfig+0xc>
  {
    SCB->SCR |= LowPowerMode;
 8003dde:	4a05      	ldr	r2, [pc, #20]	(8003df4 <NVIC_SystemLPConfig+0x18>)
 8003de0:	6913      	ldr	r3, [r2, #16]
 8003de2:	ea40 0303 	orr.w	r3, r0, r3
 8003de6:	e003      	b.n	8003df0 <NVIC_SystemLPConfig+0x14>
  }
  else
  {
    SCB->SCR &= (u32)(~(u32)LowPowerMode);
 8003de8:	4a02      	ldr	r2, [pc, #8]	(8003df4 <NVIC_SystemLPConfig+0x18>)
 8003dea:	6913      	ldr	r3, [r2, #16]
 8003dec:	ea23 0300 	bic.w	r3, r3, r0
 8003df0:	6113      	str	r3, [r2, #16]
  }
}
 8003df2:	4770      	bx	lr
 8003df4:	e000ed00 	.word	0xe000ed00

08003df8 <NVIC_SystemHandlerConfig>:

  /* Check the parameters */
  assert_param(IS_CONFIG_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  tmpreg =  (u32)0x01 << (SystemHandler & (u32)0x1F);
 8003df8:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	fa13 f000 	lsls.w	r0, r3, r0

  if (NewState != DISABLE)
 8003e02:	b121      	cbz	r1, 8003e0e <NVIC_SystemHandlerConfig+0x16>
  {
    SCB->SHCSR |= tmpreg;
 8003e04:	4a05      	ldr	r2, [pc, #20]	(8003e1c <NVIC_SystemHandlerConfig+0x24>)
 8003e06:	6a53      	ldr	r3, [r2, #36]
 8003e08:	ea40 0303 	orr.w	r3, r0, r3
 8003e0c:	e003      	b.n	8003e16 <NVIC_SystemHandlerConfig+0x1e>
  }
  else
  {
    SCB->SHCSR &= ~tmpreg;
 8003e0e:	4a03      	ldr	r2, [pc, #12]	(8003e1c <NVIC_SystemHandlerConfig+0x24>)
 8003e10:	6a53      	ldr	r3, [r2, #36]
 8003e12:	ea23 0300 	bic.w	r3, r3, r0
 8003e16:	6253      	str	r3, [r2, #36]
  }
}
 8003e18:	4770      	bx	lr
 8003e1a:	46c0      	nop			(mov r8, r8)
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <NVIC_SystemHandlerPriorityConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemHandlerPriorityConfig(u32 SystemHandler, u8 SystemHandlerPreemptionPriority,
                                      u8 SystemHandlerSubPriority)
{
 8003e20:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8003e22:	4c14      	ldr	r4, [pc, #80]	(8003e74 <NVIC_SystemHandlerPriorityConfig+0x54>)
 8003e24:	68e3      	ldr	r3, [r4, #12]
 8003e26:	ea6f 0303 	mvn.w	r3, r3
 8003e2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e2e:	0a1b      	lsrs	r3, r3, #8
  tmp1 = (0x4 - tmppriority);
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
 8003e30:	f1c3 0c04 	rsb	ip, r3, #4	; 0x4
 8003e34:	fa01 f10c 	lsl.w	r1, r1, ip
  tmppriority |=  SystemHandlerSubPriority & tmp2;
 8003e38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003e3c:	fa2c f303 	lsr.w	r3, ip, r3
 8003e40:	401a      	ands	r2, r3
 8003e42:	430a      	orrs	r2, r1

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
 8003e44:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
 8003e48:	0940      	lsrs	r0, r0, #5
 8003e4a:	f000 0018 	and.w	r0, r0, #24	; 0x18
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
 8003e4e:	fa0c fc00 	lsl.w	ip, ip, r0
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
 8003e52:	0112      	lsls	r2, r2, #4
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
  SCB->SHPR[tmp1] |= tmppriority;
 8003e54:	4082      	lsls	r2, r0
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
 8003e56:	0989      	lsrs	r1, r1, #6
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
 8003e58:	3106      	adds	r1, #6
 8003e5a:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 8003e5e:	ea23 030c 	bic.w	r3, r3, ip
 8003e62:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
  SCB->SHPR[tmp1] |= tmppriority;
 8003e66:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
}
 8003e70:	bd10      	pop	{r4, pc}
 8003e72:	46c0      	nop			(mov r8, r8)
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <NVIC_GetSystemHandlerPendingBitStatus>:
  u32 tmp = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_GET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0A);
 8003e78:	0a80      	lsrs	r0, r0, #10
  tmppos &= (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;
 8003e7a:	f000 000f 	and.w	r0, r0, #15	; 0xf
 8003e7e:	2301      	movs	r3, #1
 8003e80:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 8003e82:	4a04      	ldr	r2, [pc, #16]	(8003e94 <NVIC_GetSystemHandlerPendingBitStatus+0x1c>)
 8003e84:	6a50      	ldr	r0, [r2, #36]
 8003e86:	ea03 0000 	and.w	r0, r3, r0
 8003e8a:	4298      	cmp	r0, r3
 8003e8c:	bf14      	ite	ne
 8003e8e:	2000      	movne	r0, #0
 8003e90:	2001      	moveq	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8003e92:	4770      	bx	lr
 8003e94:	e000ed00 	.word	0xe000ed00

08003e98 <NVIC_SetSystemHandlerPendingBit>:
  assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Set the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << tmp);
 8003e98:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	4083      	lsls	r3, r0
 8003ea0:	4a02      	ldr	r2, [pc, #8]	(8003eac <NVIC_SetSystemHandlerPendingBit+0x14>)
 8003ea2:	6851      	ldr	r1, [r2, #4]
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6053      	str	r3, [r2, #4]
}
 8003ea8:	4770      	bx	lr
 8003eaa:	46c0      	nop			(mov r8, r8)
 8003eac:	e000ed00 	.word	0xe000ed00

08003eb0 <NVIC_ClearSystemHandlerPendingBit>:
  assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
  /* Clear the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
 8003eb0:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 8003eb4:	3801      	subs	r0, #1
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	4083      	lsls	r3, r0
 8003eba:	4a02      	ldr	r2, [pc, #8]	(8003ec4 <NVIC_ClearSystemHandlerPendingBit+0x14>)
 8003ebc:	6851      	ldr	r1, [r2, #4]
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	6053      	str	r3, [r2, #4]
}
 8003ec2:	4770      	bx	lr
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <NVIC_GetSystemHandlerActiveBitStatus>:
  /* Check the parameters */
  assert_param(IS_GET_ACTIVE_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;

  tmppos = (u32)0x01 << tmppos;
 8003ec8:	0b80      	lsrs	r0, r0, #14
 8003eca:	f000 000f 	and.w	r0, r0, #15	; 0xf
 8003ece:	2301      	movs	r3, #1
 8003ed0:	4083      	lsls	r3, r0

  tmp = SCB->SHCSR & tmppos;
 8003ed2:	4a04      	ldr	r2, [pc, #16]	(8003ee4 <NVIC_GetSystemHandlerActiveBitStatus+0x1c>)
 8003ed4:	6a50      	ldr	r0, [r2, #36]
 8003ed6:	ea03 0000 	and.w	r0, r3, r0
 8003eda:	4298      	cmp	r0, r3
 8003edc:	bf14      	ite	ne
 8003ede:	2000      	movne	r0, #0
 8003ee0:	2001      	moveq	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8003ee2:	4770      	bx	lr
 8003ee4:	e000ed00 	.word	0xe000ed00

08003ee8 <NVIC_GetFaultHandlerSources>:
  u32 tmpreg = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
 8003ee8:	0c83      	lsrs	r3, r0, #18
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;

  if (tmpreg == 0x00)
 8003eea:	f013 0303 	ands.w	r3, r3, #3	; 0x3
 8003eee:	d102      	bne.n	8003ef6 <NVIC_GetFaultHandlerSources+0xe>
  {
    faultsources = SCB->HFSR;
 8003ef0:	4b0d      	ldr	r3, [pc, #52]	(8003f28 <NVIC_GetFaultHandlerSources+0x40>)
 8003ef2:	6ad8      	ldr	r0, [r3, #44]
 8003ef4:	e017      	b.n	8003f26 <NVIC_GetFaultHandlerSources+0x3e>
  }
  else if (tmpreg == 0x01)
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d113      	bne.n	8003f22 <NVIC_GetFaultHandlerSources+0x3a>
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 8003efa:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8003efe:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003f02:	33fe      	adds	r3, #254

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
 8003f04:	0d02      	lsrs	r2, r0, #20
  {
    faultsources = SCB->HFSR;
  }
  else if (tmpreg == 0x01)
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 8003f06:	3301      	adds	r3, #1

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
 8003f08:	f002 0203 	and.w	r2, r2, #3	; 0x3
  {
    faultsources = SCB->HFSR;
  }
  else if (tmpreg == 0x01)
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 8003f0c:	6a99      	ldr	r1, [r3, #40]
 8003f0e:	00d3      	lsls	r3, r2, #3
 8003f10:	fa31 f003 	lsrs.w	r0, r1, r3
    if (tmppos != 0x02)
 8003f14:	2a02      	cmp	r2, #2
    {
      faultsources &= (u32)0x0F;
 8003f16:	bf14      	ite	ne
 8003f18:	f000 000f 	andne.w	r0, r0, #15	; 0xf
    }
    else
    {
      faultsources &= (u32)0xFF;
 8003f1c:	f000 00ff 	andeq.w	r0, r0, #255	; 0xff
 8003f20:	e001      	b.n	8003f26 <NVIC_GetFaultHandlerSources+0x3e>
    }
  }
  else
  {
    faultsources = SCB->DFSR;
 8003f22:	4b01      	ldr	r3, [pc, #4]	(8003f28 <NVIC_GetFaultHandlerSources+0x40>)
 8003f24:	6b18      	ldr	r0, [r3, #48]
  }
  return faultsources;
}
 8003f26:	4770      	bx	lr
 8003f28:	e000ed00 	.word	0xe000ed00

08003f2c <NVIC_GetFaultAddress>:
  /* Check the parameters */
  assert_param(IS_FAULT_ADDRESS_SYSTEM_HANDLER(SystemHandler));
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;

  if (tmp == 0x00)
 8003f2c:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
  {
    faultaddress = SCB->MMFAR;
 8003f30:	bf0b      	itete	eq
 8003f32:	4b02      	ldreq	r3, [pc, #8]	(8003f3c <NVIC_GetFaultAddress+0x10>)
  }
  else
  {
    faultaddress = SCB->BFAR;
 8003f34:	4b01      	ldrne	r3, [pc, #4]	(8003f3c <NVIC_GetFaultAddress+0x10>)
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;

  if (tmp == 0x00)
  {
    faultaddress = SCB->MMFAR;
 8003f36:	6b58      	ldreq	r0, [r3, #52]
  }
  else
  {
    faultaddress = SCB->BFAR;
 8003f38:	6b98      	ldrne	r0, [r3, #56]
  }
  return faultaddress;
}
 8003f3a:	4770      	bx	lr
 8003f3c:	e000ed00 	.word	0xe000ed00

08003f40 <NVIC_GetBASEPRI>:
* Input          : None
* Output         : None
* Return         : BASEPRI register value
*******************************************************************************/
u32 NVIC_GetBASEPRI(void)
{
 8003f40:	b500      	push	{lr}
 8003f42:	b081      	sub	sp, #4
  return (__GetBASEPRI());
 8003f44:	f000 fae6 	bl	8004514 <__GetBASEPRI>
}
 8003f48:	b001      	add	sp, #4
 8003f4a:	bd00      	pop	{pc}

08003f4c <NVIC_BASEPRICONFIG>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
 8003f4c:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
 8003f4e:	0100      	lsls	r0, r0, #4
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
 8003f50:	b081      	sub	sp, #4
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
 8003f52:	f000 fadc 	bl	800450e <__BASEPRICONFIG>
}
 8003f56:	b001      	add	sp, #4
 8003f58:	bd00      	pop	{pc}
 8003f5a:	46c0      	nop			(mov r8, r8)

08003f5c <NVIC_RESETFAULTMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETFAULTMASK(void)
{
 8003f5c:	b500      	push	{lr}
 8003f5e:	b081      	sub	sp, #4
  __RESETFAULTMASK();
 8003f60:	f000 fad3 	bl	800450a <__RESETFAULTMASK>
}
 8003f64:	b001      	add	sp, #4
 8003f66:	bd00      	pop	{pc}

08003f68 <NVIC_SETFAULTMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETFAULTMASK(void)
{
 8003f68:	b500      	push	{lr}
 8003f6a:	b081      	sub	sp, #4
  __SETFAULTMASK();
 8003f6c:	f000 facb 	bl	8004506 <__SETFAULTMASK>
}
 8003f70:	b001      	add	sp, #4
 8003f72:	bd00      	pop	{pc}

08003f74 <NVIC_RESETPRIMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETPRIMASK(void)
{
 8003f74:	b500      	push	{lr}
 8003f76:	b081      	sub	sp, #4
  __RESETPRIMASK();
 8003f78:	f000 fac3 	bl	8004502 <__RESETPRIMASK>
}
 8003f7c:	b001      	add	sp, #4
 8003f7e:	bd00      	pop	{pc}

08003f80 <NVIC_SETPRIMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETPRIMASK(void)
{
 8003f80:	b500      	push	{lr}
 8003f82:	b081      	sub	sp, #4
  __SETPRIMASK();
 8003f84:	f000 fabb 	bl	80044fe <__SETPRIMASK>
}
 8003f88:	b001      	add	sp, #4
 8003f8a:	bd00      	pop	{pc}

08003f8c <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_DBP_BB = (u32)NewState;
 8003f8c:	4b01      	ldr	r3, [pc, #4]	(8003f94 <PWR_BackupAccessCmd+0x8>)
 8003f8e:	6018      	str	r0, [r3, #0]
}
 8003f90:	4770      	bx	lr
 8003f92:	46c0      	nop			(mov r8, r8)
 8003f94:	420e0020 	.word	0x420e0020

08003f98 <PWR_PVDCmd>:
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PVDE_BB = (u32)NewState;
 8003f98:	4b01      	ldr	r3, [pc, #4]	(8003fa0 <PWR_PVDCmd+0x8>)
 8003f9a:	6018      	str	r0, [r3, #0]
}
 8003f9c:	4770      	bx	lr
 8003f9e:	46c0      	nop			(mov r8, r8)
 8003fa0:	420e0010 	.word	0x420e0010

08003fa4 <PWR_PVDLevelConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));

  tmpreg = PWR->CR;
 8003fa4:	4a03      	ldr	r2, [pc, #12]	(8003fb4 <PWR_PVDLevelConfig+0x10>)
 8003fa6:	6813      	ldr	r3, [r2, #0]

  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_Mask;
 8003fa8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0

  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8003fac:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8003fae:	6010      	str	r0, [r2, #0]
}
 8003fb0:	4770      	bx	lr
 8003fb2:	46c0      	nop			(mov r8, r8)
 8003fb4:	40007000 	.word	0x40007000

08003fb8 <PWR_WakeUpPinCmd>:
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_EWUP_BB = (u32)NewState;
 8003fb8:	4b01      	ldr	r3, [pc, #4]	(8003fc0 <PWR_WakeUpPinCmd+0x8>)
 8003fba:	6018      	str	r0, [r3, #0]
}
 8003fbc:	4770      	bx	lr
 8003fbe:	46c0      	nop			(mov r8, r8)
 8003fc0:	420e00a0 	.word	0x420e00a0

08003fc4 <PWR_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (u32)RESET)
 8003fc4:	4b03      	ldr	r3, [pc, #12]	(8003fd4 <PWR_GetFlagStatus+0x10>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4218      	tst	r0, r3
 8003fca:	bf0c      	ite	eq
 8003fcc:	2000      	moveq	r0, #0
 8003fce:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8003fd0:	4770      	bx	lr
 8003fd2:	46c0      	nop			(mov r8, r8)
 8003fd4:	40007000 	.word	0x40007000

08003fd8 <PWR_ClearFlag>:
void PWR_ClearFlag(u32 PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8003fd8:	4a02      	ldr	r2, [pc, #8]	(8003fe4 <PWR_ClearFlag+0xc>)
 8003fda:	6813      	ldr	r3, [r2, #0]
 8003fdc:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 8003fe0:	6013      	str	r3, [r2, #0]
}
 8003fe2:	4770      	bx	lr
 8003fe4:	40007000 	.word	0x40007000

08003fe8 <PWR_EnterSTANDBYMode>:
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 8003fe8:	4a0b      	ldr	r2, [pc, #44]	(8004018 <PWR_EnterSTANDBYMode+0x30>)
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
 8003fea:	b500      	push	{lr}
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 8003fec:	6813      	ldr	r3, [r2, #0]
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
 8003fee:	b081      	sub	sp, #4
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 8003ff0:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 8003ff4:	6013      	str	r3, [r2, #0]

  /* Select STANDBY mode */
  PWR->CR |= CR_PDDS_Set;
 8003ff6:	6813      	ldr	r3, [r2, #0]
 8003ff8:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 8003ffc:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8003ffe:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
 8004002:	f502 42fa 	add.w	r2, r2, #32000	; 0x7d00
 8004006:	3210      	adds	r2, #16
 8004008:	6813      	ldr	r3, [r2, #0]
 800400a:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 800400e:	6013      	str	r3, [r2, #0]

  /* Request Wait For Interrupt */
  __WFI();
 8004010:	f000 fa50 	bl	80044b4 <__WFI>
}
 8004014:	b001      	add	sp, #4
 8004016:	bd00      	pop	{pc}
 8004018:	40007000 	.word	0x40007000

0800401c <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 800401c:	4a0c      	ldr	r2, [pc, #48]	(8004050 <PWR_EnterSTOPMode+0x34>)
*                       - PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTOPMode(u32 PWR_Regulator, u8 PWR_STOPEntry)
{
 800401e:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004020:	6813      	ldr	r3, [r2, #0]
*                       - PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_EnterSTOPMode(u32 PWR_Regulator, u8 PWR_STOPEntry)
{
 8004022:	b081      	sub	sp, #4
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_Mask;
 8004024:	f023 0303 	bic.w	r3, r3, #3	; 0x3

  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 8004028:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 800402a:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 800402c:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
 8004030:	f502 42fa 	add.w	r2, r2, #32000	; 0x7d00
 8004034:	3210      	adds	r2, #16
 8004036:	6813      	ldr	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8004038:	2901      	cmp	r1, #1

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 800403a:	f043 0304 	orr.w	r3, r3, #4	; 0x4
 800403e:	6013      	str	r3, [r2, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8004040:	d102      	bne.n	8004048 <PWR_EnterSTOPMode+0x2c>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8004042:	f000 fa37 	bl	80044b4 <__WFI>
 8004046:	e001      	b.n	800404c <PWR_EnterSTOPMode+0x30>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 8004048:	f000 fa36 	bl	80044b8 <__WFE>
  }
}
 800404c:	b001      	add	sp, #4
 800404e:	bd00      	pop	{pc}
 8004050:	40007000 	.word	0x40007000

08004054 <PWR_DeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_DeInit(void)
{
 8004054:	b510      	push	{r4, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8004056:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
 800405a:	4620      	mov	r0, r4
 800405c:	2101      	movs	r1, #1
 800405e:	f000 f97d 	bl	800435c <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8004062:	4620      	mov	r0, r4
 8004064:	2100      	movs	r1, #0
 8004066:	f000 f979 	bl	800435c <RCC_APB1PeriphResetCmd>
}
 800406a:	bd10      	pop	{r4, pc}

0800406c <RCC_DeInit>:
* Return         : None
*******************************************************************************/
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 800406c:	4a0d      	ldr	r2, [pc, #52]	(80040a4 <RCC_DeInit+0x38>)
 800406e:	6813      	ldr	r3, [r2, #0]
 8004070:	f043 0301 	orr.w	r3, r3, #1	; 0x1
 8004074:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
  RCC->CFGR &= (u32)0xF8FF0000;
 8004076:	6851      	ldr	r1, [r2, #4]
 8004078:	4b0b      	ldr	r3, [pc, #44]	(80040a8 <RCC_DeInit+0x3c>)
 800407a:	ea01 0303 	and.w	r3, r1, r3
 800407e:	6053      	str	r3, [r2, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
 8004080:	6813      	ldr	r3, [r2, #0]
 8004082:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
 800408c:	6813      	ldr	r3, [r2, #0]
 800408e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004092:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 8004094:	6853      	ldr	r3, [r2, #4]
 8004096:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800409a:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800409c:	2300      	movs	r3, #0
 800409e:	6093      	str	r3, [r2, #8]
}
 80040a0:	4770      	bx	lr
 80040a2:	46c0      	nop			(mov r8, r8)
 80040a4:	40021000 	.word	0x40021000
 80040a8:	f8ff0000 	.word	0xf8ff0000

080040ac <RCC_HSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80040ac:	4a0b      	ldr	r2, [pc, #44]	(80040dc <RCC_HSEConfig+0x30>)

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80040ae:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80040b2:	6813      	ldr	r3, [r2, #0]
 80040b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b8:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80040ba:	6813      	ldr	r3, [r2, #0]
 80040bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040c0:	6013      	str	r3, [r2, #0]

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80040c2:	d003      	beq.n	80040cc <RCC_HSEConfig+0x20>
 80040c4:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80040c8:	d107      	bne.n	80040da <RCC_HSEConfig+0x2e>
 80040ca:	e002      	b.n	80040d2 <RCC_HSEConfig+0x26>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 80040cc:	6813      	ldr	r3, [r2, #0]
 80040ce:	4303      	orrs	r3, r0
 80040d0:	e002      	b.n	80040d8 <RCC_HSEConfig+0x2c>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80040d2:	6813      	ldr	r3, [r2, #0]
 80040d4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80040d8:	6013      	str	r3, [r2, #0]
      break;            
      
    default:
      break;      
  }
}
 80040da:	4770      	bx	lr
 80040dc:	40021000 	.word	0x40021000

080040e0 <RCC_WaitForHSEStartUp>:
* Return         : An ErrorStatus enumuration value:
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80040e0:	b082      	sub	sp, #8
  vu32 StartUpCounter = 0;
 80040e2:	2300      	movs	r3, #0
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80040e4:	4909      	ldr	r1, [pc, #36]	(800410c <RCC_WaitForHSEStartUp+0x2c>)
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  vu32 StartUpCounter = 0;
 80040e6:	9301      	str	r3, [sp, #4]
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80040e8:	680a      	ldr	r2, [r1, #0]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 80040ea:	9b01      	ldr	r3, [sp, #4]
 80040ec:	3301      	adds	r3, #1
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 80040ee:	f412 3f00 	tst.w	r2, #131072	; 0x20000
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 80040f2:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 80040f4:	d103      	bne.n	80040fe <RCC_WaitForHSEStartUp+0x1e>
 80040f6:	9b01      	ldr	r3, [sp, #4]
 80040f8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80040fc:	d1f4      	bne.n	80040e8 <RCC_WaitForHSEStartUp+0x8>
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80040fe:	4b03      	ldr	r3, [pc, #12]	(800410c <RCC_WaitForHSEStartUp+0x2c>)
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	0c40      	lsrs	r0, r0, #17
 8004104:	f000 0001 	and.w	r0, r0, #1	; 0x1
  {
    status = ERROR;
  }  

  return (status);
}
 8004108:	b002      	add	sp, #8
 800410a:	4770      	bx	lr
 800410c:	40021000 	.word	0x40021000

08004110 <RCC_AdjustHSICalibrationValue>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8004110:	4a03      	ldr	r2, [pc, #12]	(8004120 <RCC_AdjustHSICalibrationValue+0x10>)
 8004112:	6813      	ldr	r3, [r2, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8004114:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (u32)HSICalibrationValue << 3;
 8004118:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 800411c:	6013      	str	r3, [r2, #0]
}
 800411e:	4770      	bx	lr
 8004120:	40021000 	.word	0x40021000

08004124 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_HSION_BB = (u32)NewState;
 8004124:	4b01      	ldr	r3, [pc, #4]	(800412c <RCC_HSICmd+0x8>)
 8004126:	6018      	str	r0, [r3, #0]
}
 8004128:	4770      	bx	lr
 800412a:	46c0      	nop			(mov r8, r8)
 800412c:	42420000 	.word	0x42420000

08004130 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8004130:	4a03      	ldr	r2, [pc, #12]	(8004140 <RCC_PLLConfig+0x10>)
 8004132:	6853      	ldr	r3, [r2, #4]

  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;

  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8004134:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004138:	4318      	orrs	r0, r3
 800413a:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800413c:	6050      	str	r0, [r2, #4]
}
 800413e:	4770      	bx	lr
 8004140:	40021000 	.word	0x40021000

08004144 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
 8004144:	4b01      	ldr	r3, [pc, #4]	(800414c <RCC_PLLCmd+0x8>)
 8004146:	6018      	str	r0, [r3, #0]
}
 8004148:	4770      	bx	lr
 800414a:	46c0      	nop			(mov r8, r8)
 800414c:	42420060 	.word	0x42420060

08004150 <RCC_SYSCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8004150:	4a03      	ldr	r2, [pc, #12]	(8004160 <RCC_SYSCLKConfig+0x10>)
 8004152:	6853      	ldr	r3, [r2, #4]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8004154:	f023 0303 	bic.w	r3, r3, #3	; 0x3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8004158:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800415a:	6050      	str	r0, [r2, #4]
}
 800415c:	4770      	bx	lr
 800415e:	46c0      	nop			(mov r8, r8)
 8004160:	40021000 	.word	0x40021000

08004164 <RCC_GetSYSCLKSource>:
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
 8004164:	4b02      	ldr	r3, [pc, #8]	(8004170 <RCC_GetSYSCLKSource+0xc>)
 8004166:	6858      	ldr	r0, [r3, #4]
 8004168:	f000 000c 	and.w	r0, r0, #12	; 0xc
}
 800416c:	4770      	bx	lr
 800416e:	46c0      	nop			(mov r8, r8)
 8004170:	40021000 	.word	0x40021000

08004174 <RCC_HCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8004174:	4a03      	ldr	r2, [pc, #12]	(8004184 <RCC_HCLKConfig+0x10>)
 8004176:	6853      	ldr	r3, [r2, #4]

  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8004178:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800417c:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800417e:	6050      	str	r0, [r2, #4]
}
 8004180:	4770      	bx	lr
 8004182:	46c0      	nop			(mov r8, r8)
 8004184:	40021000 	.word	0x40021000

08004188 <RCC_PCLK1Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8004188:	4a03      	ldr	r2, [pc, #12]	(8004198 <RCC_PCLK1Config+0x10>)
 800418a:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 800418c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8004190:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004192:	6050      	str	r0, [r2, #4]
}
 8004194:	4770      	bx	lr
 8004196:	46c0      	nop			(mov r8, r8)
 8004198:	40021000 	.word	0x40021000

0800419c <RCC_PCLK2Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800419c:	4a03      	ldr	r2, [pc, #12]	(80041ac <RCC_PCLK2Config+0x10>)
 800419e:	6853      	ldr	r3, [r2, #4]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 80041a0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80041a4:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80041a8:	6053      	str	r3, [r2, #4]
}
 80041aa:	4770      	bx	lr
 80041ac:	40021000 	.word	0x40021000

080041b0 <RCC_ITConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80041b0:	b121      	cbz	r1, 80041bc <RCC_ITConfig+0xc>
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80041b2:	4a05      	ldr	r2, [pc, #20]	(80041c8 <RCC_ITConfig+0x18>)
 80041b4:	7813      	ldrb	r3, [r2, #0]
 80041b6:	ea40 0303 	orr.w	r3, r0, r3
 80041ba:	e003      	b.n	80041c4 <RCC_ITConfig+0x14>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to disable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS &= (u8)~RCC_IT;
 80041bc:	4a02      	ldr	r2, [pc, #8]	(80041c8 <RCC_ITConfig+0x18>)
 80041be:	7813      	ldrb	r3, [r2, #0]
 80041c0:	ea23 0300 	bic.w	r3, r3, r0
 80041c4:	7013      	strb	r3, [r2, #0]
  }
}
 80041c6:	4770      	bx	lr
 80041c8:	40021009 	.word	0x40021009

080041cc <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(u32 RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(vu32 *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 80041cc:	4b01      	ldr	r3, [pc, #4]	(80041d4 <RCC_USBCLKConfig+0x8>)
 80041ce:	6018      	str	r0, [r3, #0]
}
 80041d0:	4770      	bx	lr
 80041d2:	46c0      	nop			(mov r8, r8)
 80041d4:	424200d8 	.word	0x424200d8

080041d8 <RCC_ADCCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));

  tmpreg = RCC->CFGR;
 80041d8:	4a03      	ldr	r2, [pc, #12]	(80041e8 <RCC_ADCCLKConfig+0x10>)
 80041da:	6853      	ldr	r3, [r2, #4]

  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 80041dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000

  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 80041e0:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80041e2:	6050      	str	r0, [r2, #4]
}
 80041e4:	4770      	bx	lr
 80041e6:	46c0      	nop			(mov r8, r8)
 80041e8:	40021000 	.word	0x40021000

080041ec <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 80041ec:	4a06      	ldr	r2, [pc, #24]	(8004208 <RCC_LSEConfig+0x1c>)
 80041ee:	2300      	movs	r3, #0

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 80041f0:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 80041f2:	7013      	strb	r3, [r2, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 80041f4:	7013      	strb	r3, [r2, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
 80041f6:	bf08      	it	eq
 80041f8:	7010      	strbeq	r0, [r2, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 80041fa:	d003      	beq.n	8004204 <RCC_LSEConfig+0x18>
 80041fc:	2804      	cmp	r0, #4
 80041fe:	d101      	bne.n	8004204 <RCC_LSEConfig+0x18>
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8004200:	2305      	movs	r3, #5
 8004202:	7013      	strb	r3, [r2, #0]
      break;            
      
    default:
      break;      
  }
}
 8004204:	4770      	bx	lr
 8004206:	46c0      	nop			(mov r8, r8)
 8004208:	40021020 	.word	0x40021020

0800420c <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_LSION_BB = (u32)NewState;
 800420c:	4b01      	ldr	r3, [pc, #4]	(8004214 <RCC_LSICmd+0x8>)
 800420e:	6018      	str	r0, [r3, #0]
}
 8004210:	4770      	bx	lr
 8004212:	46c0      	nop			(mov r8, r8)
 8004214:	42420480 	.word	0x42420480

08004218 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8004218:	4a02      	ldr	r2, [pc, #8]	(8004224 <RCC_RTCCLKConfig+0xc>)
 800421a:	6a13      	ldr	r3, [r2, #32]
 800421c:	4318      	orrs	r0, r3
 800421e:	6210      	str	r0, [r2, #32]
}
 8004220:	4770      	bx	lr
 8004222:	46c0      	nop			(mov r8, r8)
 8004224:	40021000 	.word	0x40021000

08004228 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_RTCEN_BB = (u32)NewState;
 8004228:	4b01      	ldr	r3, [pc, #4]	(8004230 <RCC_RTCCLKCmd+0x8>)
 800422a:	6018      	str	r0, [r3, #0]
}
 800422c:	4770      	bx	lr
 800422e:	46c0      	nop			(mov r8, r8)
 8004230:	4242043c 	.word	0x4242043c

08004234 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8004234:	4929      	ldr	r1, [pc, #164]	(80042dc <RCC_GetClocksFreq+0xa8>)
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8004236:	4684      	mov	ip, r0
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8004238:	684b      	ldr	r3, [r1, #4]

  switch (tmp)
 800423a:	f003 030c 	and.w	r3, r3, #12	; 0xc
 800423e:	2b04      	cmp	r3, #4
 8004240:	d021      	beq.n	8004286 <RCC_GetClocksFreq+0x52>
 8004242:	2b08      	cmp	r3, #8
 8004244:	d11f      	bne.n	8004286 <RCC_GetClocksFreq+0x52>
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8004246:	684b      	ldr	r3, [r1, #4]
      pllmull = ( pllmull >> 18) + 2;
 8004248:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800424c:	0c9b      	lsrs	r3, r3, #18
 800424e:	1c9a      	adds	r2, r3, #2

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8004250:	684b      	ldr	r3, [r1, #4]

      if (pllsource == 0x00)
 8004252:	f413 3f80 	tst.w	r3, #65536	; 0x10000
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
 8004256:	bf08      	it	eq
 8004258:	ebc2 1342 	rsbeq	r3, r2, r2, lsl #5
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllmull = ( pllmull >> 18) + 2;

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;

      if (pllsource == 0x00)
 800425c:	d006      	beq.n	800426c <RCC_GetClocksFreq+0x38>
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
      }
      else
      {/* HSE selected as PLL clock entry */

        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (u32)RESET)
 800425e:	684b      	ldr	r3, [r1, #4]
 8004260:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004264:	ea4f 1342 	mov.w	r3, r2, lsl #5
 8004268:	d006      	beq.n	8004278 <RCC_GetClocksFreq+0x44>
        {/* HSE oscillator clock divided by 2 */

          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8004270:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	e007      	b.n	8004288 <RCC_GetClocksFreq+0x54>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 800427e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004282:	025b      	lsls	r3, r3, #9
 8004284:	e000      	b.n	8004288 <RCC_GetClocksFreq+0x54>
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 8004286:	4b16      	ldr	r3, [pc, #88]	(80042e0 <RCC_GetClocksFreq+0xac>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8004288:	4814      	ldr	r0, [pc, #80]	(80042dc <RCC_GetClocksFreq+0xa8>)
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 800428a:	f8cc 3000 	str.w	r3, [ip]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800428e:	6843      	ldr	r3, [r0, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004290:	4a14      	ldr	r2, [pc, #80]	(80042e4 <RCC_GetClocksFreq+0xb0>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8004292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	5cd3      	ldrb	r3, [r2, r3]
 800429a:	f8dc 1000 	ldr.w	r1, [ip]
 800429e:	40d9      	lsrs	r1, r3
 80042a0:	f8cc 1004 	str.w	r1, [ip, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80042a4:	6843      	ldr	r3, [r0, #4]
 80042a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  tmp = tmp >> 8;
  presc = APBAHBPrescTable[tmp];

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80042aa:	0a1b      	lsrs	r3, r3, #8
 80042ac:	5cd3      	ldrb	r3, [r2, r3]
 80042ae:	fa31 f303 	lsrs.w	r3, r1, r3
 80042b2:	f8cc 3008 	str.w	r3, [ip, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80042b6:	6843      	ldr	r3, [r0, #4]
 80042b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
  tmp = tmp >> 11;
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80042bc:	0adb      	lsrs	r3, r3, #11
 80042be:	5cd3      	ldrb	r3, [r2, r3]
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80042c0:	4a09      	ldr	r2, [pc, #36]	(80042e8 <RCC_GetClocksFreq+0xb4>)
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
  tmp = tmp >> 11;
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80042c2:	40d9      	lsrs	r1, r3
 80042c4:	f8cc 100c 	str.w	r1, [ip, #12]

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80042c8:	6843      	ldr	r3, [r0, #4]
 80042ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80042ce:	0b9b      	lsrs	r3, r3, #14
 80042d0:	5cd3      	ldrb	r3, [r2, r3]
 80042d2:	fbb1 f1f3 	udiv	r1, r1, r3
 80042d6:	f8cc 1010 	str.w	r1, [ip, #16]
}
 80042da:	4770      	bx	lr
 80042dc:	40021000 	.word	0x40021000
 80042e0:	007a1200 	.word	0x007a1200
 80042e4:	08004578 	.word	0x08004578
 80042e8:	08004588 	.word	0x08004588

080042ec <RCC_AHBPeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80042ec:	b121      	cbz	r1, 80042f8 <RCC_AHBPeriphClockCmd+0xc>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80042ee:	4a05      	ldr	r2, [pc, #20]	(8004304 <RCC_AHBPeriphClockCmd+0x18>)
 80042f0:	6953      	ldr	r3, [r2, #20]
 80042f2:	ea40 0303 	orr.w	r3, r0, r3
 80042f6:	e003      	b.n	8004300 <RCC_AHBPeriphClockCmd+0x14>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80042f8:	4a02      	ldr	r2, [pc, #8]	(8004304 <RCC_AHBPeriphClockCmd+0x18>)
 80042fa:	6953      	ldr	r3, [r2, #20]
 80042fc:	ea23 0300 	bic.w	r3, r3, r0
 8004300:	6153      	str	r3, [r2, #20]
  }
}
 8004302:	4770      	bx	lr
 8004304:	40021000 	.word	0x40021000

08004308 <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004308:	b121      	cbz	r1, 8004314 <RCC_APB2PeriphClockCmd+0xc>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800430a:	4a05      	ldr	r2, [pc, #20]	(8004320 <RCC_APB2PeriphClockCmd+0x18>)
 800430c:	6993      	ldr	r3, [r2, #24]
 800430e:	ea40 0303 	orr.w	r3, r0, r3
 8004312:	e003      	b.n	800431c <RCC_APB2PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8004314:	4a02      	ldr	r2, [pc, #8]	(8004320 <RCC_APB2PeriphClockCmd+0x18>)
 8004316:	6993      	ldr	r3, [r2, #24]
 8004318:	ea23 0300 	bic.w	r3, r3, r0
 800431c:	6193      	str	r3, [r2, #24]
  }
}
 800431e:	4770      	bx	lr
 8004320:	40021000 	.word	0x40021000

08004324 <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004324:	b121      	cbz	r1, 8004330 <RCC_APB1PeriphClockCmd+0xc>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8004326:	4a05      	ldr	r2, [pc, #20]	(800433c <RCC_APB1PeriphClockCmd+0x18>)
 8004328:	69d3      	ldr	r3, [r2, #28]
 800432a:	ea40 0303 	orr.w	r3, r0, r3
 800432e:	e003      	b.n	8004338 <RCC_APB1PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8004330:	4a02      	ldr	r2, [pc, #8]	(800433c <RCC_APB1PeriphClockCmd+0x18>)
 8004332:	69d3      	ldr	r3, [r2, #28]
 8004334:	ea23 0300 	bic.w	r3, r3, r0
 8004338:	61d3      	str	r3, [r2, #28]
  }
}
 800433a:	4770      	bx	lr
 800433c:	40021000 	.word	0x40021000

08004340 <RCC_APB2PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004340:	b121      	cbz	r1, 800434c <RCC_APB2PeriphResetCmd+0xc>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8004342:	4a05      	ldr	r2, [pc, #20]	(8004358 <RCC_APB2PeriphResetCmd+0x18>)
 8004344:	68d3      	ldr	r3, [r2, #12]
 8004346:	ea40 0303 	orr.w	r3, r0, r3
 800434a:	e003      	b.n	8004354 <RCC_APB2PeriphResetCmd+0x14>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800434c:	4a02      	ldr	r2, [pc, #8]	(8004358 <RCC_APB2PeriphResetCmd+0x18>)
 800434e:	68d3      	ldr	r3, [r2, #12]
 8004350:	ea23 0300 	bic.w	r3, r3, r0
 8004354:	60d3      	str	r3, [r2, #12]
  }
}
 8004356:	4770      	bx	lr
 8004358:	40021000 	.word	0x40021000

0800435c <RCC_APB1PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800435c:	b121      	cbz	r1, 8004368 <RCC_APB1PeriphResetCmd+0xc>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800435e:	4a05      	ldr	r2, [pc, #20]	(8004374 <RCC_APB1PeriphResetCmd+0x18>)
 8004360:	6913      	ldr	r3, [r2, #16]
 8004362:	ea40 0303 	orr.w	r3, r0, r3
 8004366:	e003      	b.n	8004370 <RCC_APB1PeriphResetCmd+0x14>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8004368:	4a02      	ldr	r2, [pc, #8]	(8004374 <RCC_APB1PeriphResetCmd+0x18>)
 800436a:	6913      	ldr	r3, [r2, #16]
 800436c:	ea23 0300 	bic.w	r3, r3, r0
 8004370:	6113      	str	r3, [r2, #16]
  }
}
 8004372:	4770      	bx	lr
 8004374:	40021000 	.word	0x40021000

08004378 <RCC_BackupResetCmd>:
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_BDRST_BB = (u32)NewState;
 8004378:	4b01      	ldr	r3, [pc, #4]	(8004380 <RCC_BackupResetCmd+0x8>)
 800437a:	6018      	str	r0, [r3, #0]
}
 800437c:	4770      	bx	lr
 800437e:	46c0      	nop			(mov r8, r8)
 8004380:	42420440 	.word	0x42420440

08004384 <RCC_ClockSecuritySystemCmd>:
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_CSSON_BB = (u32)NewState;
 8004384:	4b01      	ldr	r3, [pc, #4]	(800438c <RCC_ClockSecuritySystemCmd+0x8>)
 8004386:	6018      	str	r0, [r3, #0]
}
 8004388:	4770      	bx	lr
 800438a:	46c0      	nop			(mov r8, r8)
 800438c:	4242004c 	.word	0x4242004c

08004390 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO[2:0] bits to select the MCO source */
  *(vu8 *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8004390:	4b01      	ldr	r3, [pc, #4]	(8004398 <RCC_MCOConfig+0x8>)
 8004392:	7018      	strb	r0, [r3, #0]
}
 8004394:	4770      	bx	lr
 8004396:	46c0      	nop			(mov r8, r8)
 8004398:	40021007 	.word	0x40021007

0800439c <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800439c:	0943      	lsrs	r3, r0, #5

  if (tmp == 1)               /* The flag to check is in CR register */
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d108      	bne.n	80043b4 <RCC_GetFlagStatus+0x18>
  {
    statusreg = RCC->CR;
 80043a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043a6:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80043aa:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 80043ae:	3307      	adds	r3, #7
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	e00c      	b.n	80043ce <RCC_GetFlagStatus+0x32>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d108      	bne.n	80043ca <RCC_GetFlagStatus+0x2e>
  {
    statusreg = RCC->BDCR;
 80043b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043bc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80043c0:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 80043c4:	3306      	adds	r3, #6
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	e001      	b.n	80043ce <RCC_GetFlagStatus+0x32>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80043ca:	4b04      	ldr	r3, [pc, #16]	(80043dc <RCC_GetFlagStatus+0x40>)
 80043cc:	6a5b      	ldr	r3, [r3, #36]
 80043ce:	f000 001f 	and.w	r0, r0, #31	; 0x1f
 80043d2:	fa33 f000 	lsrs.w	r0, r3, r0
 80043d6:	f000 0001 	and.w	r0, r0, #1	; 0x1
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 80043da:	4770      	bx	lr
 80043dc:	40021000 	.word	0x40021000

080043e0 <RCC_ClearFlag>:
* Return         : None
*******************************************************************************/
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 80043e0:	4a02      	ldr	r2, [pc, #8]	(80043ec <RCC_ClearFlag+0xc>)
 80043e2:	6a53      	ldr	r3, [r2, #36]
 80043e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043e8:	6253      	str	r3, [r2, #36]
}
 80043ea:	4770      	bx	lr
 80043ec:	40021000 	.word	0x40021000

080043f0 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (u32)RESET)
 80043f0:	4b03      	ldr	r3, [pc, #12]	(8004400 <RCC_GetITStatus+0x10>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	4218      	tst	r0, r3
 80043f6:	bf0c      	ite	eq
 80043f8:	2000      	moveq	r0, #0
 80043fa:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 80043fc:	4770      	bx	lr
 80043fe:	46c0      	nop			(mov r8, r8)
 8004400:	40021000 	.word	0x40021000

08004404 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(vu8 *) CIR_BYTE3_ADDRESS = RCC_IT;
 8004404:	4b01      	ldr	r3, [pc, #4]	(800440c <RCC_ClearITPendingBit+0x8>)
 8004406:	7018      	strb	r0, [r3, #0]
}
 8004408:	4770      	bx	lr
 800440a:	46c0      	nop			(mov r8, r8)
 800440c:	4002100a 	.word	0x4002100a

08004410 <SysTick_CLKSourceConfig>:
void SysTick_CLKSourceConfig(u32 SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));

  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8004410:	2804      	cmp	r0, #4
 8004412:	d103      	bne.n	800441c <SysTick_CLKSourceConfig+0xc>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8004414:	4a04      	ldr	r2, [pc, #16]	(8004428 <SysTick_CLKSourceConfig+0x18>)
 8004416:	6813      	ldr	r3, [r2, #0]
 8004418:	4303      	orrs	r3, r0
 800441a:	e003      	b.n	8004424 <SysTick_CLKSourceConfig+0x14>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 800441c:	4a02      	ldr	r2, [pc, #8]	(8004428 <SysTick_CLKSourceConfig+0x18>)
 800441e:	6813      	ldr	r3, [r2, #0]
 8004420:	f023 0304 	bic.w	r3, r3, #4	; 0x4
 8004424:	6013      	str	r3, [r2, #0]
  }
}
 8004426:	4770      	bx	lr
 8004428:	e000e010 	.word	0xe000e010

0800442c <SysTick_SetReload>:
void SysTick_SetReload(u32 Reload)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_RELOAD(Reload));

  SysTick->LOAD = Reload;
 800442c:	4b01      	ldr	r3, [pc, #4]	(8004434 <SysTick_SetReload+0x8>)
 800442e:	6058      	str	r0, [r3, #4]
}
 8004430:	4770      	bx	lr
 8004432:	46c0      	nop			(mov r8, r8)
 8004434:	e000e010 	.word	0xe000e010

08004438 <SysTick_CounterCmd>:
void SysTick_CounterCmd(u32 SysTick_Counter)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_COUNTER(SysTick_Counter));

  if (SysTick_Counter == SysTick_Counter_Enable)
 8004438:	2801      	cmp	r0, #1
 800443a:	d103      	bne.n	8004444 <SysTick_CounterCmd+0xc>
  {
    SysTick->CTRL |= SysTick_Counter_Enable;
 800443c:	4a08      	ldr	r2, [pc, #32]	(8004460 <SysTick_CounterCmd+0x28>)
 800443e:	6813      	ldr	r3, [r2, #0]
 8004440:	4303      	orrs	r3, r0
 8004442:	e006      	b.n	8004452 <SysTick_CounterCmd+0x1a>
  }
  else if (SysTick_Counter == SysTick_Counter_Disable) 
 8004444:	f110 0f02 	cmn.w	r0, #2	; 0x2
 8004448:	d105      	bne.n	8004456 <SysTick_CounterCmd+0x1e>
  {
    SysTick->CTRL &= SysTick_Counter_Disable;
 800444a:	4a05      	ldr	r2, [pc, #20]	(8004460 <SysTick_CounterCmd+0x28>)
 800444c:	6813      	ldr	r3, [r2, #0]
 800444e:	f023 0301 	bic.w	r3, r3, #1	; 0x1
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	e002      	b.n	800445c <SysTick_CounterCmd+0x24>
  }
  else /* SysTick_Counter == SysTick_Counter_Clear */
  {
    SysTick->VAL = SysTick_Counter_Clear;
 8004456:	4b02      	ldr	r3, [pc, #8]	(8004460 <SysTick_CounterCmd+0x28>)
 8004458:	2200      	movs	r2, #0
 800445a:	609a      	str	r2, [r3, #8]
  }    
}
 800445c:	4770      	bx	lr
 800445e:	46c0      	nop			(mov r8, r8)
 8004460:	e000e010 	.word	0xe000e010

08004464 <SysTick_ITConfig>:
void SysTick_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004464:	b120      	cbz	r0, 8004470 <SysTick_ITConfig+0xc>
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 8004466:	4a05      	ldr	r2, [pc, #20]	(800447c <SysTick_ITConfig+0x18>)
 8004468:	6813      	ldr	r3, [r2, #0]
 800446a:	f043 0302 	orr.w	r3, r3, #2	; 0x2
 800446e:	e003      	b.n	8004478 <SysTick_ITConfig+0x14>
  }
  else
  {
    SysTick->CTRL &= CTRL_TICKINT_Reset;
 8004470:	4a02      	ldr	r2, [pc, #8]	(800447c <SysTick_ITConfig+0x18>)
 8004472:	6813      	ldr	r3, [r2, #0]
 8004474:	f023 0302 	bic.w	r3, r3, #2	; 0x2
 8004478:	6013      	str	r3, [r2, #0]
  }
}
 800447a:	4770      	bx	lr
 800447c:	e000e010 	.word	0xe000e010

08004480 <SysTick_GetCounter>:
* Output         : None
* Return         : SysTick current value
*******************************************************************************/
u32 SysTick_GetCounter(void)
{
  return(SysTick->VAL);
 8004480:	4b01      	ldr	r3, [pc, #4]	(8004488 <SysTick_GetCounter+0x8>)
 8004482:	6898      	ldr	r0, [r3, #8]
}
 8004484:	4770      	bx	lr
 8004486:	46c0      	nop			(mov r8, r8)
 8004488:	e000e010 	.word	0xe000e010

0800448c <SysTick_GetFlagStatus>:
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;

  if (tmp == 2) /* The flag to check is in CTRL register */
 800448c:	08c3      	lsrs	r3, r0, #3
 800448e:	2b02      	cmp	r3, #2
*                       - SysTick_FLAG_NOREF
* Output         : None
* Return         : None
*******************************************************************************/
FlagStatus SysTick_GetFlagStatus(u8 SysTick_FLAG)
{
 8004490:	4602      	mov	r2, r0
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;

  if (tmp == 2) /* The flag to check is in CTRL register */
 8004492:	d106      	bne.n	80044a2 <SysTick_GetFlagStatus+0x16>
  {
    statusreg = SysTick->CTRL;
 8004494:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004498:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800449c:	330e      	adds	r3, #14
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	e001      	b.n	80044a6 <SysTick_GetFlagStatus+0x1a>
  }
  else          /* The flag to check is in CALIB register */
  {
    statusreg = SysTick->CALIB;
 80044a2:	4b03      	ldr	r3, [pc, #12]	(80044b0 <SysTick_GetFlagStatus+0x24>)
 80044a4:	68d8      	ldr	r0, [r3, #12]
 80044a6:	40d0      	lsrs	r0, r2
 80044a8:	f000 0001 	and.w	r0, r0, #1	; 0x1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80044ac:	4770      	bx	lr
 80044ae:	46c0      	nop			(mov r8, r8)
 80044b0:	e000e010 	.word	0xe000e010

080044b4 <__WFI>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFI: 
 
    WFI
 80044b4:	bf30      	wfi
    BX r14
 80044b6:	4770      	bx	lr

080044b8 <__WFE>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFE:

    WFE
 80044b8:	bf20      	wfe
    BX r14
 80044ba:	4770      	bx	lr

080044bc <__SEV>:
; Return         : None
;******************************************************************************/
.thumb_func
__SEV:

    SEV
 80044bc:	bf40      	sev
    BX r14
 80044be:	4770      	bx	lr

080044c0 <__ISB>:
; Return         : None
;******************************************************************************/
.thumb_func
__ISB:

    ISB
 80044c0:	f3bf 8f6f 	isb	sy
    BX r14
 80044c4:	4770      	bx	lr

080044c6 <__DSB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DSB:

    DSB
 80044c6:	f3bf 8f4f 	dsb	sy
    BX r14
 80044ca:	4770      	bx	lr

080044cc <__DMB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DMB:

    DMB
 80044cc:	f3bf 8f5f 	dmb	sy
    BX r14
 80044d0:	4770      	bx	lr

080044d2 <__SVC>:
; Return         : None
;******************************************************************************/
.thumb_func
__SVC:

    SVC 0x01
 80044d2:	df01      	svc	1
    BX r14
 80044d4:	4770      	bx	lr

080044d6 <__MRS_CONTROL>:
; Return         : - r4 : Cortex-M3 CONTROL register value.
;******************************************************************************/
.thumb_func
__MRS_CONTROL:

  MRS  r0,control
 80044d6:	f3ef 8014 	mrs	r0, CONTROL
  BX r14
 80044da:	4770      	bx	lr

080044dc <__MSR_CONTROL>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_CONTROL:

  MSR control, r0
 80044dc:	f380 8814 	msr	CONTROL, r0
  ISB
 80044e0:	f3bf 8f6f 	isb	sy
  BX r14
 80044e4:	4770      	bx	lr

080044e6 <__MRS_PSP>:
; Return         : - r0 : Process Stack value.
;******************************************************************************/
.thumb_func
__MRS_PSP:

  MRS r0, psp
 80044e6:	f3ef 8009 	mrs	r0, PSP
  BX r14
 80044ea:	4770      	bx	lr

080044ec <__MSR_PSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_PSP:
 
    MSR psp,  r0      /* set Process Stack value*/
 80044ec:	f380 8809 	msr	PSP, r0
    BX r14
 80044f0:	4770      	bx	lr

080044f2 <__MRS_MSP>:
; Return         : - r0 : Main Stack value.
;******************************************************************************/
.thumb_func
__MRS_MSP:

  MRS r0, msp
 80044f2:	f3ef 8008 	mrs	r0, MSP
  BX r14
 80044f6:	4770      	bx	lr

080044f8 <__MSR_MSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_MSP: 
 
    MSR msp, r0  /*; set Main Stack value*/
 80044f8:	f380 8808 	msr	MSP, r0
    BX r14
 80044fc:	4770      	bx	lr

080044fe <__SETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETPRIMASK:

  CPSID i
 80044fe:	b672      	cpsid	i
  BX r14
 8004500:	4770      	bx	lr

08004502 <__RESETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETPRIMASK:

  CPSIE i
 8004502:	b662      	cpsie	i
  BX r14
 8004504:	4770      	bx	lr

08004506 <__SETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETFAULTMASK:

  CPSID f
 8004506:	b671      	cpsid	f
  BX r14
 8004508:	4770      	bx	lr

0800450a <__RESETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETFAULTMASK:

  CPSIE f
 800450a:	b661      	cpsie	f
  BX r14
 800450c:	4770      	bx	lr

0800450e <__BASEPRICONFIG>:
; Return         : None
;******************************************************************************/
.thumb_func
__BASEPRICONFIG:

  MSR basepri, r0
 800450e:	f380 8811 	msr	BASEPRI, r0
  BX r14
 8004512:	4770      	bx	lr

08004514 <__GetBASEPRI>:
; Return         : - r0 : Base Priority value 
;******************************************************************************/
.thumb_func
__GetBASEPRI:

  MRS r0, basepri_max
 8004514:	f3ef 8012 	mrs	r0, BASEPRI_MASK
  BX r14
 8004518:	4770      	bx	lr

0800451a <__REV_HalfWord>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_HalfWord: 
 
  REV16 r0, r0
 800451a:	ba40      	rev16	r0, r0
  BX r14
 800451c:	4770      	bx	lr

0800451e <__REV_Word>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_Word: 
 
  REV r0, r0
 800451e:	ba00      	rev	r0, r0
  BX r14
 8004520:	4770      	bx	lr
	...

08004524 <Reset_Handler>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void Reset_Handler(void)
{
 8004524:	f02d 0107 	bic.w	r1, sp, #7	; 0x7
 8004528:	4668      	mov	r0, sp
 800452a:	468d      	mov	sp, r1
 800452c:	b501      	push	{r0, lr}
 800452e:	2200      	movs	r2, #0

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8004530:	490c      	ldr	r1, [pc, #48]	(8004564 <Reset_Handler+0x40>)
 8004532:	f8df c034 	ldr.w	ip, [pc, #52]	; 8004568 <Reset_Handler+0x44>
    {
        *(pulDest++) = *(pulSrc++);
 8004536:	480d      	ldr	r0, [pc, #52]	(800456c <Reset_Handler+0x48>)
 8004538:	e002      	b.n	8004540 <Reset_Handler+0x1c>
 800453a:	5883      	ldr	r3, [r0, r2]
 800453c:	508b      	str	r3, [r1, r2]
 800453e:	3204      	adds	r2, #4

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8004540:	eb01 0302 	add.w	r3, r1, r2
 8004544:	4563      	cmp	r3, ip
 8004546:	d3f8      	bcc.n	800453a <Reset_Handler+0x16>
 8004548:	4b09      	ldr	r3, [pc, #36]	(8004570 <Reset_Handler+0x4c>)
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 800454a:	490a      	ldr	r1, [pc, #40]	(8004574 <Reset_Handler+0x50>)
    {
        *(pulDest++) = 0;
 800454c:	2200      	movs	r2, #0
 800454e:	e001      	b.n	8004554 <Reset_Handler+0x30>
 8004550:	f843 2b04 	str.w	r2, [r3], #4
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 8004554:	428b      	cmp	r3, r1
 8004556:	d3fb      	bcc.n	8004550 <Reset_Handler+0x2c>
    }

    //
    // Call the application's entry point.
    //
    main();
 8004558:	f7fe fe82 	bl	8003260 <main>
}
 800455c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 8004560:	4685      	mov	sp, r0
 8004562:	4770      	bx	lr
 8004564:	20000000 	.word	0x20000000
 8004568:	20000000 	.word	0x20000000
 800456c:	0800458c 	.word	0x0800458c
 8004570:	20000000 	.word	0x20000000
 8004574:	20000004 	.word	0x20000004

08004578 <APBAHBPrescTable>:
 8004578:	00000000 	.word	0x00000000
 800457c:	04030201 	.word	0x04030201
 8004580:	04030201 	.word	0x04030201
 8004584:	09080706 	.word	0x09080706

08004588 <ADCPrescTable>:
 8004588:	08060402 	.word	0x08060402

Disassembly of section .bss:

20000000 <_edata>:
20000000:	00000000 	.word	0x00000000

Disassembly of section ._usrstack:

20000004 <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	5728203a 	undefined
   8:	52416e69 	subpl	r6, r1, #1680	; 0x690
   c:	614d204d 	cmpvs	sp, sp, asr #32
  10:	20686372 	rsbcs	r6, r8, r2, ror r3
  14:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  18:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  1c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  20:	43434700 	movtmi	r4, #14080	; 0x3700
  24:	5728203a 	undefined
  28:	52416e69 	subpl	r6, r1, #1680	; 0x690
  2c:	614d204d 	cmpvs	sp, sp, asr #32
  30:	20686372 	rsbcs	r6, r8, r2, ror r3
  34:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  38:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  3c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  40:	43434700 	movtmi	r4, #14080	; 0x3700
  44:	5728203a 	undefined
  48:	52416e69 	subpl	r6, r1, #1680	; 0x690
  4c:	614d204d 	cmpvs	sp, sp, asr #32
  50:	20686372 	rsbcs	r6, r8, r2, ror r3
  54:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  58:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  5c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  60:	43434700 	movtmi	r4, #14080	; 0x3700
  64:	5728203a 	undefined
  68:	52416e69 	subpl	r6, r1, #1680	; 0x690
  6c:	614d204d 	cmpvs	sp, sp, asr #32
  70:	20686372 	rsbcs	r6, r8, r2, ror r3
  74:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  78:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  7c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  80:	43434700 	movtmi	r4, #14080	; 0x3700
  84:	5728203a 	undefined
  88:	52416e69 	subpl	r6, r1, #1680	; 0x690
  8c:	614d204d 	cmpvs	sp, sp, asr #32
  90:	20686372 	rsbcs	r6, r8, r2, ror r3
  94:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  98:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  9c:	00302e33 	eorseq	r2, r0, r3, lsr lr
  a0:	43434700 	movtmi	r4, #14080	; 0x3700
  a4:	5728203a 	undefined
  a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  ac:	614d204d 	cmpvs	sp, sp, asr #32
  b0:	20686372 	rsbcs	r6, r8, r2, ror r3
  b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  bc:	00302e33 	eorseq	r2, r0, r3, lsr lr
  c0:	43434700 	movtmi	r4, #14080	; 0x3700
  c4:	5728203a 	undefined
  c8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  cc:	614d204d 	cmpvs	sp, sp, asr #32
  d0:	20686372 	rsbcs	r6, r8, r2, ror r3
  d4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  d8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  dc:	00302e33 	eorseq	r2, r0, r3, lsr lr
  e0:	43434700 	movtmi	r4, #14080	; 0x3700
  e4:	5728203a 	undefined
  e8:	52416e69 	subpl	r6, r1, #1680	; 0x690
  ec:	614d204d 	cmpvs	sp, sp, asr #32
  f0:	20686372 	rsbcs	r6, r8, r2, ror r3
  f4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
  f8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  fc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 100:	43434700 	movtmi	r4, #14080	; 0x3700
 104:	5728203a 	undefined
 108:	52416e69 	subpl	r6, r1, #1680	; 0x690
 10c:	614d204d 	cmpvs	sp, sp, asr #32
 110:	20686372 	rsbcs	r6, r8, r2, ror r3
 114:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 118:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 11c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 120:	43434700 	movtmi	r4, #14080	; 0x3700
 124:	5728203a 	undefined
 128:	52416e69 	subpl	r6, r1, #1680	; 0x690
 12c:	614d204d 	cmpvs	sp, sp, asr #32
 130:	20686372 	rsbcs	r6, r8, r2, ror r3
 134:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 138:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 13c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 140:	43434700 	movtmi	r4, #14080	; 0x3700
 144:	5728203a 	undefined
 148:	52416e69 	subpl	r6, r1, #1680	; 0x690
 14c:	614d204d 	cmpvs	sp, sp, asr #32
 150:	20686372 	rsbcs	r6, r8, r2, ror r3
 154:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 158:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 15c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 160:	43434700 	movtmi	r4, #14080	; 0x3700
 164:	5728203a 	undefined
 168:	52416e69 	subpl	r6, r1, #1680	; 0x690
 16c:	614d204d 	cmpvs	sp, sp, asr #32
 170:	20686372 	rsbcs	r6, r8, r2, ror r3
 174:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 178:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 17c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 180:	43434700 	movtmi	r4, #14080	; 0x3700
 184:	5728203a 	undefined
 188:	52416e69 	subpl	r6, r1, #1680	; 0x690
 18c:	614d204d 	cmpvs	sp, sp, asr #32
 190:	20686372 	rsbcs	r6, r8, r2, ror r3
 194:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 198:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 19c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1a0:	43434700 	movtmi	r4, #14080	; 0x3700
 1a4:	5728203a 	undefined
 1a8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 1ac:	614d204d 	cmpvs	sp, sp, asr #32
 1b0:	20686372 	rsbcs	r6, r8, r2, ror r3
 1b4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 1b8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 1bc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1c0:	43434700 	movtmi	r4, #14080	; 0x3700
 1c4:	5728203a 	undefined
 1c8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 1cc:	614d204d 	cmpvs	sp, sp, asr #32
 1d0:	20686372 	rsbcs	r6, r8, r2, ror r3
 1d4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 1d8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 1dc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 1e0:	43434700 	movtmi	r4, #14080	; 0x3700
 1e4:	5728203a 	undefined
 1e8:	52416e69 	subpl	r6, r1, #1680	; 0x690
 1ec:	614d204d 	cmpvs	sp, sp, asr #32
 1f0:	20686372 	rsbcs	r6, r8, r2, ror r3
 1f4:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 1f8:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 1fc:	00302e33 	eorseq	r2, r0, r3, lsr lr
 200:	43434700 	movtmi	r4, #14080	; 0x3700
 204:	5728203a 	undefined
 208:	52416e69 	subpl	r6, r1, #1680	; 0x690
 20c:	614d204d 	cmpvs	sp, sp, asr #32
 210:	20686372 	rsbcs	r6, r8, r2, ror r3
 214:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 218:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 21c:	00302e33 	eorseq	r2, r0, r3, lsr lr
 220:	43434700 	movtmi	r4, #14080	; 0x3700
 224:	5728203a 	undefined
 228:	52416e69 	subpl	r6, r1, #1680	; 0x690
 22c:	614d204d 	cmpvs	sp, sp, asr #32
 230:	20686372 	rsbcs	r6, r8, r2, ror r3
 234:	38303032 	ldmdacc	r0!, {r1, r4, r5, ip, sp}
 238:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
 23c:	00302e33 	eorseq	r2, r0, r3, lsr lr

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
	...
  14:	0000000c 	andeq	r0, r0, ip
  18:	00000000 	andeq	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	004d0002 	subeq	r0, sp, r2
  30:	00040000 	andeq	r0, r4, r0
	...
  3c:	00000104 	andeq	r0, r0, r4, lsl #2
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	00d10002 	sbcseq	r0, r1, r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
  5c:	00000208 	andeq	r0, r0, r8, lsl #4
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	03a40002 	undefined instruction 0x03a40002
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	0800333c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, sp}
  7c:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	091d0002 	ldmdbeq	sp, {r1}
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	08003458 	stmdaeq	r0, {r3, r4, r6, sl, ip, sp}
  9c:	00000528 	andeq	r0, r0, r8, lsr #10
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	10570002 	subsne	r0, r7, r2
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	08003980 	stmdaeq	r0, {r7, r8, fp, ip, sp}
  bc:	00000288 	andeq	r0, r0, r8, lsl #5
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	169f0002 	ldrne	r0, [pc], r2
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	08003c08 	stmdaeq	r0, {r3, sl, fp, ip, sp}
  dc:	00000384 	andeq	r0, r0, r4, lsl #7
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	1f860002 	svcne	0x00860002
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	08003f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip, sp}
  fc:	000000e0 	andeq	r0, r0, r0, ror #1
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	21cd0002 	biccs	r0, sp, r2
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	0800406c 	stmdaeq	r0, {r2, r3, r5, r6, lr}
 11c:	000003a4 	andeq	r0, r0, r4, lsr #7
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	2a8a0002 	bcs	fe28013c <SCS_BASE+0x1e27213c>
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	08004410 	stmdaeq	r0, {r4, sl, lr}
 13c:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	2c790002 	ldclcs	0, cr0, [r9], #-8
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	080044b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, lr}
 15c:	0000006e 	andeq	r0, r0, lr, rrx
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	2ce40002 	stclcs	0, cr0, [r4], #8
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	08004524 	stmdaeq	r0, {r2, r5, r8, sl, lr}
 17c:	00000054 	andeq	r0, r0, r4, asr r0
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	2dea0002 	stclcs	0, cr0, [sl, #8]!
 190:	00040000 	andeq	r0, r4, r0
	...
 19c:	00000028 	andeq	r0, r0, r8, lsr #32
	...
 1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ac:	2eaf0002 	cdpcs	0, 10, cr0, cr15, cr2, {0}
 1b0:	00040000 	andeq	r0, r4, r0
	...
 1bc:	00000030 	andeq	r0, r0, r0, lsr r0
	...
 1c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1cc:	41230002 	teqmi	r3, r2
 1d0:	00040000 	andeq	r0, r4, r0
	...
 1dc:	000000c8 	andeq	r0, r0, r8, asr #1
	...
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ec:	42690002 	rsbmi	r0, r9, #2	; 0x2
 1f0:	00040000 	andeq	r0, r4, r0
	...
 1fc:	000000d0 	ldrdeq	r0, [r0], -r0
	...
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	437c0002 	cmnmi	ip, #2	; 0x2
 210:	00040000 	andeq	r0, r4, r0
	...
 21c:	0000009c 	muleq	r0, ip, r0
	...
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	4d210002 	stcmi	0, cr0, [r1, #-8]!
 230:	00040000 	andeq	r0, r4, r0
	...
 23c:	0000010c 	andeq	r0, r0, ip, lsl #2
	...
 248:	00000024 	andeq	r0, r0, r4, lsr #32
 24c:	56d30002 	ldrbpl	r0, [r3], r2
 250:	00040000 	andeq	r0, r4, r0
	...
 25c:	0000000c 	andeq	r0, r0, ip
 260:	00000000 	andeq	r0, r0, r0
 264:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_pubnames:

00000000 <.debug_pubnames>:
       0:	000000a2 	andeq	r0, r0, r2, lsr #1
       4:	00d10002 	sbcseq	r0, r1, r2
       8:	02d30000 	sbcseq	r0, r3, #0	; 0x0
       c:	01dd0000 	bicseq	r0, sp, r0
      10:	5f5f0000 	svcpl	0x005f0000
      14:	5f525349 	svcpl	0x00525349
      18:	414c4544 	cmpmi	ip, r4, asr #10
      1c:	01f00059 	mvnseq	r0, r9, asr r0
      20:	446d0000 	strbtmi	r0, [sp]
      24:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
      28:	00021900 	andeq	r1, r2, r0, lsl #18
      2c:	73795300 	cmnvc	r9, #0	; 0x0
      30:	6b636954 	blvs	18da588 <__Stack_Size+0x18da188>
      34:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
      38:	75676966 	strbvc	r6, [r7, #-2406]!
      3c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
      40:	2e006e6f 	cdpcs	14, 0, cr6, cr0, cr15, {3}
      44:	47000002 	strmi	r0, [r0, -r2]
      48:	5f4f4950 	svcpl	0x004f4950
      4c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
      50:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
      54:	6f697461 	svcvs	0x00697461
      58:	0256006e 	subseq	r0, r6, #110	; 0x6e
      5c:	564e0000 	strbpl	r0, [lr], -r0
      60:	435f4349 	cmpmi	pc, #603979777	; 0x24000001
      64:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      68:	61727567 	cmnvs	r2, r7, ror #10
      6c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
      70:	00026700 	andeq	r6, r2, r0, lsl #14
      74:	43435200 	movtmi	r5, #12800	; 0x3200
      78:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
      7c:	75676966 	strbvc	r6, [r7, #-2406]!
      80:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
      84:	8c006e6f 	stchi	14, cr6, [r0], {111}
      88:	6d000002 	stcvs	0, cr0, [r0, #-8]
      8c:	006e6961 	rsbeq	r6, lr, r1, ror #18
      90:	000002c0 	andeq	r0, r0, r0, asr #5
      94:	69547767 	ldmdbvs	r4, {r0, r1, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
      98:	676e696d 	strbvs	r6, [lr, -sp, ror #18]!
      9c:	616c6544 	cmnvs	ip, r4, asr #10
      a0:	00000079 	andeq	r0, r0, r9, ror r0
      a4:	06380000 	ldrteq	r0, [r8], -r0
      a8:	00020000 	andeq	r0, r2, r0
      ac:	000003a4 	andeq	r0, r0, r4, lsr #7
      b0:	00000579 	andeq	r0, r0, r9, ror r5
      b4:	00000025 	andeq	r0, r0, r5, lsr #32
      b8:	45494d4e 	strbmi	r4, [r9, #-3406]
      bc:	70656378 	rsbvc	r6, r5, r8, ror r3
      c0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
      c4:	00003800 	andeq	r3, r0, r0, lsl #16
      c8:	72614800 	rsbvc	r4, r1, #0	; 0x0
      cc:	75614664 	strbvc	r4, [r1, #-1636]!
      d0:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
      d4:	74706563 	ldrbtvc	r6, [r0], #-1379
      d8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
      dc:	0000004b 	andeq	r0, r0, fp, asr #32
      e0:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!
      e4:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
      e8:	63784565 	cmnvs	r8, #423624704	; 0x19400000
      ec:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
      f0:	5e006e6f 	cdppl	14, 0, cr6, cr0, cr15, {3}
      f4:	42000000 	andmi	r0, r0, #0	; 0x0
      f8:	61467375 	cmpvs	r6, r5, ror r3
      fc:	45746c75 	ldrbmi	r6, [r4, #-3189]!
     100:	70656378 	rsbvc	r6, r5, r8, ror r3
     104:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     108:	00007100 	andeq	r7, r0, r0, lsl #2
     10c:	61735500 	cmnvs	r3, r0, lsl #10
     110:	61466567 	cmpvs	r6, r7, ror #10
     114:	45746c75 	ldrbmi	r6, [r4, #-3189]!
     118:	70656378 	rsbvc	r6, r5, r8, ror r3
     11c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     120:	00008400 	andeq	r8, r0, r0, lsl #8
     124:	62654400 	rsbvs	r4, r5, #0	; 0x0
     128:	6f4d6775 	svcvs	0x004d6775
     12c:	6f74696e 	svcvs	0x0074696e
     130:	00970072 	addseq	r0, r7, r2, ror r0
     134:	56530000 	ldrbpl	r0, [r3], -r0
     138:	6e614843 	cdpvs	8, 6, cr4, cr1, cr3, {2}
     13c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     140:	0000aa00 	andeq	sl, r0, r0, lsl #20
     144:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
     148:	43565364 	cmpmi	r6, #-1879048191	; 0x90000001
     14c:	0000bd00 	andeq	fp, r0, r0, lsl #26
     150:	44575700 	ldrbmi	r5, [r7], #-1792
     154:	52495f47 	subpl	r5, r9, #284	; 0x11c
     158:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     15c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     160:	0000d000 	andeq	sp, r0, r0
     164:	44565000 	ldrbmi	r5, [r6]
     168:	5152495f 	cmppl	r2, pc, asr r9
     16c:	646e6148 	strbtvs	r6, [lr], #-328
     170:	0072656c 	rsbseq	r6, r2, ip, ror #10
     174:	000000e3 	andeq	r0, r0, r3, ror #1
     178:	504d4154 	subpl	r4, sp, r4, asr r1
     17c:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^
     180:	61485152 	cmpvs	r8, r2, asr r1
     184:	656c646e 	strbvs	r6, [ip, #-1134]!
     188:	00f60072 	rscseq	r0, r6, r2, ror r0
     18c:	54520000 	ldrbpl	r0, [r2]
     190:	52495f43 	subpl	r5, r9, #268	; 0x10c
     194:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     198:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     19c:	00010900 	andeq	r0, r1, r0, lsl #18
     1a0:	414c4600 	cmpmi	ip, r0, lsl #12
     1a4:	495f4853 	ldmdbmi	pc, {r0, r1, r4, r6, fp, lr}^
     1a8:	61485152 	cmpvs	r8, r2, asr r1
     1ac:	656c646e 	strbvs	r6, [ip, #-1134]!
     1b0:	011c0072 	tsteq	ip, r2, ror r0
     1b4:	43520000 	cmpmi	r2, #0	; 0x0
     1b8:	52495f43 	subpl	r5, r9, #268	; 0x10c
     1bc:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     1c0:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     1c4:	00012f00 	andeq	r2, r1, r0, lsl #30
     1c8:	54584500 	ldrbpl	r4, [r8], #-1280
     1cc:	495f3049 	ldmdbmi	pc, {r0, r3, r6, ip, sp}^
     1d0:	61485152 	cmpvs	r8, r2, asr r1
     1d4:	656c646e 	strbvs	r6, [ip, #-1134]!
     1d8:	01420072 	cmpeq	r2, r2, ror r0
     1dc:	58450000 	stmdapl	r5, {}^
     1e0:	5f314954 	svcpl	0x00314954
     1e4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     1e8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     1ec:	55007265 	strpl	r7, [r0, #-613]
     1f0:	45000001 	strmi	r0, [r0, #-1]
     1f4:	32495458 	subcc	r5, r9, #1476395008	; 0x58000000
     1f8:	5152495f 	cmppl	r2, pc, asr r9
     1fc:	646e6148 	strbtvs	r6, [lr], #-328
     200:	0072656c 	rsbseq	r6, r2, ip, ror #10
     204:	00000168 	andeq	r0, r0, r8, ror #2
     208:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     20c:	52495f33 	subpl	r5, r9, #204	; 0xcc
     210:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     214:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     218:	00017b00 	andeq	r7, r1, r0, lsl #22
     21c:	54584500 	ldrbpl	r4, [r8], #-1280
     220:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^
     224:	61485152 	cmpvs	r8, r2, asr r1
     228:	656c646e 	strbvs	r6, [ip, #-1134]!
     22c:	018f0072 	orreq	r0, pc, r2, ror r0
     230:	4d440000 	stclmi	0, cr0, [r4]
     234:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     238:	6e6e6168 	powvsez	f6, f6, #0.0
     23c:	5f316c65 	svcpl	0x00316c65
     240:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     244:	6c646e61 	stclvs	14, cr6, [r4], #-388
     248:	a3007265 	movwge	r7, #613	; 0x265
     24c:	44000001 	strmi	r0, [r0], #-1
     250:	5f31414d 	svcpl	0x0031414d
     254:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     258:	326c656e 	rsbcc	r6, ip, #461373440	; 0x1b800000
     25c:	5152495f 	cmppl	r2, pc, asr r9
     260:	646e6148 	strbtvs	r6, [lr], #-328
     264:	0072656c 	rsbseq	r6, r2, ip, ror #10
     268:	000001b7 	strheq	r0, [r0], -r7
     26c:	31414d44 	cmpcc	r1, r4, asr #26
     270:	6168435f 	cmnvs	r8, pc, asr r3
     274:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     278:	52495f33 	subpl	r5, r9, #204	; 0xcc
     27c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     280:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     284:	0001cb00 	andeq	ip, r1, r0, lsl #22
     288:	414d4400 	cmpmi	sp, r0, lsl #8
     28c:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     290:	656e6e61 	strbvs	r6, [lr, #-3681]!
     294:	495f346c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp}^
     298:	61485152 	cmpvs	r8, r2, asr r1
     29c:	656c646e 	strbvs	r6, [ip, #-1134]!
     2a0:	01df0072 	bicseq	r0, pc, r2, ror r0
     2a4:	4d440000 	stclmi	0, cr0, [r4]
     2a8:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     2ac:	6e6e6168 	powvsez	f6, f6, #0.0
     2b0:	5f356c65 	svcpl	0x00356c65
     2b4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     2b8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     2bc:	f3007265 	vhsub.u8	<illegal reg q3.5>, q0, <illegal reg q10.5>
     2c0:	44000001 	strmi	r0, [r0], #-1
     2c4:	5f31414d 	svcpl	0x0031414d
     2c8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     2cc:	366c656e 	strbtcc	r6, [ip], -lr, ror #10
     2d0:	5152495f 	cmppl	r2, pc, asr r9
     2d4:	646e6148 	strbtvs	r6, [lr], #-328
     2d8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     2dc:	00000207 	andeq	r0, r0, r7, lsl #4
     2e0:	31414d44 	cmpcc	r1, r4, asr #26
     2e4:	6168435f 	cmnvs	r8, pc, asr r3
     2e8:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     2ec:	52495f37 	subpl	r5, r9, #220	; 0xdc
     2f0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     2f4:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     2f8:	00021b00 	andeq	r1, r2, r0, lsl #22
     2fc:	43444100 	movtmi	r4, #16640	; 0x4100
     300:	5f325f31 	svcpl	0x00325f31
     304:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     308:	6c646e61 	stclvs	14, cr6, [r4], #-388
     30c:	2f007265 	svccs	0x00007265
     310:	55000002 	strpl	r0, [r0, #-2]
     314:	485f4253 	ldmdami	pc, {r0, r1, r4, r6, r9, lr}^
     318:	41435f50 	cmpmi	r3, r0, asr pc
     31c:	58545f4e 	ldmdapl	r4, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     320:	5152495f 	cmppl	r2, pc, asr r9
     324:	646e6148 	strbtvs	r6, [lr], #-328
     328:	0072656c 	rsbseq	r6, r2, ip, ror #10
     32c:	00000243 	andeq	r0, r0, r3, asr #4
     330:	5f425355 	svcpl	0x00425355
     334:	435f504c 	cmpmi	pc, #76	; 0x4c
     338:	525f4e41 	subspl	r4, pc, #1040	; 0x410
     33c:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^
     340:	61485152 	cmpvs	r8, r2, asr r1
     344:	656c646e 	strbvs	r6, [ip, #-1134]!
     348:	02570072 	subseq	r0, r7, #114	; 0x72
     34c:	41430000 	cmpmi	r3, r0
     350:	58525f4e 	ldmdapl	r2, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     354:	52495f31 	subpl	r5, r9, #196	; 0xc4
     358:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     35c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     360:	00026b00 	andeq	r6, r2, r0, lsl #22
     364:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     368:	4543535f 	strbmi	r5, [r3, #-863]
     36c:	5152495f 	cmppl	r2, pc, asr r9
     370:	646e6148 	strbtvs	r6, [lr], #-328
     374:	0072656c 	rsbseq	r6, r2, ip, ror #10
     378:	0000027f 	andeq	r0, r0, pc, ror r2
     37c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     380:	5f355f39 	svcpl	0x00355f39
     384:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     388:	6c646e61 	stclvs	14, cr6, [r4], #-388
     38c:	93007265 	movwls	r7, #613	; 0x265
     390:	54000002 	strpl	r0, [r0], #-2
     394:	5f314d49 	svcpl	0x00314d49
     398:	5f4b5242 	svcpl	0x004b5242
     39c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     3a0:	6c646e61 	stclvs	14, cr6, [r4], #-388
     3a4:	a7007265 	strge	r7, [r0, -r5, ror #4]
     3a8:	54000002 	strpl	r0, [r0], #-2
     3ac:	5f314d49 	svcpl	0x00314d49
     3b0:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^
     3b4:	61485152 	cmpvs	r8, r2, asr r1
     3b8:	656c646e 	strbvs	r6, [ip, #-1134]!
     3bc:	02bb0072 	adcseq	r0, fp, #114	; 0x72
     3c0:	49540000 	ldmdbmi	r4, {}^
     3c4:	545f314d 	ldrbpl	r3, [pc], #333	; 3cc <_Minimum_Stack_Size+0x2cc>
     3c8:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     3cc:	495f4d4f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, sl, fp, lr}^
     3d0:	61485152 	cmpvs	r8, r2, asr r1
     3d4:	656c646e 	strbvs	r6, [ip, #-1134]!
     3d8:	02cf0072 	sbceq	r0, pc, #114	; 0x72
     3dc:	49540000 	ldmdbmi	r4, {}^
     3e0:	435f314d 	cmpmi	pc, #1073741843	; 0x40000013
     3e4:	52495f43 	subpl	r5, r9, #268	; 0x10c
     3e8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     3ec:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     3f0:	0002e300 	andeq	lr, r2, r0, lsl #6
     3f4:	4d495400 	cfstrdmi	mvd5, [r9]
     3f8:	52495f32 	subpl	r5, r9, #200	; 0xc8
     3fc:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     400:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     404:	0002f700 	andeq	pc, r2, r0, lsl #14
     408:	4d495400 	cfstrdmi	mvd5, [r9]
     40c:	52495f33 	subpl	r5, r9, #204	; 0xcc
     410:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     414:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     418:	00030b00 	andeq	r0, r3, r0, lsl #22
     41c:	4d495400 	cfstrdmi	mvd5, [r9]
     420:	52495f34 	subpl	r5, r9, #208	; 0xd0
     424:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     428:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     42c:	00031f00 	andeq	r1, r3, r0, lsl #30
     430:	43324900 	teqmi	r2, #0	; 0x0
     434:	56455f31 	undefined
     438:	5152495f 	cmppl	r2, pc, asr r9
     43c:	646e6148 	strbtvs	r6, [lr], #-328
     440:	0072656c 	rsbseq	r6, r2, ip, ror #10
     444:	00000333 	andeq	r0, r0, r3, lsr r3
     448:	31433249 	cmpcc	r3, r9, asr #4
     44c:	5f52455f 	svcpl	0x0052455f
     450:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     454:	6c646e61 	stclvs	14, cr6, [r4], #-388
     458:	47007265 	strmi	r7, [r0, -r5, ror #4]
     45c:	49000003 	stmdbmi	r0, {r0, r1}
     460:	5f324332 	svcpl	0x00324332
     464:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^
     468:	61485152 	cmpvs	r8, r2, asr r1
     46c:	656c646e 	strbvs	r6, [ip, #-1134]!
     470:	035b0072 	cmpeq	fp, #114	; 0x72
     474:	32490000 	subcc	r0, r9, #0	; 0x0
     478:	455f3243 	ldrbmi	r3, [pc, #-579]	; 23d <_Minimum_Stack_Size+0x13d>
     47c:	52495f52 	subpl	r5, r9, #328	; 0x148
     480:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     484:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     488:	00036f00 	andeq	r6, r3, r0, lsl #30
     48c:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     490:	52495f31 	subpl	r5, r9, #196	; 0xc4
     494:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     498:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     49c:	00038300 	andeq	r8, r3, r0, lsl #6
     4a0:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     4a4:	52495f32 	subpl	r5, r9, #200	; 0xc8
     4a8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     4ac:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     4b0:	00039700 	andeq	r9, r3, r0, lsl #14
     4b4:	41535500 	cmpmi	r3, r0, lsl #10
     4b8:	5f315452 	svcpl	0x00315452
     4bc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     4c0:	6c646e61 	stclvs	14, cr6, [r4], #-388
     4c4:	ab007265 	blge	1ce60 <__Stack_Size+0x1ca60>
     4c8:	55000003 	strpl	r0, [r0, #-3]
     4cc:	54524153 	ldrbpl	r4, [r2], #-339
     4d0:	52495f32 	subpl	r5, r9, #200	; 0xc8
     4d4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     4d8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     4dc:	0003bf00 	andeq	fp, r3, r0, lsl #30
     4e0:	41535500 	cmpmi	r3, r0, lsl #10
     4e4:	5f335452 	svcpl	0x00335452
     4e8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     4ec:	6c646e61 	stclvs	14, cr6, [r4], #-388
     4f0:	d3007265 	movwle	r7, #613	; 0x265
     4f4:	45000003 	strmi	r0, [r0, #-3]
     4f8:	31495458 	cmpcc	r9, r8, asr r4
     4fc:	30315f35 	eorscc	r5, r1, r5, lsr pc
     500:	5152495f 	cmppl	r2, pc, asr r9
     504:	646e6148 	strbtvs	r6, [lr], #-328
     508:	0072656c 	rsbseq	r6, r2, ip, ror #10
     50c:	000003e7 	andeq	r0, r0, r7, ror #7
     510:	41435452 	cmpmi	r3, r2, asr r4
     514:	6d72616c 	ldfvse	f6, [r2, #-432]!
     518:	5152495f 	cmppl	r2, pc, asr r9
     51c:	646e6148 	strbtvs	r6, [lr], #-328
     520:	0072656c 	rsbseq	r6, r2, ip, ror #10
     524:	000003fb 	strdeq	r0, [r0], -fp
     528:	57425355 	smlsldpl	r5, r2, r5, r3
     52c:	55656b61 	strbpl	r6, [r5, #-2913]!
     530:	52495f70 	subpl	r5, r9, #448	; 0x1c0
     534:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     538:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     53c:	00040f00 	andeq	r0, r4, r0, lsl #30
     540:	4d495400 	cfstrdmi	mvd5, [r9]
     544:	52425f38 	subpl	r5, r2, #224	; 0xe0
     548:	52495f4b 	subpl	r5, r9, #300	; 0x12c
     54c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     550:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     554:	00042300 	andeq	r2, r4, r0, lsl #6
     558:	4d495400 	cfstrdmi	mvd5, [r9]
     55c:	50555f38 	subspl	r5, r5, r8, lsr pc
     560:	5152495f 	cmppl	r2, pc, asr r9
     564:	646e6148 	strbtvs	r6, [lr], #-328
     568:	0072656c 	rsbseq	r6, r2, ip, ror #10
     56c:	00000437 	andeq	r0, r0, r7, lsr r4
     570:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     574:	4752545f 	undefined
     578:	4d4f435f 	stclmi	3, cr4, [pc, #-380]
     57c:	5152495f 	cmppl	r2, pc, asr r9
     580:	646e6148 	strbtvs	r6, [lr], #-328
     584:	0072656c 	rsbseq	r6, r2, ip, ror #10
     588:	0000044b 	andeq	r0, r0, fp, asr #8
     58c:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     590:	5f43435f 	svcpl	0x0043435f
     594:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     598:	6c646e61 	stclvs	14, cr6, [r4], #-388
     59c:	5f007265 	svcpl	0x00007265
     5a0:	41000004 	tstmi	r0, r4
     5a4:	5f334344 	svcpl	0x00334344
     5a8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     5ac:	6c646e61 	stclvs	14, cr6, [r4], #-388
     5b0:	73007265 	movwvc	r7, #613	; 0x265
     5b4:	46000004 	strmi	r0, [r0], -r4
     5b8:	5f434d53 	svcpl	0x00434d53
     5bc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     5c0:	6c646e61 	stclvs	14, cr6, [r4], #-388
     5c4:	87007265 	strhi	r7, [r0, -r5, ror #4]
     5c8:	53000004 	movwpl	r0, #4	; 0x4
     5cc:	5f4f4944 	svcpl	0x004f4944
     5d0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     5d4:	6c646e61 	stclvs	14, cr6, [r4], #-388
     5d8:	9b007265 	blls	1cf74 <__Stack_Size+0x1cb74>
     5dc:	54000004 	strpl	r0, [r0], #-4
     5e0:	5f354d49 	svcpl	0x00354d49
     5e4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     5e8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     5ec:	af007265 	svcge	0x00007265
     5f0:	53000004 	movwpl	r0, #4	; 0x4
     5f4:	5f334950 	svcpl	0x00334950
     5f8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     5fc:	6c646e61 	stclvs	14, cr6, [r4], #-388
     600:	c3007265 	movwgt	r7, #613	; 0x265
     604:	55000004 	strpl	r0, [r0, #-4]
     608:	34545241 	ldrbcc	r5, [r4], #-577
     60c:	5152495f 	cmppl	r2, pc, asr r9
     610:	646e6148 	strbtvs	r6, [lr], #-328
     614:	0072656c 	rsbseq	r6, r2, ip, ror #10
     618:	000004d7 	ldrdeq	r0, [r0], -r7
     61c:	54524155 	ldrbpl	r4, [r2], #-341
     620:	52495f35 	subpl	r5, r9, #212	; 0xd4
     624:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     628:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     62c:	0004eb00 	andeq	lr, r4, r0, lsl #22
     630:	4d495400 	cfstrdmi	mvd5, [r9]
     634:	52495f36 	subpl	r5, r9, #216	; 0xd8
     638:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     63c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     640:	0004ff00 	andeq	pc, r4, r0, lsl #30
     644:	4d495400 	cfstrdmi	mvd5, [r9]
     648:	52495f37 	subpl	r5, r9, #220	; 0xdc
     64c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     650:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     654:	00051300 	andeq	r1, r5, r0, lsl #6
     658:	414d4400 	cmpmi	sp, r0, lsl #8
     65c:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     660:	656e6e61 	strbvs	r6, [lr, #-3681]!
     664:	495f316c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, ip, sp}^
     668:	61485152 	cmpvs	r8, r2, asr r1
     66c:	656c646e 	strbvs	r6, [ip, #-1134]!
     670:	05270072 	streq	r0, [r7, #-114]!
     674:	4d440000 	stclmi	0, cr0, [r4]
     678:	435f3241 	cmpmi	pc, #268435460	; 0x10000004
     67c:	6e6e6168 	powvsez	f6, f6, #0.0
     680:	5f326c65 	svcpl	0x00326c65
     684:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     688:	6c646e61 	stclvs	14, cr6, [r4], #-388
     68c:	3b007265 	blcc	1d028 <__Stack_Size+0x1cc28>
     690:	44000005 	strmi	r0, [r0], #-5
     694:	5f32414d 	svcpl	0x0032414d
     698:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     69c:	336c656e 	cmncc	ip, #461373440	; 0x1b800000
     6a0:	5152495f 	cmppl	r2, pc, asr r9
     6a4:	646e6148 	strbtvs	r6, [lr], #-328
     6a8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     6ac:	0000054f 	andeq	r0, r0, pc, asr #10
     6b0:	32414d44 	subcc	r4, r1, #4352	; 0x1100
     6b4:	6168435f 	cmnvs	r8, pc, asr r3
     6b8:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     6bc:	5f355f34 	svcpl	0x00355f34
     6c0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     6c4:	6c646e61 	stclvs	14, cr6, [r4], #-388
     6c8:	63007265 	movwvs	r7, #613	; 0x265
     6cc:	53000005 	movwpl	r0, #5	; 0x5
     6d0:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
     6d4:	61486b63 	cmpvs	r8, r3, ror #22
     6d8:	656c646e 	strbvs	r6, [ip, #-1134]!
     6dc:	00000072 	andeq	r0, r0, r2, ror r0
     6e0:	026a0000 	rsbeq	r0, sl, #0	; 0x0
     6e4:	00020000 	andeq	r0, r2, r0
     6e8:	0000091d 	andeq	r0, r0, sp, lsl r9
     6ec:	0000073a 	andeq	r0, r0, sl, lsr r7
     6f0:	00000237 	andeq	r0, r0, r7, lsr r2
     6f4:	53414c46 	movtpl	r4, #7238	; 0x1c46
     6f8:	65535f48 	ldrbvs	r5, [r3, #-3912]
     6fc:	74614c74 	strbtvc	r4, [r1], #-3188
     700:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     704:	00025e00 	andeq	r5, r2, r0, lsl #28
     708:	414c4600 	cmpmi	ip, r0, lsl #12
     70c:	485f4853 	ldmdami	pc, {r0, r1, r4, r6, fp, lr}^
     710:	43666c61 	cmnmi	r6, #24832	; 0x6100
     714:	656c6379 	strbvs	r6, [ip, #-889]!
     718:	65636341 	strbvs	r6, [r3, #-833]!
     71c:	6d437373 	stclvs	3, cr7, [r3, #-460]
     720:	02850064 	addeq	r0, r5, #100	; 0x64
     724:	4c460000 	marmi	acc0, r0, r6
     728:	5f485341 	svcpl	0x00485341
     72c:	66657250 	undefined
     730:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     734:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     738:	6d437265 	sfmvs	f7, 2, [r3, #-404]
     73c:	02ac0064 	adceq	r0, ip, #100	; 0x64
     740:	4c460000 	marmi	acc0, r0, r6
     744:	5f485341 	svcpl	0x00485341
     748:	6f6c6e55 	svcvs	0x006c6e55
     74c:	bf006b63 	svclt	0x00006b63
     750:	46000002 	strmi	r0, [r0], -r2
     754:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     758:	636f4c5f 	cmnvs	pc, #24320	; 0x5f00
     75c:	02d2006b 	sbcseq	r0, r2, #107	; 0x6b
     760:	4c460000 	marmi	acc0, r0, r6
     764:	5f485341 	svcpl	0x00485341
     768:	55746547 	ldrbpl	r6, [r4, #-1351]!
     76c:	4f726573 	svcmi	0x00726573
     770:	6f697470 	svcvs	0x00697470
     774:	7479426e 	ldrbtvc	r4, [r9], #-622
     778:	02ea0065 	rsceq	r0, sl, #101	; 0x65
     77c:	4c460000 	marmi	acc0, r0, r6
     780:	5f485341 	svcpl	0x00485341
     784:	57746547 	ldrbpl	r6, [r4, -r7, asr #10]!
     788:	65746972 	ldrbvs	r6, [r4, #-2418]!
     78c:	746f7250 	strbtvc	r7, [pc], #592	; 794 <__Stack_Size+0x394>
     790:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     794:	704f6e6f 	subvc	r6, pc, pc, ror #28
     798:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     79c:	65747942 	ldrbvs	r7, [r4, #-2370]!
     7a0:	00030200 	andeq	r0, r3, r0, lsl #4
     7a4:	414c4600 	cmpmi	ip, r0, lsl #12
     7a8:	475f4853 	undefined
     7ac:	65527465 	ldrbvs	r7, [r2, #-1125]
     7b0:	754f6461 	strbvc	r6, [pc, #-1121]	; 357 <_Minimum_Stack_Size+0x257>
     7b4:	6f725074 	svcvs	0x00725074
     7b8:	74636574 	strbtvc	r6, [r3], #-1396
     7bc:	536e6f69 	cmnpl	lr, #420	; 0x1a4
     7c0:	75746174 	ldrbvc	r6, [r4, #-372]!
     7c4:	032b0073 	teqeq	fp, #115	; 0x73
     7c8:	4c460000 	marmi	acc0, r0, r6
     7cc:	5f485341 	svcpl	0x00485341
     7d0:	50746547 	rsbspl	r6, r4, r7, asr #10
     7d4:	65666572 	strbvs	r6, [r6, #-1394]!
     7d8:	42686374 	rsbmi	r6, r8, #-805306367	; 0xd0000001
     7dc:	65666675 	strbvs	r6, [r6, #-1653]!
     7e0:	61745372 	cmnvs	r4, r2, ror r3
     7e4:	00737574 	rsbseq	r7, r3, r4, ror r5
     7e8:	00000354 	andeq	r0, r0, r4, asr r3
     7ec:	53414c46 	movtpl	r4, #7238	; 0x1c46
     7f0:	54495f48 	strbpl	r5, [r9], #-3912
     7f4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     7f8:	89006769 	stmdbhi	r0, {r0, r3, r5, r6, r8, r9, sl, sp, lr}
     7fc:	46000003 	strmi	r0, [r0], -r3
     800:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     804:	7465475f 	strbtvc	r4, [r5], #-1887
     808:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     80c:	74617453 	strbtvc	r7, [r1], #-1107
     810:	c6007375 	undefined
     814:	46000003 	strmi	r0, [r0], -r3
     818:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     81c:	656c435f 	strbvs	r4, [ip, #-863]!
     820:	6c467261 	sfmvs	f7, 2, [r6], {97}
     824:	ed006761 	stc	7, cr6, [r0, #-388]
     828:	46000003 	strmi	r0, [r0], -r3
     82c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     830:	7465475f 	strbtvc	r4, [r5], #-1887
     834:	74617453 	strbtvc	r7, [r1], #-1107
     838:	0a007375 	beq	1d614 <__Stack_Size+0x1d214>
     83c:	46000004 	strmi	r0, [r0], -r4
     840:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     844:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     848:	726f4674 	rsbvc	r4, pc, #121634816	; 0x7400000
     84c:	7473614c 	ldrbtvc	r6, [r3], #-332
     850:	7265704f 	rsbvc	r7, r5, #79	; 0x4f
     854:	6f697461 	svcvs	0x00697461
     858:	049d006e 	ldreq	r0, [sp], #110
     85c:	4c460000 	marmi	acc0, r0, r6
     860:	5f485341 	svcpl	0x00485341
     864:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     868:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
     86c:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     870:	6f436574 	svcvs	0x00436574
     874:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     878:	0004fc00 	andeq	pc, r4, r0, lsl #24
     87c:	414c4600 	cmpmi	ip, r0, lsl #12
     880:	525f4853 	subspl	r4, pc, #5439488	; 0x530000
     884:	4f646165 	svcmi	0x00646165
     888:	72507475 	subsvc	r7, r0, #1962934272	; 0x75000000
     88c:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
     890:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     894:	00053b00 	andeq	r3, r5, r0, lsl #22
     898:	414c4600 	cmpmi	ip, r0, lsl #12
     89c:	455f4853 	ldrbmi	r4, [pc, #-2131]	; 51 <_Minimum_Stack_Size-0xaf>
     8a0:	6c62616e 	stfvse	f6, [r2], #-440
     8a4:	69725765 	ldmdbvs	r2!, {r0, r2, r5, r6, r8, r9, sl, ip, lr}^
     8a8:	72506574 	subsvc	r6, r0, #486539264	; 0x1d000000
     8ac:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
     8b0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     8b4:	0005ba00 	andeq	fp, r5, r0, lsl #20
     8b8:	414c4600 	cmpmi	ip, r0, lsl #12
     8bc:	505f4853 	subspl	r4, pc, r3, asr r8
     8c0:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
     8c4:	704f6d61 	subvc	r6, pc, r1, ror #26
     8c8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     8cc:	65747942 	ldrbvs	r7, [r4, #-2370]!
     8d0:	61746144 	cmnvs	r4, r4, asr #2
     8d4:	00060900 	andeq	r0, r6, r0, lsl #18
     8d8:	414c4600 	cmpmi	ip, r0, lsl #12
     8dc:	505f4853 	subspl	r4, pc, r3, asr r8
     8e0:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
     8e4:	61486d61 	cmpvs	r8, r1, ror #26
     8e8:	6f57666c 	svcvs	0x0057666c
     8ec:	58006472 	stmdapl	r0, {r1, r4, r5, r6, sl, sp, lr}
     8f0:	46000006 	strmi	r0, [r0], -r6
     8f4:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     8f8:	6f72505f 	svcvs	0x0072505f
     8fc:	6d617267 	sfmvs	f7, 2, [r1, #-412]!
     900:	64726f57 	ldrbtvs	r6, [r2], #-3927
     904:	0006a700 	andeq	sl, r6, r0, lsl #14
     908:	414c4600 	cmpmi	ip, r0, lsl #12
     90c:	455f4853 	ldrbmi	r4, [pc, #-2131]	; c1 <_Minimum_Stack_Size-0x3f>
     910:	65736172 	ldrbvs	r6, [r3, #-370]!
     914:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
     918:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     91c:	00736574 	rsbseq	r6, r3, r4, ror r5
     920:	000006d4 	ldrdeq	r0, [r0], -r4
     924:	53414c46 	movtpl	r4, #7238	; 0x1c46
     928:	72455f48 	subvc	r5, r5, #288	; 0x120
     92c:	41657361 	cmnmi	r5, r1, ror #6
     930:	61506c6c 	cmpvs	r0, ip, ror #24
     934:	00736567 	rsbseq	r6, r3, r7, ror #10
     938:	00000701 	andeq	r0, r0, r1, lsl #14
     93c:	53414c46 	movtpl	r4, #7238	; 0x1c46
     940:	72455f48 	subvc	r5, r5, #288	; 0x120
     944:	50657361 	rsbpl	r7, r5, r1, ror #6
     948:	00656761 	rsbeq	r6, r5, r1, ror #14
     94c:	00000000 	andeq	r0, r0, r0
     950:	00000177 	andeq	r0, r0, r7, ror r1
     954:	10570002 	subsne	r0, r7, r2
     958:	06480000 	strbeq	r0, [r8], -r0
     95c:	022b0000 	eoreq	r0, fp, #0	; 0x0
     960:	50470000 	subpl	r0, r7, r0
     964:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^
     968:	0074696e 	rsbseq	r6, r4, lr, ror #18
     96c:	000002bb 	strheq	r0, [r0], -fp
     970:	4f495047 	svcmi	0x00495047
     974:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     978:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
     97c:	0074696e 	rsbseq	r6, r4, lr, ror #18
     980:	000002e0 	andeq	r0, r0, r0, ror #5
     984:	4f495047 	svcmi	0x00495047
     988:	6165525f 	cmnvs	r5, pc, asr r2
     98c:	706e4964 	rsbvc	r4, lr, r4, ror #18
     990:	61447475 	cmpvs	r4, r5, ror r4
     994:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
     998:	03230074 	teqeq	r3, #116	; 0x74
     99c:	50470000 	subpl	r0, r7, r0
     9a0:	525f4f49 	subspl	r4, pc, #292	; 0x124
     9a4:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     9a8:	7475706e 	ldrbtvc	r7, [r5], #-110
     9ac:	61746144 	cmnvs	r4, r4, asr #2
     9b0:	00035000 	andeq	r5, r3, r0
     9b4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     9b8:	65525f4f 	ldrbvs	r5, [r2, #-3919]
     9bc:	754f6461 	strbvc	r6, [pc, #-1121]	; 563 <__Stack_Size+0x163>
     9c0:	74757074 	ldrbtvc	r7, [r5], #-116
     9c4:	61746144 	cmnvs	r4, r4, asr #2
     9c8:	00746942 	rsbseq	r6, r4, r2, asr #18
     9cc:	00000397 	muleq	r0, r7, r3
     9d0:	4f495047 	svcmi	0x00495047
     9d4:	6165525f 	cmnvs	r5, pc, asr r2
     9d8:	74754f64 	ldrbtvc	r4, [r5], #-3940
     9dc:	44747570 	ldrbtmi	r7, [r4], #-1392
     9e0:	00617461 	rsbeq	r7, r1, r1, ror #8
     9e4:	000003c4 	andeq	r0, r0, r4, asr #7
     9e8:	4f495047 	svcmi	0x00495047
     9ec:	7465535f 	strbtvc	r5, [r5], #-863
     9f0:	73746942 	cmnvc	r4, #1081344	; 0x108000
     9f4:	0003f900 	andeq	pc, r3, r0, lsl #18
     9f8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     9fc:	65525f4f 	ldrbvs	r5, [r2, #-3919]
     a00:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
     a04:	00737469 	rsbseq	r7, r3, r9, ror #8
     a08:	0000042e 	andeq	r0, r0, lr, lsr #8
     a0c:	4f495047 	svcmi	0x00495047
     a10:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     a14:	69426574 	stmdbvs	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
     a18:	04710074 	ldrbteq	r0, [r1], #-116
     a1c:	50470000 	subpl	r0, r7, r0
     a20:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
     a24:	65746972 	ldrbvs	r6, [r4, #-2418]!
     a28:	0004a600 	andeq	sl, r4, r0, lsl #12
     a2c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     a30:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     a34:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
     a38:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
     a3c:	00676966 	rsbeq	r6, r7, r6, ror #18
     a40:	000004e9 	andeq	r0, r0, r9, ror #9
     a44:	4f495047 	svcmi	0x00495047
     a48:	6576455f 	ldrbvs	r4, [r6, #-1375]!
     a4c:	754f746e 	strbvc	r7, [pc, #-1134]	; 5e6 <__Stack_Size+0x1e6>
     a50:	74757074 	ldrbtvc	r7, [r5], #-116
     a54:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     a58:	30006769 	andcc	r6, r0, r9, ror #14
     a5c:	47000005 	strmi	r0, [r0, -r5]
     a60:	5f4f4950 	svcpl	0x004f4950
     a64:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     a68:	74754f74 	ldrbtvc	r4, [r5], #-3956
     a6c:	43747570 	cmnmi	r4, #469762048	; 0x1c000000
     a70:	5700646d 	strpl	r6, [r0, -sp, ror #8]
     a74:	47000005 	strmi	r0, [r0, -r5]
     a78:	5f4f4950 	svcpl	0x004f4950
     a7c:	526e6950 	rsbpl	r6, lr, #1310720	; 0x140000
     a80:	70616d65 	rsbvc	r6, r1, r5, ror #26
     a84:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     a88:	c6006769 	strgt	r6, [r0], -r9, ror #14
     a8c:	47000005 	strmi	r0, [r0, -r5]
     a90:	5f4f4950 	svcpl	0x004f4950
     a94:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     a98:	656e694c 	strbvs	r6, [lr, #-2380]!
     a9c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     aa0:	0d006769 	stceq	7, cr6, [r0, #-420]
     aa4:	47000006 	strmi	r0, [r0, -r6]
     aa8:	5f4f4950 	svcpl	0x004f4950
     aac:	4f494641 	svcmi	0x00494641
     ab0:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
     ab4:	22007469 	andcs	r7, r0, #1761607680	; 0x69000000
     ab8:	47000006 	strmi	r0, [r0, -r6]
     abc:	5f4f4950 	svcpl	0x004f4950
     ac0:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
     ac4:	00007469 	andeq	r7, r0, r9, ror #8
     ac8:	5c000000 	stcpl	0, cr0, [r0], {0}
     acc:	02000003 	andeq	r0, r0, #3	; 0x3
     ad0:	00169f00 	andseq	r9, r6, r0, lsl #30
     ad4:	0008e700 	andeq	lr, r8, r0, lsl #14
     ad8:	00031000 	andeq	r1, r3, r0
     adc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     ae0:	65445f43 	strbvs	r5, [r4, #-3907]
     ae4:	74696e49 	strbtvc	r6, [r9], #-3657
     ae8:	00033500 	andeq	r3, r3, r0, lsl #10
     aec:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     af0:	43535f43 	cmpmi	r3, #268	; 0x10c
     af4:	49654442 	stmdbmi	r5!, {r1, r6, sl, lr}^
     af8:	0074696e 	rsbseq	r6, r4, lr, ror #18
     afc:	00000358 	andeq	r0, r0, r8, asr r3
     b00:	4349564e 	movtmi	r5, #38478	; 0x964e
     b04:	6972505f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, lr}^
     b08:	7469726f 	strbtvc	r7, [r9], #-623
     b0c:	6f724779 	svcvs	0x00724779
     b10:	6f437075 	svcvs	0x00437075
     b14:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     b18:	00037f00 	andeq	r7, r3, r0, lsl #30
     b1c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     b20:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     b24:	f1007469 	undefined instruction 0xf1007469
     b28:	4e000003 	cdpmi	0, 0, cr0, cr0, cr3, {0}
     b2c:	5f434956 	svcpl	0x00434956
     b30:	75727453 	ldrbvc	r7, [r2, #-1107]!
     b34:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
     b38:	16007469 	strne	r7, [r0], -r9, ror #8
     b3c:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
     b40:	5f434956 	svcpl	0x00434956
     b44:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
     b48:	65727275 	ldrbvs	r7, [r2, #-629]!
     b4c:	6550746e 	ldrbvs	r7, [r0, #-1134]
     b50:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     b54:	51524967 	cmppl	r2, r7, ror #18
     b58:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     b5c:	006c656e 	rsbeq	r6, ip, lr, ror #10
     b60:	0000042e 	andeq	r0, r0, lr, lsr #8
     b64:	4349564e 	movtmi	r5, #38478	; 0x964e
     b68:	7465475f 	strbtvc	r4, [r5], #-1887
     b6c:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     b70:	6e6e6168 	powvsez	f6, f6, #0.0
     b74:	65506c65 	ldrbvs	r6, [r0, #-3173]
     b78:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     b7c:	74694267 	strbtvc	r4, [r9], #-615
     b80:	74617453 	strbtvc	r7, [r1], #-1107
     b84:	75007375 	strvc	r7, [r0, #-885]
     b88:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
     b8c:	5f434956 	svcpl	0x00434956
     b90:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
     b94:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     b98:	656e6e61 	strbvs	r6, [lr, #-3681]!
     b9c:	6e65506c 	cdpvs	0, 6, cr5, cr5, cr12, {3}
     ba0:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     ba4:	00746942 	rsbseq	r6, r4, r2, asr #18
     ba8:	0000049c 	muleq	r0, ip, r4
     bac:	4349564e 	movtmi	r5, #38478	; 0x964e
     bb0:	656c435f 	strbvs	r4, [ip, #-863]!
     bb4:	52497261 	subpl	r7, r9, #268435462	; 0x10000006
     bb8:	61684351 	cmnvs	r8, r1, asr r3
     bbc:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     bc0:	646e6550 	strbtvs	r6, [lr], #-1360
     bc4:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
     bc8:	c5007469 	strgt	r7, [r0, #-1129]
     bcc:	4e000004 	cdpmi	0, 0, cr0, cr0, cr4, {0}
     bd0:	5f434956 	svcpl	0x00434956
     bd4:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
     bd8:	65727275 	ldrbvs	r7, [r2, #-629]!
     bdc:	6341746e 	movtvs	r7, #5230	; 0x146e
     be0:	65766974 	ldrbvs	r6, [r6, #-2420]!
     be4:	646e6148 	strbtvs	r6, [lr], #-328
     be8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     bec:	000004dd 	ldrdeq	r0, [r0], -sp
     bf0:	4349564e 	movtmi	r5, #38478	; 0x964e
     bf4:	7465475f 	strbtvc	r4, [r5], #-1887
     bf8:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     bfc:	6e6e6168 	powvsez	f6, f6, #0.0
     c00:	63416c65 	movtvs	r6, #7269	; 0x1c65
     c04:	65766974 	ldrbvs	r6, [r6, #-2420]!
     c08:	53746942 	cmnpl	r4, #1081344	; 0x108000
     c0c:	75746174 	ldrbvc	r6, [r4, #-372]!
     c10:	05240073 	streq	r0, [r4, #-115]!
     c14:	564e0000 	strbpl	r0, [lr], -r0
     c18:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
     c1c:	50437465 	subpl	r7, r3, r5, ror #8
     c20:	00444955 	subeq	r4, r4, r5, asr r9
     c24:	0000053c 	andeq	r0, r0, ip, lsr r5
     c28:	4349564e 	movtmi	r5, #38478	; 0x964e
     c2c:	7465535f 	strbtvc	r5, [r5], #-863
     c30:	74636556 	strbtvc	r6, [r3], #-1366
     c34:	6154726f 	cmpvs	r4, pc, ror #4
     c38:	00656c62 	rsbeq	r6, r5, r2, ror #24
     c3c:	00000573 	andeq	r0, r0, r3, ror r5
     c40:	4349564e 	movtmi	r5, #38478	; 0x964e
     c44:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
     c48:	74617265 	strbtvc	r7, [r1], #-613
     c4c:	73795365 	cmnvc	r9, #-1811939327	; 0x94000001
     c50:	526d6574 	rsbpl	r6, sp, #486539264	; 0x1d000000
     c54:	74657365 	strbtvc	r7, [r5], #-869
     c58:	00058700 	andeq	r8, r5, r0, lsl #14
     c5c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     c60:	65475f43 	strbvs	r5, [r7, #-3907]
     c64:	6172656e 	cmnvs	r2, lr, ror #10
     c68:	6f436574 	svcvs	0x00436574
     c6c:	65526572 	ldrbvs	r6, [r2, #-1394]
     c70:	00746573 	rsbseq	r6, r4, r3, ror r5
     c74:	0000059b 	muleq	r0, fp, r5
     c78:	4349564e 	movtmi	r5, #38478	; 0x964e
     c7c:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
     c80:	4c6d6574 	cfstr64mi	mvdx6, [sp], #-464
     c84:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
     c88:	00676966 	rsbeq	r6, r7, r6, ror #18
     c8c:	000005d0 	ldrdeq	r0, [r0], -r0
     c90:	4349564e 	movtmi	r5, #38478	; 0x964e
     c94:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
     c98:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     c9c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     ca0:	6f437265 	svcvs	0x00437265
     ca4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     ca8:	00061500 	andeq	r1, r6, r0, lsl #10
     cac:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     cb0:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     cb4:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
     cb8:	646e6148 	strbtvs	r6, [lr], #-328
     cbc:	5072656c 	rsbspl	r6, r2, ip, ror #10
     cc0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     cc4:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
     cc8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     ccc:	06980067 	ldreq	r0, [r8], r7, rrx
     cd0:	564e0000 	strbpl	r0, [lr], -r0
     cd4:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
     cd8:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
     cdc:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
     ce0:	646e6148 	strbtvs	r6, [lr], #-328
     ce4:	5072656c 	rsbspl	r6, r2, ip, ror #10
     ce8:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     cec:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     cf0:	61745374 	cmnvs	r4, r4, ror r3
     cf4:	00737574 	rsbseq	r7, r3, r4, ror r5
     cf8:	000006ed 	andeq	r0, r0, sp, ror #13
     cfc:	4349564e 	movtmi	r5, #38478	; 0x964e
     d00:	7465535f 	strbtvc	r5, [r5], #-863
     d04:	74737953 	ldrbtvc	r7, [r3], #-2387
     d08:	61486d65 	cmpvs	r8, r5, ror #26
     d0c:	656c646e 	strbvs	r6, [ip, #-1134]!
     d10:	6e655072 	mcrvs	0, 3, r5, cr5, cr2, {3}
     d14:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     d18:	00746942 	rsbseq	r6, r4, r2, asr #18
     d1c:	00000722 	andeq	r0, r0, r2, lsr #14
     d20:	4349564e 	movtmi	r5, #38478	; 0x964e
     d24:	656c435f 	strbvs	r4, [ip, #-863]!
     d28:	79537261 	ldmdbvc	r3, {r0, r5, r6, r9, ip, sp, lr}^
     d2c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
     d30:	646e6148 	strbtvs	r6, [lr], #-328
     d34:	5072656c 	rsbspl	r6, r2, ip, ror #10
     d38:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     d3c:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     d40:	07570074 	undefined
     d44:	564e0000 	strbpl	r0, [lr], -r0
     d48:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
     d4c:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
     d50:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
     d54:	646e6148 	strbtvs	r6, [lr], #-328
     d58:	4172656c 	cmnmi	r2, ip, ror #10
     d5c:	76697463 	strbtvc	r7, [r9], -r3, ror #8
     d60:	74694265 	strbtvc	r4, [r9], #-613
     d64:	74617453 	strbtvc	r7, [r1], #-1107
     d68:	aa007375 	bge	1db44 <__Stack_Size+0x1d744>
     d6c:	4e000007 	cdpmi	0, 0, cr0, cr0, cr7, {0}
     d70:	5f434956 	svcpl	0x00434956
     d74:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     d78:	746c7561 	strbtvc	r7, [ip], #-1377
     d7c:	646e6148 	strbtvs	r6, [lr], #-328
     d80:	5372656c 	cmnpl	r2, #452984832	; 0x1b000000
     d84:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     d88:	07007365 	streq	r7, [r0, -r5, ror #6]
     d8c:	4e000008 	cdpmi	0, 0, cr0, cr0, cr8, {0}
     d90:	5f434956 	svcpl	0x00434956
     d94:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     d98:	746c7561 	strbtvc	r7, [ip], #-1377
     d9c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     da0:	00737365 	rsbseq	r7, r3, r5, ror #6
     da4:	00000850 	andeq	r0, r0, r0, asr r8
     da8:	4349564e 	movtmi	r5, #38478	; 0x964e
     dac:	7465475f 	strbtvc	r4, [r5], #-1887
     db0:	45534142 	ldrbmi	r4, [r3, #-322]
     db4:	00495250 	subeq	r5, r9, r0, asr r2
     db8:	00000869 	andeq	r0, r0, r9, ror #16
     dbc:	4349564e 	movtmi	r5, #38478	; 0x964e
     dc0:	5341425f 	movtpl	r4, #4703	; 0x125f
     dc4:	49525045 	ldmdbmi	r2, {r0, r2, r6, ip, lr}^
     dc8:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
     dcc:	92004749 	andls	r4, r0, #19136512	; 0x1240000
     dd0:	4e000008 	cdpmi	0, 0, cr0, cr0, cr8, {0}
     dd4:	5f434956 	svcpl	0x00434956
     dd8:	45534552 	ldrbmi	r4, [r3, #-1362]
     ddc:	55414654 	strbpl	r4, [r1, #-1620]
     de0:	414d544c 	cmpmi	sp, ip, asr #8
     de4:	a7004b53 	smlsdge	r0, r3, fp, r4
     de8:	4e000008 	cdpmi	0, 0, cr0, cr0, cr8, {0}
     dec:	5f434956 	svcpl	0x00434956
     df0:	46544553 	undefined
     df4:	544c5541 	strbpl	r5, [ip], #-1345
     df8:	4b53414d 	blmi	14d1334 <__Stack_Size+0x14d0f34>
     dfc:	0008bc00 	andeq	fp, r8, r0, lsl #24
     e00:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     e04:	45525f43 	ldrbmi	r5, [r2, #-3907]
     e08:	50544553 	subspl	r4, r4, r3, asr r5
     e0c:	414d4952 	cmpmi	sp, r2, asr r9
     e10:	d1004b53 	tstle	r0, r3, asr fp
     e14:	4e000008 	cdpmi	0, 0, cr0, cr0, cr8, {0}
     e18:	5f434956 	svcpl	0x00434956
     e1c:	50544553 	subspl	r4, r4, r3, asr r5
     e20:	414d4952 	cmpmi	sp, r2, asr r9
     e24:	00004b53 	andeq	r4, r0, r3, asr fp
     e28:	c7000000 	strgt	r0, [r0, -r0]
     e2c:	02000000 	andeq	r0, r0, #0	; 0x0
     e30:	001f8600 	andseq	r8, pc, r0, lsl #12
     e34:	00024700 	andeq	r4, r2, r0, lsl #14
     e38:	0000d300 	andeq	sp, r0, r0, lsl #6
     e3c:	52575000 	subspl	r5, r7, #0	; 0x0
     e40:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
     e44:	4170756b 	cmnmi	r0, fp, ror #10
     e48:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
     e4c:	646d4373 	strbtvs	r4, [sp], #-883
     e50:	0000f800 	andeq	pc, r0, r0, lsl #16
     e54:	52575000 	subspl	r5, r7, #0	; 0x0
     e58:	4456505f 	ldrbmi	r5, [r6], #-95
     e5c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     e60:	0000011d 	andeq	r0, r0, sp, lsl r1
     e64:	5f525750 	svcpl	0x00525750
     e68:	4c445650 	mcrrmi	6, 5, r5, r4, cr0
     e6c:	6c657665 	stclvs	6, cr7, [r5], #-404
     e70:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     e74:	53006769 	movwpl	r6, #1897	; 0x769
     e78:	50000001 	andpl	r0, r0, r1
     e7c:	575f5257 	undefined
     e80:	55656b61 	strbpl	r6, [r5, #-2913]!
     e84:	6e695070 	mcrvs	0, 3, r5, cr9, cr0, {3}
     e88:	00646d43 	rsbeq	r6, r4, r3, asr #26
     e8c:	00000178 	andeq	r0, r0, r8, ror r1
     e90:	5f525750 	svcpl	0x00525750
     e94:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     e98:	5367616c 	cmnpl	r7, #27	; 0x1b
     e9c:	75746174 	ldrbvc	r6, [r4, #-372]!
     ea0:	01ae0073 	undefined instruction 0x01ae0073
     ea4:	57500000 	ldrbpl	r0, [r0, -r0]
     ea8:	6c435f52 	mcrrvs	15, 5, r5, r3, cr2
     eac:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
     eb0:	0067616c 	rsbeq	r6, r7, ip, ror #2
     eb4:	000001d5 	ldrdeq	r0, [r0], -r5
     eb8:	5f525750 	svcpl	0x00525750
     ebc:	65746e45 	ldrbvs	r6, [r4, #-3653]!
     ec0:	41545372 	cmpmi	r4, r2, ror r3
     ec4:	5942444e 	stmdbpl	r2, {r1, r2, r3, r6, sl, lr}^
     ec8:	65646f4d 	strbvs	r6, [r4, #-3917]!
     ecc:	0001ea00 	andeq	lr, r1, r0, lsl #20
     ed0:	52575000 	subspl	r5, r7, #0	; 0x0
     ed4:	746e455f 	strbtvc	r4, [lr], #-1375
     ed8:	54537265 	ldrbpl	r7, [r3], #-613
     edc:	6f4d504f 	svcvs	0x004d504f
     ee0:	31006564 	tstcc	r0, r4, ror #10
     ee4:	50000002 	andpl	r0, r0, r2
     ee8:	445f5257 	ldrbmi	r5, [pc], #599	; ef0 <__Stack_Size+0xaf0>
     eec:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     ef0:	00000074 	andeq	r0, r0, r4, ror r0
     ef4:	02c00000 	sbceq	r0, r0, #0	; 0x0
     ef8:	00020000 	andeq	r0, r2, r0
     efc:	000021cd 	andeq	r2, r0, sp, asr #3
     f00:	000008bd 	strheq	r0, [r0], -sp
     f04:	00000214 	andeq	r0, r0, r4, lsl r2
     f08:	5f434352 	svcpl	0x00434352
     f0c:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
     f10:	27007469 	strcs	r7, [r0, -r9, ror #8]
     f14:	52000002 	andpl	r0, r0, #2	; 0x2
     f18:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^
     f1c:	6f434553 	svcvs	0x00434553
     f20:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     f24:	00024c00 	andeq	r4, r2, r0, lsl #24
     f28:	43435200 	movtmi	r5, #12800	; 0x3200
     f2c:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     f30:	726f4674 	rsbvc	r4, pc, #121634816	; 0x7400000
     f34:	53455348 	movtpl	r5, #21320	; 0x5348
     f38:	74726174 	ldrbtvc	r6, [r2], #-372
     f3c:	f1007055 	undefined instruction 0xf1007055
     f40:	52000002 	andpl	r0, r0, #2	; 0x2
     f44:	415f4343 	cmpmi	pc, r3, asr #6
     f48:	73756a64 	cmnvc	r5, #409600	; 0x64000
     f4c:	49534874 	ldmdbmi	r3, {r2, r4, r5, r6, fp, lr}^
     f50:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
     f54:	74617262 	strbtvc	r7, [r1], #-610
     f58:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
     f5c:	65756c61 	ldrbvs	r6, [r5, #-3169]!
     f60:	00032300 	andeq	r2, r3, r0, lsl #6
     f64:	43435200 	movtmi	r5, #12800	; 0x3200
     f68:	4953485f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, fp, lr}^
     f6c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     f70:	0000034a 	andeq	r0, r0, sl, asr #6
     f74:	5f434352 	svcpl	0x00434352
     f78:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     f7c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     f80:	03910067 	orrseq	r0, r1, #103	; 0x67
     f84:	43520000 	cmpmi	r2, #0	; 0x0
     f88:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     f8c:	646d434c 	strbtvs	r4, [sp], #-844
     f90:	0003b800 	andeq	fp, r3, r0, lsl #16
     f94:	43435200 	movtmi	r5, #12800	; 0x3200
     f98:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
     f9c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     fa0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     fa4:	03f10067 	mvnseq	r0, #103	; 0x67
     fa8:	43520000 	cmpmi	r2, #0	; 0x0
     fac:	65475f43 	strbvs	r5, [r7, #-3907]
     fb0:	53595374 	cmppl	r9, #-805306367	; 0xd0000001
     fb4:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     fb8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     fbc:	04090065 	streq	r0, [r9], #-101
     fc0:	43520000 	cmpmi	r2, #0	; 0x0
     fc4:	43485f43 	movtmi	r5, #36675	; 0x8f43
     fc8:	6f434b4c 	svcvs	0x00434b4c
     fcc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     fd0:	00044200 	andeq	r4, r4, r0, lsl #4
     fd4:	43435200 	movtmi	r5, #12800	; 0x3200
     fd8:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
     fdc:	6f43314b 	svcvs	0x0043314b
     fe0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     fe4:	00047b00 	andeq	r7, r4, r0, lsl #22
     fe8:	43435200 	movtmi	r5, #12800	; 0x3200
     fec:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
     ff0:	6f43324b 	svcvs	0x0043324b
     ff4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     ff8:	0004b000 	andeq	fp, r4, r0
     ffc:	43435200 	movtmi	r5, #12800	; 0x3200
    1000:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    1004:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1008:	04e50067 	strbteq	r0, [r5], #103
    100c:	43520000 	cmpmi	r2, #0	; 0x0
    1010:	53555f43 	cmppl	r5, #268	; 0x10c
    1014:	4b4c4342 	blmi	1311d24 <__Stack_Size+0x1311924>
    1018:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    101c:	0c006769 	stceq	7, cr6, [r0], {105}
    1020:	52000005 	andpl	r0, r0, #5	; 0x5
    1024:	415f4343 	cmpmi	pc, r3, asr #6
    1028:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
    102c:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1030:	00676966 	rsbeq	r6, r7, r6, ror #18
    1034:	00000545 	andeq	r0, r0, r5, asr #10
    1038:	5f434352 	svcpl	0x00434352
    103c:	4345534c 	movtmi	r5, #21324	; 0x534c
    1040:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1044:	056c0067 	strbeq	r0, [ip, #-103]!
    1048:	43520000 	cmpmi	r2, #0	; 0x0
    104c:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    1050:	646d4349 	strbtvs	r4, [sp], #-841
    1054:	00059300 	andeq	r9, r5, r0, lsl #6
    1058:	43435200 	movtmi	r5, #12800	; 0x3200
    105c:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    1060:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1064:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1068:	05bc0067 	ldreq	r0, [ip, #103]!
    106c:	43520000 	cmpmi	r2, #0	; 0x0
    1070:	54525f43 	ldrbpl	r5, [r2], #-3907
    1074:	4b4c4343 	blmi	1311d88 <__Stack_Size+0x1311988>
    1078:	00646d43 	rsbeq	r6, r4, r3, asr #26
    107c:	000005e3 	andeq	r0, r0, r3, ror #11
    1080:	5f434352 	svcpl	0x00434352
    1084:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1088:	6b636f6c 	blvs	18dce40 <__Stack_Size+0x18dca40>
    108c:	65724673 	ldrbvs	r4, [r2, #-1651]!
    1090:	064a0071 	undefined
    1094:	43520000 	cmpmi	r2, #0	; 0x0
    1098:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    109c:	72655042 	rsbvc	r5, r5, #66	; 0x42
    10a0:	43687069 	cmnmi	r8, #105	; 0x69
    10a4:	6b636f6c 	blvs	18dce5c <__Stack_Size+0x18dca5c>
    10a8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    10ac:	0000067f 	andeq	r0, r0, pc, ror r6
    10b0:	5f434352 	svcpl	0x00434352
    10b4:	32425041 	subcc	r5, r2, #65	; 0x41
    10b8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    10bc:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    10c0:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    10c4:	b400646d 	strlt	r6, [r0], #-1133
    10c8:	52000006 	andpl	r0, r0, #6	; 0x6
    10cc:	415f4343 	cmpmi	pc, r3, asr #6
    10d0:	50314250 	eorspl	r4, r1, r0, asr r2
    10d4:	70697265 	rsbvc	r7, r9, r5, ror #4
    10d8:	6f6c4368 	svcvs	0x006c4368
    10dc:	6d436b63 	vstrvs	d22, [r3, #-396]
    10e0:	06e90064 	strbteq	r0, [r9], r4, rrx
    10e4:	43520000 	cmpmi	r2, #0	; 0x0
    10e8:	50415f43 	subpl	r5, r1, r3, asr #30
    10ec:	65503242 	ldrbvs	r3, [r0, #-578]
    10f0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    10f4:	65736552 	ldrbvs	r6, [r3, #-1362]!
    10f8:	646d4374 	strbtvs	r4, [sp], #-884
    10fc:	00071e00 	andeq	r1, r7, r0, lsl #28
    1100:	43435200 	movtmi	r5, #12800	; 0x3200
    1104:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1108:	72655031 	rsbvc	r5, r5, #49	; 0x31
    110c:	52687069 	rsbpl	r7, r8, #105	; 0x69
    1110:	74657365 	strbtvc	r7, [r5], #-869
    1114:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1118:	00000753 	andeq	r0, r0, r3, asr r7
    111c:	5f434352 	svcpl	0x00434352
    1120:	6b636142 	blvs	18d9630 <__Stack_Size+0x18d9230>
    1124:	65527075 	ldrbvs	r7, [r2, #-117]
    1128:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    112c:	7a00646d 	bvc	1a2e8 <__Stack_Size+0x19ee8>
    1130:	52000007 	andpl	r0, r0, #7	; 0x7
    1134:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1138:	6b636f6c 	blvs	18dcef0 <__Stack_Size+0x18dcaf0>
    113c:	75636553 	strbvc	r6, [r3, #-1363]!
    1140:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1144:	74737953 	ldrbtvc	r7, [r3], #-2387
    1148:	6d436d65 	stclvs	13, cr6, [r3, #-404]
    114c:	07a10064 	streq	r0, [r1, r4, rrx]!
    1150:	43520000 	cmpmi	r2, #0	; 0x0
    1154:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    1158:	6e6f434f 	cdpvs	3, 6, cr4, cr15, cr15, {2}
    115c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1160:	000007c8 	andeq	r0, r0, r8, asr #15
    1164:	5f434352 	svcpl	0x00434352
    1168:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    116c:	5367616c 	cmnpl	r7, #27	; 0x1b
    1170:	75746174 	ldrbvc	r6, [r4, #-372]!
    1174:	07fc0073 	undefined
    1178:	43520000 	cmpmi	r2, #0	; 0x0
    117c:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1180:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    1184:	0067616c 	rsbeq	r6, r7, ip, ror #2
    1188:	00000810 	andeq	r0, r0, r0, lsl r8
    118c:	5f434352 	svcpl	0x00434352
    1190:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    1194:	61745354 	cmnvs	r4, r4, asr r3
    1198:	00737574 	rsbseq	r7, r3, r4, ror r5
    119c:	00000849 	andeq	r0, r0, r9, asr #16
    11a0:	5f434352 	svcpl	0x00434352
    11a4:	61656c43 	cmnvs	r5, r3, asr #24
    11a8:	50544972 	subspl	r4, r4, r2, ror r9
    11ac:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    11b0:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    11b4:	00000074 	andeq	r0, r0, r4, ror r0
    11b8:	009d0000 	addseq	r0, sp, r0
    11bc:	00020000 	andeq	r0, r2, r0
    11c0:	00002a8a 	andeq	r2, r0, sl, lsl #21
    11c4:	000001ef 	andeq	r0, r0, pc, ror #3
    11c8:	000000f7 	strdeq	r0, [r0], -r7
    11cc:	54737953 	ldrbtpl	r7, [r3], #-2387
    11d0:	5f6b6369 	svcpl	0x006b6369
    11d4:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    11d8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    11dc:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    11e0:	00676966 	rsbeq	r6, r7, r6, ror #18
    11e4:	0000011c 	andeq	r0, r0, ip, lsl r1
    11e8:	54737953 	ldrbtpl	r7, [r3], #-2387
    11ec:	5f6b6369 	svcpl	0x006b6369
    11f0:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
    11f4:	616f6c65 	cmnvs	pc, r5, ror #24
    11f8:	01410064 	cmpeq	r1, r4, rrx
    11fc:	79530000 	ldmdbvc	r3, {}^
    1200:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1204:	6f435f6b 	svcvs	0x00435f6b
    1208:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    120c:	646d4372 	strbtvs	r4, [sp], #-882
    1210:	00016600 	andeq	r6, r1, r0, lsl #12
    1214:	73795300 	cmnvc	r9, #0	; 0x0
    1218:	6b636954 	blvs	18db770 <__Stack_Size+0x18db370>
    121c:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    1220:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1224:	018b0067 	orreq	r0, fp, r7, rrx
    1228:	79530000 	ldmdbvc	r3, {}^
    122c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1230:	65475f6b 	strbvs	r5, [r7, #-3947]
    1234:	756f4374 	strbvc	r4, [pc, #-884]!	; ec8 <__Stack_Size+0xac8>
    1238:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    123c:	0001a200 	andeq	sl, r1, r0, lsl #4
    1240:	73795300 	cmnvc	r9, #0	; 0x0
    1244:	6b636954 	blvs	18db79c <__Stack_Size+0x18db39c>
    1248:	7465475f 	strbtvc	r4, [r5], #-1887
    124c:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1250:	74617453 	strbtvc	r7, [r1], #-1107
    1254:	00007375 	andeq	r7, r0, r5, ror r3
    1258:	31000000 	tstcc	r0, r0
    125c:	02000000 	andeq	r0, r0, #0	; 0x0
    1260:	002ce400 	eoreq	lr, ip, r0, lsl #8
    1264:	00010600 	andeq	r0, r1, r0, lsl #12
    1268:	00005200 	andeq	r5, r0, r0, lsl #4
    126c:	73655200 	cmnvc	r5, #0	; 0x0
    1270:	485f7465 	ldmdami	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1274:	6c646e61 	stclvs	14, cr6, [r4], #-388
    1278:	ee007265 	cdp	2, 0, cr7, cr0, cr5, {3}
    127c:	67000000 	strvs	r0, [r0, -r0]
    1280:	6e66705f 	mcrvs	0, 3, r7, cr6, cr15, {2}
    1284:	74636556 	strbtvc	r6, [r3], #-1366
    1288:	0073726f 	rsbseq	r7, r3, pc, ror #4
    128c:	00000000 	andeq	r0, r0, r0
    1290:	00000019 	andeq	r0, r0, r9, lsl r0
    1294:	2dea0002 	stclcs	0, cr0, [sl, #8]!
    1298:	00c50000 	sbceq	r0, r5, r0
    129c:	009c0000 	addseq	r0, ip, r0
    12a0:	74610000 	strbtvc	r0, [r1]
    12a4:	74697865 	strbtvc	r7, [r9], #-2149
    12a8:	00000000 	andeq	r0, r0, r0
    12ac:	00001700 	andeq	r1, r0, r0, lsl #14
    12b0:	af000200 	svcge	0x00000200
    12b4:	3a00002e 	bcc	1374 <__Stack_Size+0xf74>
    12b8:	ff000009 	undefined instruction 0xff000009
    12bc:	65000008 	strvs	r0, [r0, #-8]
    12c0:	00746978 	rsbseq	r6, r4, r8, ror r9
    12c4:	00000000 	andeq	r0, r0, r0
    12c8:	00000035 	andeq	r0, r0, r5, lsr r0
    12cc:	37e90002 	strbcc	r0, [r9, r2]!
    12d0:	093a0000 	ldmdbeq	sl!, {}
    12d4:	09100000 	ldmdbeq	r0, {}
    12d8:	695f0000 	ldmdbvs	pc, {}^
    12dc:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    12e0:	74705f65 	ldrbtvc	r5, [r0], #-3941
    12e4:	09220072 	stmdbeq	r2!, {r1, r4, r5, r6}
    12e8:	675f0000 	ldrbvs	r0, [pc, -r0]
    12ec:	61626f6c 	cmnvs	r2, ip, ror #30
    12f0:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!
    12f4:	65727570 	ldrbvs	r7, [r2, #-1392]!
    12f8:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    12fc:	00000000 	andeq	r0, r0, r0
    1300:	00003a00 	andeq	r3, r0, r0, lsl #20
    1304:	23000200 	movwcs	r0, #512	; 0x200
    1308:	46000041 	strmi	r0, [r0], -r1, asr #32
    130c:	80000001 	andhi	r0, r0, r1
    1310:	5f000000 	svcpl	0x00000000
    1314:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1318:	69665f63 	stmdbvs	r6!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    131c:	615f696e 	cmpvs	pc, lr, ror #18
    1320:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    1324:	0000b200 	andeq	fp, r0, r0, lsl #4
    1328:	6c5f5f00 	mrrcvs	15, 0, r5, pc, cr0
    132c:	5f636269 	svcpl	0x00636269
    1330:	74696e69 	strbtvc	r6, [r9], #-3689
    1334:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
    1338:	00007961 	andeq	r7, r0, r1, ror #18
    133c:	19000000 	stmdbne	r0, {}
    1340:	02000000 	andeq	r0, r0, #0	; 0x0
    1344:	00426900 	subeq	r6, r2, r0, lsl #18
    1348:	00011300 	andeq	r1, r1, r0, lsl #6
    134c:	00008800 	andeq	r8, r0, r0, lsl #16
    1350:	6d656d00 	stclvs	13, cr6, [r5]
    1354:	00746573 	rsbseq	r6, r4, r3, ror r5
    1358:	00000000 	andeq	r0, r0, r0
    135c:	00000026 	andeq	r0, r0, r6, lsr #32
    1360:	437c0002 	cmnmi	ip, #2	; 0x2
    1364:	09a50000 	stmibeq	r5!, {}
    1368:	091e0000 	ldmdbeq	lr, {}
    136c:	5f5f0000 	svcpl	0x005f0000
    1370:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    1374:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    1378:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    137c:	6f727074 	svcvs	0x00727074
    1380:	00000063 	andeq	r0, r0, r3, rrx
    1384:	00230000 	eoreq	r0, r3, r0
    1388:	00020000 	andeq	r0, r2, r0
    138c:	00004d21 	andeq	r4, r0, r1, lsr #26
    1390:	000009b2 	strheq	r0, [r0], -r2
    1394:	000008ff 	strdeq	r0, [r0], -pc
    1398:	61635f5f 	cmnvs	r3, pc, asr pc
    139c:	655f6c6c 	ldrbvs	r6, [pc, #-3180]	; 738 <__Stack_Size+0x338>
    13a0:	70746978 	rsbsvc	r6, r4, r8, ror r9
    13a4:	73636f72 	cmnvc	r3, #456	; 0x1c8
    13a8:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000049 	andeq	r0, r0, r9, asr #32
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	tsteq	r4, r0
	...
      14:	69747263 	ldmdbvs	r4!, {r0, r1, r5, r6, r9, ip, sp, lr}^
      18:	6d73612e 	ldfvse	f6, [r3, #-184]!
      1c:	5c3a6300 	ldcpl	3, cr6, [sl]
      20:	616e6977 	smcvs	59031
      24:	5c736d72 	ldclpl	13, cr6, [r3], #-456
      28:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
      2c:	63675c64 	cmnvs	r7, #25600	; 0x6400
      30:	75622d63 	strbvc	r2, [r2, #-3427]!
      34:	5c646c69 	stclpl	12, cr6, [r4], #-420
      38:	00636367 	rsbeq	r6, r3, r7, ror #6
      3c:	20554e47 	subscs	r4, r5, r7, asr #28
      40:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      44:	2e38312e 	rsfcsep	f3, f0, #0.5
      48:	01003035 	tsteq	r0, r5, lsr r0
      4c:	00008080 	andeq	r8, r0, r0, lsl #1
      50:	12000200 	andne	r0, r0, #0	; 0x0
      54:	04000000 	streq	r0, [r0]
      58:	00004901 	andeq	r4, r0, r1, lsl #18
	...
      64:	2f2e2e00 	svccs	0x002e2e00
      68:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
      6c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
      70:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
      74:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
      78:	6c2f302e 	stcvs	0, cr3, [pc], #-184
      7c:	6c676269 	sfmvs	f6, 2, [r7], #-420
      80:	2f73736f 	svccs	0x0073736f
      84:	2f6d7261 	svccs	0x006d7261
      88:	30747263 	rsbscc	r7, r4, r3, ror #4
      8c:	6300532e 	movwvs	r5, #814	; 0x32e
      90:	69775c3a 	ldmdbvs	r7!, {r1, r3, r4, r5, sl, fp, ip, lr}^
      94:	6d72616e 	ldfvse	f6, [r2, #-440]!
      98:	75625c73 	strbvc	r5, [r2, #-3187]!
      9c:	5c646c69 	stclpl	12, cr6, [r4], #-420
      a0:	2d636367 	stclcs	3, cr6, [r3, #-412]!
      a4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
      a8:	72615c64 	rsbvc	r5, r1, #25600	; 0x6400
      ac:	61652d6d 	cmnvs	r5, sp, ror #26
      b0:	6c5c6962 	mrrcvs	9, 6, r6, ip, cr2
      b4:	6c676269 	sfmvs	f6, 2, [r7], #-420
      b8:	5c73736f 	ldclpl	3, cr7, [r3], #-444
      bc:	006d7261 	rsbeq	r7, sp, r1, ror #4
      c0:	20554e47 	subscs	r4, r5, r7, asr #28
      c4:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      c8:	2e38312e 	rsfcsep	f3, f0, #0.5
      cc:	01003035 	tsteq	r0, r5, lsr r0
      d0:	0002cf80 	andeq	ip, r2, r0, lsl #31
      d4:	26000200 	strcs	r0, [r0], -r0, lsl #4
      d8:	04000000 	streq	r0, [r0]
      dc:	0000f101 	andeq	pc, r0, r1, lsl #2
      e0:	003c0100 	eorseq	r0, ip, r0, lsl #2
      e4:	004b0000 	subeq	r0, fp, r0
      e8:	31340000 	teqcc	r4, r0
      ec:	333c0800 	teqcc	ip, #0	; 0x0
      f0:	00e30800 	rsceq	r0, r3, r0, lsl #16
      f4:	04020000 	streq	r0, [r2]
      f8:	00186105 	andseq	r6, r8, r5, lsl #2
      fc:	05020200 	streq	r0, [r2, #-512]
     100:	000001b2 	strheq	r0, [r0], -r2
     104:	0f060102 	svceq	0x00060102
     108:	03000001 	movweq	r0, #1	; 0x1
     10c:	00323375 	eorseq	r3, r2, r5, ror r3
     110:	00452702 	subeq	r2, r5, r2, lsl #14
     114:	04020000 	streq	r0, [r2]
     118:	0018db07 	andseq	sp, r8, r7, lsl #22
     11c:	31750300 	cmncc	r5, r0, lsl #6
     120:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
     124:	00000057 	andeq	r0, r0, r7, asr r0
     128:	93070202 	movwls	r0, #29186	; 0x7202
     12c:	02000000 	andeq	r0, r0, #0	; 0x0
     130:	010d0801 	tsteq	sp, r1, lsl #16
     134:	45040000 	strmi	r0, [r4]
     138:	05000000 	streq	r0, [r0]
     13c:	7f390201 	svcvc	0x00390201
     140:	06000000 	streq	r0, [r0], -r0
     144:	00000b6d 	andeq	r0, r0, sp, ror #22
     148:	45530700 	ldrbmi	r0, [r3, #-1792]
     14c:	00010054 	andeq	r0, r1, r4, asr r0
     150:	3b020105 	blcc	8056c <__Stack_Size+0x8016c>
     154:	00000094 	muleq	r0, r4, r0
     158:	00021206 	andeq	r1, r2, r6, lsl #4
     15c:	c5060000 	strgt	r0, [r6]
     160:	01000000 	tsteq	r0, r0
     164:	02010500 	andeq	r0, r1, #0	; 0x0
     168:	0000a93e 	andeq	sl, r0, lr, lsr r9
     16c:	01ec0600 	mvneq	r0, r0, lsl #12
     170:	06000000 	streq	r0, [r0], -r0
     174:	000000dd 	ldrdeq	r0, [r0], -sp
     178:	e5080001 	str	r0, [r8, #-1]
     17c:	02000000 	andeq	r0, r0, #0	; 0x0
     180:	0000943e 	andeq	r9, r0, lr, lsr r4
     184:	07040900 	streq	r0, [r4, -r0, lsl #18]
     188:	4f031c0a 	svcmi	0x00031c0a
     18c:	00012a01 	andeq	r2, r1, r1, lsl #20
     190:	52430b00 	subpl	r0, r3, #0	; 0x0
     194:	5003004c 	andpl	r0, r3, ip, asr #32
     198:	00006501 	andeq	r6, r0, r1, lsl #10
     19c:	00230200 	eoreq	r0, r3, r0, lsl #4
     1a0:	4852430b 	ldmdami	r2, {r0, r1, r3, r8, r9, lr}^
     1a4:	01510300 	cmpeq	r1, r0, lsl #6
     1a8:	00000065 	andeq	r0, r0, r5, rrx
     1ac:	0b042302 	bleq	108dbc <__Stack_Size+0x1089bc>
     1b0:	00524449 	subseq	r4, r2, r9, asr #8
     1b4:	65015203 	strvs	r5, [r1, #-515]
     1b8:	02000000 	andeq	r0, r0, #0	; 0x0
     1bc:	4f0b0823 	svcmi	0x000b0823
     1c0:	03005244 	movweq	r5, #580	; 0x244
     1c4:	00650153 	rsbeq	r0, r5, r3, asr r1
     1c8:	23020000 	movwcs	r0, #8192	; 0x2000
     1cc:	008e0c0c 	addeq	r0, lr, ip, lsl #24
     1d0:	54030000 	strpl	r0, [r3]
     1d4:	00006501 	andeq	r6, r0, r1, lsl #10
     1d8:	10230200 	eorne	r0, r3, r0, lsl #4
     1dc:	5252420b 	subspl	r4, r2, #-1342177280	; 0xb0000000
     1e0:	01550300 	cmpeq	r5, r0, lsl #6
     1e4:	00000065 	andeq	r0, r0, r5, rrx
     1e8:	0c142302 	ldceq	3, cr2, [r4], {2}
     1ec:	0000000b 	andeq	r0, r0, fp
     1f0:	65015603 	strvs	r5, [r1, #-1539]
     1f4:	02000000 	andeq	r0, r0, #0	; 0x0
     1f8:	05001823 	streq	r1, [r0, #-2083]
     1fc:	45230401 	strmi	r0, [r3, #-1025]!
     200:	06000001 	streq	r0, [r0], -r1
     204:	000000cc 	andeq	r0, r0, ip, asr #1
     208:	00fd0601 	rscseq	r0, sp, r1, lsl #12
     20c:	06020000 	streq	r0, [r2], -r0
     210:	00000162 	andeq	r0, r0, r2, ror #2
     214:	00080003 	andeq	r0, r8, r3
     218:	04000002 	streq	r0, [r0], #-2
     21c:	00012a27 	andeq	r2, r1, r7, lsr #20
     220:	04010500 	streq	r0, [r1], #-1280
     224:	00018a2e 	andeq	r8, r1, lr, lsr #20
     228:	01f20600 	mvnseq	r0, r0, lsl #12
     22c:	06000000 	streq	r0, [r0], -r0
     230:	00000010 	andeq	r0, r0, r0, lsl r0
     234:	006a0604 	rsbeq	r0, sl, r4, lsl #12
     238:	06280000 	strteq	r0, [r8], -r0
     23c:	000000ad 	andeq	r0, r0, sp, lsr #1
     240:	1a0600c8 	bne	180568 <__Stack_Size+0x180168>
     244:	14000002 	strne	r0, [r0], #-2
     248:	00012c06 	andeq	r2, r1, r6, lsl #24
     24c:	2c061000 	stccs	0, cr1, [r6], {0}
     250:	1c000000 	stcne	0, cr0, [r0], {0}
     254:	00018606 	andeq	r8, r1, r6, lsl #12
     258:	08001800 	stmdaeq	r0, {fp, ip}
     25c:	0000022b 	andeq	r0, r0, fp, lsr #4
     260:	01503604 	cmpeq	r0, r4, lsl #12
     264:	040d0000 	streq	r0, [sp]
     268:	01c83f04 	biceq	r3, r8, r4, lsl #30
     26c:	960e0000 	strls	r0, [lr], -r0
     270:	04000001 	streq	r0, [r0], #-1
     274:	00004c40 	andeq	r4, r0, r0, asr #24
     278:	00230200 	eoreq	r0, r3, r0, lsl #4
     27c:	0000000e 	andeq	r0, r0, lr
     280:	45410400 	strbmi	r0, [r1, #-1024]
     284:	02000001 	andeq	r0, r0, #1	; 0x1
     288:	bb0e0223 	bllt	380b1c <__Stack_Size+0x38071c>
     28c:	04000000 	streq	r0, [r0]
     290:	00018a42 	andeq	r8, r1, r2, asr #20
     294:	03230200 	teqeq	r3, #0	; 0x0
     298:	01bc0800 	undefined instruction 0x01bc0800
     29c:	43040000 	movwmi	r0, #16384	; 0x4000
     2a0:	00000195 	muleq	r0, r5, r1
     2a4:	0173010f 	cmneq	r3, pc, lsl #2
     2a8:	a8010000 	stmdage	r1, {}
     2ac:	01100101 	tsteq	r0, r1, lsl #2
     2b0:	00000120 	andeq	r0, r0, r0, lsr #2
     2b4:	3401d501 	strcc	sp, [r1], #-1281
     2b8:	48080031 	stmdami	r8, {r0, r4, r5}
     2bc:	01080031 	tsteq	r8, r1, lsr r0
     2c0:	a601115d 	undefined
     2c4:	01000000 	tsteq	r0, r0
     2c8:	314801db 	ldrdcc	r0, [r8, #-27]
     2cc:	31740800 	cmncc	r4, r0, lsl #16
     2d0:	00000800 	andeq	r0, r0, r0, lsl #16
     2d4:	02190000 	andseq	r0, r9, #0	; 0x0
     2d8:	26120000 	ldrcs	r0, [r2], -r0
     2dc:	01000000 	tsteq	r0, r0
     2e0:	00003ada 	ldrdeq	r3, [r0], -sl
     2e4:	00001f00 	andeq	r1, r0, r0, lsl #30
     2e8:	01130000 	tsteq	r3, r0
     2ec:	00000078 	andeq	r0, r0, r8, ror r0
     2f0:	7401cc01 	strvc	ip, [r1], #-3073
     2f4:	8a080031 	bhi	2003c0 <__Stack_Size+0x1fffc0>
     2f8:	3d080031 	stccc	0, cr0, [r8, #-196]
     2fc:	11000000 	tstne	r0, r0
     300:	00013d01 	andeq	r3, r1, r1, lsl #26
     304:	01ba0100 	undefined instruction 0x01ba0100
     308:	0800318c 	stmdaeq	r0, {r2, r3, r7, r8, ip, sp}
     30c:	080031d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, ip, sp}
     310:	00000068 	andeq	r0, r0, r8, rrx
     314:	00000256 	andeq	r0, r0, r6, asr r2
     318:	00019f14 	andeq	r9, r1, r4, lsl pc
     31c:	c8bb0100 	ldmgt	fp!, {r8}
     320:	02000001 	andeq	r0, r0, #1	; 0x1
     324:	15006c91 	strne	r6, [r0, #-3217]
     328:	000001d3 	ldrdeq	r0, [r0], -r3
     32c:	080031d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, ip, sp}
     330:	080031ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip, sp}
     334:	00000093 	muleq	r0, r3, r0
     338:	01500111 	cmpeq	r0, r1, lsl r1
     33c:	68010000 	stmdavs	r1, {}
     340:	0031ec01 	eorseq	lr, r1, r1, lsl #24
     344:	00326008 	eorseq	r6, r2, r8
     348:	0000be08 	andeq	fp, r0, r8, lsl #28
     34c:	00028c00 	andeq	r8, r2, r0, lsl #24
     350:	01db1600 	bicseq	r1, fp, r0, lsl #12
     354:	69010000 	stmdbvs	r1, {}
     358:	000000a9 	andeq	r0, r0, r9, lsr #1
     35c:	1b011700 	blne	45f64 <__Stack_Size+0x45b64>
     360:	01000001 	tsteq	r0, r1
     364:	02b90133 	adcseq	r0, r9, #-1073741812	; 0xc000000c
     368:	32600000 	rsbcc	r0, r0, #0	; 0x0
     36c:	333c0800 	teqcc	ip, #0	; 0x0
     370:	00e90800 	rsceq	r0, r9, r0, lsl #16
     374:	02b90000 	adcseq	r0, r9, #0	; 0x0
     378:	d3180000 	tstle	r8, #0	; 0x0
     37c:	68000001 	stmdavs	r0, {r0}
     380:	74080032 	strvc	r0, [r8], #-50
     384:	01080032 	tsteq	r8, r2, lsr r0
     388:	04190038 	ldreq	r0, [r9], #-56
     38c:	746e6905 	strbtvc	r6, [lr], #-2309
     390:	01cd1a00 	biceq	r1, sp, r0, lsl #20
     394:	20010000 	andcs	r0, r1, r0
     398:	00000065 	andeq	r0, r0, r5, rrx
     39c:	00030501 	andeq	r0, r3, r1, lsl #10
     3a0:	00200000 	eoreq	r0, r0, r0
     3a4:	00000575 	andeq	r0, r0, r5, ror r5
     3a8:	01a30002 	undefined instruction 0x01a30002
     3ac:	01040000 	tsteq	r4, r0
     3b0:	000000f1 	strdeq	r0, [r0], -r1
     3b4:	00070f01 	andeq	r0, r7, r1, lsl #30
     3b8:	00004b00 	andeq	r4, r0, r0, lsl #22
     3bc:	00333c00 	eorseq	r3, r3, r0, lsl #24
     3c0:	00345808 	eorseq	r5, r4, r8, lsl #16
     3c4:	0001d608 	andeq	sp, r1, r8, lsl #12
     3c8:	37010200 	strcc	r0, [r1, -r0, lsl #4]
     3cc:	01000004 	tsteq	r0, r4
     3d0:	333c0124 	teqcc	ip, #9	; 0x9
     3d4:	333e0800 	teqcc	lr, #0	; 0x0
     3d8:	5d010800 	stcpl	8, cr0, [r1]
     3dc:	02ac0102 	adceq	r0, ip, #-2147483648	; 0x80000000
     3e0:	2f010000 	svccs	0x00010000
     3e4:	00334001 	eorseq	r4, r3, r1
     3e8:	00334208 	eorseq	r4, r3, r8, lsl #4
     3ec:	025d0108 	subseq	r0, sp, #2	; 0x2
     3f0:	00042401 	andeq	r2, r4, r1, lsl #8
     3f4:	013e0100 	teqeq	lr, r0, lsl #2
     3f8:	08003344 	stmdaeq	r0, {r2, r6, r8, r9, ip, sp}
     3fc:	08003346 	stmdaeq	r0, {r1, r2, r6, r8, r9, ip, sp}
     400:	01025d01 	tsteq	r2, r1, lsl #26
     404:	0000023c 	andeq	r0, r0, ip, lsr r2
     408:	48014d01 	stmdami	r1, {r0, r8, sl, fp, lr}
     40c:	4a080033 	bmi	2004e0 <__Stack_Size+0x2000e0>
     410:	01080033 	tsteq	r8, r3, lsr r0
     414:	a401025d 	strge	r0, [r1], #-605
     418:	01000004 	tsteq	r0, r4
     41c:	334c015c 	movtcc	r0, #49500	; 0xc15c
     420:	334e0800 	movtcc	r0, #59392	; 0xe800
     424:	5d010800 	stcpl	8, cr0, [r1]
     428:	03150102 	tsteq	r5, #-2147483648	; 0x80000000
     42c:	6b010000 	blvs	40434 <__Stack_Size+0x40034>
     430:	00335001 	eorseq	r5, r3, r1
     434:	00335208 	eorseq	r5, r3, r8, lsl #4
     438:	025d0108 	subseq	r0, sp, #2	; 0x2
     43c:	0003cd01 	andeq	ip, r3, r1, lsl #26
     440:	01760100 	cmneq	r6, r0, lsl #2
     444:	08003354 	stmdaeq	r0, {r2, r4, r6, r8, r9, ip, sp}
     448:	08003356 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, ip, sp}
     44c:	01025d01 	tsteq	r2, r1, lsl #26
     450:	000006f7 	strdeq	r0, [r0], -r7
     454:	58018101 	stmdapl	r1, {r0, r8, pc}
     458:	5a080033 	bpl	20052c <__Stack_Size+0x20012c>
     45c:	01080033 	tsteq	r8, r3, lsr r0
     460:	b301025d 	movwlt	r0, #4701	; 0x125d
     464:	01000006 	tsteq	r0, r6
     468:	335c0198 	cmpcc	ip, #38	; 0x26
     46c:	335e0800 	cmpcc	lr, #0	; 0x0
     470:	5d010800 	stcpl	8, cr0, [r1]
     474:	029d0102 	addseq	r0, sp, #-2147483648	; 0x80000000
     478:	a3010000 	movwge	r0, #4096	; 0x1000
     47c:	00336001 	eorseq	r6, r3, r1
     480:	00336208 	eorseq	r6, r3, r8, lsl #4
     484:	025d0108 	subseq	r0, sp, #2	; 0x2
     488:	0002d101 	andeq	sp, r2, r1, lsl #2
     48c:	01ae0100 	undefined instruction 0x01ae0100
     490:	08003364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip, sp}
     494:	08003366 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, ip, sp}
     498:	01025d01 	tsteq	r2, r1, lsl #26
     49c:	000003ea 	andeq	r0, r0, sl, ror #7
     4a0:	6801b901 	stmdavs	r1, {r0, r8, fp, ip, sp, pc}
     4a4:	6a080033 	bvs	200578 <__Stack_Size+0x200178>
     4a8:	01080033 	tsteq	r8, r3, lsr r0
     4ac:	9301025d 	movwls	r0, #4701	; 0x125d
     4b0:	01000004 	tsteq	r0, r4
     4b4:	336c01c4 	cmncc	ip, #49	; 0x31
     4b8:	336e0800 	cmncc	lr, #0	; 0x0
     4bc:	5d010800 	stcpl	8, cr0, [r1]
     4c0:	067b0102 	ldrbteq	r0, [fp], -r2, lsl #2
     4c4:	cf010000 	svcgt	0x00010000
     4c8:	00337001 	eorseq	r7, r3, r1
     4cc:	00337208 	eorseq	r7, r3, r8, lsl #4
     4d0:	025d0108 	subseq	r0, sp, #2	; 0x2
     4d4:	00028c01 	andeq	r8, r2, r1, lsl #24
     4d8:	01da0100 	bicseq	r0, sl, r0, lsl #2
     4dc:	08003374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip, sp}
     4e0:	08003376 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, ip, sp}
     4e4:	01025d01 	tsteq	r2, r1, lsl #26
     4e8:	00000554 	andeq	r0, r0, r4, asr r5
     4ec:	7801e501 	stmdavc	r1, {r0, r8, sl, sp, lr, pc}
     4f0:	7a080033 	bvc	2005c4 <__Stack_Size+0x2001c4>
     4f4:	01080033 	tsteq	r8, r3, lsr r0
     4f8:	4e01025d 	mcrmi	2, 0, r0, cr1, cr13, {2}
     4fc:	01000002 	tsteq	r0, r2
     500:	337c01f0 	cmncc	ip, #60	; 0x3c
     504:	337e0800 	cmncc	lr, #0	; 0x0
     508:	5d010800 	stcpl	8, cr0, [r1]
     50c:	04440102 	strbeq	r0, [r4], #-258
     510:	fb010000 	blx	4051a <__Stack_Size+0x4011a>
     514:	00338001 	eorseq	r8, r3, r1
     518:	00338208 	eorseq	r8, r3, r8, lsl #4
     51c:	035d0108 	cmpeq	sp, #2	; 0x2
     520:	0006d301 	andeq	sp, r6, r1, lsl #6
     524:	01060100 	tsteq	r6, r0, lsl #2
     528:	00338401 	eorseq	r8, r3, r1, lsl #8
     52c:	00338608 	eorseq	r8, r3, r8, lsl #12
     530:	035d0108 	cmpeq	sp, #2	; 0x2
     534:	0003b401 	andeq	fp, r3, r1, lsl #8
     538:	01120100 	tsteq	r2, r0, lsl #2
     53c:	00338801 	eorseq	r8, r3, r1, lsl #16
     540:	00338a08 	eorseq	r8, r3, r8, lsl #20
     544:	035d0108 	cmpeq	sp, #2	; 0x2
     548:	00061701 	andeq	r1, r6, r1, lsl #14
     54c:	011d0100 	tsteq	sp, r0, lsl #2
     550:	00338c01 	eorseq	r8, r3, r1, lsl #24
     554:	00338e08 	eorseq	r8, r3, r8, lsl #28
     558:	035d0108 	cmpeq	sp, #2	; 0x2
     55c:	00032201 	andeq	r2, r3, r1, lsl #4
     560:	01280100 	teqeq	r8, r0, lsl #2
     564:	00339001 	eorseq	r9, r3, r1
     568:	00339208 	eorseq	r9, r3, r8, lsl #4
     56c:	035d0108 	cmpeq	sp, #2	; 0x2
     570:	00052b01 	andeq	r2, r5, r1, lsl #22
     574:	01330100 	teqeq	r3, r0, lsl #2
     578:	00339401 	eorseq	r9, r3, r1, lsl #8
     57c:	00339608 	eorseq	r9, r3, r8, lsl #12
     580:	035d0108 	cmpeq	sp, #2	; 0x2
     584:	00075001 	andeq	r5, r7, r1
     588:	013e0100 	teqeq	lr, r0, lsl #2
     58c:	00339801 	eorseq	r9, r3, r1, lsl #16
     590:	00339a08 	eorseq	r9, r3, r8, lsl #20
     594:	035d0108 	cmpeq	sp, #2	; 0x2
     598:	0004df01 	andeq	sp, r4, r1, lsl #30
     59c:	01490100 	cmpeq	r9, r0, lsl #2
     5a0:	00339c01 	eorseq	r9, r3, r1, lsl #24
     5a4:	00339e08 	eorseq	r9, r3, r8, lsl #28
     5a8:	035d0108 	cmpeq	sp, #2	; 0x2
     5ac:	00072601 	andeq	r2, r7, r1, lsl #12
     5b0:	01540100 	cmpeq	r4, r0, lsl #2
     5b4:	0033a001 	eorseq	sl, r3, r1
     5b8:	0033a208 	eorseq	sl, r3, r8, lsl #4
     5bc:	035d0108 	cmpeq	sp, #2	; 0x2
     5c0:	0002bf01 	andeq	fp, r2, r1, lsl #30
     5c4:	01600100 	cmneq	r0, r0, lsl #2
     5c8:	0033a401 	eorseq	sl, r3, r1, lsl #8
     5cc:	0033a608 	eorseq	sl, r3, r8, lsl #12
     5d0:	035d0108 	cmpeq	sp, #2	; 0x2
     5d4:	0005c701 	andeq	ip, r5, r1, lsl #14
     5d8:	016d0100 	cmneq	sp, r0, lsl #2
     5dc:	0033a801 	eorseq	sl, r3, r1, lsl #16
     5e0:	0033aa08 	eorseq	sl, r3, r8, lsl #20
     5e4:	035d0108 	cmpeq	sp, #2	; 0x2
     5e8:	0005ad01 	andeq	sl, r5, r1, lsl #26
     5ec:	01790100 	cmneq	r9, r0, lsl #2
     5f0:	0033ac01 	eorseq	sl, r3, r1, lsl #24
     5f4:	0033ae08 	eorseq	sl, r3, r8, lsl #28
     5f8:	035d0108 	cmpeq	sp, #2	; 0x2
     5fc:	0002f301 	andeq	pc, r2, r1, lsl #6
     600:	01840100 	orreq	r0, r4, r0, lsl #2
     604:	0033b001 	eorseq	fp, r3, r1
     608:	0033b208 	eorseq	fp, r3, r8, lsl #4
     60c:	035d0108 	cmpeq	sp, #2	; 0x2
     610:	00051801 	andeq	r1, r5, r1, lsl #16
     614:	018f0100 	orreq	r0, pc, r0, lsl #2
     618:	0033b401 	eorseq	fp, r3, r1, lsl #8
     61c:	0033b608 	eorseq	fp, r3, r8, lsl #12
     620:	035d0108 	cmpeq	sp, #2	; 0x2
     624:	0006e401 	andeq	lr, r6, r1, lsl #8
     628:	019a0100 	orrseq	r0, sl, r0, lsl #2
     62c:	0033b801 	eorseq	fp, r3, r1, lsl #16
     630:	0033ba08 	eorseq	fp, r3, r8, lsl #20
     634:	035d0108 	cmpeq	sp, #2	; 0x2
     638:	00027801 	andeq	r7, r2, r1, lsl #16
     63c:	01a50100 	undefined instruction 0x01a50100
     640:	0033bc01 	eorseq	fp, r3, r1, lsl #24
     644:	0033be08 	eorseq	fp, r3, r8, lsl #28
     648:	035d0108 	cmpeq	sp, #2	; 0x2
     64c:	00033b01 	andeq	r3, r3, r1, lsl #22
     650:	01b10100 	undefined instruction 0x01b10100
     654:	0033c001 	eorseq	ip, r3, r1
     658:	0033c208 	eorseq	ip, r3, r8, lsl #4
     65c:	035d0108 	cmpeq	sp, #2	; 0x2
     660:	00066301 	andeq	r6, r6, r1, lsl #6
     664:	01bd0100 	undefined instruction 0x01bd0100
     668:	0033c401 	eorseq	ip, r3, r1, lsl #8
     66c:	0033c608 	eorseq	ip, r3, r8, lsl #12
     670:	035d0108 	cmpeq	sp, #2	; 0x2
     674:	00036101 	andeq	r6, r3, r1, lsl #2
     678:	01c80100 	biceq	r0, r8, r0, lsl #2
     67c:	0033c801 	eorseq	ip, r3, r1, lsl #16
     680:	0033ca08 	eorseq	ip, r3, r8, lsl #20
     684:	035d0108 	cmpeq	sp, #2	; 0x2
     688:	0002e301 	andeq	lr, r2, r1, lsl #6
     68c:	01d30100 	bicseq	r0, r3, r0, lsl #2
     690:	0033cc01 	eorseq	ip, r3, r1, lsl #24
     694:	0033ce08 	eorseq	ip, r3, r8, lsl #28
     698:	035d0108 	cmpeq	sp, #2	; 0x2
     69c:	00050801 	andeq	r0, r5, r1, lsl #16
     6a0:	01df0100 	bicseq	r0, pc, r0, lsl #2
     6a4:	0033d001 	eorseq	sp, r3, r1
     6a8:	0033d208 	eorseq	sp, r3, r8, lsl #4
     6ac:	035d0108 	cmpeq	sp, #2	; 0x2
     6b0:	00065301 	andeq	r5, r6, r1, lsl #6
     6b4:	01eb0100 	mvneq	r0, r0, lsl #2
     6b8:	0033d401 	eorseq	sp, r3, r1, lsl #8
     6bc:	0033d608 	eorseq	sp, r3, r8, lsl #12
     6c0:	035d0108 	cmpeq	sp, #2	; 0x2
     6c4:	0004b801 	andeq	fp, r4, r1, lsl #16
     6c8:	01f70100 	mvnseq	r0, r0, lsl #2
     6cc:	0033d801 	eorseq	sp, r3, r1, lsl #16
     6d0:	0033da08 	eorseq	sp, r3, r8, lsl #20
     6d4:	035d0108 	cmpeq	sp, #2	; 0x2
     6d8:	0005e001 	andeq	lr, r5, r1
     6dc:	02020100 	andeq	r0, r2, #0	; 0x0
     6e0:	0033dc01 	eorseq	sp, r3, r1, lsl #24
     6e4:	0033de08 	eorseq	sp, r3, r8, lsl #28
     6e8:	035d0108 	cmpeq	sp, #2	; 0x2
     6ec:	00057501 	andeq	r7, r5, r1, lsl #10
     6f0:	020d0100 	andeq	r0, sp, #0	; 0x0
     6f4:	0033e001 	eorseq	lr, r3, r1
     6f8:	0033e208 	eorseq	lr, r3, r8, lsl #4
     6fc:	035d0108 	cmpeq	sp, #2	; 0x2
     700:	00058801 	andeq	r8, r5, r1, lsl #16
     704:	02180100 	andseq	r0, r8, #0	; 0x0
     708:	0033e401 	eorseq	lr, r3, r1, lsl #8
     70c:	0033e608 	eorseq	lr, r3, r8, lsl #12
     710:	035d0108 	cmpeq	sp, #2	; 0x2
     714:	0005f301 	andeq	pc, r5, r1, lsl #6
     718:	02230100 	eoreq	r0, r3, #0	; 0x0
     71c:	0033e801 	eorseq	lr, r3, r1, lsl #16
     720:	0033ea08 	eorseq	lr, r3, r8, lsl #20
     724:	035d0108 	cmpeq	sp, #2	; 0x2
     728:	0006c301 	andeq	ip, r6, r1, lsl #6
     72c:	022e0100 	eoreq	r0, lr, #0	; 0x0
     730:	0033ec01 	eorseq	lr, r3, r1, lsl #24
     734:	0033ee08 	eorseq	lr, r3, r8, lsl #28
     738:	035d0108 	cmpeq	sp, #2	; 0x2
     73c:	00059b01 	andeq	r9, r5, r1, lsl #22
     740:	02390100 	eorseq	r0, r9, #0	; 0x0
     744:	0033f001 	eorseq	pc, r3, r1
     748:	0033f208 	eorseq	pc, r3, r8, lsl #4
     74c:	035d0108 	cmpeq	sp, #2	; 0x2
     750:	00064101 	andeq	r4, r6, r1, lsl #2
     754:	02440100 	subeq	r0, r4, #0	; 0x0
     758:	0033f401 	eorseq	pc, r3, r1, lsl #8
     75c:	0033f608 	eorseq	pc, r3, r8, lsl #12
     760:	035d0108 	cmpeq	sp, #2	; 0x2
     764:	0003d801 	andeq	sp, r3, r1, lsl #16
     768:	024f0100 	subeq	r0, pc, #0	; 0x0
     76c:	0033f801 	eorseq	pc, r3, r1, lsl #16
     770:	0033fa08 	eorseq	pc, r3, r8, lsl #20
     774:	035d0108 	cmpeq	sp, #2	; 0x2
     778:	00038701 	andeq	r8, r3, r1, lsl #14
     77c:	025b0100 	subseq	r0, fp, #0	; 0x0
     780:	0033fc01 	eorseq	pc, r3, r1, lsl #24
     784:	0033fe08 	eorseq	pc, r3, r8, lsl #28
     788:	035d0108 	cmpeq	sp, #2	; 0x2
     78c:	0004cb01 	andeq	ip, r4, r1, lsl #22
     790:	02670100 	rsbeq	r0, r7, #0	; 0x0
     794:	00340001 	eorseq	r0, r4, r1
     798:	00340208 	eorseq	r0, r4, r8, lsl #4
     79c:	035d0108 	cmpeq	sp, #2	; 0x2
     7a0:	00046e01 	andeq	r6, r4, r1, lsl #28
     7a4:	02720100 	rsbseq	r0, r2, #0	; 0x0
     7a8:	00340401 	eorseq	r0, r4, r1, lsl #8
     7ac:	00340608 	eorseq	r0, r4, r8, lsl #12
     7b0:	035d0108 	cmpeq	sp, #2	; 0x2
     7b4:	00060301 	andeq	r0, r6, r1, lsl #6
     7b8:	027d0100 	rsbseq	r0, sp, #0	; 0x0
     7bc:	00340801 	eorseq	r0, r4, r1, lsl #16
     7c0:	00340a08 	eorseq	r0, r4, r8, lsl #20
     7c4:	035d0108 	cmpeq	sp, #2	; 0x2
     7c8:	00034e01 	andeq	r4, r3, r1, lsl #28
     7cc:	02890100 	addeq	r0, r9, #0	; 0x0
     7d0:	00340c01 	eorseq	r0, r4, r1, lsl #24
     7d4:	00340e08 	eorseq	r0, r4, r8, lsl #28
     7d8:	035d0108 	cmpeq	sp, #2	; 0x2
     7dc:	00039c01 	andeq	r9, r3, r1, lsl #24
     7e0:	02950100 	addseq	r0, r5, #0	; 0x0
     7e4:	00341001 	eorseq	r1, r4, r1
     7e8:	00341208 	eorseq	r1, r4, r8, lsl #4
     7ec:	035d0108 	cmpeq	sp, #2	; 0x2
     7f0:	00037401 	andeq	r7, r3, r1, lsl #8
     7f4:	02a00100 	adceq	r0, r0, #0	; 0x0
     7f8:	00341401 	eorseq	r1, r4, r1, lsl #8
     7fc:	00341608 	eorseq	r1, r4, r8, lsl #12
     800:	035d0108 	cmpeq	sp, #2	; 0x2
     804:	00056501 	andeq	r6, r5, r1, lsl #10
     808:	02ab0100 	adceq	r0, fp, #0	; 0x0
     80c:	00341801 	eorseq	r1, r4, r1, lsl #16
     810:	00341a08 	eorseq	r1, r4, r8, lsl #20
     814:	035d0108 	cmpeq	sp, #2	; 0x2
     818:	00054401 	andeq	r4, r5, r1, lsl #8
     81c:	02b60100 	adcseq	r0, r6, #0	; 0x0
     820:	00341c01 	eorseq	r1, r4, r1, lsl #24
     824:	00341e08 	eorseq	r1, r4, r8, lsl #28
     828:	035d0108 	cmpeq	sp, #2	; 0x2
     82c:	00048301 	andeq	r8, r4, r1, lsl #6
     830:	02c10100 	sbceq	r0, r1, #0	; 0x0
     834:	00342001 	eorseq	r2, r4, r1
     838:	00342208 	eorseq	r2, r4, r8, lsl #4
     83c:	035d0108 	cmpeq	sp, #2	; 0x2
     840:	0003f901 	andeq	pc, r3, r1, lsl #18
     844:	02cc0100 	sbceq	r0, ip, #0	; 0x0
     848:	00342401 	eorseq	r2, r4, r1, lsl #8
     84c:	00342608 	eorseq	r2, r4, r8, lsl #12
     850:	035d0108 	cmpeq	sp, #2	; 0x2
     854:	0004f801 	andeq	pc, r4, r1, lsl #16
     858:	02d80100 	sbcseq	r0, r8, #0	; 0x0
     85c:	00342801 	eorseq	r2, r4, r1, lsl #16
     860:	00342a08 	eorseq	r2, r4, r8, lsl #20
     864:	035d0108 	cmpeq	sp, #2	; 0x2
     868:	00063001 	andeq	r3, r6, r1
     86c:	02e30100 	rsceq	r0, r3, #0	; 0x0
     870:	00342c01 	eorseq	r2, r4, r1, lsl #24
     874:	00342e08 	eorseq	r2, r4, r8, lsl #28
     878:	035d0108 	cmpeq	sp, #2	; 0x2
     87c:	00073f01 	andeq	r3, r7, r1, lsl #30
     880:	02ee0100 	rsceq	r0, lr, #0	; 0x0
     884:	00343001 	eorseq	r3, r4, r1
     888:	00343208 	eorseq	r3, r4, r8, lsl #4
     88c:	035d0108 	cmpeq	sp, #2	; 0x2
     890:	0006ff01 	andeq	pc, r6, r1, lsl #30
     894:	02fb0100 	rscseq	r0, fp, #0	; 0x0
     898:	00343401 	eorseq	r3, r4, r1, lsl #8
     89c:	00343608 	eorseq	r3, r4, r8, lsl #12
     8a0:	035d0108 	cmpeq	sp, #2	; 0x2
     8a4:	0006a301 	andeq	sl, r6, r1, lsl #6
     8a8:	03060100 	movweq	r0, #24832	; 0x6100
     8ac:	00343801 	eorseq	r3, r4, r1, lsl #16
     8b0:	00343a08 	eorseq	r3, r4, r8, lsl #20
     8b4:	035d0108 	cmpeq	sp, #2	; 0x2
     8b8:	00068a01 	andeq	r8, r6, r1, lsl #20
     8bc:	03110100 	tsteq	r1, #0	; 0x0
     8c0:	00343c01 	eorseq	r3, r4, r1, lsl #24
     8c4:	00343e08 	eorseq	r3, r4, r8, lsl #28
     8c8:	035d0108 	cmpeq	sp, #2	; 0x2
     8cc:	00025f01 	andeq	r5, r2, r1, lsl #30
     8d0:	031c0100 	tsteq	ip, #0	; 0x0
     8d4:	00344001 	eorseq	r4, r4, r1
     8d8:	00344208 	eorseq	r4, r4, r8, lsl #4
     8dc:	035d0108 	cmpeq	sp, #2	; 0x2
     8e0:	00045501 	andeq	r5, r4, r1, lsl #10
     8e4:	03270100 	teqeq	r7, #0	; 0x0
     8e8:	00344401 	eorseq	r4, r4, r1, lsl #8
     8ec:	00344608 	eorseq	r4, r4, r8, lsl #12
     8f0:	035d0108 	cmpeq	sp, #2	; 0x2
     8f4:	00040901 	andeq	r0, r4, r1, lsl #18
     8f8:	03330100 	teqeq	r3, #0	; 0x0
     8fc:	00344801 	eorseq	r4, r4, r1, lsl #16
     900:	00344a08 	eorseq	r4, r4, r8, lsl #20
     904:	045d0108 	ldrbeq	r0, [sp], #-264
     908:	00030601 	andeq	r0, r3, r1, lsl #12
     90c:	018c0100 	orreq	r0, ip, r0, lsl #2
     910:	0800344c 	stmdaeq	r0, {r2, r3, r6, sl, ip, sp}
     914:	08003458 	stmdaeq	r0, {r3, r4, r6, sl, ip, sp}
     918:	00000114 	andeq	r0, r0, r4, lsl r1
     91c:	00073600 	andeq	r3, r7, r0, lsl #12
     920:	f6000200 	undefined instruction 0xf6000200
     924:	04000001 	streq	r0, [r0], #-1
     928:	0000f101 	andeq	pc, r0, r1, lsl #2
     92c:	08fe0100 	ldmeq	lr!, {r8}^
     930:	004b0000 	subeq	r0, fp, r0
     934:	34580000 	ldrbcc	r0, [r8]
     938:	39800800 	stmibcc	r0, {fp}
     93c:	032b0800 	teqeq	fp, #0	; 0x0
     940:	04020000 	streq	r0, [r2]
     944:	00186105 	andseq	r6, r8, r5, lsl #2
     948:	05020200 	streq	r0, [r2, #-512]
     94c:	000001b2 	strheq	r0, [r0], -r2
     950:	0f060102 	svceq	0x00060102
     954:	03000001 	movweq	r0, #1	; 0x1
     958:	00323375 	eorseq	r3, r2, r5, ror r3
     95c:	00452702 	subeq	r2, r5, r2, lsl #14
     960:	04020000 	streq	r0, [r2]
     964:	0018db07 	andseq	sp, r8, r7, lsl #22
     968:	31750300 	cmncc	r5, r0, lsl #6
     96c:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
     970:	00000057 	andeq	r0, r0, r7, asr r0
     974:	93070202 	movwls	r0, #29186	; 0x7202
     978:	03000000 	movweq	r0, #0	; 0x0
     97c:	02003875 	andeq	r3, r0, #7667712	; 0x750000
     980:	00006829 	andeq	r6, r0, r9, lsr #16
     984:	08010200 	stmdaeq	r1, {r9}
     988:	0000010d 	andeq	r0, r0, sp, lsl #2
     98c:	00004504 	andeq	r4, r0, r4, lsl #10
     990:	00570400 	subseq	r0, r7, r0, lsl #8
     994:	01050000 	tsteq	r5, r0
     998:	008e3902 	addeq	r3, lr, r2, lsl #18
     99c:	6d060000 	stcvs	0, cr0, [r6]
     9a0:	0000000b 	andeq	r0, r0, fp
     9a4:	54455307 	strbpl	r5, [r5], #-775
     9a8:	08000100 	stmdaeq	r0, {r8}
     9ac:	0000155f 	andeq	r1, r0, pc, asr r5
     9b0:	00793902 	rsbseq	r3, r9, r2, lsl #18
     9b4:	01050000 	tsteq	r5, r0
     9b8:	00ae3b02 	adceq	r3, lr, r2, lsl #22
     9bc:	12060000 	andne	r0, r6, #0	; 0x0
     9c0:	00000002 	andeq	r0, r0, r2
     9c4:	0000c506 	andeq	ip, r0, r6, lsl #10
     9c8:	08000100 	stmdaeq	r0, {r8}
     9cc:	00000a8d 	andeq	r0, r0, sp, lsl #21
     9d0:	00993b02 	addseq	r3, r9, r2, lsl #22
     9d4:	04090000 	streq	r0, [r9]
     9d8:	03240a07 	teqeq	r4, #28672	; 0x7000
     9dc:	014a010d 	cmpeq	sl, sp, lsl #2
     9e0:	410b0000 	tstmi	fp, r0
     9e4:	03005243 	movweq	r5, #579	; 0x243
     9e8:	006f010e 	rsbeq	r0, pc, lr, lsl #2
     9ec:	23020000 	movwcs	r0, #8192	; 0x2000
     9f0:	087f0c00 	ldmdaeq	pc!, {sl, fp}^
     9f4:	0f030000 	svceq	0x00030000
     9f8:	00006f01 	andeq	r6, r0, r1, lsl #30
     9fc:	04230200 	strteq	r0, [r3], #-512
     a00:	00087c0c 	andeq	r7, r8, ip, lsl #24
     a04:	01100300 	tsteq	r0, r0, lsl #6
     a08:	0000006f 	andeq	r0, r0, pc, rrx
     a0c:	0b082302 	bleq	20961c <__Stack_Size+0x20921c>
     a10:	03005253 	movweq	r5, #595	; 0x253
     a14:	006f0111 	rsbeq	r0, pc, r1, lsl r1
     a18:	23020000 	movwcs	r0, #8192	; 0x2000
     a1c:	52430b0c 	subpl	r0, r3, #12288	; 0x3000
     a20:	01120300 	tsteq	r2, r0, lsl #6
     a24:	0000006f 	andeq	r0, r0, pc, rrx
     a28:	0b102302 	bleq	409638 <__Stack_Size+0x409238>
     a2c:	03005241 	movweq	r5, #577	; 0x241
     a30:	006f0113 	rsbeq	r0, pc, r3, lsl r1
     a34:	23020000 	movwcs	r0, #8192	; 0x2000
     a38:	0ad50c14 	beq	ff543a90 <SCS_BASE+0x1f535a90>
     a3c:	14030000 	strne	r0, [r3]
     a40:	00006f01 	andeq	r6, r0, r1, lsl #30
     a44:	18230200 	stmdane	r3!, {r9}
     a48:	52424f0b 	subpl	r4, r2, #44	; 0x2c
     a4c:	01150300 	tsteq	r5, r0, lsl #6
     a50:	0000006f 	andeq	r0, r0, pc, rrx
     a54:	0c1c2302 	ldceq	3, cr2, [ip], {2}
     a58:	00000803 	andeq	r0, r0, r3, lsl #16
     a5c:	6f011603 	svcvs	0x00011603
     a60:	02000000 	andeq	r0, r0, #0	; 0x0
     a64:	0a002023 	beq	8af8 <__Stack_Size+0x86f8>
     a68:	011a0310 	tsteq	sl, r0, lsl r3
     a6c:	000001cc 	andeq	r0, r0, ip, asr #3
     a70:	5044520b 	subpl	r5, r4, fp, lsl #4
     a74:	011b0300 	tsteq	fp, r0, lsl #6
     a78:	00000074 	andeq	r0, r0, r4, ror r0
     a7c:	0c002302 	stceq	3, cr2, [r0], {2}
     a80:	00000a9d 	muleq	r0, sp, sl
     a84:	74011c03 	strvc	r1, [r1], #-3075
     a88:	02000000 	andeq	r0, r0, #0	; 0x0
     a8c:	a20c0223 	andge	r0, ip, #805306370	; 0x30000002
     a90:	0300000a 	movweq	r0, #10	; 0xa
     a94:	0074011d 	rsbseq	r0, r4, sp, lsl r1
     a98:	23020000 	movwcs	r0, #8192	; 0x2000
     a9c:	0aa80c04 	beq	fea03ab4 <SCS_BASE+0x1e9f5ab4>
     aa0:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
     aa4:	00007401 	andeq	r7, r0, r1, lsl #8
     aa8:	06230200 	strteq	r0, [r3], -r0, lsl #4
     aac:	0008450c 	andeq	r4, r8, ip, lsl #10
     ab0:	011f0300 	tsteq	pc, r0, lsl #6
     ab4:	00000074 	andeq	r0, r0, r4, ror r0
     ab8:	0c082302 	stceq	3, cr2, [r8], {2}
     abc:	0000084a 	andeq	r0, r0, sl, asr #16
     ac0:	74012003 	strvc	r2, [r1], #-3
     ac4:	02000000 	andeq	r0, r0, #0	; 0x0
     ac8:	4f0c0a23 	svcmi	0x000c0a23
     acc:	03000008 	movweq	r0, #8	; 0x8
     ad0:	00740121 	rsbseq	r0, r4, r1, lsr #2
     ad4:	23020000 	movwcs	r0, #8192	; 0x2000
     ad8:	08540c0c 	ldmdaeq	r4, {r2, r3, sl, fp}^
     adc:	22030000 	andcs	r0, r3, #0	; 0x0
     ae0:	00007401 	andeq	r7, r0, r1, lsl #8
     ae4:	0e230200 	cdpeq	2, 2, cr0, cr3, cr0, {0}
     ae8:	04010500 	streq	r0, [r1], #-1280
     aec:	0001f31d 	andeq	pc, r1, sp, lsl r3
     af0:	096d0600 	stmdbeq	sp!, {r9, sl}^
     af4:	06010000 	streq	r0, [r1], -r0
     af8:	000008da 	ldrdeq	r0, [r0], -sl
     afc:	07b70602 	ldreq	r0, [r7, r2, lsl #12]!
     b00:	06030000 	streq	r0, [r3], -r0
     b04:	0000095e 	andeq	r0, r0, lr, asr r9
     b08:	09820604 	stmibeq	r2, {r2, r9, sl}
     b0c:	00050000 	andeq	r0, r5, r0
     b10:	00082f08 	andeq	r2, r8, r8, lsl #30
     b14:	cc230400 	cfstrsgt	mvf0, [r3]
     b18:	0d000001 	stceq	0, cr0, [r0, #-4]
     b1c:	0009e201 	andeq	lr, r9, r1, lsl #4
     b20:	03400100 	movteq	r0, #256	; 0x100
     b24:	0001f301 	andeq	pc, r1, r1, lsl #6
     b28:	021e0100 	andseq	r0, lr, #0	; 0x0
     b2c:	b70e0000 	strlt	r0, [lr, -r0]
     b30:	01000008 	tsteq	r0, r8
     b34:	01f30341 	mvnseq	r0, r1, asr #6
     b38:	0f000000 	svceq	0x00000000
     b3c:	00000829 	andeq	r0, r0, r9, lsr #16
     b40:	01038601 	tsteq	r3, r1, lsl #12
     b44:	00023701 	andeq	r3, r2, r1, lsl #14
     b48:	00691000 	rsbeq	r1, r9, r0
     b4c:	6f038701 	svcvs	0x00038701
     b50:	00000000 	andeq	r0, r0, r0
     b54:	0a0e0111 	beq	380fa0 <__Stack_Size+0x380ba0>
     b58:	57010000 	strpl	r0, [r1, -r0]
     b5c:	00345801 	eorseq	r5, r4, r1, lsl #16
     b60:	00347008 	eorseq	r7, r4, r8
     b64:	5e5d0108 	rdfple	f0, f5, #0.0
     b68:	12000002 	andne	r0, r0, #2	; 0x2
     b6c:	000007d7 	ldrdeq	r0, [r0], -r7
     b70:	003a5601 	eorseq	r5, sl, r1, lsl #12
     b74:	013f0000 	teqeq	pc, r0
     b78:	11000000 	tstne	r0, r0
     b7c:	000a1f01 	andeq	r1, sl, r1, lsl #30
     b80:	016b0100 	cmneq	fp, r0, lsl #2
     b84:	08003470 	stmdaeq	r0, {r4, r5, r6, sl, ip, sp}
     b88:	08003488 	stmdaeq	r0, {r3, r7, sl, ip, sp}
     b8c:	02855d01 	addeq	r5, r5, #64	; 0x40
     b90:	cc120000 	ldcgt	0, cr0, [r2], {0}
     b94:	01000009 	tsteq	r0, r9
     b98:	00003a6a 	andeq	r3, r0, sl, ror #20
     b9c:	00015200 	andeq	r5, r1, r0, lsl #4
     ba0:	01110000 	tsteq	r1, r0
     ba4:	00000922 	andeq	r0, r0, r2, lsr #18
     ba8:	88017f01 	stmdahi	r1, {r0, r8, r9, sl, fp, ip, sp, lr}
     bac:	a0080034 	andge	r0, r8, r4, lsr r0
     bb0:	01080034 	tsteq	r8, r4, lsr r0
     bb4:	0002ac5d 	andeq	sl, r2, sp, asr ip
     bb8:	0af91200 	beq	ffe453c0 <SCS_BASE+0x1fe373c0>
     bbc:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
     bc0:	0000003a 	andeq	r0, r0, sl, lsr r0
     bc4:	00000165 	andeq	r0, r0, r5, ror #2
     bc8:	08011300 	stmdaeq	r1, {r8, r9, ip}
     bcc:	01000008 	tsteq	r0, r8
     bd0:	34a00191 	strtcc	r0, [r0], #401
     bd4:	34b80800 	ldrtcc	r0, [r8], #2048
     bd8:	5d010800 	stcpl	8, cr0, [r1]
     bdc:	08e90113 	stmiaeq	r9!, {r0, r1, r4, r8}^
     be0:	9f010000 	svcls	0x00010000
     be4:	0034b801 	eorseq	fp, r4, r1, lsl #16
     be8:	0034c808 	eorseq	ip, r4, r8, lsl #16
     bec:	145d0108 	ldrbne	r0, [sp], #-264
     bf0:	000a5401 	andeq	r5, sl, r1, lsl #8
     bf4:	02970100 	addseq	r0, r7, #0	; 0x0
     bf8:	00003a01 	andeq	r3, r0, r1, lsl #20
     bfc:	0034c800 	eorseq	ip, r4, r0, lsl #16
     c00:	0034d408 	eorseq	sp, r4, r8, lsl #8
     c04:	145d0108 	ldrbne	r0, [sp], #-264
     c08:	00085901 	andeq	r5, r8, r1, lsl #18
     c0c:	02a40100 	adceq	r0, r4, #0	; 0x0
     c10:	00003a01 	andeq	r3, r0, r1, lsl #20
     c14:	0034d400 	eorseq	sp, r4, r0, lsl #8
     c18:	0034e008 	eorseq	lr, r4, r8
     c1c:	155d0108 	ldrbne	r0, [sp, #-264]
     c20:	00099801 	andeq	r9, r9, r1, lsl #16
     c24:	02b20100 	adcseq	r0, r2, #0	; 0x0
     c28:	00008e01 	andeq	r8, r0, r1, lsl #28
     c2c:	0034e000 	eorseq	lr, r4, r0
     c30:	0034f008 	eorseq	pc, r4, r8
     c34:	2b5d0108 	blcs	174105c <__Stack_Size+0x1740c5c>
     c38:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     c3c:	000007a9 	andeq	r0, r0, r9, lsr #15
     c40:	8e02b301 	cdphi	3, 0, cr11, cr2, cr1, {0}
     c44:	00000000 	andeq	r0, r0, r0
     c48:	07e50115 	undefined
     c4c:	c8010000 	stmdagt	r1, {}
     c50:	008e0102 	addeq	r0, lr, r2, lsl #2
     c54:	34f00000 	ldrbtcc	r0, [r0]
     c58:	35000800 	strcc	r0, [r0, #-2048]
     c5c:	5d010800 	stcpl	8, cr0, [r1]
     c60:	00000354 	andeq	r0, r0, r4, asr r3
     c64:	0008c30e 	andeq	ip, r8, lr, lsl #6
     c68:	02c90100 	sbceq	r0, r9, #0	; 0x0
     c6c:	0000008e 	andeq	r0, r0, lr, lsl #1
     c70:	69011600 	stmdbvs	r1, {r9, sl, ip}
     c74:	01000007 	tsteq	r0, r7
     c78:	000102e3 	andeq	r0, r1, r3, ror #5
     c7c:	1c080035 	stcne	0, cr0, [r8], {53}
     c80:	01080035 	tsteq	r8, r5, lsr r0
     c84:	0003895d 	andeq	r8, r3, sp, asr r9
     c88:	0aba1700 	beq	fee86890 <SCS_BASE+0x1ee78890>
     c8c:	e2010000 	and	r0, r1, #0	; 0x0
     c90:	00004c02 	andeq	r4, r0, r2, lsl #24
     c94:	17500100 	ldrbne	r0, [r0, -r0, lsl #2]
     c98:	0000083c 	andeq	r0, r0, ip, lsr r8
     c9c:	ae02e201 	cdpge	2, 0, cr14, cr2, cr1, {0}
     ca0:	01000000 	tsteq	r0, r0
     ca4:	01150051 	tsteq	r5, r1, asr r0
     ca8:	0000093a 	andeq	r0, r0, sl, lsr r9
     cac:	01030201 	tsteq	r3, r1, lsl #4
     cb0:	0000008e 	andeq	r0, r0, lr, lsl #1
     cb4:	0800351c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip, sp}
     cb8:	0800353c 	stmdaeq	r0, {r2, r3, r4, r5, r8, sl, ip, sp}
     cbc:	03c65d01 	biceq	r5, r6, #64	; 0x40
     cc0:	82180000 	andshi	r0, r8, #0	; 0x0
     cc4:	0100000a 	tsteq	r0, sl
     cc8:	004c0301 	subeq	r0, ip, r1, lsl #6
     ccc:	01780000 	cmneq	r8, r0
     cd0:	c3190000 	tstgt	r9, #0	; 0x0
     cd4:	01000008 	tsteq	r0, r8
     cd8:	008e0303 	addeq	r0, lr, r3, lsl #6
     cdc:	01960000 	orrseq	r0, r6, r0
     ce0:	16000000 	strne	r0, [r0], -r0
     ce4:	00094e01 	andeq	r4, r9, r1, lsl #28
     ce8:	032f0100 	teqeq	pc, #0	; 0x0
     cec:	00353c01 	eorseq	r3, r5, r1, lsl #24
     cf0:	00354808 	eorseq	r4, r5, r8, lsl #16
     cf4:	ed5d0108 	ldfe	f0, [sp, #-32]
     cf8:	17000003 	strne	r0, [r0, -r3]
     cfc:	00000a82 	andeq	r0, r0, r2, lsl #21
     d00:	4c032e01 	stcmi	14, cr2, [r3], {1}
     d04:	01000000 	tsteq	r0, r0
     d08:	fe1a0050 	mrc2	0, 0, r0, cr10, cr0, {2}
     d0c:	48000001 	stmdami	r0, {r0}
     d10:	74080035 	strvc	r0, [r8], #-53
     d14:	01080035 	tsteq	r8, r5, lsr r0
     d18:	00040a5d 	andeq	r0, r4, sp, asr sl
     d1c:	02111b00 	andseq	r1, r1, #0	; 0x0
     d20:	01b40000 	undefined instruction 0x01b40000
     d24:	1c000000 	stcne	0, cr0, [r0], {0}
     d28:	000ade01 	andeq	sp, sl, r1, lsl #28
     d2c:	03670100 	cmneq	r7, #0	; 0x0
     d30:	0001f301 	andeq	pc, r1, r1, lsl #6
     d34:	00357400 	eorseq	r7, r5, r0, lsl #8
     d38:	00360808 	eorseq	r0, r6, r8, lsl #16
     d3c:	0001dd08 	andeq	sp, r1, r8, lsl #26
     d40:	00049d00 	andeq	r9, r4, r0, lsl #26
     d44:	09901800 	ldmibeq	r0, {fp, ip}
     d48:	66010000 	strvs	r0, [r1], -r0
     d4c:	00003a03 	andeq	r3, r0, r3, lsl #20
     d50:	00020800 	andeq	r0, r2, r0, lsl #16
     d54:	08bc1900 	ldmeq	ip!, {r8, fp, ip}
     d58:	68010000 	stmdavs	r1, {}
     d5c:	0001f303 	andeq	pc, r1, r3, lsl #6
     d60:	00022600 	andeq	r2, r2, r0, lsl #12
     d64:	01fe1d00 	mvnseq	r1, r0, lsl #26
     d68:	00200000 	eoreq	r0, r0, r0
     d6c:	6b010000 	blvs	40d74 <__Stack_Size+0x40974>
     d70:	00046403 	andeq	r6, r4, r3, lsl #8
     d74:	00401e00 	subeq	r1, r0, r0, lsl #28
     d78:	111f0000 	tstne	pc, r0
     d7c:	00000002 	andeq	r0, r0, r2
     d80:	021e1d00 	andseq	r1, lr, #0	; 0x0
     d84:	00600000 	rsbeq	r0, r0, r0
     d88:	70010000 	andvc	r0, r1, r0
     d8c:	00048403 	andeq	r8, r4, r3, lsl #8
     d90:	00781e00 	rsbseq	r1, r8, r0, lsl #28
     d94:	2c1b0000 	ldccs	0, cr0, [fp], {0}
     d98:	4f000002 	svcmi	0x00000002
     d9c:	00000002 	andeq	r0, r0, r2
     da0:	01fe2000 	mvnseq	r2, r0
     da4:	00900000 	addseq	r0, r0, r0
     da8:	71010000 	tstvc	r1, r0
     dac:	00a81e03 	adceq	r1, r8, r3, lsl #28
     db0:	111f0000 	tstne	pc, r0
     db4:	00000002 	andeq	r0, r0, r2
     db8:	011c0000 	tsteq	ip, r0
     dbc:	00000884 	andeq	r0, r0, r4, lsl #17
     dc0:	01026b01 	tsteq	r2, r1, lsl #22
     dc4:	000001f3 	strdeq	r0, [r0], -r3
     dc8:	08003608 	stmdaeq	r0, {r3, r9, sl, ip, sp}
     dcc:	08003664 	stmdaeq	r0, {r2, r5, r6, r9, sl, ip, sp}
     dd0:	0000029f 	muleq	r0, pc, r2
     dd4:	000004fc 	strdeq	r0, [r0], -ip
     dd8:	00077818 	andeq	r7, r7, r8, lsl r8
     ddc:	026a0100 	rsbeq	r0, sl, #0	; 0x0
     de0:	0000004c 	andeq	r0, r0, ip, asr #32
     de4:	000002ca 	andeq	r0, r0, sl, asr #5
     de8:	00078a18 	andeq	r8, r7, r8, lsl sl
     dec:	026a0100 	rsbeq	r0, sl, #0	; 0x0
     df0:	0000004c 	andeq	r0, r0, ip, asr #32
     df4:	000002e8 	andeq	r0, r0, r8, ror #5
     df8:	0009b918 	andeq	fp, r9, r8, lsl r9
     dfc:	026a0100 	rsbeq	r0, sl, #0	; 0x0
     e00:	0000004c 	andeq	r0, r0, ip, asr #32
     e04:	00000306 	andeq	r0, r0, r6, lsl #6
     e08:	0008bc19 	andeq	fp, r8, r9, lsl ip
     e0c:	026c0100 	rsbeq	r0, ip, #0	; 0x0
     e10:	000001f3 	strdeq	r0, [r0], -r3
     e14:	00000324 	andeq	r0, r0, r4, lsr #6
     e18:	9f011c00 	svcls	0x00011c00
     e1c:	01000008 	tsteq	r0, r8
     e20:	f301021a 	vqsub.u8	d0, d1, d10
     e24:	64000001 	strvs	r0, [r0], #-1
     e28:	00080036 	andeq	r0, r8, r6, lsr r0
     e2c:	42080037 	andmi	r0, r8, #55	; 0x37
     e30:	3b000003 	blcc	e44 <__Stack_Size+0xa44>
     e34:	18000005 	stmdane	r0, {r0, r2}
     e38:	0000083c 	andeq	r0, r0, ip, lsr r8
     e3c:	ae021901 	cdpge	9, 0, cr1, cr2, cr1, {0}
     e40:	6d000000 	stcvs	0, cr0, [r0]
     e44:	19000003 	stmdbne	r0, {r0, r1}
     e48:	000008bc 	strheq	r0, [r0], -ip
     e4c:	f3021b01 	vqrdmulh.s<illegal width 8>	d1, d2, d1
     e50:	8b000001 	blhi	e5c <__Stack_Size+0xa5c>
     e54:	00000003 	andeq	r0, r0, r3
     e58:	09f2011c 	ldmibeq	r2!, {r2, r3, r4, r8}^
     e5c:	cb010000 	blgt	40e64 <__Stack_Size+0x40a64>
     e60:	01f30101 	mvnseq	r0, r1, lsl #2
     e64:	37000000 	strcc	r0, [r0, -r0]
     e68:	37c00800 	strbcc	r0, [r0, r0, lsl #16]
     e6c:	03b40800 	undefined instruction 0x03b40800
     e70:	05ba0000 	ldreq	r0, [sl]!
     e74:	ae180000 	wxorge	wr0, wr8, wr0
     e78:	0100000a 	tsteq	r0, sl
     e7c:	003a01ca 	eorseq	r0, sl, sl, asr #3
     e80:	03d30000 	bicseq	r0, r3, #0	; 0x0
     e84:	c2190000 	andsgt	r0, r9, #0	; 0x0
     e88:	01000009 	tsteq	r0, r9
     e8c:	004c01cc 	subeq	r0, ip, ip, asr #3
     e90:	03f10000 	mvnseq	r0, #0	; 0x0
     e94:	78190000 	ldmdavc	r9, {}
     e98:	01000009 	tsteq	r0, r9
     e9c:	004c01cc 	subeq	r0, ip, ip, asr #3
     ea0:	04300000 	ldrteq	r0, [r0]
     ea4:	80190000 	andshi	r0, r9, r0
     ea8:	01000007 	tsteq	r0, r7
     eac:	004c01cc 	subeq	r0, ip, ip, asr #3
     eb0:	044e0000 	strbeq	r0, [lr]
     eb4:	f4190000 	undefined instruction 0xf4190000
     eb8:	01000008 	tsteq	r0, r8
     ebc:	004c01cc 	subeq	r0, ip, ip, asr #3
     ec0:	046c0000 	strbteq	r0, [ip]
     ec4:	bc190000 	ldclt	0, cr0, [r9], {0}
     ec8:	01000008 	tsteq	r0, r8
     ecc:	01f301ce 	mvnseq	r0, lr, asr #3
     ed0:	048a0000 	streq	r0, [sl]
     ed4:	1c000000 	stcne	0, cr0, [r0], {0}
     ed8:	000a3801 	andeq	r3, sl, r1, lsl #16
     edc:	019a0100 	orrseq	r0, sl, r0, lsl #2
     ee0:	0001f301 	andeq	pc, r1, r1, lsl #6
     ee4:	0037c000 	eorseq	ip, r7, r0
     ee8:	00380408 	eorseq	r0, r8, r8, lsl #8
     eec:	0004c908 	andeq	ip, r4, r8, lsl #18
     ef0:	00060900 	andeq	r0, r6, r0, lsl #18
     ef4:	08d21800 	ldmeq	r2, {fp, ip}^
     ef8:	99010000 	stmdbls	r1, {}
     efc:	00003a01 	andeq	r3, r0, r1, lsl #20
     f00:	0004e800 	andeq	lr, r4, r0, lsl #16
     f04:	09c71800 	stmibeq	r7, {fp, ip}^
     f08:	99010000 	stmdbls	r1, {}
     f0c:	00005e01 	andeq	r5, r0, r1, lsl #28
     f10:	00050600 	andeq	r0, r5, r0, lsl #12
     f14:	08bc1900 	ldmeq	ip!, {r8, fp, ip}
     f18:	9b010000 	blls	40f20 <__Stack_Size+0x40b20>
     f1c:	0001f301 	andeq	pc, r1, r1, lsl #6
     f20:	00052400 	andeq	r2, r5, r0, lsl #8
     f24:	011c0000 	tsteq	ip, r0
     f28:	00000a6c 	andeq	r0, r0, ip, ror #20
     f2c:	01017201 	tsteq	r1, r1, lsl #4
     f30:	000001f3 	strdeq	r0, [r0], -r3
     f34:	08003804 	stmdaeq	r0, {r2, fp, ip, sp}
     f38:	0800383c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip, sp}
     f3c:	00000542 	andeq	r0, r0, r2, asr #10
     f40:	00000658 	andeq	r0, r0, r8, asr r6
     f44:	0008d218 	andeq	sp, r8, r8, lsl r2
     f48:	01710100 	cmneq	r1, r0, lsl #2
     f4c:	0000003a 	andeq	r0, r0, sl, lsr r0
     f50:	00000561 	andeq	r0, r0, r1, ror #10
     f54:	0009c718 	andeq	ip, r9, r8, lsl r7
     f58:	01710100 	cmneq	r1, r0, lsl #2
     f5c:	0000004c 	andeq	r0, r0, ip, asr #32
     f60:	0000057f 	andeq	r0, r0, pc, ror r5
     f64:	0008bc19 	andeq	fp, r8, r9, lsl ip
     f68:	01730100 	cmneq	r3, r0, lsl #2
     f6c:	000001f3 	strdeq	r0, [r0], -r3
     f70:	0000059d 	muleq	r0, sp, r5
     f74:	c3011c00 	movwgt	r1, #7168	; 0x1c00
     f78:	0100000a 	tsteq	r0, sl
     f7c:	f3010137 	veor	d0, d1, d23
     f80:	3c000001 	stccc	0, cr0, [r0], {1}
     f84:	84080038 	strhi	r0, [r8], #-56
     f88:	bb080038 	bllt	201070 <__Stack_Size+0x200c70>
     f8c:	a7000005 	strge	r0, [r0, -r5]
     f90:	18000006 	stmdane	r0, {r1, r2}
     f94:	000008d2 	ldrdeq	r0, [r0], -r2
     f98:	3a013601 	bcc	4e7a4 <__Stack_Size+0x4e3a4>
     f9c:	da000000 	ble	fa4 <__Stack_Size+0xba4>
     fa0:	18000005 	stmdane	r0, {r0, r2}
     fa4:	000009c7 	andeq	r0, r0, r7, asr #19
     fa8:	3a013601 	bcc	4e7b4 <__Stack_Size+0x4e3b4>
     fac:	f8000000 	undefined instruction 0xf8000000
     fb0:	19000005 	stmdbne	r0, {r0, r2}
     fb4:	000008bc 	strheq	r0, [r0], -ip
     fb8:	f3013801 	vsub.i8	d3, d1, d1
     fbc:	16000001 	strne	r0, [r0], -r1
     fc0:	00000006 	andeq	r0, r0, r6
     fc4:	07920121 	ldreq	r0, [r2, r1, lsr #2]
     fc8:	f8010000 	undefined instruction 0xf8010000
     fcc:	0001f301 	andeq	pc, r1, r1, lsl #6
     fd0:	00388400 	eorseq	r8, r8, r0, lsl #8
     fd4:	0038fc08 	eorseq	pc, r8, r8, lsl #24
     fd8:	00063f08 	andeq	r3, r6, r8, lsl #30
     fdc:	0006d400 	andeq	sp, r6, r0, lsl #8
     fe0:	08bc2200 	ldmeq	ip!, {r9, sp}
     fe4:	f9010000 	undefined instruction 0xf9010000
     fe8:	000001f3 	strdeq	r0, [r0], -r3
     fec:	0000065e 	andeq	r0, r0, lr, asr r6
     ff0:	15012100 	strne	r2, [r1, #-256]
     ff4:	01000008 	tsteq	r0, r8
     ff8:	01f301d5 	ldrsbeq	r0, [r3, #21]!
     ffc:	38fc0000 	ldmcc	ip!, {}^
    1000:	39380800 	ldmdbcc	r8!, {fp}
    1004:	06870800 	streq	r0, [r7], r0, lsl #16
    1008:	07010000 	streq	r0, [r1, -r0]
    100c:	bc220000 	stclt	0, cr0, [r2]
    1010:	01000008 	tsteq	r0, r8
    1014:	0001f3d6 	ldrdeq	pc, [r1], -r6
    1018:	0006a600 	andeq	sl, r6, r0, lsl #12
    101c:	01230000 	teqeq	r3, r0
    1020:	000007c7 	andeq	r0, r0, r7, asr #15
    1024:	f301ae01 	vcge.f32	d10, d1, d1
    1028:	38000001 	stmdacc	r0, {r0}
    102c:	80080039 	andhi	r0, r8, r9, lsr r0
    1030:	c4080039 	strgt	r0, [r8], #-57
    1034:	12000006 	andne	r0, r0, #6	; 0x6
    1038:	000008cd 	andeq	r0, r0, sp, asr #17
    103c:	003aad01 	eorseq	sl, sl, r1, lsl #26
    1040:	06ef0000 	strbteq	r0, [pc], r0
    1044:	bc220000 	stclt	0, cr0, [r2]
    1048:	01000008 	tsteq	r0, r8
    104c:	0001f3af 	andeq	pc, r1, pc, lsr #7
    1050:	00070d00 	andeq	r0, r7, r0, lsl #26
    1054:	44000000 	strmi	r0, [r0]
    1058:	02000006 	andeq	r0, r0, #6	; 0x6
    105c:	00041200 	andeq	r1, r4, r0, lsl #4
    1060:	f1010400 	undefined instruction 0xf1010400
    1064:	01000000 	tsteq	r0, r0
    1068:	00000b9f 	muleq	r0, pc, fp
    106c:	0000004b 	andeq	r0, r0, fp, asr #32
    1070:	08003980 	stmdaeq	r0, {r7, r8, fp, ip, sp}
    1074:	08003c08 	stmdaeq	r0, {r3, sl, fp, ip, sp}
    1078:	0000054e 	andeq	r0, r0, lr, asr #10
    107c:	61050402 	tstvs	r5, r2, lsl #8
    1080:	02000018 	andeq	r0, r0, #24	; 0x18
    1084:	01b20502 	undefined instruction 0x01b20502
    1088:	01020000 	tsteq	r2, r0
    108c:	00010f06 	andeq	r0, r1, r6, lsl #30
    1090:	33750300 	cmncc	r5, #0	; 0x0
    1094:	27020032 	smladxcs	r2, r2, r0, r0
    1098:	00000045 	andeq	r0, r0, r5, asr #32
    109c:	db070402 	blle	1c20ac <__Stack_Size+0x1c1cac>
    10a0:	03000018 	movweq	r0, #24	; 0x18
    10a4:	00363175 	eorseq	r3, r6, r5, ror r1
    10a8:	00572802 	subseq	r2, r7, r2, lsl #16
    10ac:	02020000 	andeq	r0, r2, #0	; 0x0
    10b0:	00009307 	andeq	r9, r0, r7, lsl #6
    10b4:	38750300 	ldmdacc	r5!, {r8, r9}^
    10b8:	68290200 	stmdavs	r9!, {r9}
    10bc:	02000000 	andeq	r0, r0, #0	; 0x0
    10c0:	010d0801 	tsteq	sp, r1, lsl #16
    10c4:	45040000 	strmi	r0, [r4]
    10c8:	05000000 	streq	r0, [r0]
    10cc:	893b0201 	ldmdbhi	fp!, {r0, r9}
    10d0:	06000000 	streq	r0, [r0], -r0
    10d4:	00000212 	andeq	r0, r0, r2, lsl r2
    10d8:	00c50600 	sbceq	r0, r5, r0, lsl #12
    10dc:	00010000 	andeq	r0, r1, r0
    10e0:	000a8d07 	andeq	r8, sl, r7, lsl #26
    10e4:	743b0200 	ldrtvc	r0, [fp], #-512
    10e8:	08000000 	stmdaeq	r0, {}
    10ec:	1c090704 	stcne	7, cr0, [r9], {4}
    10f0:	0a014f03 	beq	54d04 <__Stack_Size+0x54904>
    10f4:	0a000001 	beq	1100 <__Stack_Size+0xd00>
    10f8:	004c5243 	subeq	r5, ip, r3, asr #4
    10fc:	6f015003 	svcvs	0x00015003
    1100:	02000000 	andeq	r0, r0, #0	; 0x0
    1104:	430a0023 	movwmi	r0, #40995	; 0xa023
    1108:	03004852 	movweq	r4, #2130	; 0x852
    110c:	006f0151 	rsbeq	r0, pc, r1, asr r1
    1110:	23020000 	movwcs	r0, #8192	; 0x2000
    1114:	44490a04 	strbmi	r0, [r9], #-2564
    1118:	52030052 	andpl	r0, r3, #82	; 0x52
    111c:	00006f01 	andeq	r6, r0, r1, lsl #30
    1120:	08230200 	stmdaeq	r3!, {r9}
    1124:	52444f0a 	subpl	r4, r4, #40	; 0x28
    1128:	01530300 	cmpeq	r3, r0, lsl #6
    112c:	0000006f 	andeq	r0, r0, pc, rrx
    1130:	0b0c2302 	bleq	309d40 <__Stack_Size+0x309940>
    1134:	0000008e 	andeq	r0, r0, lr, lsl #1
    1138:	6f015403 	svcvs	0x00015403
    113c:	02000000 	andeq	r0, r0, #0	; 0x0
    1140:	420a1023 	andmi	r1, sl, #35	; 0x23
    1144:	03005252 	movweq	r5, #594	; 0x252
    1148:	006f0155 	rsbeq	r0, pc, r5, asr r1
    114c:	23020000 	movwcs	r0, #8192	; 0x2000
    1150:	000b0b14 	andeq	r0, fp, r4, lsl fp
    1154:	56030000 	strpl	r0, [r3], -r0
    1158:	00006f01 	andeq	r6, r0, r1, lsl #30
    115c:	18230200 	stmdane	r3!, {r9}
    1160:	0b0e0c00 	bleq	384168 <__Stack_Size+0x383d68>
    1164:	57030000 	strpl	r0, [r3, -r0]
    1168:	00009701 	andeq	r9, r0, r1, lsl #14
    116c:	03180900 	tsteq	r8, #0	; 0x0
    1170:	014d015a 	cmpeq	sp, sl, asr r1
    1174:	ed0b0000 	stc	0, cr0, [fp]
    1178:	0300000c 	movweq	r0, #12	; 0xc
    117c:	006f015b 	rsbeq	r0, pc, fp, asr r1
    1180:	23020000 	movwcs	r0, #8192	; 0x2000
    1184:	0cd20b00 	vldmiaeq	r2, {d16-d15}
    1188:	5c030000 	stcpl	0, cr0, [r3], {0}
    118c:	00006f01 	andeq	r6, r0, r1, lsl #30
    1190:	04230200 	strteq	r0, [r3], #-512
    1194:	000b980b 	andeq	r9, fp, fp, lsl #16
    1198:	015d0300 	cmpeq	sp, r0, lsl #6
    119c:	0000015d 	andeq	r0, r0, sp, asr r1
    11a0:	00082302 	andeq	r2, r8, r2, lsl #6
    11a4:	0000450d 	andeq	r4, r0, sp, lsl #10
    11a8:	00015d00 	andeq	r5, r1, r0, lsl #26
    11ac:	00940e00 	addseq	r0, r4, r0, lsl #28
    11b0:	00030000 	andeq	r0, r3, r0
    11b4:	00014d04 	andeq	r4, r1, r4, lsl #26
    11b8:	04010500 	streq	r0, [r1], #-1280
    11bc:	00017d23 	andeq	r7, r1, r3, lsr #26
    11c0:	00cc0600 	sbceq	r0, ip, r0, lsl #12
    11c4:	06010000 	streq	r0, [r1], -r0
    11c8:	000000fd 	strdeq	r0, [r0], -sp
    11cc:	01620602 	cmneq	r2, r2, lsl #12
    11d0:	00030000 	andeq	r0, r3, r0
    11d4:	00020007 	andeq	r0, r2, r7
    11d8:	62270400 	eorvs	r0, r7, #0	; 0x0
    11dc:	05000001 	streq	r0, [r0, #-1]
    11e0:	c22e0401 	eorgt	r0, lr, #16777216	; 0x1000000
    11e4:	06000001 	streq	r0, [r0], -r1
    11e8:	000001f2 	strdeq	r0, [r0], -r2
    11ec:	00100600 	andseq	r0, r0, r0, lsl #12
    11f0:	06040000 	streq	r0, [r4], -r0
    11f4:	0000006a 	andeq	r0, r0, sl, rrx
    11f8:	00ad0628 	adceq	r0, sp, r8, lsr #12
    11fc:	00c80000 	sbceq	r0, r8, r0
    1200:	00021a06 	andeq	r1, r2, r6, lsl #20
    1204:	2c061400 	cfstrscs	mvf1, [r6], {0}
    1208:	10000001 	andne	r0, r0, r1
    120c:	00002c06 	andeq	r2, r0, r6, lsl #24
    1210:	86061c00 	strhi	r1, [r6], -r0, lsl #24
    1214:	18000001 	stmdane	r0, {r0}
    1218:	022b0700 	eoreq	r0, fp, #0	; 0x0
    121c:	36040000 	strcc	r0, [r4], -r0
    1220:	00000188 	andeq	r0, r0, r8, lsl #3
    1224:	3f04040f 	svccc	0x0004040f
    1228:	00000200 	andeq	r0, r0, r0, lsl #4
    122c:	00019610 	andeq	r9, r1, r0, lsl r6
    1230:	4c400400 	cfstrdmi	mvd0, [r0], {0}
    1234:	02000000 	andeq	r0, r0, #0	; 0x0
    1238:	00100023 	andseq	r0, r0, r3, lsr #32
    123c:	04000000 	streq	r0, [r0]
    1240:	00017d41 	andeq	r7, r1, r1, asr #26
    1244:	02230200 	eoreq	r0, r3, #0	; 0x0
    1248:	0000bb10 	andeq	fp, r0, r0, lsl fp
    124c:	c2420400 	subgt	r0, r2, #0	; 0x0
    1250:	02000001 	andeq	r0, r0, #1	; 0x1
    1254:	07000323 	streq	r0, [r0, -r3, lsr #6]
    1258:	000001bc 	strheq	r0, [r0], -ip
    125c:	01cd4304 	biceq	r4, sp, r4, lsl #6
    1260:	01050000 	tsteq	r5, r0
    1264:	02204704 	eoreq	r4, r0, #1048576	; 0x100000
    1268:	69060000 	stmdbvs	r6, {}
    126c:	0000000b 	andeq	r0, r0, fp
    1270:	000b2206 	andeq	r2, fp, r6, lsl #4
    1274:	07000100 	streq	r0, [r0, -r0, lsl #2]
    1278:	00000cc8 	andeq	r0, r0, r8, asr #25
    127c:	020b4904 	andeq	r4, fp, #65536	; 0x10000
    1280:	01110000 	tsteq	r1, r0
    1284:	00000b8e 	andeq	r0, r0, lr, lsl #23
    1288:	80017d01 	andhi	r7, r1, r1, lsl #26
    128c:	26080039 	undefined
    1290:	2b08003a 	blcs	201380 <__Stack_Size+0x200f80>
    1294:	af000007 	svcge	0x00000007
    1298:	12000002 	andne	r0, r0, #2	; 0x2
    129c:	00000cd7 	ldrdeq	r0, [r0], -r7
    12a0:	02af7c01 	adceq	r7, pc, #256	; 0x100
    12a4:	50010000 	andpl	r0, r1, r0
    12a8:	000cdd13 	andeq	sp, ip, r3, lsl sp
    12ac:	b57c0100 	ldrblt	r0, [ip, #-256]!
    12b0:	56000002 	strpl	r0, [r0], -r2
    12b4:	14000007 	strne	r0, [r0], #-7
    12b8:	00000c3c 	andeq	r0, r0, ip, lsr ip
    12bc:	003a7e01 	eorseq	r7, sl, r1, lsl #28
    12c0:	57010000 	strpl	r0, [r1, -r0]
    12c4:	000c9914 	andeq	r9, ip, r4, lsl r9
    12c8:	3a7e0100 	bcc	1f816d0 <__Stack_Size+0x1f812d0>
    12cc:	01000000 	tsteq	r0, r0
    12d0:	0b1b145c 	bleq	6c6448 <__Stack_Size+0x6c6048>
    12d4:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    12d8:	0000003a 	andeq	r0, r0, sl, lsr r0
    12dc:	70155101 	andsvc	r5, r5, r1, lsl #2
    12e0:	0100736f 	tsteq	r0, pc, ror #6
    12e4:	00003a7e 	andeq	r3, r0, lr, ror sl
    12e8:	00077f00 	andeq	r7, r7, r0, lsl #30
    12ec:	0c1e1400 	cfldrseq	mvf1, [lr], {0}
    12f0:	7f010000 	svcvc	0x00010000
    12f4:	0000003a 	andeq	r0, r0, sl, lsr r0
    12f8:	c2165401 	andsgt	r5, r6, #16777216	; 0x1000000
    12fc:	0100000b 	tsteq	r0, fp
    1300:	00003a7f 	andeq	r3, r0, pc, ror sl
    1304:	04170000 	ldreq	r0, [r7]
    1308:	0000010a 	andeq	r0, r0, sl, lsl #2
    130c:	02000417 	andeq	r0, r0, #385875968	; 0x17000000
    1310:	01180000 	tsteq	r8, r0
    1314:	00000b52 	andeq	r0, r0, r2, asr fp
    1318:	2801e601 	stmdacs	r1, {r0, r9, sl, sp, lr, pc}
    131c:	3808003a 	stmdacc	r8, {r1, r3, r4, r5}
    1320:	0108003a 	tsteq	r8, sl, lsr r0
    1324:	0002e05d 	andeq	lr, r2, sp, asr r0
    1328:	0cdd1200 	lfmeq	f1, 2, [sp], {0}
    132c:	e5010000 	str	r0, [r1]
    1330:	000002b5 	strheq	r0, [r0], -r5
    1334:	19005001 	stmdbne	r0, {r0, ip, lr}
    1338:	000c0801 	andeq	r0, ip, r1, lsl #16
    133c:	01f70100 	mvnseq	r0, r0, lsl #2
    1340:	0000005e 	andeq	r0, r0, lr, asr r0
    1344:	08003a38 	stmdaeq	r0, {r3, r4, r5, r9, fp, ip, sp}
    1348:	08003a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, sp}
    134c:	03235d01 	teqeq	r3, #64	; 0x40
    1350:	d7130000 	ldrle	r0, [r3, -r0]
    1354:	0100000c 	tsteq	r0, ip
    1358:	0002aff6 	strdeq	sl, [r2], -r6
    135c:	0007b300 	andeq	fp, r7, r0, lsl #6
    1360:	01961200 	orrseq	r1, r6, r0, lsl #4
    1364:	f6010000 	undefined instruction 0xf6010000
    1368:	0000004c 	andeq	r0, r0, ip, asr #32
    136c:	c3165101 	tstgt	r6, #1073741824	; 0x40000000
    1370:	01000008 	tsteq	r0, r8
    1374:	00005ef8 	strdeq	r5, [r0], -r8
    1378:	011a0000 	tsteq	sl, r0
    137c:	00000c6b 	andeq	r0, r0, fp, ror #24
    1380:	01011101 	tsteq	r1, r1, lsl #2
    1384:	0000004c 	andeq	r0, r0, ip, asr #32
    1388:	08003a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, sp}
    138c:	08003a4a 	stmdaeq	r0, {r1, r3, r6, r9, fp, ip, sp}
    1390:	03505d01 	cmpeq	r0, #64	; 0x40
    1394:	d71b0000 	ldrle	r0, [fp, -r0]
    1398:	0100000c 	tsteq	r0, ip
    139c:	02af0110 	adceq	r0, pc, #4	; 0x4
    13a0:	07c60000 	strbeq	r0, [r6, r0]
    13a4:	1a000000 	bne	13ac <__Stack_Size+0xfac>
    13a8:	000cf201 	andeq	pc, ip, r1, lsl #4
    13ac:	01220100 	teqeq	r2, r0, lsl #2
    13b0:	00005e01 	andeq	r5, r0, r1, lsl #28
    13b4:	003a4c00 	eorseq	r4, sl, r0, lsl #24
    13b8:	003a5808 	eorseq	r5, sl, r8, lsl #16
    13bc:	975d0108 	ldrbls	r0, [sp, -r8, lsl #2]
    13c0:	1b000003 	blne	13d4 <__Stack_Size+0xfd4>
    13c4:	00000cd7 	ldrdeq	r0, [r0], -r7
    13c8:	af012101 	svcge	0x00012101
    13cc:	d9000002 	stmdble	r0, {r1}
    13d0:	1c000007 	stcne	0, cr0, [r0], {7}
    13d4:	00000196 	muleq	r0, r6, r1
    13d8:	4c012101 	stfmis	f2, [r1], {1}
    13dc:	01000000 	tsteq	r0, r0
    13e0:	08c31d51 	stmiaeq	r3, {r0, r4, r6, r8, sl, fp, ip}^
    13e4:	23010000 	movwcs	r0, #4096	; 0x1000
    13e8:	00005e01 	andeq	r5, r0, r1, lsl #28
    13ec:	011a0000 	tsteq	sl, r0
    13f0:	00000b2a 	andeq	r0, r0, sl, lsr #22
    13f4:	01013c01 	tsteq	r1, r1, lsl #24
    13f8:	0000004c 	andeq	r0, r0, ip, asr #32
    13fc:	08003a58 	stmdaeq	r0, {r3, r4, r6, r9, fp, ip, sp}
    1400:	08003a5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, fp, ip, sp}
    1404:	03c45d01 	biceq	r5, r4, #64	; 0x40
    1408:	d71b0000 	ldrle	r0, [fp, -r0]
    140c:	0100000c 	tsteq	r0, ip
    1410:	02af013b 	adceq	r0, pc, #-1073741810	; 0xc000000e
    1414:	07ec0000 	strbeq	r0, [ip, r0]!
    1418:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    141c:	000b8101 	andeq	r8, fp, r1, lsl #2
    1420:	014e0100 	cmpeq	lr, r0, lsl #2
    1424:	003a6001 	eorseq	r6, sl, r1
    1428:	003a6408 	eorseq	r6, sl, r8, lsl #8
    142c:	f95d0108 	undefined instruction 0xf95d0108
    1430:	1c000003 	stcne	0, cr0, [r0], {3}
    1434:	00000cd7 	ldrdeq	r0, [r0], -r7
    1438:	af014d01 	svcge	0x00014d01
    143c:	01000002 	tsteq	r0, r2
    1440:	01961c50 	orrseq	r1, r6, r0, asr ip
    1444:	4d010000 	stcmi	0, cr0, [r1]
    1448:	00004c01 	andeq	r4, r0, r1, lsl #24
    144c:	00510100 	subseq	r0, r1, r0, lsl #2
    1450:	0c25011e 	stfeqs	f0, [r5], #-120
    1454:	61010000 	tstvs	r1, r0
    1458:	3a640101 	bcc	1901864 <__Stack_Size+0x1901464>
    145c:	3a680800 	bcc	1a03464 <__Stack_Size+0x1a03064>
    1460:	5d010800 	stcpl	8, cr0, [r1]
    1464:	0000042e 	andeq	r0, r0, lr, lsr #8
    1468:	000cd71c 	andeq	sp, ip, ip, lsl r7
    146c:	01600100 	cmneq	r0, r0, lsl #2
    1470:	000002af 	andeq	r0, r0, pc, lsr #5
    1474:	961c5001 	ldrls	r5, [ip], -r1
    1478:	01000001 	tsteq	r0, r1
    147c:	004c0160 	subeq	r0, ip, r0, ror #2
    1480:	51010000 	tstpl	r1, r0
    1484:	73011e00 	movwvc	r1, #7680	; 0x1e00
    1488:	0100000b 	tsteq	r0, fp
    148c:	68010177 	stmdavs	r1, {r0, r1, r2, r4, r5, r6, r8}
    1490:	7208003a 	andvc	r0, r8, #58	; 0x3a
    1494:	0108003a 	tsteq	r8, sl, lsr r0
    1498:	0004715d 	andeq	r7, r4, sp, asr r1
    149c:	0cd71c00 	ldcleq	12, cr1, [r7], {0}
    14a0:	76010000 	strvc	r0, [r1], -r0
    14a4:	0002af01 	andeq	sl, r2, r1, lsl #30
    14a8:	1c500100 	ldfnee	f0, [r0], {0}
    14ac:	00000196 	muleq	r0, r6, r1
    14b0:	4c017601 	stcmi	6, cr7, [r1], {1}
    14b4:	01000000 	tsteq	r0, r0
    14b8:	0b621c51 	bleq	1888604 <__Stack_Size+0x1888204>
    14bc:	76010000 	strvc	r0, [r1], -r0
    14c0:	00022001 	andeq	r2, r2, r1
    14c4:	00520100 	subseq	r0, r2, r0, lsl #2
    14c8:	0ca4011e 	stfeqs	f0, [r4], #120
    14cc:	91010000 	tstls	r1, r0
    14d0:	3a740101 	bcc	1d018dc <__Stack_Size+0x1d014dc>
    14d4:	3a780800 	bcc	1e034dc <__Stack_Size+0x1e030dc>
    14d8:	5d010800 	stcpl	8, cr0, [r1]
    14dc:	000004a6 	andeq	r0, r0, r6, lsr #9
    14e0:	000cd71c 	andeq	sp, ip, ip, lsl r7
    14e4:	01900100 	orrseq	r0, r0, r0, lsl #2
    14e8:	000002af 	andeq	r0, r0, pc, lsr #5
    14ec:	341c5001 	ldrcc	r5, [ip], #-1
    14f0:	0100000c 	tsteq	r0, ip
    14f4:	004c0190 	umaaleq	r0, ip, r0, r1
    14f8:	51010000 	tstpl	r1, r0
    14fc:	86011e00 	strhi	r1, [r1], -r0, lsl #28
    1500:	0100000c 	tsteq	r0, ip
    1504:	780101a3 	stmdavc	r1, {r0, r1, r5, r7, r8}
    1508:	8808003a 	stmdahi	r8, {r1, r3, r4, r5}
    150c:	0108003a 	tsteq	r8, sl, lsr r0
    1510:	0004e95d 	andeq	lr, r4, sp, asr r9
    1514:	0cd71c00 	ldcleq	12, cr1, [r7], {0}
    1518:	a2010000 	andge	r0, r1, #0	; 0x0
    151c:	0002af01 	andeq	sl, r2, r1, lsl #30
    1520:	1c500100 	ldfnee	f0, [r0], {0}
    1524:	00000196 	muleq	r0, r6, r1
    1528:	4c01a201 	sfmmi	f2, 1, [r1], {1}
    152c:	01000000 	tsteq	r0, r0
    1530:	6d741f51 	ldclvs	15, cr1, [r4, #-324]!
    1534:	a4010070 	strge	r0, [r1], #-112
    1538:	00003a01 	andeq	r3, r0, r1, lsl #20
    153c:	00530100 	subseq	r0, r3, r0, lsl #2
    1540:	0be6011e 	bleq	ff9819c0 <SCS_BASE+0x1f9739c0>
    1544:	c4010000 	strgt	r0, [r1]
    1548:	3a880101 	bcc	fe201954 <SCS_BASE+0x1e1f3954>
    154c:	3aa80800 	bcc	fea03554 <SCS_BASE+0x1e9f5554>
    1550:	5d010800 	stcpl	8, cr0, [r1]
    1554:	00000530 	andeq	r0, r0, r0, lsr r5
    1558:	000bca1c 	andeq	ip, fp, ip, lsl sl
    155c:	01c30100 	biceq	r0, r3, r0, lsl #2
    1560:	0000005e 	andeq	r0, r0, lr, asr r0
    1564:	5c1b5001 	ldcpl	0, cr5, [fp], {1}
    1568:	0100000c 	tsteq	r0, ip
    156c:	005e01c3 	subseq	r0, lr, r3, asr #3
    1570:	07ff0000 	ldrbeq	r0, [pc, r0]!
    1574:	1e200000 	cdpne	0, 2, cr0, cr0, cr0, {0}
    1578:	0100000c 	tsteq	r0, ip
    157c:	003a01c5 	eorseq	r0, sl, r5, asr #3
    1580:	08120000 	ldmdaeq	r2, {}
    1584:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1588:	000b3e01 	andeq	r3, fp, r1, lsl #28
    158c:	01dd0100 	bicseq	r0, sp, r0, lsl #2
    1590:	003aa801 	eorseq	sl, sl, r1, lsl #16
    1594:	003ab408 	eorseq	fp, sl, r8, lsl #8
    1598:	575d0108 	ldrbpl	r0, [sp, -r8, lsl #2]
    159c:	1c000005 	stcne	0, cr0, [r0], {5}
    15a0:	0000083c 	andeq	r0, r0, ip, lsr r8
    15a4:	8901dc01 	stmdbhi	r1, {r0, sl, fp, ip, lr, pc}
    15a8:	01000000 	tsteq	r0, r0
    15ac:	01210050 	qsubeq	r0, r0, r1
    15b0:	00000c48 	andeq	r0, r0, r8, asr #24
    15b4:	01020801 	tsteq	r2, r1, lsl #16
    15b8:	08003ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp, ip, sp}
    15bc:	08003b14 	stmdaeq	r0, {r2, r4, r8, r9, fp, ip, sp}
    15c0:	00000851 	andeq	r0, r0, r1, asr r8
    15c4:	000005c6 	andeq	r0, r0, r6, asr #11
    15c8:	000bfd1c 	andeq	pc, fp, ip, lsl sp
    15cc:	02070100 	andeq	r0, r7, #0	; 0x0
    15d0:	0000003a 	andeq	r0, r0, sl, lsr r0
    15d4:	3c1b5001 	ldccc	0, cr5, [fp], {1}
    15d8:	01000008 	tsteq	r0, r8
    15dc:	00890207 	addeq	r0, r9, r7, lsl #4
    15e0:	08700000 	ldmdaeq	r0!, {}^
    15e4:	741f0000 	ldrvc	r0, [pc], #0	; 15ec <__Stack_Size+0x11ec>
    15e8:	0100706d 	tsteq	r0, sp, rrx
    15ec:	003a0209 	eorseq	r0, sl, r9, lsl #4
    15f0:	54010000 	strpl	r0, [r1]
    15f4:	000caf1d 	andeq	sl, ip, sp, lsl pc
    15f8:	02090100 	andeq	r0, r9, #0	; 0x0
    15fc:	0000003a 	andeq	r0, r0, sl, lsr r0
    1600:	000c1e20 	andeq	r1, ip, r0, lsr #28
    1604:	02090100 	andeq	r0, r9, #0	; 0x0
    1608:	0000003a 	andeq	r0, r0, sl, lsr r0
    160c:	0000088e 	andeq	r0, r0, lr, lsl #17
    1610:	000c7e1d 	andeq	r7, ip, sp, lsl lr
    1614:	02090100 	andeq	r0, r9, #0	; 0x0
    1618:	0000003a 	andeq	r0, r0, sl, lsr r0
    161c:	b4012100 	strlt	r2, [r1], #-256
    1620:	0100000c 	tsteq	r0, ip
    1624:	1401023a 	strne	r0, [r1], #-570
    1628:	4808003b 	stmdami	r8, {r0, r1, r3, r4, r5}
    162c:	cd08003b 	stcgt	0, cr0, [r8, #-236]
    1630:	0d000008 	stceq	0, cr0, [r0, #-32]
    1634:	1b000006 	blne	1654 <__Stack_Size+0x1254>
    1638:	00000bca 	andeq	r0, r0, sl, asr #23
    163c:	5e023901 	cdppl	9, 0, cr3, cr2, cr1, {0}
    1640:	ec000000 	stc	0, cr0, [r0], {0}
    1644:	1b000008 	blne	166c <__Stack_Size+0x126c>
    1648:	00000c5c 	andeq	r0, r0, ip, asr ip
    164c:	5e023901 	cdppl	9, 0, cr3, cr2, cr1, {0}
    1650:	ff000000 	undefined instruction 0xff000000
    1654:	22000008 	andcs	r0, r0, #8	; 0x8
    1658:	00706d74 	rsbseq	r6, r0, r4, ror sp
    165c:	3a023b01 	bcc	90268 <__Stack_Size+0x8fe68>
    1660:	00000000 	andeq	r0, r0, r0
    1664:	0d090123 	stfeqs	f0, [r9, #-140]
    1668:	6c010000 	stcvs	0, cr0, [r1], {0}
    166c:	003b4801 	eorseq	r4, fp, r1, lsl #16
    1670:	003b6008 	eorseq	r6, fp, r8
    1674:	00091208 	andeq	r1, r9, r8, lsl #4
    1678:	da012400 	ble	4a680 <__Stack_Size+0x4a280>
    167c:	0100000b 	tsteq	r0, fp
    1680:	3b600134 	blcc	1801b58 <__Stack_Size+0x1801758>
    1684:	3c080800 	stccc	8, cr0, [r8], {0}
    1688:	093d0800 	ldmdbeq	sp!, {fp}
    168c:	d7130000 	ldrle	r0, [r3, -r0]
    1690:	0100000c 	tsteq	r0, ip
    1694:	0002af33 	andeq	sl, r2, r3, lsr pc
    1698:	00096800 	andeq	r6, r9, r0, lsl #16
    169c:	e3000000 	movw	r0, #0	; 0x0
    16a0:	02000008 	andeq	r0, r0, #8	; 0x8
    16a4:	00063700 	andeq	r3, r6, r0, lsl #14
    16a8:	f1010400 	undefined instruction 0xf1010400
    16ac:	01000000 	tsteq	r0, r0
    16b0:	00000e40 	andeq	r0, r0, r0, asr #28
    16b4:	0000004b 	andeq	r0, r0, fp, asr #32
    16b8:	08003c08 	stmdaeq	r0, {r3, sl, fp, ip, sp}
    16bc:	08003f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip, sp}
    16c0:	000006c6 	andeq	r0, r0, r6, asr #13
    16c4:	61050402 	tstvs	r5, r2, lsl #8
    16c8:	02000018 	andeq	r0, r0, #24	; 0x18
    16cc:	01b20502 	undefined instruction 0x01b20502
    16d0:	01020000 	tsteq	r2, r0
    16d4:	00010f06 	andeq	r0, r1, r6, lsl #30
    16d8:	33750300 	cmncc	r5, #0	; 0x0
    16dc:	27020032 	smladxcs	r2, r2, r0, r0
    16e0:	00000045 	andeq	r0, r0, r5, asr #32
    16e4:	db070402 	blle	1c26f4 <__Stack_Size+0x1c22f4>
    16e8:	03000018 	movweq	r0, #24	; 0x18
    16ec:	00363175 	eorseq	r3, r6, r5, ror r1
    16f0:	00572802 	subseq	r2, r7, r2, lsl #16
    16f4:	02020000 	andeq	r0, r2, #0	; 0x0
    16f8:	00009307 	andeq	r9, r0, r7, lsl #6
    16fc:	38750300 	ldmdacc	r5!, {r8, r9}^
    1700:	68290200 	stmdavs	r9!, {r9}
    1704:	02000000 	andeq	r0, r0, #0	; 0x0
    1708:	010d0801 	tsteq	sp, r1, lsl #16
    170c:	45040000 	strmi	r0, [r4]
    1710:	05000000 	streq	r0, [r0]
    1714:	0000006f 	andeq	r0, r0, pc, rrx
    1718:	39020106 	stmdbcc	r2, {r1, r2, r8}
    171c:	0000008e 	andeq	r0, r0, lr, lsl #1
    1720:	000b6d07 	andeq	r6, fp, r7, lsl #26
    1724:	53080000 	movwpl	r0, #32768	; 0x8000
    1728:	01005445 	tsteq	r0, r5, asr #8
    172c:	13590900 	cmpne	r9, #0	; 0x0
    1730:	39020000 	stmdbcc	r2, {}
    1734:	00000079 	andeq	r0, r0, r9, ror r0
    1738:	3b020106 	blcc	81b58 <__Stack_Size+0x81758>
    173c:	000000ae 	andeq	r0, r0, lr, lsr #1
    1740:	00021207 	andeq	r1, r2, r7, lsl #4
    1744:	c5070000 	strgt	r0, [r7]
    1748:	01000000 	tsteq	r0, r0
    174c:	0a8d0900 	beq	fe343b54 <SCS_BASE+0x1e335b54>
    1750:	3b020000 	blcc	81758 <__Stack_Size+0x81358>
    1754:	00000099 	muleq	r0, r9, r0
    1758:	0b07040a 	bleq	1c2788 <__Stack_Size+0x1c2388>
    175c:	8203033c 	andhi	r0, r3, #-268435456	; 0xf0000000
    1760:	00017501 	andeq	r7, r1, r1, lsl #10
    1764:	10960c00 	addsne	r0, r6, r0, lsl #24
    1768:	83030000 	movwhi	r0, #12288	; 0x3000
    176c:	00018501 	andeq	r8, r1, r1, lsl #10
    1770:	00230200 	eoreq	r0, r3, r0, lsl #4
    1774:	000e630c 	andeq	r6, lr, ip, lsl #6
    1778:	01840300 	orreq	r0, r4, r0, lsl #6
    177c:	0000018a 	andeq	r0, r0, sl, lsl #3
    1780:	0c082302 	stceq	3, cr2, [r8], {2}
    1784:	0000103f 	andeq	r1, r0, pc, lsr r0
    1788:	9a018503 	bls	62b9c <__Stack_Size+0x6279c>
    178c:	03000001 	movweq	r0, #1	; 0x1
    1790:	0c018023 	stceq	0, cr8, [r1], {35}
    1794:	00000ee2 	andeq	r0, r0, r2, ror #29
    1798:	8a018603 	bhi	62fac <__Stack_Size+0x62bac>
    179c:	03000001 	movweq	r0, #1	; 0x1
    17a0:	0c018823 	stceq	8, cr8, [r1], {35}
    17a4:	00001055 	andeq	r1, r0, r5, asr r0
    17a8:	9f018703 	svcls	0x00018703
    17ac:	03000001 	movweq	r0, #1	; 0x1
    17b0:	0c028023 	stceq	0, cr8, [r2], {35}
    17b4:	00000e6d 	andeq	r0, r0, sp, ror #28
    17b8:	8a018803 	bhi	637cc <__Stack_Size+0x633cc>
    17bc:	03000001 	movweq	r0, #1	; 0x1
    17c0:	0c028823 	stceq	8, cr8, [r2], {35}
    17c4:	00000fc4 	andeq	r0, r0, r4, asr #31
    17c8:	a4018903 	strge	r8, [r1], #-2307
    17cc:	03000001 	movweq	r0, #1	; 0x1
    17d0:	0c038023 	stceq	0, cr8, [r3], {35}
    17d4:	0000109b 	muleq	r0, fp, r0
    17d8:	8a018a03 	bhi	63fec <__Stack_Size+0x63bec>
    17dc:	03000001 	movweq	r0, #1	; 0x1
    17e0:	0c038823 	stceq	8, cr8, [r3], {35}
    17e4:	00000d19 	andeq	r0, r0, r9, lsl sp
    17e8:	a9018b03 	stmdbge	r1, {r0, r1, r8, r9, fp, pc}
    17ec:	03000001 	movweq	r0, #1	; 0x1
    17f0:	0c048023 	stceq	0, cr8, [r4], {35}
    17f4:	000010a5 	andeq	r1, r0, r5, lsr #1
    17f8:	ae018c03 	cdpge	12, 0, cr8, cr1, cr3, {0}
    17fc:	03000001 	movweq	r0, #1	; 0x1
    1800:	0d048823 	stceq	8, cr8, [r4, #-140]
    1804:	00525049 	subseq	r5, r2, r9, asr #32
    1808:	ce018d03 	cdpgt	13, 0, cr8, cr1, cr3, {0}
    180c:	03000001 	movweq	r0, #1	; 0x1
    1810:	00068023 	andeq	r8, r6, r3, lsr #32
    1814:	0000450e 	andeq	r4, r0, lr, lsl #10
    1818:	00018500 	andeq	r8, r1, r0, lsl #10
    181c:	00b90f00 	adcseq	r0, r9, r0, lsl #30
    1820:	00010000 	andeq	r0, r1, r0
    1824:	00017504 	andeq	r7, r1, r4, lsl #10
    1828:	003a0e00 	eorseq	r0, sl, r0, lsl #28
    182c:	019a0000 	orrseq	r0, sl, r0
    1830:	b90f0000 	stmdblt	pc, {}
    1834:	1d000000 	stcne	0, cr0, [r0]
    1838:	01750400 	cmneq	r5, r0, lsl #8
    183c:	75040000 	strvc	r0, [r4]
    1840:	04000001 	streq	r0, [r0], #-1
    1844:	00000175 	andeq	r0, r0, r5, ror r1
    1848:	00017504 	andeq	r7, r1, r4, lsl #10
    184c:	003a0e00 	eorseq	r0, sl, r0, lsl #28
    1850:	01be0000 	undefined instruction 0x01be0000
    1854:	b90f0000 	stmdblt	pc, {}
    1858:	3d000000 	stccc	0, cr0, [r0]
    185c:	00450e00 	subeq	r0, r5, r0, lsl #28
    1860:	01ce0000 	biceq	r0, lr, r0
    1864:	b90f0000 	stmdblt	pc, {}
    1868:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    186c:	01be0400 	undefined instruction 0x01be0400
    1870:	40100000 	andsmi	r0, r0, r0
    1874:	af019103 	svcge	0x00019103
    1878:	0c000002 	stceq	0, cr0, [r0], {2}
    187c:	00000e7f 	andeq	r0, r0, pc, ror lr
    1880:	74019203 	strvc	r9, [r1], #-515
    1884:	02000000 	andeq	r0, r0, #0	; 0x0
    1888:	dd0c0023 	stcle	0, cr0, [ip, #-140]
    188c:	0300000e 	movweq	r0, #14	; 0xe
    1890:	006f0193 	mlseq	pc, r3, r1, r0
    1894:	23020000 	movwcs	r0, #8192	; 0x2000
    1898:	10500c04 	subsne	r0, r0, r4, lsl #24
    189c:	94030000 	strls	r0, [r3]
    18a0:	00006f01 	andeq	r6, r0, r1, lsl #30
    18a4:	08230200 	stmdaeq	r3!, {r9}
    18a8:	000faa0c 	andeq	sl, pc, ip, lsl #20
    18ac:	01950300 	orrseq	r0, r5, r0, lsl #6
    18b0:	0000006f 	andeq	r0, r0, pc, rrx
    18b4:	0d0c2302 	stceq	3, cr2, [ip, #-8]
    18b8:	00524353 	subseq	r4, r2, r3, asr r3
    18bc:	6f019603 	svcvs	0x00019603
    18c0:	02000000 	andeq	r0, r0, #0	; 0x0
    18c4:	430d1023 	movwmi	r1, #53283	; 0xd023
    18c8:	03005243 	movweq	r5, #579	; 0x243
    18cc:	006f0197 	mlseq	pc, r7, r1, r0
    18d0:	23020000 	movwcs	r0, #8192	; 0x2000
    18d4:	0fd30c14 	svceq	0x00d30c14
    18d8:	98030000 	stmdals	r3, {}
    18dc:	0002bf01 	andeq	fp, r2, r1, lsl #30
    18e0:	18230200 	stmdane	r3!, {r9}
    18e4:	000fd80c 	andeq	sp, pc, ip, lsl #16
    18e8:	01990300 	orrseq	r0, r9, r0, lsl #6
    18ec:	0000006f 	andeq	r0, r0, pc, rrx
    18f0:	0c242302 	stceq	3, cr2, [r4], #-8
    18f4:	00000f85 	andeq	r0, r0, r5, lsl #31
    18f8:	6f019a03 	svcvs	0x00019a03
    18fc:	02000000 	andeq	r0, r0, #0	; 0x0
    1900:	7a0c2823 	bvc	30b994 <__Stack_Size+0x30b594>
    1904:	03000010 	movweq	r0, #16	; 0x10
    1908:	006f019b 	mlseq	pc, fp, r1, r0
    190c:	23020000 	movwcs	r0, #8192	; 0x2000
    1910:	105a0c2c 	subsne	r0, sl, ip, lsr #24
    1914:	9c030000 	stcls	0, cr0, [r3], {0}
    1918:	00006f01 	andeq	r6, r0, r1, lsl #30
    191c:	30230200 	eorcc	r0, r3, r0, lsl #4
    1920:	000fee0c 	andeq	lr, pc, ip, lsl #28
    1924:	019d0300 	orrseq	r0, sp, r0, lsl #6
    1928:	0000006f 	andeq	r0, r0, pc, rrx
    192c:	0c342302 	ldceq	3, cr2, [r4], #-8
    1930:	00000f5c 	andeq	r0, r0, ip, asr pc
    1934:	6f019e03 	svcvs	0x00019e03
    1938:	02000000 	andeq	r0, r0, #0	; 0x0
    193c:	910c3823 	tstls	ip, r3, lsr #16
    1940:	03000010 	movweq	r0, #16	; 0x10
    1944:	006f019f 	mlseq	pc, pc, r1, r0
    1948:	23020000 	movwcs	r0, #8192	; 0x2000
    194c:	450e003c 	strmi	r0, [lr, #-60]
    1950:	bf000000 	svclt	0x00000000
    1954:	0f000002 	svceq	0x00000002
    1958:	000000b9 	strheq	r0, [r0], -r9
    195c:	af040002 	svcge	0x00040002
    1960:	11000002 	tstne	r0, r2
    1964:	051b0404 	ldreq	r0, [fp, #-1028]
    1968:	12000003 	andne	r0, r0, #3	; 0x3
    196c:	00000dc0 	andeq	r0, r0, r0, asr #27
    1970:	005e1c04 	subseq	r1, lr, r4, lsl #24
    1974:	23020000 	movwcs	r0, #8192	; 0x2000
    1978:	0f021200 	svceq	0x00021200
    197c:	1d040000 	stcne	0, cr0, [r4]
    1980:	0000005e 	andeq	r0, r0, lr, asr r0
    1984:	12012302 	andne	r2, r1, #134217728	; 0x8000000
    1988:	0000105f 	andeq	r1, r0, pc, asr r0
    198c:	005e1e04 	subseq	r1, lr, r4, lsl #28
    1990:	23020000 	movwcs	r0, #8192	; 0x2000
    1994:	0d4e1202 	sfmeq	f1, 2, [lr, #-8]
    1998:	1f040000 	svcne	0x00040000
    199c:	000000ae 	andeq	r0, r0, lr, lsr #1
    19a0:	00032302 	andeq	r2, r3, r2, lsl #6
    19a4:	000d1e09 	andeq	r1, sp, r9, lsl #28
    19a8:	c4200400 	strtgt	r0, [r0], #-1024
    19ac:	13000002 	movwne	r0, #2	; 0x2
    19b0:	0011db01 	andseq	sp, r1, r1, lsl #22
    19b4:	01250100 	teqeq	r5, r0, lsl #2
    19b8:	08003c08 	stmdaeq	r0, {r3, sl, fp, ip, sp}
    19bc:	08003c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, ip, sp}
    19c0:	03355d01 	teqeq	r5, #64	; 0x40
    19c4:	85140000 	ldrhi	r0, [r4]
    19c8:	0100000e 	tsteq	r0, lr
    19cc:	00003a26 	andeq	r3, r0, r6, lsr #20
    19d0:	00520100 	subseq	r0, r2, r0, lsl #2
    19d4:	11680113 	cmnne	r8, r3, lsl r1
    19d8:	3c010000 	stccc	0, cr0, [r1], {0}
    19dc:	003c3c01 	eorseq	r3, ip, r1, lsl #24
    19e0:	003c6c08 	eorseq	r6, ip, r8, lsl #24
    19e4:	585d0108 	ldmdapl	sp, {r3, r8}^
    19e8:	15000003 	strne	r0, [r0, #-3]
    19ec:	00000e85 	andeq	r0, r0, r5, lsl #29
    19f0:	003a3d01 	eorseq	r3, sl, r1, lsl #26
    19f4:	13000000 	movwne	r0, #0	; 0x0
    19f8:	0011e701 	andseq	lr, r1, r1, lsl #14
    19fc:	01620100 	cmneq	r2, r0, lsl #2
    1a00:	08003c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, ip, sp}
    1a04:	08003c80 	stmdaeq	r0, {r7, sl, fp, ip, sp}
    1a08:	037f5d01 	cmneq	pc, #64	; 0x40
    1a0c:	8b160000 	blhi	581a14 <__Stack_Size+0x581614>
    1a10:	0100000e 	tsteq	r0, lr
    1a14:	00003a61 	andeq	r3, r0, r1, ror #20
    1a18:	00098700 	andeq	r8, r9, r0, lsl #14
    1a1c:	01170000 	tsteq	r7, r0
    1a20:	00000fc9 	andeq	r0, r0, r9, asr #31
    1a24:	80017501 	andhi	r7, r1, r1, lsl #10
    1a28:	fc08003c 	stc2	0, cr0, [r8], {60}
    1a2c:	9a08003c 	bls	201b24 <__Stack_Size+0x201724>
    1a30:	eb000009 	bl	1a5c <__Stack_Size+0x165c>
    1a34:	16000003 	strne	r0, [r0], -r3
    1a38:	00000d61 	andeq	r0, r0, r1, ror #26
    1a3c:	03eb7401 	mvneq	r7, #16777216	; 0x1000000
    1a40:	09b90000 	ldmibeq	r9!, {}
    1a44:	44180000 	ldrmi	r0, [r8]
    1a48:	01000010 	tsteq	r0, r0, lsl r0
    1a4c:	00003a76 	andeq	r3, r0, r6, ror sl
    1a50:	0009d700 	andeq	sp, r9, r0, lsl #14
    1a54:	0c1e1800 	ldceq	8, cr1, [lr], {0}
    1a58:	76010000 	strvc	r0, [r1], -r0
    1a5c:	0000003a 	andeq	r0, r0, sl, lsr r0
    1a60:	00000a00 	andeq	r0, r0, r0, lsl #20
    1a64:	000c7e18 	andeq	r7, ip, r8, lsl lr
    1a68:	3a760100 	bcc	1d81e70 <__Stack_Size+0x1d81a70>
    1a6c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1a70:	1500000a 	strne	r0, [r0, #-10]
    1a74:	00000df9 	strdeq	r0, [r0], -r9
    1a78:	003a7701 	eorseq	r7, sl, r1, lsl #14
    1a7c:	f4150000 	undefined instruction 0xf4150000
    1a80:	0100000f 	tsteq	r0, pc
    1a84:	00003a77 	andeq	r3, r0, r7, ror sl
    1a88:	04190000 	ldreq	r0, [r9]
    1a8c:	00000305 	andeq	r0, r0, r5, lsl #6
    1a90:	102f0113 	eorne	r0, pc, r3, lsl r1
    1a94:	a9010000 	stmdbge	r1, {}
    1a98:	003cfc01 	eorseq	pc, ip, r1, lsl #24
    1a9c:	003d0808 	eorseq	r0, sp, r8, lsl #16
    1aa0:	165d0108 	ldrbne	r0, [sp], -r8, lsl #2
    1aa4:	1a000004 	bne	1abc <__Stack_Size+0x16bc>
    1aa8:	00000d61 	andeq	r0, r0, r1, ror #26
    1aac:	03eba801 	mvneq	sl, #65536	; 0x10000
    1ab0:	50010000 	andpl	r0, r1, r0
    1ab4:	71011b00 	tstvc	r1, r0, lsl #22
    1ab8:	0100000d 	tsteq	r0, sp
    1abc:	4c010106 	stfmis	f0, [r1], {6}
    1ac0:	08000000 	stmdaeq	r0, {}
    1ac4:	2008003d 	andcs	r0, r8, sp, lsr r0
    1ac8:	0108003d 	tsteq	r8, sp, lsr r0
    1acc:	45011c5d 	strmi	r1, [r1, #-3165]
    1ad0:	01000011 	tsteq	r0, r1, lsl r0
    1ad4:	8e010113 	mcrhi	1, 0, r0, cr1, cr3, {0}
    1ad8:	20000000 	andcs	r0, r0, r0
    1adc:	4408003d 	strmi	r0, [r8], #-61
    1ae0:	0108003d 	tsteq	r8, sp, lsr r0
    1ae4:	0004755d 	andeq	r7, r4, sp, asr r5
    1ae8:	0dc01d00 	stcleq	13, cr1, [r0]
    1aec:	12010000 	andne	r0, r1, #0	; 0x0
    1af0:	00005e01 	andeq	r5, r0, r1, lsl #28
    1af4:	000a3100 	andeq	r3, sl, r0, lsl #2
    1af8:	12001e00 	andne	r1, r0, #0	; 0x0
    1afc:	14010000 	strne	r0, [r1]
    1b00:	00008e01 	andeq	r8, r0, r1, lsl #28
    1b04:	6d741f00 	ldclvs	15, cr1, [r4]
    1b08:	15010070 	strne	r0, [r1, #-112]
    1b0c:	00003a01 	andeq	r3, r0, r1, lsl #20
    1b10:	00520100 	subseq	r0, r2, r0, lsl #2
    1b14:	0f610120 	svceq	0x00610120
    1b18:	2f010000 	svccs	0x00010000
    1b1c:	3d440101 	stfcce	f0, [r4, #-4]
    1b20:	3d500800 	ldclcc	8, cr0, [r0]
    1b24:	5d010800 	stcpl	8, cr0, [r1]
    1b28:	0000049c 	muleq	r0, ip, r4
    1b2c:	000dc021 	andeq	ip, sp, r1, lsr #32
    1b30:	012e0100 	teqeq	lr, r0, lsl #2
    1b34:	0000005e 	andeq	r0, r0, lr, asr r0
    1b38:	20005001 	andcs	r5, r0, r1
    1b3c:	000d2f01 	andeq	r2, sp, r1, lsl #30
    1b40:	013e0100 	teqeq	lr, r0, lsl #2
    1b44:	003d5001 	eorseq	r5, sp, r1
    1b48:	003d6808 	eorseq	r6, sp, r8, lsl #16
    1b4c:	c55d0108 	ldrbgt	r0, [sp, #-264]
    1b50:	1d000004 	stcne	0, cr0, [r0, #-16]
    1b54:	00000dc0 	andeq	r0, r0, r0, asr #27
    1b58:	5e013d01 	cdppl	13, 0, cr3, cr1, cr1, {0}
    1b5c:	44000000 	strmi	r0, [r0]
    1b60:	0000000a 	andeq	r0, r0, sl
    1b64:	0eb2011b 	mrceq	1, 5, r0, cr2, cr11, {0}
    1b68:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    1b6c:	004c0101 	subeq	r0, ip, r1, lsl #2
    1b70:	3d680000 	stclcc	0, cr0, [r8]
    1b74:	3d780800 	ldclcc	8, cr0, [r8]
    1b78:	5d010800 	stcpl	8, cr0, [r1]
    1b7c:	11b9011c 	undefined instruction 0x11b9011c
    1b80:	5b010000 	blpl	41b88 <__Stack_Size+0x41788>
    1b84:	008e0101 	addeq	r0, lr, r1, lsl #2
    1b88:	3d780000 	ldclcc	0, cr0, [r8]
    1b8c:	3d9c0800 	ldccc	8, cr0, [ip]
    1b90:	5d010800 	stcpl	8, cr0, [r1]
    1b94:	00000524 	andeq	r0, r0, r4, lsr #10
    1b98:	000dc01d 	andeq	ip, sp, sp, lsl r0
    1b9c:	015a0100 	cmpeq	sl, r0, lsl #2
    1ba0:	0000005e 	andeq	r0, r0, lr, asr r0
    1ba4:	00000a57 	andeq	r0, r0, r7, asr sl
    1ba8:	0011901e 	andseq	r9, r1, lr, lsl r0
    1bac:	015c0100 	cmpeq	ip, r0, lsl #2
    1bb0:	0000008e 	andeq	r0, r0, lr, lsl #1
    1bb4:	706d741f 	rsbvc	r7, sp, pc, lsl r4
    1bb8:	015d0100 	cmpeq	sp, r0, lsl #2
    1bbc:	0000003a 	andeq	r0, r0, sl, lsr r0
    1bc0:	1b005201 	blne	163cc <__Stack_Size+0x15fcc>
    1bc4:	000e7701 	andeq	r7, lr, r1, lsl #14
    1bc8:	01780100 	cmneq	r8, r0, lsl #2
    1bcc:	00003a01 	andeq	r3, r0, r1, lsl #20
    1bd0:	003d9c00 	eorseq	r9, sp, r0, lsl #24
    1bd4:	003da808 	eorseq	sl, sp, r8, lsl #16
    1bd8:	205d0108 	subscs	r0, sp, r8, lsl #2
    1bdc:	000fb001 	andeq	fp, pc, r1
    1be0:	018a0100 	orreq	r0, sl, r0, lsl #2
    1be4:	003da801 	eorseq	sl, sp, r1, lsl #16
    1be8:	003dbc08 	eorseq	fp, sp, r8, lsl #24
    1bec:	735d0108 	cmpvc	sp, #2	; 0x2
    1bf0:	21000005 	tstcs	r0, r5
    1bf4:	00001183 	andeq	r1, r0, r3, lsl #3
    1bf8:	3a018901 	bcc	64004 <__Stack_Size+0x63c04>
    1bfc:	01000000 	tsteq	r0, r0
    1c00:	10281d50 	eorne	r1, r8, r0, asr sp
    1c04:	89010000 	stmdbhi	r1, {}
    1c08:	00003a01 	andeq	r3, r0, r1, lsl #20
    1c0c:	000a6a00 	andeq	r6, sl, r0, lsl #20
    1c10:	01220000 	teqeq	r2, r0
    1c14:	00000de0 	andeq	r0, r0, r0, ror #27
    1c18:	01019a01 	tsteq	r1, r1, lsl #20
    1c1c:	08003dbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sl, fp, ip, sp}
    1c20:	08003dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip, sp}
    1c24:	01225d01 	teqeq	r2, r1, lsl #26
    1c28:	00000eeb 	andeq	r0, r0, fp, ror #29
    1c2c:	0101a601 	tsteq	r1, r1, lsl #12
    1c30:	08003dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp, ip, sp}
    1c34:	08003ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, ip, sp}
    1c38:	01205d01 	teqeq	r0, r1, lsl #26
    1c3c:	00001014 	andeq	r1, r0, r4, lsl r0
    1c40:	0101b901 	tsteq	r1, r1, lsl #18
    1c44:	08003ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, ip, sp}
    1c48:	08003df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp, ip, sp}
    1c4c:	05d05d01 	ldrbeq	r5, [r0, #3329]
    1c50:	ac210000 	stcge	0, cr0, [r1]
    1c54:	01000011 	tsteq	r0, r1, lsl r0
    1c58:	005e01b8 	ldrheq	r0, [lr], #-24
    1c5c:	50010000 	andpl	r0, r1, r0
    1c60:	00083c21 	andeq	r3, r8, r1, lsr #24
    1c64:	01b80100 	undefined instruction 0x01b80100
    1c68:	000000ae 	andeq	r0, r0, lr, lsr #1
    1c6c:	20005101 	andcs	r5, r0, r1, lsl #2
    1c70:	000ffb01 	andeq	pc, pc, r1, lsl #22
    1c74:	01d70100 	bicseq	r0, r7, r0, lsl #2
    1c78:	003df801 	eorseq	pc, sp, r1, lsl #16
    1c7c:	003e2008 	eorseq	r2, lr, r8
    1c80:	155d0108 	ldrbne	r0, [sp, #-264]
    1c84:	1d000006 	stcne	0, cr0, [r0, #-24]
    1c88:	00000ecf 	andeq	r0, r0, pc, asr #29
    1c8c:	3a01d601 	bcc	77498 <__Stack_Size+0x77098>
    1c90:	7d000000 	stcvc	0, cr0, [r0]
    1c94:	2100000a 	tstcs	r0, sl
    1c98:	0000083c 	andeq	r0, r0, ip, lsr r8
    1c9c:	ae01d601 	cfmadd32ge	mvax0, mvfx13, mvfx1, mvfx1
    1ca0:	01000000 	tsteq	r0, r0
    1ca4:	0c1e2351 	ldceq	3, cr2, [lr], {81}
    1ca8:	d8010000 	stmdale	r1, {}
    1cac:	00003a01 	andeq	r3, r0, r1, lsl #20
    1cb0:	00500100 	subseq	r0, r0, r0, lsl #2
    1cb4:	0e1f0124 	mufeqep	f0, f7, f4
    1cb8:	00010000 	andeq	r0, r1, r0
    1cbc:	3e200102 	sufccs	f0, f0, f2
    1cc0:	3e780800 	cdpcc	8, 7, cr0, cr8, cr0, {0}
    1cc4:	0a900800 	beq	fe403ccc <SCS_BASE+0x1e3f5ccc>
    1cc8:	06980000 	ldreq	r0, [r8], r0
    1ccc:	cf1d0000 	svcgt	0x001d0000
    1cd0:	0100000e 	tsteq	r0, lr
    1cd4:	003a01fe 	ldrshteq	r0, [sl], -lr
    1cd8:	0aaf0000 	beq	febc1ce0 <SCS_BASE+0x1ebb3ce0>
    1cdc:	251d0000 	ldrcs	r0, [sp]
    1ce0:	01000011 	tsteq	r0, r1, lsl r0
    1ce4:	005e01fe 	ldrsheq	r0, [lr], #-30
    1ce8:	0ac20000 	beq	ff081cf0 <SCS_BASE+0x1f073cf0>
    1cec:	a71d0000 	ldrge	r0, [sp, -r0]
    1cf0:	0100000d 	tsteq	r0, sp
    1cf4:	005e01ff 	ldrsheq	r0, [lr], #-31
    1cf8:	0ad50000 	beq	ff541d00 <SCS_BASE+0x1f533d00>
    1cfc:	af250000 	svcge	0x00250000
    1d00:	0100000c 	tsteq	r0, ip
    1d04:	003a0201 	eorseq	r0, sl, r1, lsl #4
    1d08:	0ae80000 	beq	ffa01d10 <SCS_BASE+0x1f9f3d10>
    1d0c:	cb1e0000 	blgt	781d14 <__Stack_Size+0x781914>
    1d10:	01000010 	tsteq	r0, r0, lsl r0
    1d14:	003a0201 	eorseq	r0, sl, r1, lsl #4
    1d18:	a01e0000 	andsge	r0, lr, r0
    1d1c:	01000011 	tsteq	r0, r1, lsl r0
    1d20:	003a0201 	eorseq	r0, sl, r1, lsl #4
    1d24:	44250000 	strtmi	r0, [r5]
    1d28:	01000010 	tsteq	r0, r0, lsl r0
    1d2c:	003a0202 	eorseq	r0, sl, r2, lsl #4
    1d30:	0afb0000 	beq	ffec1d38 <SCS_BASE+0x1feb3d38>
    1d34:	1c000000 	stcne	0, cr0, [r0], {0}
    1d38:	0010d001 	andseq	sp, r0, r1
    1d3c:	02290100 	eoreq	r0, r9, #0	; 0x0
    1d40:	00008e01 	andeq	r8, r0, r1, lsl #28
    1d44:	003e7800 	eorseq	r7, lr, r0, lsl #16
    1d48:	003e9808 	eorseq	r9, lr, r8, lsl #16
    1d4c:	ed5d0108 	ldfe	f0, [sp, #-32]
    1d50:	1d000006 	stcne	0, cr0, [r0, #-24]
    1d54:	00000ecf 	andeq	r0, r0, pc, asr #29
    1d58:	3a022801 	bcc	8bd64 <__Stack_Size+0x8b964>
    1d5c:	24000000 	strcs	r0, [r0]
    1d60:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
    1d64:	000008c3 	andeq	r0, r0, r3, asr #17
    1d68:	8e022a01 	fmacshi	s4, s4, s2
    1d6c:	26000000 	strcs	r0, [r0], -r0
    1d70:	00706d74 	rsbseq	r6, r0, r4, ror sp
    1d74:	3a022b01 	bcc	8c980 <__Stack_Size+0x8c580>
    1d78:	25000000 	strcs	r0, [r0]
    1d7c:	00000f7e 	andeq	r0, r0, lr, ror pc
    1d80:	3a022b01 	bcc	8c98c <__Stack_Size+0x8c58c>
    1d84:	37000000 	strcc	r0, [r0, -r0]
    1d88:	0000000b 	andeq	r0, r0, fp
    1d8c:	0f8a0120 	svceq	0x008a0120
    1d90:	4f010000 	svcmi	0x00010000
    1d94:	3e980102 	fmlcce	f0, f0, f2
    1d98:	3eb00800 	cdpcc	8, 11, cr0, cr0, cr0, {0}
    1d9c:	5d010800 	stcpl	8, cr0, [r1]
    1da0:	00000722 	andeq	r0, r0, r2, lsr #14
    1da4:	000ecf1d 	andeq	ip, lr, sp, lsl pc
    1da8:	024e0100 	subeq	r0, lr, #0	; 0x0
    1dac:	0000003a 	andeq	r0, r0, sl, lsr r0
    1db0:	00000b55 	andeq	r0, r0, r5, asr fp
    1db4:	706d7426 	rsbvc	r7, sp, r6, lsr #8
    1db8:	02500100 	subseq	r0, r0, #0	; 0x0
    1dbc:	0000003a 	andeq	r0, r0, sl, lsr r0
    1dc0:	f6012000 	undefined instruction 0xf6012000
    1dc4:	01000010 	tsteq	r0, r0, lsl r0
    1dc8:	b0010267 	andlt	r0, r1, r7, ror #4
    1dcc:	c808003e 	stmdagt	r8, {r1, r2, r3, r4, r5}
    1dd0:	0108003e 	tsteq	r8, lr, lsr r0
    1dd4:	0007575d 	andeq	r5, r7, sp, asr r7
    1dd8:	0ecf1d00 	cdpeq	13, 12, cr1, cr15, cr0, {0}
    1ddc:	66010000 	strvs	r0, [r1], -r0
    1de0:	00003a02 	andeq	r3, r0, r2, lsl #20
    1de4:	000b6800 	andeq	r6, fp, r0, lsl #16
    1de8:	6d742600 	ldclvs	6, cr2, [r4]
    1dec:	68010070 	stmdavs	r1, {r4, r5, r6}
    1df0:	00003a02 	andeq	r3, r0, r2, lsl #20
    1df4:	011c0000 	tsteq	ip, r0
    1df8:	00000f24 	andeq	r0, r0, r4, lsr #30
    1dfc:	01028501 	tsteq	r2, r1, lsl #10
    1e00:	0000008e 	andeq	r0, r0, lr, lsl #1
    1e04:	08003ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp, ip, sp}
    1e08:	08003ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, ip, sp}
    1e0c:	07aa5d01 	streq	r5, [sl, r1, lsl #26]!
    1e10:	cf1d0000 	svcgt	0x001d0000
    1e14:	0100000e 	tsteq	r0, lr
    1e18:	003a0284 	eorseq	r0, sl, r4, lsl #5
    1e1c:	0b7b0000 	bleq	1ec1e24 <__Stack_Size+0x1ec1a24>
    1e20:	c31e0000 	tstgt	lr, #0	; 0x0
    1e24:	01000008 	tsteq	r0, r8
    1e28:	008e0286 	addeq	r0, lr, r6, lsl #5
    1e2c:	74260000 	strtvc	r0, [r6]
    1e30:	0100706d 	tsteq	r0, sp, rrx
    1e34:	003a0288 	eorseq	r0, sl, r8, lsl #5
    1e38:	7e230000 	cdpvc	0, 2, cr0, cr3, cr0, {0}
    1e3c:	0100000f 	tsteq	r0, pc
    1e40:	003a0288 	eorseq	r0, sl, r8, lsl #5
    1e44:	53010000 	movwpl	r0, #4096	; 0x1000
    1e48:	af011c00 	svcge	0x00011c00
    1e4c:	01000010 	tsteq	r0, r0, lsl r0
    1e50:	3a0102ad 	bcc	4290c <__Stack_Size+0x4250c>
    1e54:	e8000000 	stmda	r0, {}
    1e58:	2c08003e 	stccs	0, cr0, [r8], {62}
    1e5c:	0108003f 	tsteq	r8, pc, lsr r0
    1e60:	0008075d 	andeq	r0, r8, sp, asr r7
    1e64:	0ecf1d00 	cdpeq	13, 12, cr1, cr15, cr0, {0}
    1e68:	ac010000 	stcge	0, cr0, [r1], {0}
    1e6c:	00003a02 	andeq	r3, r0, r2, lsl #20
    1e70:	000b8e00 	andeq	r8, fp, r0, lsl #28
    1e74:	11182500 	tstne	r8, r0, lsl #10
    1e78:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    1e7c:	00003a02 	andeq	r3, r0, r2, lsl #20
    1e80:	000bb700 	andeq	fp, fp, r0, lsl #14
    1e84:	0c1e2500 	cfldr32eq	mvfx2, [lr], {0}
    1e88:	af010000 	svcge	0x00010000
    1e8c:	00003a02 	andeq	r3, r0, r2, lsl #20
    1e90:	000be000 	andeq	lr, fp, r0
    1e94:	0f7e2500 	svceq	0x007e2500
    1e98:	af010000 	svcge	0x00010000
    1e9c:	00003a02 	andeq	r3, r0, r2, lsl #20
    1ea0:	000c0900 	andeq	r0, ip, r0, lsl #18
    1ea4:	011c0000 	tsteq	ip, r0
    1ea8:	00000d92 	muleq	r0, r2, sp
    1eac:	0102db01 	tsteq	r2, r1, lsl #22
    1eb0:	0000003a 	andeq	r0, r0, sl, lsr r0
    1eb4:	08003f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, ip, sp}
    1eb8:	08003f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, ip, sp}
    1ebc:	08505d01 	ldmdaeq	r0, {r0, r8, sl, fp, ip, lr}^
    1ec0:	cf1d0000 	svcgt	0x001d0000
    1ec4:	0100000e 	tsteq	r0, lr
    1ec8:	003a02da 	ldrsbteq	r0, [sl], -sl
    1ecc:	0c270000 	stceq	0, cr0, [r7]
    1ed0:	12250000 	eorne	r0, r5, #0	; 0x0
    1ed4:	0100000e 	tsteq	r0, lr
    1ed8:	003a02dc 	ldrsbteq	r0, [sl], -ip
    1edc:	0c3a0000 	ldceq	0, cr0, [sl]
    1ee0:	74260000 	strtvc	r0, [r6]
    1ee4:	0100706d 	tsteq	r0, sp, rrx
    1ee8:	003a02dd 	ldrsbteq	r0, [sl], -sp
    1eec:	27000000 	strcs	r0, [r0, -r0]
    1ef0:	000fde01 	andeq	sp, pc, r1, lsl #28
    1ef4:	01fa0100 	mvnseq	r0, r0, lsl #2
    1ef8:	0000003a 	andeq	r0, r0, sl, lsr r0
    1efc:	08003f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, ip, sp}
    1f00:	08003f4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sl, fp, ip, sp}
    1f04:	00000c4d 	andeq	r0, r0, sp, asr #24
    1f08:	0f490117 	svceq	0x00490117
    1f0c:	eb010000 	bl	41f14 <__Stack_Size+0x41b14>
    1f10:	003f4c01 	eorseq	r4, pc, r1, lsl #24
    1f14:	003f5a08 	eorseq	r5, pc, r8, lsl #20
    1f18:	000c7808 	andeq	r7, ip, r8, lsl #16
    1f1c:	00089200 	andeq	r9, r8, r0, lsl #4
    1f20:	11771600 	cmnne	r7, r0, lsl #12
    1f24:	ea010000 	b	41f2c <__Stack_Size+0x41b2c>
    1f28:	0000003a 	andeq	r0, r0, sl, lsr r0
    1f2c:	00000ca3 	andeq	r0, r0, r3, lsr #25
    1f30:	9e012800 	cdpls	8, 0, cr2, cr1, cr0, {0}
    1f34:	0100000e 	tsteq	r0, lr
    1f38:	3f5c01dd 	svccc	0x005c01dd
    1f3c:	3f680800 	svccc	0x00680800
    1f40:	0cb60800 	ldceq	8, cr0, [r6]
    1f44:	01280000 	teqeq	r8, r0
    1f48:	0000107f 	andeq	r1, r0, pc, ror r0
    1f4c:	6801d101 	stmdavs	r1, {r0, r8, ip, lr, pc}
    1f50:	7408003f 	strvc	r0, [r8], #-63
    1f54:	e108003f 	tst	r8, pc, lsr r0
    1f58:	2800000c 	stmdacs	r0, {r2, r3}
    1f5c:	000e0001 	andeq	r0, lr, r1
    1f60:	01c50100 	biceq	r0, r5, r0, lsl #2
    1f64:	08003f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, ip, sp}
    1f68:	08003f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, ip, sp}
    1f6c:	00000d0c 	andeq	r0, r0, ip, lsl #26
    1f70:	0dd00128 	ldfeqe	f0, [r0, #160]
    1f74:	b9010000 	stmdblt	r1, {}
    1f78:	003f8001 	eorseq	r8, pc, r1
    1f7c:	003f8c08 	eorseq	r8, pc, r8, lsl #24
    1f80:	000d3708 	andeq	r3, sp, r8, lsl #14
    1f84:	02430000 	subeq	r0, r3, #0	; 0x0
    1f88:	00020000 	andeq	r0, r2, r0
    1f8c:	00000890 	muleq	r0, r0, r8
    1f90:	00f10104 	rscseq	r0, r1, r4, lsl #2
    1f94:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1f98:	4b000012 	blmi	1fe8 <__Stack_Size+0x1be8>
    1f9c:	8c000000 	stchi	0, cr0, [r0], {0}
    1fa0:	6c08003f 	stcvs	0, cr0, [r8], {63}
    1fa4:	70080040 	andvc	r0, r8, r0, asr #32
    1fa8:	02000008 	andeq	r0, r0, #8	; 0x8
    1fac:	18610504 	stmdane	r1!, {r2, r8, sl}^
    1fb0:	02020000 	andeq	r0, r2, #0	; 0x0
    1fb4:	0001b205 	andeq	fp, r1, r5, lsl #4
    1fb8:	06010200 	streq	r0, [r1], -r0, lsl #4
    1fbc:	0000010f 	andeq	r0, r0, pc, lsl #2
    1fc0:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    1fc4:	45270200 	strmi	r0, [r7, #-512]!
    1fc8:	02000000 	andeq	r0, r0, #0	; 0x0
    1fcc:	18db0704 	ldmne	fp, {r2, r8, r9, sl}^
    1fd0:	02020000 	andeq	r0, r2, #0	; 0x0
    1fd4:	00009307 	andeq	r9, r0, r7, lsl #6
    1fd8:	38750300 	ldmdacc	r5!, {r8, r9}^
    1fdc:	5d290200 	sfmpl	f0, 4, [r9]
    1fe0:	02000000 	andeq	r0, r0, #0	; 0x0
    1fe4:	010d0801 	tsteq	sp, r1, lsl #16
    1fe8:	45040000 	strmi	r0, [r4]
    1fec:	05000000 	streq	r0, [r0]
    1ff0:	7e390201 	cdpvc	2, 3, cr0, cr9, cr1, {0}
    1ff4:	06000000 	streq	r0, [r0], -r0
    1ff8:	00000b6d 	andeq	r0, r0, sp, ror #22
    1ffc:	45530700 	ldrbmi	r0, [r3, #-1792]
    2000:	00010054 	andeq	r0, r1, r4, asr r0
    2004:	00155f08 	andseq	r5, r5, r8, lsl #30
    2008:	69390200 	ldmdbvs	r9!, {r9}
    200c:	05000000 	streq	r0, [r0]
    2010:	9e3b0201 	cdpls	2, 3, cr0, cr11, cr1, {0}
    2014:	06000000 	streq	r0, [r0], -r0
    2018:	00000212 	andeq	r0, r0, r2, lsl r2
    201c:	00c50600 	sbceq	r0, r5, r0, lsl #12
    2020:	00010000 	andeq	r0, r1, r0
    2024:	000a8d08 	andeq	r8, sl, r8, lsl #26
    2028:	893b0200 	ldmdbhi	fp!, {r9}
    202c:	09000000 	stmdbeq	r0, {}
    2030:	080a0704 	stmdaeq	sl, {r2, r8, r9, sl}
    2034:	d301a403 	movwle	sl, #5123	; 0x1403
    2038:	0b000000 	bleq	2040 <__Stack_Size+0x1c40>
    203c:	03005243 	movweq	r5, #579	; 0x243
    2040:	006401a5 	rsbeq	r0, r4, r5, lsr #3
    2044:	23020000 	movwcs	r0, #8192	; 0x2000
    2048:	53430b00 	movtpl	r0, #15104	; 0x3b00
    204c:	a6030052 	undefined
    2050:	00006401 	andeq	r6, r0, r1, lsl #8
    2054:	04230200 	strteq	r0, [r3], #-512
    2058:	d5010c00 	strle	r0, [r1, #-3072]
    205c:	01000012 	tsteq	r0, r2, lsl r0
    2060:	3f8c0152 	svccc	0x008c0152
    2064:	3f980800 	svccc	0x00980800
    2068:	5d010800 	stcpl	8, cr0, [r1]
    206c:	000000f8 	strdeq	r0, [r0], -r8
    2070:	00083c0d 	andeq	r3, r8, sp, lsl #24
    2074:	9e510100 	rdflss	f0, f1, f0
    2078:	01000000 	tsteq	r0, r0
    207c:	010c0050 	qaddeq	r0, r0, ip
    2080:	00001263 	andeq	r1, r0, r3, ror #4
    2084:	98016201 	stmdals	r1, {r0, r9, sp, lr}
    2088:	a408003f 	strge	r0, [r8], #-63
    208c:	0108003f 	tsteq	r8, pc, lsr r0
    2090:	00011d5d 	andeq	r1, r1, sp, asr sp
    2094:	083c0d00 	ldmdaeq	ip!, {r8, sl, fp}
    2098:	61010000 	tstvs	r1, r0
    209c:	0000009e 	muleq	r0, lr, r0
    20a0:	0c005001 	stceq	0, cr5, [r0], {1}
    20a4:	00129001 	andseq	r9, r2, r1
    20a8:	017b0100 	cmneq	fp, r0, lsl #2
    20ac:	08003fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip, sp}
    20b0:	08003fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, sp}
    20b4:	01535d01 	cmpeq	r3, r1, lsl #26
    20b8:	4d0e0000 	stcmi	0, cr0, [lr]
    20bc:	01000012 	tsteq	r0, r2, lsl r0
    20c0:	00003a7a 	andeq	r3, r0, sl, ror sl
    20c4:	000d6200 	andeq	r6, sp, r0, lsl #4
    20c8:	0c1e0f00 	ldceq	15, cr0, [lr], {0}
    20cc:	7c010000 	stcvc	0, cr0, [r1], {0}
    20d0:	0000003a 	andeq	r0, r0, sl, lsr r0
    20d4:	00000d75 	andeq	r0, r0, r5, ror sp
    20d8:	e9010c00 	stmdb	r1, {sl, fp}
    20dc:	01000012 	tsteq	r0, r2, lsl r0
    20e0:	3fb80196 	svccc	0x00b80196
    20e4:	3fc40800 	svccc	0x00c40800
    20e8:	5d010800 	stcpl	8, cr0, [r1]
    20ec:	00000178 	andeq	r0, r0, r8, ror r1
    20f0:	00083c0d 	andeq	r3, r8, sp, lsl #24
    20f4:	9e950100 	fmllss	f0, f5, f0
    20f8:	01000000 	tsteq	r0, r0
    20fc:	01100050 	tsteq	r0, r0, asr r0
    2100:	000012a3 	andeq	r1, r0, r3, lsr #5
    2104:	7e01f301 	cdpvc	3, 0, cr15, cr1, cr1, {0}
    2108:	c4000000 	strgt	r0, [r0]
    210c:	d808003f 	stmdale	r8, {r0, r1, r2, r3, r4, r5}
    2110:	0108003f 	tsteq	r8, pc, lsr r0
    2114:	0001ae5d 	andeq	sl, r1, sp, asr lr
    2118:	125a0e00 	subsne	r0, sl, #0	; 0x0
    211c:	f2010000 	vhadd.s8	d0, d1, d0
    2120:	0000003a 	andeq	r0, r0, sl, lsr r0
    2124:	00000d93 	muleq	r0, r3, sp
    2128:	0008c311 	andeq	ip, r8, r1, lsl r3
    212c:	7ef40100 	cdpvc	1, 15, cr0, cr4, cr0, {0}
    2130:	00000000 	andeq	r0, r0, r0
    2134:	12260112 	eorne	r0, r6, #-2147483644	; 0x80000004
    2138:	11010000 	tstne	r1, r0
    213c:	3fd80101 	svccc	0x00d80101
    2140:	3fe80800 	svccc	0x00e80800
    2144:	5d010800 	stcpl	8, cr0, [r1]
    2148:	000001d5 	ldrdeq	r0, [r0], -r5
    214c:	00125a13 	andseq	r5, r2, r3, lsl sl
    2150:	01100100 	tsteq	r0, r0, lsl #2
    2154:	0000003a 	andeq	r0, r0, sl, lsr r0
    2158:	14005001 	strne	r5, [r0], #-1
    215c:	00121101 	andseq	r1, r2, r1, lsl #2
    2160:	01d90100 	bicseq	r0, r9, r0, lsl #2
    2164:	08003fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp, ip, sp}
    2168:	0800401c 	stmdaeq	r0, {r2, r3, r4, lr}
    216c:	00000da6 	andeq	r0, r0, r6, lsr #27
    2170:	12b50115 	adcsne	r0, r5, #1073741829	; 0x40000005
    2174:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    2178:	00401c01 	subeq	r1, r0, r1, lsl #24
    217c:	00405408 	subeq	r5, r0, r8, lsl #8
    2180:	000dd108 	andeq	sp, sp, r8, lsl #2
    2184:	00023100 	andeq	r3, r2, r0, lsl #2
    2188:	123f0e00 	eorsne	r0, pc, #0	; 0x0
    218c:	ad010000 	stcge	0, cr0, [r1]
    2190:	0000003a 	andeq	r0, r0, sl, lsr r0
    2194:	00000dfc 	strdeq	r0, [r0], -ip
    2198:	0012c70e 	andseq	ip, r2, lr, lsl #14
    219c:	53ad0100 	undefined instruction 0x53ad0100
    21a0:	0f000000 	svceq	0x00000000
    21a4:	0f00000e 	svceq	0x0000000e
    21a8:	00000c1e 	andeq	r0, r0, lr, lsl ip
    21ac:	003aaf01 	eorseq	sl, sl, r1, lsl #30
    21b0:	0e2d0000 	cdpeq	0, 2, cr0, cr13, cr0, {0}
    21b4:	14000000 	strne	r0, [r0]
    21b8:	00123401 	andseq	r3, r2, r1, lsl #8
    21bc:	01440100 	cmpeq	r4, r0, lsl #2
    21c0:	08004054 	stmdaeq	r0, {r2, r4, r6, lr}
    21c4:	0800406c 	stmdaeq	r0, {r2, r3, r5, r6, lr}
    21c8:	00000e56 	andeq	r0, r0, r6, asr lr
    21cc:	0008b900 	andeq	fp, r8, r0, lsl #18
    21d0:	d0000200 	andle	r0, r0, r0, lsl #4
    21d4:	04000009 	streq	r0, [r0], #-9
    21d8:	0000f101 	andeq	pc, r0, r1, lsl #2
    21dc:	16670100 	strbtne	r0, [r7], -r0, lsl #2
    21e0:	004b0000 	subeq	r0, fp, r0
    21e4:	406c0000 	rsbmi	r0, ip, r0
    21e8:	44100800 	ldrmi	r0, [r0], #-2048
    21ec:	09460800 	stmdbeq	r6, {fp}^
    21f0:	04020000 	streq	r0, [r2]
    21f4:	00186105 	andseq	r6, r8, r5, lsl #2
    21f8:	05020200 	streq	r0, [r2, #-512]
    21fc:	000001b2 	strheq	r0, [r0], -r2
    2200:	0f060102 	svceq	0x00060102
    2204:	03000001 	movweq	r0, #1	; 0x1
    2208:	00323375 	eorseq	r3, r2, r5, ror r3
    220c:	00452702 	subeq	r2, r5, r2, lsl #14
    2210:	04020000 	streq	r0, [r2]
    2214:	0018db07 	andseq	sp, r8, r7, lsl #22
    2218:	07020200 	streq	r0, [r2, -r0, lsl #4]
    221c:	00000093 	muleq	r0, r3, r0
    2220:	00387503 	eorseq	r7, r8, r3, lsl #10
    2224:	005d2902 	subseq	r2, sp, r2, lsl #18
    2228:	01020000 	tsteq	r2, r0
    222c:	00010d08 	andeq	r0, r1, r8, lsl #26
    2230:	00450400 	subeq	r0, r5, r0, lsl #8
    2234:	01050000 	tsteq	r5, r0
    2238:	007e3902 	rsbseq	r3, lr, r2, lsl #18
    223c:	6d060000 	stcvs	0, cr0, [r6]
    2240:	0000000b 	andeq	r0, r0, fp
    2244:	54455307 	strbpl	r5, [r5], #-775
    2248:	08000100 	stmdaeq	r0, {r8}
    224c:	0000155f 	andeq	r1, r0, pc, asr r5
    2250:	00693902 	rsbeq	r3, r9, r2, lsl #18
    2254:	59080000 	stmdbpl	r8, {}
    2258:	02000013 	andeq	r0, r0, #19	; 0x13
    225c:	00006939 	andeq	r6, r0, r9, lsr r9
    2260:	02010500 	andeq	r0, r1, #0	; 0x0
    2264:	0000a93b 	andeq	sl, r0, fp, lsr r9
    2268:	02120600 	andseq	r0, r2, #0	; 0x0
    226c:	06000000 	streq	r0, [r0], -r0
    2270:	000000c5 	andeq	r0, r0, r5, asr #1
    2274:	8d080001 	stchi	0, cr0, [r8, #-4]
    2278:	0200000a 	andeq	r0, r0, #10	; 0xa
    227c:	0000943b 	andeq	r9, r0, fp, lsr r4
    2280:	02010500 	andeq	r0, r1, #0	; 0x0
    2284:	0000c93e 	andeq	ip, r0, lr, lsr r9
    2288:	01ec0600 	mvneq	r0, r0, lsl #12
    228c:	06000000 	streq	r0, [r0], -r0
    2290:	000000dd 	ldrdeq	r0, [r0], -sp
    2294:	e5080001 	str	r0, [r8, #-1]
    2298:	02000000 	andeq	r0, r0, #0	; 0x0
    229c:	0000b43e 	andeq	fp, r0, lr, lsr r4
    22a0:	07040900 	streq	r0, [r4, -r0, lsl #18]
    22a4:	ab03280a 	blge	cc2d4 <__Stack_Size+0xcbed4>
    22a8:	00017601 	andeq	r7, r1, r1, lsl #12
    22ac:	52430b00 	subpl	r0, r3, #0	; 0x0
    22b0:	01ac0300 	undefined instruction 0x01ac0300
    22b4:	00000064 	andeq	r0, r0, r4, rrx
    22b8:	0c002302 	stceq	3, cr2, [r0], {2}
    22bc:	000013be 	strheq	r1, [r0], -lr
    22c0:	6401ad03 	strvs	sl, [r1], #-3331
    22c4:	02000000 	andeq	r0, r0, #0	; 0x0
    22c8:	430b0423 	movwmi	r0, #46115	; 0xb423
    22cc:	03005249 	movweq	r5, #585	; 0x249
    22d0:	006401ae 	rsbeq	r0, r4, lr, lsr #3
    22d4:	23020000 	movwcs	r0, #8192	; 0x2000
    22d8:	147d0c08 	ldrbtne	r0, [sp], #-3080
    22dc:	af030000 	svcge	0x00030000
    22e0:	00006401 	andeq	r6, r0, r1, lsl #8
    22e4:	0c230200 	sfmeq	f0, 4, [r3]
    22e8:	0012fa0c 	andseq	pc, r2, ip, lsl #20
    22ec:	01b00300 	lslseq	r0, r0, #6
    22f0:	00000064 	andeq	r0, r0, r4, rrx
    22f4:	0c102302 	ldceq	3, cr2, [r0], {2}
    22f8:	0000149f 	muleq	r0, pc, r4
    22fc:	6401b103 	strvs	fp, [r1], #-259
    2300:	02000000 	andeq	r0, r0, #0	; 0x0
    2304:	d70c1423 	strle	r1, [ip, -r3, lsr #8]
    2308:	03000014 	movweq	r0, #20	; 0x14
    230c:	006401b2 	strhteq	r0, [r4], #-18
    2310:	23020000 	movwcs	r0, #8192	; 0x2000
    2314:	13d20c18 	bicsne	r0, r2, #6144	; 0x1800
    2318:	b3030000 	movwlt	r0, #12288	; 0x3000
    231c:	00006401 	andeq	r6, r0, r1, lsl #8
    2320:	1c230200 	sfmne	f0, 4, [r3]
    2324:	0013620c 	andseq	r6, r3, ip, lsl #4
    2328:	01b40300 	undefined instruction 0x01b40300
    232c:	00000064 	andeq	r0, r0, r4, rrx
    2330:	0b202302 	bleq	80af40 <__Stack_Size+0x80ab40>
    2334:	00525343 	subseq	r5, r2, r3, asr #6
    2338:	6401b503 	strvs	fp, [r1], #-1283
    233c:	02000000 	andeq	r0, r0, #0	; 0x0
    2340:	0d002423 	cfstrseq	mvf2, [r0, #-140]
    2344:	c51a0414 	ldrgt	r0, [sl, #-1044]
    2348:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    234c:	000015bd 	strheq	r1, [r0], -sp
    2350:	003a1b04 	eorseq	r1, sl, r4, lsl #22
    2354:	23020000 	movwcs	r0, #8192	; 0x2000
    2358:	13c30e00 	bicne	r0, r3, #0	; 0x0
    235c:	1c040000 	stcne	0, cr0, [r4], {0}
    2360:	0000003a 	andeq	r0, r0, sl, lsr r0
    2364:	0e042302 	cdpeq	3, 0, cr2, cr4, cr2, {0}
    2368:	00001626 	andeq	r1, r0, r6, lsr #12
    236c:	003a1d04 	eorseq	r1, sl, r4, lsl #26
    2370:	23020000 	movwcs	r0, #8192	; 0x2000
    2374:	15d90e08 	ldrbne	r0, [r9, #3592]
    2378:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    237c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2380:	0e0c2302 	cdpeq	3, 0, cr2, cr12, cr2, {0}
    2384:	0000151f 	andeq	r1, r0, pc, lsl r5
    2388:	003a1f04 	eorseq	r1, sl, r4, lsl #30
    238c:	23020000 	movwcs	r0, #8192	; 0x2000
    2390:	8b080010 	blhi	2023d8 <__Stack_Size+0x201fd8>
    2394:	04000013 	streq	r0, [r0], #-19
    2398:	00017620 	andeq	r7, r1, r0, lsr #12
    239c:	58010f00 	stmdapl	r1, {r8, r9, sl, fp}
    23a0:	01000015 	tsteq	r0, r5, lsl r0
    23a4:	7e0103de 	mcrvc	3, 0, r0, cr1, cr14, {6}
    23a8:	01000000 	tsteq	r0, r0
    23ac:	00000214 	andeq	r0, r0, r4, lsl r2
    23b0:	00153010 	andseq	r3, r5, r0, lsl r0
    23b4:	03dd0100 	bicseq	r0, sp, #0	; 0x0
    23b8:	00000053 	andeq	r0, r0, r3, asr r0
    23bc:	706d7411 	rsbvc	r7, sp, r1, lsl r4
    23c0:	03df0100 	bicseq	r0, pc, #0	; 0x0
    23c4:	0000003a 	andeq	r0, r0, sl, lsr r0
    23c8:	0014b612 	andseq	fp, r4, r2, lsl r6
    23cc:	03e00100 	mvneq	r0, #0	; 0x0
    23d0:	0000003a 	andeq	r0, r0, sl, lsr r0
    23d4:	0008c312 	andeq	ip, r8, r2, lsl r3
    23d8:	03e10100 	mvneq	r0, #0	; 0x0
    23dc:	0000007e 	andeq	r0, r0, lr, ror r0
    23e0:	ee011300 	cdp	3, 0, cr1, cr1, cr0, {0}
    23e4:	01000013 	tsteq	r0, r3, lsl r0
    23e8:	406c017d 	rsbmi	r0, ip, sp, ror r1
    23ec:	40ac0800 	adcmi	r0, ip, r0, lsl #16
    23f0:	5d010800 	stcpl	8, cr0, [r1]
    23f4:	15af0114 	strne	r0, [pc, #276]!	; 2510 <__Stack_Size+0x2110>
    23f8:	a0010000 	andge	r0, r1, r0
    23fc:	0040ac01 	subeq	sl, r0, r1, lsl #24
    2400:	0040e008 	subeq	lr, r0, r8
    2404:	4c5d0108 	ldfmie	f0, [sp], {8}
    2408:	15000002 	strne	r0, [r0, #-2]
    240c:	0000160d 	andeq	r1, r0, sp, lsl #12
    2410:	003a9f01 	eorseq	r9, sl, r1, lsl #30
    2414:	50010000 	andpl	r0, r1, r0
    2418:	f9011600 	undefined instruction 0xf9011600
    241c:	01000013 	tsteq	r0, r3, lsl r0
    2420:	00c901c7 	sbceq	r0, r9, r7, asr #3
    2424:	40e00000 	rscmi	r0, r0, r0
    2428:	41100800 	tstmi	r0, r0, lsl #16
    242c:	0e750800 	cdpeq	8, 7, cr0, cr5, cr0, {0}
    2430:	02f10000 	rscseq	r0, r1, #0	; 0x0
    2434:	df170000 	svcle	0x00170000
    2438:	01000014 	tsteq	r0, r4, lsl r0
    243c:	000064c8 	andeq	r6, r0, r8, asr #9
    2440:	000e9400 	andeq	r9, lr, r0, lsl #8
    2444:	08bc1800 	ldmeq	ip!, {fp, ip}
    2448:	c9010000 	stmdbgt	r1, {}
    244c:	000000c9 	andeq	r0, r0, r9, asr #1
    2450:	0015a518 	andseq	sl, r5, r8, lsl r5
    2454:	7eca0100 	polvce	f0, f2, f0
    2458:	19000000 	stmdbne	r0, {}
    245c:	000001d0 	ldrdeq	r0, [r0], -r0
    2460:	080040e4 	stmdaeq	r0, {r2, r5, r6, r7, lr}
    2464:	000000c8 	andeq	r0, r0, r8, asr #1
    2468:	02becf01 	adcseq	ip, lr, #4	; 0x4
    246c:	e31a0000 	tst	sl, #0	; 0x0
    2470:	1b000001 	blne	247c <__Stack_Size+0x207c>
    2474:	000000e0 	andeq	r0, r0, r0, ror #1
    2478:	0001ef1c 	andeq	lr, r1, ip, lsl pc
    247c:	01fb1d00 	mvnseq	r1, r0, lsl #26
    2480:	52010000 	andpl	r0, r1, #0	; 0x0
    2484:	0002071c 	andeq	r0, r2, ip, lsl r7
    2488:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    248c:	000001d0 	ldrdeq	r0, [r0], -r0
    2490:	080040fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, lr}
    2494:	08004108 	stmdaeq	r0, {r3, r8, lr}
    2498:	e31ad401 	tst	sl, #16777216	; 0x1000000
    249c:	1f000001 	svcne	0x00000001
    24a0:	080040fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, lr}
    24a4:	08004108 	stmdaeq	r0, {r3, r8, lr}
    24a8:	0001ef1c 	andeq	lr, r1, ip, lsl pc
    24ac:	01fb2000 	mvnseq	r2, r0
    24b0:	0ebf0000 	cdpeq	0, 11, cr0, cr15, cr0, {0}
    24b4:	071c0000 	ldreq	r0, [ip, -r0]
    24b8:	00000002 	andeq	r0, r0, r2
    24bc:	01140000 	tsteq	r4, r0
    24c0:	00001501 	andeq	r1, r0, r1, lsl #10
    24c4:	1001ea01 	andne	lr, r1, r1, lsl #20
    24c8:	24080041 	strcs	r0, [r8], #-65
    24cc:	01080041 	tsteq	r8, r1, asr #32
    24d0:	0003235d 	andeq	r2, r3, sp, asr r3
    24d4:	150b1500 	strne	r1, [fp, #-1280]
    24d8:	e9010000 	stmdb	r1, {}
    24dc:	00000053 	andeq	r0, r0, r3, asr r0
    24e0:	1e215001 	cdpne	0, 2, cr5, cr1, cr1, {0}
    24e4:	0100000c 	tsteq	r0, ip
    24e8:	00003aeb 	andeq	r3, r0, fp, ror #21
    24ec:	00530100 	subseq	r0, r3, r0, lsl #2
    24f0:	16c10122 	strbne	r0, [r1], r2, lsr #2
    24f4:	07010000 	streq	r0, [r1, -r0]
    24f8:	41240101 	teqmi	r4, r1, lsl #2
    24fc:	41300800 	teqmi	r0, r0, lsl #16
    2500:	5d010800 	stcpl	8, cr0, [r1]
    2504:	0000034a 	andeq	r0, r0, sl, asr #6
    2508:	00083c23 	andeq	r3, r8, r3, lsr #24
    250c:	01060100 	tsteq	r6, r0, lsl #2
    2510:	000000a9 	andeq	r0, r0, r9, lsr #1
    2514:	22005001 	andcs	r5, r0, #1	; 0x1
    2518:	00143701 	andseq	r3, r4, r1, lsl #14
    251c:	01200100 	teqeq	r0, r0, lsl #2
    2520:	00413001 	subeq	r3, r1, r1
    2524:	00414408 	subeq	r4, r1, r8, lsl #8
    2528:	915d0108 	cmpls	sp, r8, lsl #2
    252c:	24000003 	strcs	r0, [r0], #-3
    2530:	00001539 	andeq	r1, r0, r9, lsr r5
    2534:	3a011f01 	bcc	4a140 <__Stack_Size+0x49d40>
    2538:	d2000000 	andle	r0, r0, #0	; 0x0
    253c:	2300000e 	movwcs	r0, #14	; 0xe
    2540:	0000139d 	muleq	r0, sp, r3
    2544:	3a011f01 	bcc	4a150 <__Stack_Size+0x49d50>
    2548:	01000000 	tsteq	r0, r0
    254c:	0c1e2551 	cfldr32eq	mvfx2, [lr], {81}
    2550:	21010000 	tstcs	r1, r0
    2554:	00003a01 	andeq	r3, r0, r1, lsl #20
    2558:	000ee500 	andeq	lr, lr, r0, lsl #10
    255c:	01220000 	teqeq	r2, r0
    2560:	00001380 	andeq	r1, r0, r0, lsl #7
    2564:	01013d01 	tsteq	r1, r1, lsl #26
    2568:	08004144 	stmdaeq	r0, {r2, r6, r8, lr}
    256c:	08004150 	stmdaeq	r0, {r4, r6, r8, lr}
    2570:	03b85d01 	undefined instruction 0x03b85d01
    2574:	3c230000 	stccc	0, cr0, [r3]
    2578:	01000008 	tsteq	r0, r8
    257c:	00a9013c 	adceq	r0, r9, ip, lsr r1
    2580:	50010000 	andpl	r0, r1, r0
    2584:	47012200 	strmi	r2, [r1, -r0, lsl #4]
    2588:	01000015 	tsteq	r0, r5, lsl r0
    258c:	50010150 	andpl	r0, r1, r0, asr r1
    2590:	64080041 	strvs	r0, [r8], #-65
    2594:	01080041 	tsteq	r8, r1, asr #32
    2598:	0003f15d 	andeq	pc, r3, sp, asr r1
    259c:	16152400 	ldrne	r2, [r5], -r0, lsl #8
    25a0:	4f010000 	svcmi	0x00010000
    25a4:	00003a01 	andeq	r3, r0, r1, lsl #20
    25a8:	000f0300 	andeq	r0, pc, r0, lsl #6
    25ac:	0c1e2500 	cfldr32eq	mvfx2, [lr], {0}
    25b0:	51010000 	tstpl	r1, r0
    25b4:	00003a01 	andeq	r3, r0, r1, lsl #20
    25b8:	000f1600 	andeq	r1, pc, r0, lsl #12
    25bc:	01260000 	teqeq	r6, r0
    25c0:	00001469 	andeq	r1, r0, r9, ror #8
    25c4:	01016e01 	tsteq	r1, r1, lsl #28
    25c8:	00000053 	andeq	r0, r0, r3, asr r0
    25cc:	08004164 	stmdaeq	r0, {r2, r5, r6, r8, lr}
    25d0:	08004174 	stmdaeq	r0, {r2, r4, r5, r6, r8, lr}
    25d4:	01225d01 	teqeq	r2, r1, lsl #26
    25d8:	000016b2 	strheq	r1, [r0], -r2
    25dc:	01018501 	tsteq	r1, r1, lsl #10
    25e0:	08004174 	stmdaeq	r0, {r2, r4, r5, r6, r8, lr}
    25e4:	08004188 	stmdaeq	r0, {r3, r7, r8, lr}
    25e8:	04425d01 	strbeq	r5, [r2], #-3329
    25ec:	9a240000 	bls	9025f4 <__Stack_Size+0x9021f4>
    25f0:	01000015 	tsteq	r0, r5, lsl r0
    25f4:	003a0184 	eorseq	r0, sl, r4, lsl #3
    25f8:	0f340000 	svceq	0x00340000
    25fc:	1e250000 	cdpne	0, 2, cr0, cr5, cr0, {0}
    2600:	0100000c 	tsteq	r0, ip
    2604:	003a0186 	eorseq	r0, sl, r6, lsl #3
    2608:	0f470000 	svceq	0x00470000
    260c:	22000000 	andcs	r0, r0, #0	; 0x0
    2610:	0014a601 	andseq	sl, r4, r1, lsl #12
    2614:	01a60100 	undefined instruction 0x01a60100
    2618:	00418801 	subeq	r8, r1, r1, lsl #16
    261c:	00419c08 	subeq	r9, r1, r8, lsl #24
    2620:	7b5d0108 	blvc	1742a48 <__Stack_Size+0x1742648>
    2624:	24000004 	strcs	r0, [r0], #-4
    2628:	00001303 	andeq	r1, r0, r3, lsl #6
    262c:	3a01a501 	bcc	6ba38 <__Stack_Size+0x6b638>
    2630:	65000000 	strvs	r0, [r0]
    2634:	2500000f 	strcs	r0, [r0, #-15]
    2638:	00000c1e 	andeq	r0, r0, lr, lsl ip
    263c:	3a01a701 	bcc	6c248 <__Stack_Size+0x6be48>
    2640:	78000000 	stmdavc	r0, {}
    2644:	0000000f 	andeq	r0, r0, pc
    2648:	16e90122 	strbtne	r0, [r9], r2, lsr #2
    264c:	c7010000 	strgt	r0, [r1, -r0]
    2650:	419c0101 	orrsmi	r0, ip, r1, lsl #2
    2654:	41b00800 	lslsmi	r0, r0, #16
    2658:	5d010800 	stcpl	8, cr0, [r1]
    265c:	000004b0 	strheq	r0, [r0], -r0
    2660:	00130323 	andseq	r0, r3, r3, lsr #6
    2664:	01c60100 	biceq	r0, r6, r0, lsl #2
    2668:	0000003a 	andeq	r0, r0, sl, lsr r0
    266c:	1e275001 	cdpne	0, 2, cr5, cr7, cr1, {0}
    2670:	0100000c 	tsteq	r0, ip
    2674:	003a01c8 	eorseq	r0, sl, r8, asr #3
    2678:	53010000 	movwpl	r0, #4096	; 0x1000
    267c:	e9012200 	stmdb	r1, {r9, sp}
    2680:	01000015 	tsteq	r0, r5, lsl r0
    2684:	b00101ea 	andlt	r0, r1, sl, ror #3
    2688:	cc080041 	stcgt	0, cr0, [r8], {65}
    268c:	01080041 	tsteq	r8, r1, asr #32
    2690:	0004e55d 	andeq	lr, r4, sp, asr r5
    2694:	16d42300 	ldrbne	r2, [r4], r0, lsl #6
    2698:	e9010000 	stmdb	r1, {}
    269c:	00005301 	andeq	r5, r0, r1, lsl #6
    26a0:	23500100 	cmpcs	r0, #0	; 0x0
    26a4:	0000083c 	andeq	r0, r0, ip, lsr r8
    26a8:	a901e901 	stmdbge	r1, {r0, r8, fp, sp, lr, pc}
    26ac:	01000000 	tsteq	r0, r0
    26b0:	01220051 	qsubeq	r0, r1, r2
    26b4:	0000144d 	andeq	r1, r0, sp, asr #8
    26b8:	01020901 	tsteq	r2, r1, lsl #18
    26bc:	080041cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, lr}
    26c0:	080041d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, lr}
    26c4:	050c5d01 	streq	r5, [ip, #-3329]
    26c8:	7b230000 	blvc	8c26d0 <__Stack_Size+0x8c22d0>
    26cc:	01000015 	tsteq	r0, r5, lsl r0
    26d0:	003a0208 	eorseq	r0, sl, r8, lsl #4
    26d4:	50010000 	andpl	r0, r1, r0
    26d8:	0c012200 	sfmeq	f2, 4, [r1], {0}
    26dc:	01000013 	tsteq	r0, r3, lsl r0
    26e0:	d801021e 	stmdale	r1, {r1, r2, r3, r4, r9}
    26e4:	ec080041 	stc	0, cr0, [r8], {65}
    26e8:	01080041 	tsteq	r8, r1, asr #32
    26ec:	0005455d 	andeq	r4, r5, sp, asr r5
    26f0:	13762400 	cmnne	r6, #0	; 0x0
    26f4:	1d010000 	stcne	0, cr0, [r1]
    26f8:	00003a02 	andeq	r3, r0, r2, lsl #20
    26fc:	000f9600 	andeq	r9, pc, r0, lsl #12
    2700:	0c1e2500 	cfldr32eq	mvfx2, [lr], {0}
    2704:	1f010000 	svcne	0x00010000
    2708:	00003a02 	andeq	r3, r0, r2, lsl #20
    270c:	000fa900 	andeq	sl, pc, r0, lsl #18
    2710:	01220000 	teqeq	r2, r0
    2714:	00001636 	andeq	r1, r0, r6, lsr r6
    2718:	01023d01 	tsteq	r2, r1, lsl #26
    271c:	080041ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, lr}
    2720:	0800420c 	stmdaeq	r0, {r2, r3, r9, lr}
    2724:	056c5d01 	strbeq	r5, [ip, #-3329]!
    2728:	4a230000 	bmi	8c2730 <__Stack_Size+0x8c2330>
    272c:	01000013 	tsteq	r0, r3, lsl r0
    2730:	0053023c 	subseq	r0, r3, ip, lsr r2
    2734:	50010000 	andpl	r0, r1, r0
    2738:	5e012200 	cdppl	2, 0, cr2, cr1, cr0, {0}
    273c:	01000014 	tsteq	r0, r4, lsl r0
    2740:	0c010264 	sfmeq	f0, 4, [r1], {100}
    2744:	18080042 	stmdane	r8, {r1, r6}
    2748:	01080042 	tsteq	r8, r2, asr #32
    274c:	0005935d 	andeq	r9, r5, sp, asr r3
    2750:	083c2300 	ldmdaeq	ip!, {r8, r9, sp}
    2754:	63010000 	movwvs	r0, #4096	; 0x1000
    2758:	0000a902 	andeq	sl, r0, r2, lsl #18
    275c:	00500100 	subseq	r0, r0, r0, lsl #2
    2760:	156a0122 	strbne	r0, [sl, #-290]!
    2764:	7a010000 	bvc	4276c <__Stack_Size+0x4236c>
    2768:	42180102 	andsmi	r0, r8, #-2147483648	; 0x80000000
    276c:	42280800 	eormi	r0, r8, #0	; 0x0
    2770:	5d010800 	stcpl	8, cr0, [r1]
    2774:	000005bc 	strheq	r0, [r0], -ip
    2778:	00140f24 	andseq	r0, r4, r4, lsr #30
    277c:	02790100 	rsbseq	r0, r9, #0	; 0x0
    2780:	0000003a 	andeq	r0, r0, sl, lsr r0
    2784:	00000fc7 	andeq	r0, r0, r7, asr #31
    2788:	89012200 	stmdbhi	r1, {r9, sp}
    278c:	01000016 	tsteq	r0, r6, lsl r0
    2790:	2801028d 	stmdacs	r1, {r0, r2, r3, r7, r9}
    2794:	34080042 	strcc	r0, [r8], #-66
    2798:	01080042 	tsteq	r8, r2, asr #32
    279c:	0005e35d 	andeq	lr, r5, sp, asr r3
    27a0:	083c2300 	ldmdaeq	ip!, {r8, r9, sp}
    27a4:	8c010000 	stchi	0, cr0, [r1], {0}
    27a8:	0000a902 	andeq	sl, r0, r2, lsl #18
    27ac:	00500100 	subseq	r0, r0, r0, lsl #2
    27b0:	16550122 	ldrbne	r0, [r5], -r2, lsr #2
    27b4:	9d010000 	stcls	0, cr0, [r1]
    27b8:	42340102 	eorsmi	r0, r4, #-2147483648	; 0x80000000
    27bc:	42ec0800 	rscmi	r0, ip, #0	; 0x0
    27c0:	5d010800 	stcpl	8, cr0, [r1]
    27c4:	00000644 	andeq	r0, r0, r4, asr #12
    27c8:	0015ce24 	andseq	ip, r5, r4, lsr #28
    27cc:	029c0100 	addseq	r0, ip, #0	; 0x0
    27d0:	00000644 	andeq	r0, r0, r4, asr #12
    27d4:	00000fda 	ldrdeq	r0, [r0], -sl
    27d8:	706d7428 	rsbvc	r7, sp, r8, lsr #8
    27dc:	029e0100 	addseq	r0, lr, #0	; 0x0
    27e0:	0000003a 	andeq	r0, r0, sl, lsr r0
    27e4:	00000ff8 	strdeq	r0, [r0], -r8
    27e8:	00144525 	andseq	r4, r4, r5, lsr #10
    27ec:	029e0100 	addseq	r0, lr, #0	; 0x0
    27f0:	0000003a 	andeq	r0, r0, sl, lsr r0
    27f4:	0000102c 	andeq	r1, r0, ip, lsr #32
    27f8:	00149512 	andseq	r9, r4, r2, lsl r5
    27fc:	029e0100 	addseq	r0, lr, #0	; 0x0
    2800:	0000003a 	andeq	r0, r0, sl, lsr r0
    2804:	0013da12 	andseq	sp, r3, r2, lsl sl
    2808:	029e0100 	addseq	r0, lr, #0	; 0x0
    280c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2810:	c5042900 	strgt	r2, [r4, #-2304]
    2814:	22000001 	andcs	r0, r0, #1	; 0x1
    2818:	0013a801 	andseq	sl, r3, r1, lsl #16
    281c:	03010100 	movweq	r0, #4352	; 0x1100
    2820:	0042ec01 	subeq	lr, r2, r1, lsl #24
    2824:	00430808 	subeq	r0, r3, r8, lsl #16
    2828:	7f5d0108 	svcvc	0x005d0108
    282c:	23000006 	movwcs	r0, #6	; 0x6
    2830:	000016db 	ldrdeq	r1, [r0], -fp
    2834:	3a030001 	bcc	c2840 <__Stack_Size+0xc2440>
    2838:	01000000 	tsteq	r0, r0
    283c:	083c2350 	ldmdaeq	ip!, {r4, r6, r8, r9, sp}
    2840:	00010000 	andeq	r0, r1, r0
    2844:	0000a903 	andeq	sl, r0, r3, lsl #18
    2848:	00510100 	subseq	r0, r1, r0, lsl #2
    284c:	15f60122 	ldrbne	r0, [r6, #290]!
    2850:	22010000 	andcs	r0, r1, #0	; 0x0
    2854:	43080103 	movwmi	r0, #33027	; 0x8103
    2858:	43240800 	teqmi	r4, #0	; 0x0
    285c:	5d010800 	stcpl	8, cr0, [r1]
    2860:	000006b4 	strheq	r0, [r0], -r4
    2864:	00136723 	andseq	r6, r3, r3, lsr #14
    2868:	03210100 	teqeq	r1, #0	; 0x0
    286c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2870:	3c235001 	stccc	0, cr5, [r3], #-4
    2874:	01000008 	tsteq	r0, r8
    2878:	00a90321 	adceq	r0, r9, r1, lsr #6
    287c:	51010000 	tstpl	r1, r0
    2880:	c0012200 	andgt	r2, r1, r0, lsl #4
    2884:	01000014 	tsteq	r0, r4, lsl r0
    2888:	24010344 	strcs	r0, [r1], #-836
    288c:	40080043 	andmi	r0, r8, r3, asr #32
    2890:	01080043 	tsteq	r8, r3, asr #32
    2894:	0006e95d 	andeq	lr, r6, sp, asr r9
    2898:	14862300 	strne	r2, [r6], #768
    289c:	43010000 	movwmi	r0, #4096	; 0x1000
    28a0:	00003a03 	andeq	r3, r0, r3, lsl #20
    28a4:	23500100 	cmpcs	r0, #0	; 0x0
    28a8:	0000083c 	andeq	r0, r0, ip, lsr r8
    28ac:	a9034301 	stmdbge	r3, {r0, r8, r9, lr}
    28b0:	01000000 	tsteq	r0, r0
    28b4:	01220051 	qsubeq	r0, r1, r2
    28b8:	00001333 	andeq	r1, r0, r3, lsr r3
    28bc:	01036401 	tsteq	r3, r1, lsl #8
    28c0:	08004340 	stmdaeq	r0, {r6, r8, r9, lr}
    28c4:	0800435c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, lr}
    28c8:	071e5d01 	ldreq	r5, [lr, -r1, lsl #26]
    28cc:	67230000 	strvs	r0, [r3, -r0]!
    28d0:	01000013 	tsteq	r0, r3, lsl r0
    28d4:	003a0363 	eorseq	r0, sl, r3, ror #6
    28d8:	50010000 	andpl	r0, r1, r0
    28dc:	00083c23 	andeq	r3, r8, r3, lsr #24
    28e0:	03630100 	cmneq	r3, #0	; 0x0
    28e4:	000000a9 	andeq	r0, r0, r9, lsr #1
    28e8:	22005101 	andcs	r5, r0, #1073741824	; 0x40000000
    28ec:	00142001 	andseq	r2, r4, r1
    28f0:	03850100 	orreq	r0, r5, #0	; 0x0
    28f4:	00435c01 	subeq	r5, r3, r1, lsl #24
    28f8:	00437808 	subeq	r7, r3, r8, lsl #16
    28fc:	535d0108 	cmppl	sp, #2	; 0x2
    2900:	23000007 	movwcs	r0, #7	; 0x7
    2904:	00001486 	andeq	r1, r0, r6, lsl #9
    2908:	3a038401 	bcc	e3914 <__Stack_Size+0xe3514>
    290c:	01000000 	tsteq	r0, r0
    2910:	083c2350 	ldmdaeq	ip!, {r4, r6, r8, r9, sp}
    2914:	84010000 	strhi	r0, [r1]
    2918:	0000a903 	andeq	sl, r0, r3, lsl #18
    291c:	00510100 	subseq	r0, r1, r0, lsl #2
    2920:	14ee0122 	strbtne	r0, [lr], #290
    2924:	9d010000 	stcls	0, cr0, [r1]
    2928:	43780103 	cmnmi	r8, #-1073741824	; 0xc0000000
    292c:	43840800 	orrmi	r0, r4, #0	; 0x0
    2930:	5d010800 	stcpl	8, cr0, [r1]
    2934:	0000077a 	andeq	r0, r0, sl, ror r7
    2938:	00083c23 	andeq	r3, r8, r3, lsr #24
    293c:	039c0100 	orrseq	r0, ip, #0	; 0x0
    2940:	000000a9 	andeq	r0, r0, r9, lsr #1
    2944:	22005001 	andcs	r5, r0, #1	; 0x1
    2948:	00169701 	andseq	r9, r6, r1, lsl #14
    294c:	03ad0100 	undefined instruction 0x03ad0100
    2950:	00438401 	subeq	r8, r3, r1, lsl #8
    2954:	00439008 	subeq	r9, r3, r8
    2958:	a15d0108 	cmpge	sp, r8, lsl #2
    295c:	23000007 	movwcs	r0, #7	; 0x7
    2960:	0000083c 	andeq	r0, r0, ip, lsr r8
    2964:	a903ac01 	stmdbge	r3, {r0, sl, fp, sp, pc}
    2968:	01000000 	tsteq	r0, r0
    296c:	01220050 	qsubeq	r0, r0, r2
    2970:	000013e0 	andeq	r1, r0, r0, ror #7
    2974:	0103c201 	tsteq	r3, r1, lsl #4
    2978:	08004390 	stmdaeq	r0, {r4, r7, r8, r9, lr}
    297c:	0800439c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, lr}
    2980:	07c85d01 	strbeq	r5, [r8, r1, lsl #26]
    2984:	cc230000 	stcgt	0, cr0, [r3]
    2988:	01000016 	tsteq	r0, r6, lsl r0
    298c:	005303c1 	subseq	r0, r3, r1, asr #7
    2990:	50010000 	andpl	r0, r1, r0
    2994:	01d02a00 	bicseq	r2, r0, r0, lsl #20
    2998:	439c0000 	orrsmi	r0, ip, #0	; 0x0
    299c:	43e00800 	mvnmi	r0, #0	; 0x0
    29a0:	5d010800 	stcpl	8, cr0, [r1]
    29a4:	000007fc 	strdeq	r0, [r0], -ip
    29a8:	0001e32b 	andeq	lr, r1, fp, lsr #6
    29ac:	00104a00 	andseq	r4, r0, r0, lsl #20
    29b0:	01ef2000 	mvneq	r2, r0
    29b4:	105d0000 	subsne	r0, sp, r0
    29b8:	fb200000 	blx	8029c2 <__Stack_Size+0x8025c2>
    29bc:	86000001 	strhi	r0, [r0], -r1
    29c0:	1c000010 	stcne	0, cr0, [r0], {16}
    29c4:	00000207 	andeq	r0, r0, r7, lsl #4
    29c8:	8c012c00 	stchi	12, cr2, [r1], {0}
    29cc:	01000015 	tsteq	r0, r5, lsl r0
    29d0:	e0010411 	and	r0, r1, r1, lsl r4
    29d4:	f0080043 	undefined instruction 0xf0080043
    29d8:	01080043 	tsteq	r8, r3, asr #32
    29dc:	52012d5d 	andpl	r2, r1, #5952	; 0x1740
    29e0:	01000013 	tsteq	r0, r3, lsl r0
    29e4:	89010425 	stmdbhi	r1, {r0, r2, r5, sl}
    29e8:	f0000000 	undefined instruction 0xf0000000
    29ec:	04080043 	streq	r0, [r8], #-67
    29f0:	01080044 	tsteq	r8, r4, asr #32
    29f4:	0008495d 	andeq	r4, r8, sp, asr r9
    29f8:	16d42400 	ldrbne	r2, [r4], r0, lsl #8
    29fc:	24010000 	strcs	r0, [r1]
    2a00:	00005304 	andeq	r5, r0, r4, lsl #6
    2a04:	0010af00 	andseq	sl, r0, r0, lsl #30
    2a08:	08c31200 	stmiaeq	r3, {r9, ip}^
    2a0c:	26010000 	strcs	r0, [r1], -r0
    2a10:	00008904 	andeq	r8, r0, r4, lsl #18
    2a14:	01220000 	teqeq	r2, r0
    2a18:	0000131d 	andeq	r1, r0, sp, lsl r3
    2a1c:	01044801 	tsteq	r4, r1, lsl #16
    2a20:	08004404 	stmdaeq	r0, {r2, sl, lr}
    2a24:	08004410 	stmdaeq	r0, {r4, sl, lr}
    2a28:	08705d01 	ldmdaeq	r0!, {r0, r8, sl, fp, ip, lr}^
    2a2c:	d4230000 	strtle	r0, [r3]
    2a30:	01000016 	tsteq	r0, r6, lsl r0
    2a34:	00530447 	subseq	r0, r3, r7, asr #8
    2a38:	50010000 	andpl	r0, r1, r0
    2a3c:	005d2e00 	subseq	r2, sp, r0, lsl #28
    2a40:	08800000 	stmeq	r0, {}
    2a44:	d42f0000 	strtle	r0, [pc], #0	; 2a4c <__Stack_Size+0x264c>
    2a48:	0f000000 	svceq	0x00000000
    2a4c:	16442100 	strbne	r2, [r4], -r0, lsl #2
    2a50:	6f010000 	svcvs	0x00010000
    2a54:	00000891 	muleq	r0, r1, r8
    2a58:	45780305 	ldrbmi	r0, [r8, #-773]!
    2a5c:	70300800 	eorsvc	r0, r0, r0, lsl #16
    2a60:	2e000008 	cdpcs	0, 0, cr0, cr0, cr8, {0}
    2a64:	0000005d 	andeq	r0, r0, sp, asr r0
    2a68:	000008a6 	andeq	r0, r0, r6, lsr #17
    2a6c:	0000d42f 	andeq	sp, r0, pc, lsr #8
    2a70:	21000300 	tstcs	r0, r0, lsl #6
    2a74:	000016f9 	strdeq	r1, [r0], -r9
    2a78:	08b77001 	ldmeq	r7!, {r0, ip, sp, lr}
    2a7c:	03050000 	movweq	r0, #20480	; 0x5000
    2a80:	08004588 	stmdaeq	r0, {r3, r7, r8, sl, lr}
    2a84:	00089630 	andeq	r9, r8, r0, lsr r6
    2a88:	01eb0000 	mvneq	r0, r0
    2a8c:	00020000 	andeq	r0, r2, r0
    2a90:	00000c6b 	andeq	r0, r0, fp, ror #24
    2a94:	00f10104 	rscseq	r0, r1, r4, lsl #2
    2a98:	55010000 	strpl	r0, [r1]
    2a9c:	4b000017 	blmi	2b00 <__Stack_Size+0x2700>
    2aa0:	10000000 	andne	r0, r0, r0
    2aa4:	b4080044 	strlt	r0, [r8], #-68
    2aa8:	fe080044 	cdp2	0, 0, cr0, cr8, cr4, {2}
    2aac:	0200000a 	andeq	r0, r0, #10	; 0xa
    2ab0:	18610504 	stmdane	r1!, {r2, r8, sl}^
    2ab4:	02020000 	andeq	r0, r2, #0	; 0x0
    2ab8:	0001b205 	andeq	fp, r1, r5, lsl #4
    2abc:	06010200 	streq	r0, [r1], -r0, lsl #4
    2ac0:	0000010f 	andeq	r0, r0, pc, lsl #2
    2ac4:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    2ac8:	45270200 	strmi	r0, [r7, #-512]!
    2acc:	02000000 	andeq	r0, r0, #0	; 0x0
    2ad0:	18db0704 	ldmne	fp, {r2, r8, r9, sl}^
    2ad4:	02020000 	andeq	r0, r2, #0	; 0x0
    2ad8:	00009307 	andeq	r9, r0, r7, lsl #6
    2adc:	38750300 	ldmdacc	r5!, {r8, r9}^
    2ae0:	5d290200 	sfmpl	f0, 4, [r9]
    2ae4:	02000000 	andeq	r0, r0, #0	; 0x0
    2ae8:	010d0801 	tsteq	sp, r1, lsl #16
    2aec:	45040000 	strmi	r0, [r4]
    2af0:	05000000 	streq	r0, [r0]
    2af4:	00000064 	andeq	r0, r0, r4, rrx
    2af8:	39020106 	stmdbcc	r2, {r1, r2, r8}
    2afc:	00000083 	andeq	r0, r0, r3, lsl #1
    2b00:	000b6d07 	andeq	r6, fp, r7, lsl #26
    2b04:	53080000 	movwpl	r0, #32768	; 0x8000
    2b08:	01005445 	tsteq	r0, r5, asr #8
    2b0c:	155f0900 	ldrbne	r0, [pc, #-2304]	; 2214 <__Stack_Size+0x1e14>
    2b10:	39020000 	stmdbcc	r2, {}
    2b14:	0000006e 	andeq	r0, r0, lr, rrx
    2b18:	3b020106 	blcc	82f38 <__Stack_Size+0x82b38>
    2b1c:	000000a3 	andeq	r0, r0, r3, lsr #1
    2b20:	00021207 	andeq	r1, r2, r7, lsl #4
    2b24:	c5070000 	strgt	r0, [r7]
    2b28:	01000000 	tsteq	r0, r0
    2b2c:	0a8d0900 	beq	fe344f34 <SCS_BASE+0x1e336f34>
    2b30:	3b020000 	blcc	82b38 <__Stack_Size+0x82738>
    2b34:	0000008e 	andeq	r0, r0, lr, lsl #1
    2b38:	0b07040a 	bleq	1c3b68 <__Stack_Size+0x1c3768>
    2b3c:	02030310 	andeq	r0, r3, #1073741824	; 0x40000000
    2b40:	000000f7 	strdeq	r0, [r0], -r7
    2b44:	00177b0c 	andseq	r7, r7, ip, lsl #22
    2b48:	02040300 	andeq	r0, r4, #0	; 0x0
    2b4c:	00000064 	andeq	r0, r0, r4, rrx
    2b50:	0c002302 	stceq	3, cr2, [r0], {2}
    2b54:	000017bb 	strheq	r1, [r0], -fp
    2b58:	64020503 	strvs	r0, [r2], #-1283
    2b5c:	02000000 	andeq	r0, r0, #0	; 0x0
    2b60:	560d0423 	strpl	r0, [sp], -r3, lsr #8
    2b64:	03004c41 	movweq	r4, #3137	; 0xc41
    2b68:	00640206 	rsbeq	r0, r4, r6, lsl #4
    2b6c:	23020000 	movwcs	r0, #8192	; 0x2000
    2b70:	174f0c08 	strbne	r0, [pc, -r8, lsl #24]
    2b74:	07030000 	streq	r0, [r3, -r0]
    2b78:	00006902 	andeq	r6, r0, r2, lsl #18
    2b7c:	0c230200 	sfmeq	f0, 4, [r3]
    2b80:	a3010e00 	movwge	r0, #7680	; 0x1e00
    2b84:	01000017 	tsteq	r0, r7, lsl r0
    2b88:	4410012c 	ldrmi	r0, [r0], #-300
    2b8c:	442c0800 	strtmi	r0, [ip], #-2048
    2b90:	5d010800 	stcpl	8, cr0, [r1]
    2b94:	0000011c 	andeq	r0, r0, ip, lsl r1
    2b98:	0017c00f 	andseq	ip, r7, pc
    2b9c:	3a2b0100 	bcc	ac2fa4 <__Stack_Size+0xac2ba4>
    2ba0:	01000000 	tsteq	r0, r0
    2ba4:	010e0050 	qaddeq	r0, r0, lr
    2ba8:	0000171a 	andeq	r1, r0, sl, lsl r7
    2bac:	2c014301 	stccs	3, cr4, [r1], {1}
    2bb0:	38080044 	stmdacc	r8, {r2, r6}
    2bb4:	01080044 	tsteq	r8, r4, asr #32
    2bb8:	0001415d 	andeq	r4, r1, sp, asr r1
    2bbc:	17250f00 	strne	r0, [r5, -r0, lsl #30]!
    2bc0:	42010000 	andmi	r0, r1, #0	; 0x0
    2bc4:	0000003a 	andeq	r0, r0, sl, lsr r0
    2bc8:	0e005001 	cdpeq	0, 0, cr5, cr0, cr1, {0}
    2bcc:	00178001 	andseq	r8, r7, r1
    2bd0:	01560100 	cmpeq	r6, r0, lsl #2
    2bd4:	08004438 	stmdaeq	r0, {r3, r4, r5, sl, lr}
    2bd8:	08004464 	stmdaeq	r0, {r2, r5, r6, sl, lr}
    2bdc:	01665d01 	cmneq	r6, r1, lsl #26
    2be0:	930f0000 	movwls	r0, #61440	; 0xf000
    2be4:	01000017 	tsteq	r0, r7, lsl r0
    2be8:	00003a55 	andeq	r3, r0, r5, asr sl
    2bec:	00500100 	subseq	r0, r0, r0, lsl #2
    2bf0:	17d2010e 	ldrbne	r0, [r2, lr, lsl #2]
    2bf4:	71010000 	tstvc	r1, r0
    2bf8:	00446401 	subeq	r6, r4, r1, lsl #8
    2bfc:	00448008 	subeq	r8, r4, r8
    2c00:	8b5d0108 	blhi	1743028 <__Stack_Size+0x1742c28>
    2c04:	0f000001 	svceq	0x00000001
    2c08:	0000083c 	andeq	r0, r0, ip, lsr r8
    2c0c:	00a37001 	adceq	r7, r3, r1
    2c10:	50010000 	andpl	r0, r1, r0
    2c14:	07011000 	streq	r1, [r1, -r0]
    2c18:	01000017 	tsteq	r0, r7, lsl r0
    2c1c:	003a0187 	eorseq	r0, sl, r7, lsl #3
    2c20:	44800000 	strmi	r0, [r0]
    2c24:	448c0800 	strmi	r0, [ip], #2048
    2c28:	5d010800 	stcpl	8, cr0, [r1]
    2c2c:	172c0111 	undefined
    2c30:	97010000 	strls	r0, [r1, -r0]
    2c34:	00008301 	andeq	r8, r0, r1, lsl #6
    2c38:	00448c00 	subeq	r8, r4, r0, lsl #24
    2c3c:	0044b408 	subeq	fp, r4, r8, lsl #8
    2c40:	125d0108 	subsne	r0, sp, #2	; 0x2
    2c44:	00001742 	andeq	r1, r0, r2, asr #14
    2c48:	00539601 	subseq	r9, r3, r1, lsl #12
    2c4c:	10c20000 	sbcne	r0, r2, r0
    2c50:	b6130000 	ldrlt	r0, [r3], -r0
    2c54:	01000014 	tsteq	r0, r4, lsl r0
    2c58:	00003a98 	muleq	r0, r8, sl
    2c5c:	0010e000 	andseq	lr, r0, r0
    2c60:	6d741400 	cfldrdvs	mvd1, [r4]
    2c64:	98010070 	stmdals	r1, {r4, r5, r6}
    2c68:	0000003a 	andeq	r0, r0, sl, lsr r0
    2c6c:	0008c315 	andeq	ip, r8, r5, lsl r3
    2c70:	83990100 	orrshi	r0, r9, #0	; 0x0
    2c74:	00000000 	andeq	r0, r0, r0
    2c78:	00006700 	andeq	r6, r0, r0, lsl #14
    2c7c:	91000200 	tstls	r0, r0, lsl #4
    2c80:	0400000d 	streq	r0, [r0], #-13
    2c84:	000bbb01 	andeq	fp, fp, r1, lsl #22
    2c88:	0044b400 	subeq	fp, r4, r0, lsl #8
    2c8c:	00452208 	subeq	r2, r5, r8, lsl #4
    2c90:	6d747308 	ldclvs	3, cr7, [r4, #-32]!
    2c94:	31663233 	cmncc	r6, r3, lsr r2
    2c98:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    2c9c:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    2ca0:	632f6372 	teqvs	pc, #-939524095	; 0xc8000001
    2ca4:	6574726f 	ldrbvs	r7, [r4, #-623]!
    2ca8:	5f336d78 	svcpl	0x00336d78
    2cac:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
    2cb0:	00732e6f 	rsbseq	r2, r3, pc, ror #28
    2cb4:	555c3a43 	ldrbpl	r3, [ip, #-2627]
    2cb8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    2cbc:	72614d5c 	rsbvc	r4, r1, #5888	; 0x1700
    2cc0:	6f445c63 	svcvs	0x00445c63
    2cc4:	6f6c6e77 	svcvs	0x006c6e77
    2cc8:	5c736461 	cfldrdpl	mvd6, [r3], #-388
    2ccc:	4c203130 	stfmis	f3, [r0], #-192
    2cd0:	47004445 	strmi	r4, [r0, -r5, asr #8]
    2cd4:	4120554e 	teqmi	r0, lr, asr #10
    2cd8:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
    2cdc:	352e3831 	strcc	r3, [lr, #-2097]!
    2ce0:	80010030 	andhi	r0, r1, r0, lsr r0
    2ce4:	00000102 	andeq	r0, r0, r2, lsl #2
    2ce8:	0da50002 	stceq	0, cr0, [r5, #8]!
    2cec:	01040000 	tsteq	r4, r0
    2cf0:	000000f1 	strdeq	r0, [r0], -r1
    2cf4:	00181d01 	andseq	r1, r8, r1, lsl #26
    2cf8:	00004b00 	andeq	r4, r0, r0, lsl #22
    2cfc:	00452400 	subeq	r2, r5, r0, lsl #8
    2d00:	00457808 	subeq	r7, r5, r8, lsl #16
    2d04:	000c5f08 	andeq	r5, ip, r8, lsl #30
    2d08:	05040200 	streq	r0, [r4, #-512]
    2d0c:	00001861 	andeq	r1, r0, r1, ror #16
    2d10:	b2050202 	andlt	r0, r5, #536870912	; 0x20000000
    2d14:	02000001 	andeq	r0, r0, #1	; 0x1
    2d18:	010f0601 	tsteq	pc, r1, lsl #12
    2d1c:	04020000 	streq	r0, [r2]
    2d20:	0018db07 	andseq	sp, r8, r7, lsl #22
    2d24:	07020200 	streq	r0, [r2, -r0, lsl #4]
    2d28:	00000093 	muleq	r0, r3, r0
    2d2c:	0d080102 	stfeqs	f0, [r8, #-8]
    2d30:	03000001 	movweq	r0, #1	; 0x1
    2d34:	01040704 	tsteq	r4, r4, lsl #14
    2d38:	000017f2 	strdeq	r1, [r0], -r2
    2d3c:	24019201 	strcs	r9, [r1], #-513
    2d40:	78080045 	stmdavc	r8, {r0, r2, r6}
    2d44:	fe080045 	cdp2	0, 0, cr0, cr8, cr5, {2}
    2d48:	86000010 	undefined
    2d4c:	05000000 	streq	r0, [r0]
    2d50:	0000184f 	andeq	r1, r0, pc, asr #16
    2d54:	00869301 	addeq	r9, r6, r1, lsl #6
    2d58:	00060000 	andeq	r0, r6, r0
    2d5c:	01000018 	tsteq	r0, r8, lsl r0
    2d60:	00008693 	muleq	r0, r3, r6
    2d64:	00111d00 	andseq	r1, r1, r0, lsl #26
    2d68:	04070000 	streq	r0, [r7]
    2d6c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2d70:	00180808 	andseq	r0, r8, r8, lsl #16
    2d74:	3a190100 	bcc	64317c <__Stack_Size+0x642d7c>
    2d78:	01000000 	tsteq	r0, r0
    2d7c:	17eb0801 	strbne	r0, [fp, r1, lsl #16]!
    2d80:	1b010000 	blne	42d88 <__Stack_Size+0x42988>
    2d84:	0000003a 	andeq	r0, r0, sl, lsr r0
    2d88:	16080101 	strne	r0, [r8], -r1, lsl #2
    2d8c:	01000018 	tsteq	r0, r8, lsl r0
    2d90:	00003a1d 	andeq	r3, r0, sp, lsl sl
    2d94:	08010100 	stmdaeq	r1, {r8}
    2d98:	00001856 	andeq	r1, r0, r6, asr r8
    2d9c:	003a2001 	eorseq	r2, sl, r1
    2da0:	01010000 	tsteq	r1, r0
    2da4:	00181008 	andseq	r1, r8, r8
    2da8:	3a220100 	bcc	8831b0 <__Stack_Size+0x882db0>
    2dac:	01000000 	tsteq	r0, r0
    2db0:	17e30901 	strbne	r0, [r3, r1, lsl #18]!
    2db4:	25010000 	strcs	r0, [r1]
    2db8:	e80a0101 	stmda	sl, {r0, r8}
    2dbc:	e6000000 	str	r0, [r0], -r0
    2dc0:	0b000000 	bleq	2dc8 <__Stack_Size+0x29c8>
    2dc4:	0000004f 	andeq	r0, r0, pc, asr #32
    2dc8:	010c004c 	tsteq	ip, ip, asr #32
    2dcc:	00e60407 	rsceq	r0, r6, r7, lsl #8
    2dd0:	420d0000 	andmi	r0, sp, #0	; 0x0
    2dd4:	01000018 	tsteq	r0, r8, lsl r0
    2dd8:	00010039 	andeq	r0, r1, r9, lsr r0
    2ddc:	03050100 	movweq	r0, #20736	; 0x5100
    2de0:	08003000 	stmdaeq	r0, {ip, sp}
    2de4:	0000d60e 	andeq	sp, r0, lr, lsl #12
    2de8:	00c10000 	sbceq	r0, r1, r0
    2dec:	00020000 	andeq	r0, r2, r0
    2df0:	00000e5a 	andeq	r0, r0, sl, asr lr
    2df4:	00f10104 	rscseq	r0, r1, r4, lsl #2
    2df8:	a1010000 	tstge	r1, r0
    2dfc:	6a000018 	bvs	2e64 <__Stack_Size+0x2a64>
    2e00:	00000018 	andeq	r0, r0, r8, lsl r0
    2e04:	00000000 	andeq	r0, r0, r0
    2e08:	bd000000 	stclt	0, cr0, [r0]
    2e0c:	0200000c 	andeq	r0, r0, #12	; 0xc
    2e10:	18e00704 	stmiane	r0!, {r2, r8, r9, sl}^
    2e14:	01020000 	tsteq	r2, r0
    2e18:	00010f06 	andeq	r0, r1, r6, lsl #30
    2e1c:	08010200 	stmdaeq	r1, {r9}
    2e20:	0000010d 	andeq	r0, r0, sp, lsl #2
    2e24:	b2050202 	andlt	r0, r5, #536870912	; 0x20000000
    2e28:	02000001 	andeq	r0, r0, #1	; 0x1
    2e2c:	00930702 	addseq	r0, r3, r2, lsl #14
    2e30:	04030000 	streq	r0, [r3]
    2e34:	746e6905 	strbtvc	r6, [lr], #-2309
    2e38:	05080200 	streq	r0, [r8, #-512]
    2e3c:	0000185c 	andeq	r1, r0, ip, asr r8
    2e40:	d6070802 	strle	r0, [r7], -r2, lsl #16
    2e44:	02000018 	andeq	r0, r0, #24	; 0x18
    2e48:	18610504 	stmdane	r1!, {r2, r8, sl}^
    2e4c:	04040000 	streq	r0, [r4]
    2e50:	07040207 	streq	r0, [r4, -r7, lsl #4]
    2e54:	000018db 	ldrdeq	r1, [r0], -fp
    2e58:	04060105 	streq	r0, [r6], #-261
    2e5c:	0000006e 	andeq	r0, r0, lr, rrx
    2e60:	16080102 	strne	r0, [r8], -r2, lsl #2
    2e64:	07000001 	streq	r0, [r0, -r1]
    2e68:	00001902 	andeq	r1, r0, r2, lsl #18
    2e6c:	9c060201 	sfmls	f0, 4, [r6], {1}
    2e70:	08000000 	stmdaeq	r0, {}
    2e74:	00001911 	andeq	r1, r0, r1, lsl r9
    2e78:	18f60800 	ldmne	r6!, {fp}^
    2e7c:	08010000 	stmdaeq	r1, {}
    2e80:	000018ed 	andeq	r1, r0, sp, ror #17
    2e84:	01090002 	tsteq	r9, r2
    2e88:	00001916 	andeq	r1, r0, r6, lsl r9
    2e8c:	48014001 	stmdami	r1, {r0, lr}
	...
    2e98:	30000000 	andcc	r0, r0, r0
    2e9c:	0a000011 	beq	2ee8 <__Stack_Size+0x2ae8>
    2ea0:	01006e66 	tsteq	r0, r6, ror #28
    2ea4:	0000703d 	andeq	r7, r0, sp, lsr r0
    2ea8:	00115b00 	andseq	r5, r1, r0, lsl #22
    2eac:	36000000 	strcc	r0, [r0], -r0
    2eb0:	02000009 	andeq	r0, r0, #9	; 0x9
    2eb4:	000edb00 	andeq	sp, lr, r0, lsl #22
    2eb8:	f1010400 	undefined instruction 0xf1010400
    2ebc:	01000000 	tsteq	r0, r0
    2ec0:	00001929 	andeq	r1, r0, r9, lsr #18
    2ec4:	0000186a 	andeq	r1, r0, sl, ror #16
	...
    2ed0:	00000d31 	andeq	r0, r0, r1, lsr sp
    2ed4:	e0070402 	and	r0, r7, r2, lsl #8
    2ed8:	02000018 	andeq	r0, r0, #24	; 0x18
    2edc:	010f0601 	tsteq	pc, r1, lsl #12
    2ee0:	01020000 	tsteq	r2, r0
    2ee4:	00010d08 	andeq	r0, r1, r8, lsl #26
    2ee8:	05020200 	streq	r0, [r2, #-512]
    2eec:	000001b2 	strheq	r0, [r0], -r2
    2ef0:	93070202 	movwls	r0, #29186	; 0x7202
    2ef4:	03000000 	movweq	r0, #0	; 0x0
    2ef8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2efc:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
    2f00:	00185c05 	andseq	r5, r8, r5, lsl #24
    2f04:	07080200 	streq	r0, [r8, -r0, lsl #4]
    2f08:	000018d6 	ldrdeq	r1, [r0], -r6
    2f0c:	001b3804 	andseq	r3, fp, r4, lsl #16
    2f10:	48070200 	stmdami	r7, {r9}
    2f14:	02000000 	andeq	r0, r0, #0	; 0x0
    2f18:	18610504 	stmdane	r1!, {r2, r8, sl}^
    2f1c:	e7040000 	str	r0, [r4, -r0]
    2f20:	0300001b 	movweq	r0, #27	; 0x1b
    2f24:	0000682c 	andeq	r6, r0, ip, lsr #16
    2f28:	1ae00500 	bne	ff804330 <SCS_BASE+0x1f7f6330>
    2f2c:	63040000 	movwvs	r0, #16384	; 0x4000
    2f30:	00002501 	andeq	r2, r0, r1, lsl #10
    2f34:	03040600 	movweq	r0, #17920	; 0x4600
    2f38:	0000a547 	andeq	sl, r0, r7, asr #10
    2f3c:	1ada0700 	bne	ff684b44 <SCS_BASE+0x1f676b44>
    2f40:	48030000 	stmdami	r3, {}
    2f44:	0000007a 	andeq	r0, r0, sl, ror r0
    2f48:	001a8c07 	andseq	r8, sl, r7, lsl #24
    2f4c:	a5490300 	strbge	r0, [r9, #-768]
    2f50:	00000000 	andeq	r0, r0, r0
    2f54:	00003308 	andeq	r3, r0, r8, lsl #6
    2f58:	0000b500 	andeq	fp, r0, r0, lsl #10
    2f5c:	00b50900 	adcseq	r0, r5, r0, lsl #18
    2f60:	00030000 	andeq	r0, r3, r0
    2f64:	0b07040a 	bleq	1c3f94 <__Stack_Size+0x1c3b94>
    2f68:	dd440308 	stclle	3, cr0, [r4, #-32]
    2f6c:	0c000000 	stceq	0, cr0, [r0], {0}
    2f70:	00001bd1 	ldrdeq	r1, [r0], -r1
    2f74:	00484503 	subeq	r4, r8, r3, lsl #10
    2f78:	23020000 	movwcs	r0, #8192	; 0x2000
    2f7c:	1bd90c00 	blne	ff645f84 <SCS_BASE+0x1f637f84>
    2f80:	4a030000 	bmi	c2f88 <__Stack_Size+0xc2b88>
    2f84:	00000086 	andeq	r0, r0, r6, lsl #1
    2f88:	00042302 	andeq	r2, r4, r2, lsl #6
    2f8c:	001b6d04 	andseq	r6, fp, r4, lsl #26
    2f90:	b84b0300 	stmdalt	fp, {r8, r9}^
    2f94:	04000000 	streq	r0, [r0]
    2f98:	00001a5e 	andeq	r1, r0, lr, asr sl
    2f9c:	005d4f03 	subseq	r4, sp, r3, lsl #30
    2fa0:	040d0000 	streq	r0, [sp]
    2fa4:	001c1a04 	andseq	r1, ip, r4, lsl #20
    2fa8:	00150500 	andseq	r0, r5, r0, lsl #10
    2fac:	02000001 	andeq	r0, r0, #1	; 0x1
    2fb0:	18db0704 	ldmne	fp, {r2, r8, r9, sl}^
    2fb4:	6f0e0000 	svcvs	0x000e0000
    2fb8:	1800001a 	stmdane	r0, {r1, r3, r4}
    2fbc:	01662d05 	cmneq	r6, r5, lsl #26
    2fc0:	850c0000 	strhi	r0, [ip]
    2fc4:	0500001b 	streq	r0, [r0, #-27]
    2fc8:	0001662e 	andeq	r6, r1, lr, lsr #12
    2fcc:	00230200 	eoreq	r0, r3, r0, lsl #4
    2fd0:	006b5f0f 	rsbeq	r5, fp, pc, lsl #30
    2fd4:	00482f05 	subeq	r2, r8, r5, lsl #30
    2fd8:	23020000 	movwcs	r0, #8192	; 0x2000
    2fdc:	1bbc0c04 	blne	fef05ff4 <SCS_BASE+0x1eef7ff4>
    2fe0:	2f050000 	svccs	0x00050000
    2fe4:	00000048 	andeq	r0, r0, r8, asr #32
    2fe8:	0c082302 	stceq	3, cr2, [r8], {2}
    2fec:	00001a58 	andeq	r1, r0, r8, asr sl
    2ff0:	00482f05 	subeq	r2, r8, r5, lsl #30
    2ff4:	23020000 	movwcs	r0, #8192	; 0x2000
    2ff8:	1c660c0c 	stclne	12, cr0, [r6], #-48
    2ffc:	2f050000 	svccs	0x00050000
    3000:	00000048 	andeq	r0, r0, r8, asr #32
    3004:	0f102302 	svceq	0x00102302
    3008:	0500785f 	streq	r7, [r0, #-2143]
    300c:	00016c30 	andeq	r6, r1, r0, lsr ip
    3010:	14230200 	strtne	r0, [r3], #-512
    3014:	07041000 	streq	r1, [r4, -r0]
    3018:	08000001 	stmdaeq	r0, {r0}
    301c:	000000f5 	strdeq	r0, [r0], -r5
    3020:	0000017c 	andeq	r0, r0, ip, ror r1
    3024:	0000b509 	andeq	fp, r0, r9, lsl #10
    3028:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    302c:	00001a87 	andeq	r1, r0, r7, lsl #21
    3030:	07350524 	ldreq	r0, [r5, -r4, lsr #10]!
    3034:	0c000002 	stceq	0, cr0, [r0], {2}
    3038:	000019bb 	strheq	r1, [r0], -fp
    303c:	00483605 	subeq	r3, r8, r5, lsl #12
    3040:	23020000 	movwcs	r0, #8192	; 0x2000
    3044:	1bf60c00 	blne	ffd8604c <SCS_BASE+0x1fd7804c>
    3048:	37050000 	strcc	r0, [r5, -r0]
    304c:	00000048 	andeq	r0, r0, r8, asr #32
    3050:	0c042302 	stceq	3, cr2, [r4], {2}
    3054:	000019d0 	ldrdeq	r1, [r0], -r0
    3058:	00483805 	subeq	r3, r8, r5, lsl #16
    305c:	23020000 	movwcs	r0, #8192	; 0x2000
    3060:	1cdf0c08 	ldclne	12, cr0, [pc], {8}
    3064:	39050000 	stmdbcc	r5, {}
    3068:	00000048 	andeq	r0, r0, r8, asr #32
    306c:	0c0c2302 	stceq	3, cr2, [ip], {2}
    3070:	00001b0b 	andeq	r1, r0, fp, lsl #22
    3074:	00483a05 	subeq	r3, r8, r5, lsl #20
    3078:	23020000 	movwcs	r0, #8192	; 0x2000
    307c:	1afa0c10 	bne	ffe860c4 <SCS_BASE+0x1fe780c4>
    3080:	3b050000 	blcc	143088 <__Stack_Size+0x142c88>
    3084:	00000048 	andeq	r0, r0, r8, asr #32
    3088:	0c142302 	ldceq	3, cr2, [r4], {2}
    308c:	00001c6b 	andeq	r1, r0, fp, ror #24
    3090:	00483c05 	subeq	r3, r8, r5, lsl #24
    3094:	23020000 	movwcs	r0, #8192	; 0x2000
    3098:	1b4f0c18 	blne	13c6100 <__Stack_Size+0x13c5d00>
    309c:	3d050000 	stccc	0, cr0, [r5]
    30a0:	00000048 	andeq	r0, r0, r8, asr #32
    30a4:	0c1c2302 	ldceq	3, cr2, [ip], {2}
    30a8:	00001ca6 	andeq	r1, r0, r6, lsr #25
    30ac:	00483e05 	subeq	r3, r8, r5, lsl #28
    30b0:	23020000 	movwcs	r0, #8192	; 0x2000
    30b4:	df110020 	svcle	0x00110020
    30b8:	08000019 	stmdaeq	r0, {r0, r3, r4}
    30bc:	50470501 	subpl	r0, r7, r1, lsl #10
    30c0:	0c000002 	stceq	0, cr0, [r0], {2}
    30c4:	00001a4b 	andeq	r1, r0, fp, asr #20
    30c8:	02504805 	subseq	r4, r0, #327680	; 0x50000
    30cc:	23020000 	movwcs	r0, #8192	; 0x2000
    30d0:	191d0c00 	ldmdbne	sp, {sl, fp}
    30d4:	49050000 	stmdbmi	r5, {}
    30d8:	00000250 	andeq	r0, r0, r0, asr r2
    30dc:	01802303 	orreq	r2, r0, r3, lsl #6
    30e0:	001c0c0c 	andseq	r0, ip, ip, lsl #24
    30e4:	f54b0500 	undefined instruction 0xf54b0500
    30e8:	03000000 	movweq	r0, #0	; 0x0
    30ec:	0c028023 	stceq	0, cr8, [r2], {35}
    30f0:	00001a04 	andeq	r1, r0, r4, lsl #20
    30f4:	00f54e05 	rscseq	r4, r5, r5, lsl #28
    30f8:	23030000 	movwcs	r0, #12288	; 0x3000
    30fc:	08000284 	stmdaeq	r0, {r2, r7, r9}
    3100:	000000f3 	strdeq	r0, [r0], -r3
    3104:	00000260 	andeq	r0, r0, r0, ror #4
    3108:	0000b509 	andeq	fp, r0, r9, lsl #10
    310c:	11001f00 	tstne	r0, r0, lsl #30
    3110:	00001915 	andeq	r1, r0, r5, lsl r9
    3114:	59050190 	stmdbpl	r5, {r4, r7, r8}
    3118:	000002a7 	andeq	r0, r0, r7, lsr #5
    311c:	001b850c 	andseq	r8, fp, ip, lsl #10
    3120:	a75a0500 	ldrbge	r0, [sl, -r0, lsl #10]
    3124:	02000002 	andeq	r0, r0, #2	; 0x2
    3128:	9d0c0023 	stcls	0, cr0, [ip, #-140]
    312c:	0500001b 	streq	r0, [r0, #-27]
    3130:	0000485b 	andeq	r4, r0, fp, asr r8
    3134:	04230200 	strteq	r0, [r3], #-512
    3138:	001a530c 	andseq	r5, sl, ip, lsl #6
    313c:	ad5d0500 	cfldr64ge	mvdx0, [sp]
    3140:	02000002 	andeq	r0, r0, #2	; 0x2
    3144:	df0c0823 	svcle	0x000c0823
    3148:	05000019 	streq	r0, [r0, #-25]
    314c:	0002075e 	andeq	r0, r2, lr, asr r7
    3150:	88230300 	stmdahi	r3!, {r8, r9}
    3154:	04100001 	ldreq	r0, [r0], #-1
    3158:	00000260 	andeq	r0, r0, r0, ror #4
    315c:	0002bf08 	andeq	fp, r2, r8, lsl #30
    3160:	0002bd00 	andeq	fp, r2, r0, lsl #26
    3164:	00b50900 	adcseq	r0, r5, r0, lsl #18
    3168:	001f0000 	andseq	r0, pc, r0
    316c:	04100112 	ldreq	r0, [r0], #-274
    3170:	000002bd 	strheq	r0, [r0], -sp
    3174:	001b590e 	andseq	r5, fp, lr, lsl #18
    3178:	69050800 	stmdbvs	r5, {fp}
    317c:	000002ee 	andeq	r0, r0, lr, ror #5
    3180:	0019ca0c 	andseq	ip, r9, ip, lsl #20
    3184:	ee6a0500 	cdp	5, 6, cr0, cr10, cr0, {0}
    3188:	02000002 	andeq	r0, r0, #2	; 0x2
    318c:	5c0c0023 	stcpl	0, cr0, [ip], {35}
    3190:	05000019 	streq	r0, [r0, #-25]
    3194:	0000486b 	andeq	r4, r0, fp, ror #16
    3198:	04230200 	strteq	r0, [r3], #-512
    319c:	33041000 	movwcc	r1, #16384	; 0x4000
    31a0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    31a4:	00001b78 	andeq	r1, r0, r8, ror fp
    31a8:	32a9055c 	adccc	r0, r9, #385875968	; 0x17000000
    31ac:	0f000004 	svceq	0x00000004
    31b0:	0500705f 	streq	r7, [r0, #-95]
    31b4:	0002eeaa 	andeq	lr, r2, sl, lsr #29
    31b8:	00230200 	eoreq	r0, r3, r0, lsl #4
    31bc:	00725f0f 	rsbseq	r5, r2, pc, lsl #30
    31c0:	0048ab05 	subeq	sl, r8, r5, lsl #22
    31c4:	23020000 	movwcs	r0, #8192	; 0x2000
    31c8:	775f0f04 	ldrbvc	r0, [pc, -r4, lsl #30]
    31cc:	48ac0500 	stmiami	ip!, {r8, sl}
    31d0:	02000000 	andeq	r0, r0, #0	; 0x0
    31d4:	fd0c0823 	stc2	8, cr0, [ip, #-140]
    31d8:	05000019 	streq	r0, [r0, #-25]
    31dc:	00003aad 	andeq	r3, r0, sp, lsr #21
    31e0:	0c230200 	sfmeq	f0, 4, [r3]
    31e4:	001aa30c 	andseq	sl, sl, ip, lsl #6
    31e8:	3aae0500 	bcc	feb845f0 <SCS_BASE+0x1eb765f0>
    31ec:	02000000 	andeq	r0, r0, #0	; 0x0
    31f0:	5f0f0e23 	svcpl	0x000f0e23
    31f4:	05006662 	streq	r6, [r0, #-1634]
    31f8:	0002c5af 	andeq	ip, r2, pc, lsr #11
    31fc:	10230200 	eorne	r0, r3, r0, lsl #4
    3200:	0019950c 	andseq	r9, r9, ip, lsl #10
    3204:	48b00500 	ldmmi	r0!, {r8, sl}
    3208:	02000000 	andeq	r0, r0, #0	; 0x0
    320c:	ed0c1823 	stc	8, cr1, [ip, #-140]
    3210:	05000019 	streq	r0, [r0, #-25]
    3214:	0000f3b7 	strheq	pc, [r0], -r7
    3218:	1c230200 	sfmne	f0, 4, [r3]
    321c:	001a770c 	andseq	r7, sl, ip, lsl #14
    3220:	c1b90500 	undefined instruction 0xc1b90500
    3224:	02000005 	andeq	r0, r0, #5	; 0x5
    3228:	f30c2023 	vhadd.u8	d2, d12, d19
    322c:	0500001a 	streq	r0, [r0, #-26]
    3230:	0005f1bb 	strheq	pc, [r5], -fp
    3234:	24230200 	strtcs	r0, [r3], #-512
    3238:	001be10c 	andseq	lr, fp, ip, lsl #2
    323c:	16bd0500 	ldrtne	r0, [sp], r0, lsl #10
    3240:	02000006 	andeq	r0, r0, #6	; 0x6
    3244:	c00c2823 	andgt	r2, ip, r3, lsr #16
    3248:	0500001c 	streq	r0, [r0, #-28]
    324c:	000631be 	strheq	r3, [r6], -lr
    3250:	2c230200 	sfmcs	f0, 4, [r3]
    3254:	62755f0f 	rsbsvs	r5, r5, #60	; 0x3c
    3258:	c5c10500 	strbgt	r0, [r1, #1280]
    325c:	02000002 	andeq	r0, r0, #2	; 0x2
    3260:	5f0f3023 	svcpl	0x000f3023
    3264:	05007075 	streq	r7, [r0, #-117]
    3268:	0002eec2 	andeq	lr, r2, r2, asr #29
    326c:	38230200 	stmdacc	r3!, {r9}
    3270:	72755f0f 	rsbsvc	r5, r5, #60	; 0x3c
    3274:	48c30500 	stmiami	r3, {r8, sl}^
    3278:	02000000 	andeq	r0, r0, #0	; 0x0
    327c:	c40c3c23 	strgt	r3, [ip], #-3107
    3280:	05000019 	streq	r0, [r0, #-25]
    3284:	000637c6 	andeq	r3, r6, r6, asr #15
    3288:	40230200 	eormi	r0, r3, r0, lsl #4
    328c:	001c980c 	andseq	r9, ip, ip, lsl #16
    3290:	47c70500 	strbmi	r0, [r7, r0, lsl #10]
    3294:	02000006 	andeq	r0, r0, #6	; 0x6
    3298:	5f0f4323 	svcpl	0x000f4323
    329c:	0500626c 	streq	r6, [r0, #-620]
    32a0:	0002c5ca 	andeq	ip, r2, sl, asr #11
    32a4:	44230200 	strtmi	r0, [r3], #-512
    32a8:	001a130c 	andseq	r1, sl, ip, lsl #6
    32ac:	48cd0500 	stmiami	sp, {r8, sl}^
    32b0:	02000000 	andeq	r0, r0, #0	; 0x0
    32b4:	240c4c23 	strcs	r4, [ip], #-3107
    32b8:	0500001a 	streq	r0, [r0, #-26]
    32bc:	000048ce 	andeq	r4, r0, lr, asr #17
    32c0:	50230200 	eorpl	r0, r3, r0, lsl #4
    32c4:	001cef0c 	andseq	lr, ip, ip, lsl #30
    32c8:	51d10500 	bicspl	r0, r1, r0, lsl #10
    32cc:	02000004 	andeq	r0, r0, #4	; 0x4
    32d0:	e70c5423 	str	r5, [ip, -r3, lsr #8]
    32d4:	0500001a 	streq	r0, [r0, #-26]
    32d8:	0000e8d5 	ldrdeq	lr, [r0], -r5
    32dc:	58230200 	stmdapl	r3!, {r9}
    32e0:	48011300 	stmdami	r1, {r8, r9, ip}
    32e4:	51000000 	tstpl	r0, r0
    32e8:	14000004 	strne	r0, [r0], #-4
    32ec:	00000451 	andeq	r0, r0, r1, asr r4
    32f0:	0000f314 	andeq	pc, r0, r4, lsl r3
    32f4:	05b41400 	ldreq	r1, [r4, #1024]!
    32f8:	48140000 	ldmdami	r4, {}
    32fc:	00000000 	andeq	r0, r0, r0
    3300:	04570410 	ldrbeq	r0, [r7], #-1040
    3304:	c4110000 	ldrgt	r0, [r1]
    3308:	0000001b 	andeq	r0, r0, fp, lsl r0
    330c:	b4250504 	strtlt	r0, [r5], #-1284
    3310:	15000005 	strne	r0, [r0, #-5]
    3314:	00001bef 	andeq	r1, r0, pc, ror #23
    3318:	48024105 	stmdami	r2, {r0, r2, r8, lr}
    331c:	02000000 	andeq	r0, r0, #0	; 0x0
    3320:	0c150023 	ldceq	0, cr0, [r5], {35}
    3324:	0500001a 	streq	r0, [r0, #-26]
    3328:	06a40246 	strteq	r0, [r4], r6, asr #4
    332c:	23020000 	movwcs	r0, #8192	; 0x2000
    3330:	1a931504 	bne	fe4c8748 <SCS_BASE+0x1e4ba748>
    3334:	46050000 	strmi	r0, [r5], -r0
    3338:	0006a402 	andeq	sl, r6, r2, lsl #8
    333c:	08230200 	stmdaeq	r3!, {r9}
    3340:	001a6715 	andseq	r6, sl, r5, lsl r7
    3344:	02460500 	subeq	r0, r6, #0	; 0x0
    3348:	000006a4 	andeq	r0, r0, r4, lsr #13
    334c:	150c2302 	strne	r2, [ip, #-770]
    3350:	00001b98 	muleq	r0, r8, fp
    3354:	48024805 	stmdami	r2, {r0, r2, fp, lr}
    3358:	02000000 	andeq	r0, r0, #0	; 0x0
    335c:	6a151023 	bvs	5473f0 <__Stack_Size+0x546ff0>
    3360:	05000019 	streq	r0, [r0, #-25]
    3364:	08af0249 	stmiaeq	pc!, {r0, r3, r6, r9}
    3368:	23020000 	movwcs	r0, #8192	; 0x2000
    336c:	1c421514 	cfstr64ne	mvdx1, [r2], {20}
    3370:	4b050000 	blmi	143378 <__Stack_Size+0x142f78>
    3374:	00004802 	andeq	r4, r0, r2, lsl #16
    3378:	30230200 	eorcc	r0, r3, r0, lsl #4
    337c:	001ba215 	andseq	sl, fp, r5, lsl r2
    3380:	024c0500 	subeq	r0, ip, #0	; 0x0
    3384:	000005e6 	andeq	r0, r0, r6, ror #11
    3388:	15342302 	ldrne	r2, [r4, #-770]!
    338c:	00001b14 	andeq	r1, r0, r4, lsl fp
    3390:	48024e05 	stmdami	r2, {r0, r2, r9, sl, fp, lr}
    3394:	02000000 	andeq	r0, r0, #0	; 0x0
    3398:	b2153823 	andslt	r3, r5, #2293760	; 0x230000
    339c:	0500001b 	streq	r0, [r0, #-27]
    33a0:	08cb0250 	stmiaeq	fp, {r4, r6, r9}^
    33a4:	23020000 	movwcs	r0, #8192	; 0x2000
    33a8:	1ad2153c 	bne	ff4888a0 <SCS_BASE+0x1f47a8a0>
    33ac:	53050000 	movwpl	r0, #20480	; 0x5000
    33b0:	00016602 	andeq	r6, r1, r2, lsl #12
    33b4:	40230200 	eormi	r0, r3, r0, lsl #4
    33b8:	001a7d15 	andseq	r7, sl, r5, lsl sp
    33bc:	02540500 	subseq	r0, r4, #0	; 0x0
    33c0:	00000048 	andeq	r0, r0, r8, asr #32
    33c4:	15442302 	strbne	r2, [r4, #-770]
    33c8:	00001cda 	ldrdeq	r1, [r0], -sl
    33cc:	66025505 	strvs	r5, [r2], -r5, lsl #10
    33d0:	02000001 	andeq	r0, r0, #1	; 0x1
    33d4:	2e154823 	cdpcs	8, 1, cr4, cr5, cr3, {1}
    33d8:	0500001b 	streq	r0, [r0, #-27]
    33dc:	08d10256 	ldmeq	r1, {r1, r2, r4, r6, r9}^
    33e0:	23020000 	movwcs	r0, #8192	; 0x2000
    33e4:	1a9b154c 	bne	fe6c891c <SCS_BASE+0x1e6ba91c>
    33e8:	59050000 	stmdbpl	r5, {}
    33ec:	00004802 	andeq	r4, r0, r2, lsl #16
    33f0:	50230200 	eorpl	r0, r3, r0, lsl #4
    33f4:	001a1c15 	andseq	r1, sl, r5, lsl ip
    33f8:	025a0500 	subseq	r0, sl, #0	; 0x0
    33fc:	000005b4 	strheq	r0, [r0], -r4
    3400:	15542302 	ldrbne	r2, [r4, #-770]
    3404:	00001b4a 	andeq	r1, r0, sl, asr #22
    3408:	8d027c05 	stchi	12, cr7, [r2, #-20]
    340c:	02000008 	andeq	r0, r0, #8	; 0x8
    3410:	15155823 	ldrne	r5, [r5, #-2083]
    3414:	05000019 	streq	r0, [r0, #-25]
    3418:	02a7027f 	adceq	r0, r7, #-268435449	; 0xf0000007
    341c:	23030000 	movwcs	r0, #12288	; 0x3000
    3420:	b01502c8 	andslt	r0, r5, r8, asr #5
    3424:	0500001a 	streq	r0, [r0, #-26]
    3428:	02600280 	rsbeq	r0, r0, #8	; 0x8
    342c:	23030000 	movwcs	r0, #12288	; 0x3000
    3430:	8e1502cc 	cdphi	2, 1, cr0, cr5, cr12, {6}
    3434:	0500001c 	streq	r0, [r0, #-28]
    3438:	08e30283 	stmiaeq	r3!, {r0, r1, r7, r9}^
    343c:	23030000 	movwcs	r0, #12288	; 0x3000
    3440:	f51505dc 	undefined instruction 0xf51505dc
    3444:	05000019 	streq	r0, [r0, #-25]
    3448:	06630288 	strbteq	r0, [r3], -r8, lsl #5
    344c:	23030000 	movwcs	r0, #12288	; 0x3000
    3450:	da1505e0 	ble	544bd8 <__Stack_Size+0x5447d8>
    3454:	05000019 	streq	r0, [r0, #-25]
    3458:	08ef0289 	stmiaeq	pc!, {r0, r3, r7, r9}^
    345c:	23030000 	movwcs	r0, #12288	; 0x3000
    3460:	100005ec 	andne	r0, r0, ip, ror #11
    3464:	0005ba04 	andeq	fp, r5, r4, lsl #20
    3468:	08010200 	stmdaeq	r1, {r9}
    346c:	00000116 	andeq	r0, r0, r6, lsl r1
    3470:	04320410 	ldrteq	r0, [r2], #-1040
    3474:	01130000 	tsteq	r3, r0
    3478:	00000048 	andeq	r0, r0, r8, asr #32
    347c:	000005e6 	andeq	r0, r0, r6, ror #11
    3480:	00045114 	andeq	r5, r4, r4, lsl r1
    3484:	00f31400 	rscseq	r1, r3, r0, lsl #8
    3488:	e6140000 	ldr	r0, [r4], -r0
    348c:	14000005 	strne	r0, [r0], #-5
    3490:	00000048 	andeq	r0, r0, r8, asr #32
    3494:	ec041000 	stc	0, cr1, [r4], {0}
    3498:	16000005 	strne	r0, [r0], -r5
    349c:	000005ba 	strheq	r0, [r0], -sl
    34a0:	05c70410 	strbeq	r0, [r7, #1040]
    34a4:	01130000 	tsteq	r3, r0
    34a8:	0000006f 	andeq	r0, r0, pc, rrx
    34ac:	00000616 	andeq	r0, r0, r6, lsl r6
    34b0:	00045114 	andeq	r5, r4, r4, lsl r1
    34b4:	00f31400 	rscseq	r1, r3, r0, lsl #8
    34b8:	6f140000 	svcvs	0x00140000
    34bc:	14000000 	strne	r0, [r0]
    34c0:	00000048 	andeq	r0, r0, r8, asr #32
    34c4:	f7041000 	undefined instruction 0xf7041000
    34c8:	13000005 	movwne	r0, #5	; 0x5
    34cc:	00004801 	andeq	r4, r0, r1, lsl #16
    34d0:	00063100 	andeq	r3, r6, r0, lsl #2
    34d4:	04511400 	ldrbeq	r1, [r1], #-1024
    34d8:	f3140000 	vhadd.u16	d0, d4, d0
    34dc:	00000000 	andeq	r0, r0, r0
    34e0:	061c0410 	undefined
    34e4:	33080000 	movwcc	r0, #32768	; 0x8000
    34e8:	47000000 	strmi	r0, [r0, -r0]
    34ec:	09000006 	stmdbeq	r0, {r1, r2}
    34f0:	000000b5 	strheq	r0, [r0], -r5
    34f4:	33080002 	movwcc	r0, #32770	; 0x8002
    34f8:	57000000 	strpl	r0, [r0, -r0]
    34fc:	09000006 	stmdbeq	r0, {r1, r2}
    3500:	000000b5 	strheq	r0, [r0], -r5
    3504:	66050000 	strvs	r0, [r5], -r0
    3508:	0500001b 	streq	r0, [r0, #-27]
    350c:	02f4010e 	rscseq	r0, r4, #-2147483645	; 0x80000003
    3510:	75170000 	ldrvc	r0, [r7]
    3514:	0c00001c 	stceq	0, cr0, [r0], {28}
    3518:	9e011305 	cdpls	3, 0, cr1, cr1, cr5, {0}
    351c:	15000006 	strne	r0, [r0, #-6]
    3520:	00001b85 	andeq	r1, r0, r5, lsl #23
    3524:	9e011405 	cdpls	4, 0, cr1, cr1, cr5, {0}
    3528:	02000006 	andeq	r0, r0, #6	; 0x6
    352c:	a9150023 	ldmdbge	r5, {r0, r1, r5}
    3530:	0500001a 	streq	r0, [r0, #-26]
    3534:	00480115 	subeq	r0, r8, r5, lsl r1
    3538:	23020000 	movwcs	r0, #8192	; 0x2000
    353c:	1b601504 	blne	1808954 <__Stack_Size+0x1808554>
    3540:	16050000 	strne	r0, [r5], -r0
    3544:	0006a401 	andeq	sl, r6, r1, lsl #8
    3548:	08230200 	stmdaeq	r3!, {r9}
    354c:	63041000 	movwvs	r1, #16384	; 0x4000
    3550:	10000006 	andne	r0, r0, r6
    3554:	00065704 	andeq	r5, r6, r4, lsl #14
    3558:	19621700 	stmdbne	r2!, {r8, r9, sl, ip}^
    355c:	050e0000 	streq	r0, [lr]
    3560:	06e5012e 	strbteq	r0, [r5], lr, lsr #2
    3564:	cb150000 	blgt	54356c <__Stack_Size+0x54316c>
    3568:	0500001b 	streq	r0, [r0, #-27]
    356c:	06e5012f 	strbteq	r0, [r5], pc, lsr #2
    3570:	23020000 	movwcs	r0, #8192	; 0x2000
    3574:	1aed1500 	bne	ffb4897c <SCS_BASE+0x1fb3a97c>
    3578:	30050000 	andcc	r0, r5, r0
    357c:	0006e501 	andeq	lr, r6, r1, lsl #10
    3580:	06230200 	strteq	r0, [r3], -r0, lsl #4
    3584:	001c1515 	andseq	r1, ip, r5, lsl r5
    3588:	01310500 	teqeq	r1, r0, lsl #10
    358c:	00000041 	andeq	r0, r0, r1, asr #32
    3590:	000c2302 	andeq	r2, ip, r2, lsl #6
    3594:	00004108 	andeq	r4, r0, r8, lsl #2
    3598:	0006f500 	andeq	pc, r6, r0, lsl #10
    359c:	00b50900 	adcseq	r0, r5, r0, lsl #18
    35a0:	00020000 	andeq	r0, r2, r0
    35a4:	5f05d018 	svcpl	0x0005d018
    35a8:	00081502 	andeq	r1, r8, r2, lsl #10
    35ac:	1c591500 	cfldr64ne	mvdx1, [r9], {0}
    35b0:	60050000 	andvs	r0, r5, r0
    35b4:	00002502 	andeq	r2, r0, r2, lsl #10
    35b8:	00230200 	eoreq	r0, r3, r0, lsl #4
    35bc:	001bff15 	andseq	pc, fp, r5, lsl pc
    35c0:	02610500 	rsbeq	r0, r1, #0	; 0x0
    35c4:	000005b4 	strheq	r0, [r0], -r4
    35c8:	15042302 	strne	r2, [r4, #-770]
    35cc:	00001ac5 	andeq	r1, r0, r5, asr #21
    35d0:	15026205 	strne	r6, [r2, #-517]
    35d4:	02000008 	andeq	r0, r0, #8	; 0x8
    35d8:	b1150823 	tstlt	r5, r3, lsr #16
    35dc:	0500001c 	streq	r0, [r0, #-28]
    35e0:	017c0263 	cmneq	ip, r3, ror #4
    35e4:	23020000 	movwcs	r0, #8192	; 0x2000
    35e8:	1b1f1524 	blne	7c8a80 <__Stack_Size+0x7c8680>
    35ec:	64050000 	strvs	r0, [r5]
    35f0:	00004802 	andeq	r4, r0, r2, lsl #16
    35f4:	48230200 	stmdami	r3!, {r9}
    35f8:	001b8015 	andseq	r8, fp, r5, lsl r0
    35fc:	02650500 	rsbeq	r0, r5, #0	; 0x0
    3600:	00000056 	andeq	r0, r0, r6, asr r0
    3604:	15502302 	ldrbne	r2, [r0, #-770]
    3608:	00001cc7 	andeq	r1, r0, r7, asr #25
    360c:	aa026605 	bge	9ce28 <__Stack_Size+0x9ca28>
    3610:	02000006 	andeq	r0, r0, #6	; 0x6
    3614:	8b155823 	blhi	5596a8 <__Stack_Size+0x5592a8>
    3618:	0500001b 	streq	r0, [r0, #-27]
    361c:	00dd0267 	sbcseq	r0, sp, r7, ror #4
    3620:	23020000 	movwcs	r0, #8192	; 0x2000
    3624:	1ccc1568 	cfstr64ne	mvdx1, [ip], {104}
    3628:	68050000 	stmdavs	r5, {}
    362c:	0000dd02 	andeq	sp, r0, r2, lsl #26
    3630:	70230200 	eorvc	r0, r3, r0, lsl #4
    3634:	0019ad15 	andseq	sl, r9, r5, lsl sp
    3638:	02690500 	rsbeq	r0, r9, #0	; 0x0
    363c:	000000dd 	ldrdeq	r0, [r0], -sp
    3640:	15782302 	ldrbne	r2, [r8, #-770]!
    3644:	00001c84 	andeq	r1, r0, r4, lsl #25
    3648:	25026a05 	strcs	r6, [r2, #-2565]
    364c:	03000008 	movweq	r0, #8	; 0x8
    3650:	15018023 	strne	r8, [r1, #-35]
    3654:	00001ab9 	strheq	r1, [r0], -r9
    3658:	35026b05 	strcc	r6, [r2, #-2821]
    365c:	03000008 	movweq	r0, #8	; 0x8
    3660:	15018823 	strne	r8, [r1, #-2083]
    3664:	00001c22 	andeq	r1, r0, r2, lsr #24
    3668:	48026c05 	stmdami	r2, {r0, r2, sl, fp, sp, lr}
    366c:	03000000 	movweq	r0, #0	; 0x0
    3670:	1501a023 	strne	sl, [r1, #-35]
    3674:	00001a3d 	andeq	r1, r0, sp, lsr sl
    3678:	dd026d05 	stcle	13, cr6, [r2, #-20]
    367c:	03000000 	movweq	r0, #0	; 0x0
    3680:	1501a423 	strne	sl, [r1, #-1059]
    3684:	0000199e 	muleq	r0, lr, r9
    3688:	dd026e05 	stcle	14, cr6, [r2, #-20]
    368c:	03000000 	movweq	r0, #0	; 0x0
    3690:	1501ac23 	strne	sl, [r1, #-3107]
    3694:	00001a2c 	andeq	r1, r0, ip, lsr #20
    3698:	dd026f05 	stcle	15, cr6, [r2, #-20]
    369c:	03000000 	movweq	r0, #0	; 0x0
    36a0:	1501b423 	strne	fp, [r1, #-1059]
    36a4:	00001975 	andeq	r1, r0, r5, ror r9
    36a8:	dd027005 	stcle	0, cr7, [r2, #-20]
    36ac:	03000000 	movweq	r0, #0	; 0x0
    36b0:	1501bc23 	strne	fp, [r1, #-3107]
    36b4:	00001984 	andeq	r1, r0, r4, lsl #19
    36b8:	dd027105 	stfles	f7, [r2, #-20]
    36bc:	03000000 	movweq	r0, #0	; 0x0
    36c0:	0001c423 	andeq	ip, r1, r3, lsr #8
    36c4:	0005ba08 	andeq	fp, r5, r8, lsl #20
    36c8:	00082500 	andeq	r2, r8, r0, lsl #10
    36cc:	00b50900 	adcseq	r0, r5, r0, lsl #18
    36d0:	00190000 	andseq	r0, r9, r0
    36d4:	0005ba08 	andeq	fp, r5, r8, lsl #20
    36d8:	00083500 	andeq	r3, r8, r0, lsl #10
    36dc:	00b50900 	adcseq	r0, r5, r0, lsl #18
    36e0:	00070000 	andeq	r0, r7, r0
    36e4:	0005ba08 	andeq	fp, r5, r8, lsl #20
    36e8:	00084500 	andeq	r4, r8, r0, lsl #10
    36ec:	00b50900 	adcseq	r0, r5, r0, lsl #18
    36f0:	00170000 	andseq	r0, r7, r0
    36f4:	7705f018 	smuadvc	r5, r8, r0
    36f8:	00086d02 	andeq	r6, r8, r2, lsl #26
    36fc:	1b041500 	blne	108b04 <__Stack_Size+0x108704>
    3700:	79050000 	stmdbvc	r5, {}
    3704:	00086d02 	andeq	r6, r8, r2, lsl #26
    3708:	00230200 	eoreq	r0, r3, r0, lsl #4
    370c:	001c7b15 	andseq	r7, ip, r5, lsl fp
    3710:	027a0500 	rsbseq	r0, sl, #0	; 0x0
    3714:	0000087d 	andeq	r0, r0, sp, ror r8
    3718:	00782302 	rsbseq	r2, r8, r2, lsl #6
    371c:	0002ee08 	andeq	lr, r2, r8, lsl #28
    3720:	00087d00 	andeq	r7, r8, r0, lsl #26
    3724:	00b50900 	adcseq	r0, r5, r0, lsl #18
    3728:	001d0000 	andseq	r0, sp, r0
    372c:	00002508 	andeq	r2, r0, r8, lsl #10
    3730:	00088d00 	andeq	r8, r8, r0, lsl #26
    3734:	00b50900 	adcseq	r0, r5, r0, lsl #18
    3738:	001d0000 	andseq	r0, sp, r0
    373c:	5d05f019 	stcpl	0, cr15, [r5, #-100]
    3740:	0008af02 	andeq	sl, r8, r2, lsl #30
    3744:	1bc41a00 	blne	ff109f4c <SCS_BASE+0x1f0fbf4c>
    3748:	72050000 	andvc	r0, r5, #0	; 0x0
    374c:	0006f502 	andeq	pc, r6, r2, lsl #10
    3750:	1c9e1a00 	fldmiasne	lr, {s2-s1}
    3754:	7b050000 	blvc	14375c <__Stack_Size+0x14335c>
    3758:	00084502 	andeq	r4, r8, r2, lsl #10
    375c:	ba080000 	blt	203764 <__Stack_Size+0x203364>
    3760:	bf000005 	svclt	0x00000005
    3764:	09000008 	stmdbeq	r0, {r3}
    3768:	000000b5 	strheq	r0, [r0], -r5
    376c:	011b0018 	tsteq	fp, r8, lsl r0
    3770:	000008cb 	andeq	r0, r0, fp, asr #17
    3774:	00045114 	andeq	r5, r4, r4, lsl r1
    3778:	04100000 	ldreq	r0, [r0]
    377c:	000008bf 	strheq	r0, [r0], -pc
    3780:	01660410 	cmneq	r6, r0, lsl r4
    3784:	011b0000 	tsteq	fp, r0
    3788:	000008e3 	andeq	r0, r0, r3, ror #17
    378c:	00004814 	andeq	r4, r0, r4, lsl r8
    3790:	04100000 	ldreq	r0, [r0]
    3794:	000008e9 	andeq	r0, r0, r9, ror #17
    3798:	08d70410 	ldmeq	r7, {r4, sl}^
    379c:	57080000 	strpl	r0, [r8, -r0]
    37a0:	ff000006 	undefined instruction 0xff000006
    37a4:	09000008 	stmdbeq	r0, {r3}
    37a8:	000000b5 	strheq	r0, [r0], -r5
    37ac:	011c0002 	tsteq	ip, r2
    37b0:	000018fd 	strdeq	r1, [r0], -sp
    37b4:	00013c01 	andeq	r3, r1, r1, lsl #24
    37b8:	00000000 	andeq	r0, r0, r0
    37bc:	01000000 	tsteq	r0, r0
    37c0:	0009265d 	andeq	r2, r9, sp, asr r6
    37c4:	1c541d00 	mrrcne	13, 0, r1, r4, cr0
    37c8:	3a010000 	bcc	437d0 <__Stack_Size+0x433d0>
    37cc:	00000048 	andeq	r0, r0, r8, asr #32
    37d0:	00001179 	andeq	r1, r0, r9, ror r1
    37d4:	1c2f1e00 	stcne	14, cr1, [pc]
    37d8:	28050000 	stmdacs	r5, {}
    37dc:	00093403 	andeq	r3, r9, r3, lsl #8
    37e0:	16010100 	strne	r0, [r1], -r0, lsl #2
    37e4:	00000451 	andeq	r0, r0, r1, asr r4
    37e8:	00093600 	andeq	r3, r9, r0, lsl #12
    37ec:	52000200 	.word	0x52000200
    37f0:	04000010 	.word	0x04000010
    37f4:	0000f101 	.word	0x0000f101
    37f8:	1cf50100 	.word	0x1cf50100
    37fc:	1d290000 	.word	0x1d290000
	...
    3808:	0e200000 	.word	0x0e200000
    380c:	01020000 	.word	0x01020000
    3810:	00010f06 	.word	0x00010f06
    3814:	08010200 	.word	0x08010200
    3818:	0000010d 	.word	0x0000010d
    381c:	b2050202 	.word	0xb2050202
    3820:	02000001 	.word	0x02000001
    3824:	00930702 	.word	0x00930702
    3828:	04030000 	.word	0x04030000
    382c:	746e6905 	.word	0x746e6905
    3830:	07040200 	.word	0x07040200
    3834:	000018e0 	.word	0x000018e0
    3838:	5c050802 	.word	0x5c050802
    383c:	02000018 	.word	0x02000018
    3840:	18d60708 	.word	0x18d60708
    3844:	38040000 	.word	0x38040000
    3848:	0100001b 	.word	0x0100001b
    384c:	00004107 	.word	0x00004107
    3850:	05040200 	.word	0x05040200
    3854:	00001861 	.word	0x00001861
    3858:	001be704 	.word	0x001be704
    385c:	682c0200 	.word	0x682c0200
    3860:	05000000 	.word	0x05000000
    3864:	00001ae0 	.word	0x00001ae0
    3868:	48016303 	.word	0x48016303
    386c:	06000000 	.word	0x06000000
    3870:	a5470204 	.word	0xa5470204
    3874:	07000000 	.word	0x07000000
    3878:	00001ada 	.word	0x00001ada
    387c:	007a4802 	.word	0x007a4802
    3880:	8c070000 	.word	0x8c070000
    3884:	0200001a 	.word	0x0200001a
    3888:	0000a549 	.word	0x0000a549
    388c:	2c080000 	.word	0x2c080000
    3890:	b5000000 	.word	0xb5000000
    3894:	09000000 	.word	0x09000000
    3898:	000000b5 	.word	0x000000b5
    389c:	040a0003 	.word	0x040a0003
    38a0:	02080b07 	.word	0x02080b07
    38a4:	0000dd44 	.word	0x0000dd44
    38a8:	1bd10c00 	.word	0x1bd10c00
    38ac:	45020000 	.word	0x45020000
    38b0:	00000041 	.word	0x00000041
    38b4:	0c002302 	.word	0x0c002302
    38b8:	00001bd9 	.word	0x00001bd9
    38bc:	00864a02 	.word	0x00864a02
    38c0:	23020000 	.word	0x23020000
    38c4:	6d040004 	.word	0x6d040004
    38c8:	0200001b 	.word	0x0200001b
    38cc:	0000b84b 	.word	0x0000b84b
    38d0:	1a5e0400 	.word	0x1a5e0400
    38d4:	4f020000 	.word	0x4f020000
    38d8:	0000005d 	.word	0x0000005d
    38dc:	1a04040d 	.word	0x1a04040d
    38e0:	0400001c 	.word	0x0400001c
    38e4:	00010015 	.word	0x00010015
    38e8:	07040200 	.word	0x07040200
    38ec:	000018db 	.word	0x000018db
    38f0:	001a6f0e 	.word	0x001a6f0e
    38f4:	2d041800 	.word	0x2d041800
    38f8:	00000166 	.word	0x00000166
    38fc:	001b850c 	.word	0x001b850c
    3900:	662e0400 	.word	0x662e0400
    3904:	02000001 	.word	0x02000001
    3908:	5f0f0023 	.word	0x5f0f0023
    390c:	2f04006b 	.word	0x2f04006b
    3910:	00000041 	.word	0x00000041
    3914:	0c042302 	.word	0x0c042302
    3918:	00001bbc 	.word	0x00001bbc
    391c:	00412f04 	.word	0x00412f04
    3920:	23020000 	.word	0x23020000
    3924:	1a580c08 	.word	0x1a580c08
    3928:	2f040000 	.word	0x2f040000
    392c:	00000041 	.word	0x00000041
    3930:	0c0c2302 	.word	0x0c0c2302
    3934:	00001c66 	.word	0x00001c66
    3938:	00412f04 	.word	0x00412f04
    393c:	23020000 	.word	0x23020000
    3940:	785f0f10 	.word	0x785f0f10
    3944:	6c300400 	.word	0x6c300400
    3948:	02000001 	.word	0x02000001
    394c:	10001423 	.word	0x10001423
    3950:	00010704 	.word	0x00010704
    3954:	00f50800 	.word	0x00f50800
    3958:	017c0000 	.word	0x017c0000
    395c:	b5090000 	.word	0xb5090000
    3960:	00000000 	.word	0x00000000
    3964:	1a870e00 	.word	0x1a870e00
    3968:	04240000 	.word	0x04240000
    396c:	00020735 	.word	0x00020735
    3970:	19bb0c00 	.word	0x19bb0c00
    3974:	36040000 	.word	0x36040000
    3978:	00000041 	.word	0x00000041
    397c:	0c002302 	.word	0x0c002302
    3980:	00001bf6 	.word	0x00001bf6
    3984:	00413704 	.word	0x00413704
    3988:	23020000 	.word	0x23020000
    398c:	19d00c04 	.word	0x19d00c04
    3990:	38040000 	.word	0x38040000
    3994:	00000041 	.word	0x00000041
    3998:	0c082302 	.word	0x0c082302
    399c:	00001cdf 	.word	0x00001cdf
    39a0:	00413904 	.word	0x00413904
    39a4:	23020000 	.word	0x23020000
    39a8:	1b0b0c0c 	.word	0x1b0b0c0c
    39ac:	3a040000 	.word	0x3a040000
    39b0:	00000041 	.word	0x00000041
    39b4:	0c102302 	.word	0x0c102302
    39b8:	00001afa 	.word	0x00001afa
    39bc:	00413b04 	.word	0x00413b04
    39c0:	23020000 	.word	0x23020000
    39c4:	1c6b0c14 	.word	0x1c6b0c14
    39c8:	3c040000 	.word	0x3c040000
    39cc:	00000041 	.word	0x00000041
    39d0:	0c182302 	.word	0x0c182302
    39d4:	00001b4f 	.word	0x00001b4f
    39d8:	00413d04 	.word	0x00413d04
    39dc:	23020000 	.word	0x23020000
    39e0:	1ca60c1c 	.word	0x1ca60c1c
    39e4:	3e040000 	.word	0x3e040000
    39e8:	00000041 	.word	0x00000041
    39ec:	00202302 	.word	0x00202302
    39f0:	0019df11 	.word	0x0019df11
    39f4:	04010800 	.word	0x04010800
    39f8:	00025047 	.word	0x00025047
    39fc:	1a4b0c00 	.word	0x1a4b0c00
    3a00:	48040000 	.word	0x48040000
    3a04:	00000250 	.word	0x00000250
    3a08:	0c002302 	.word	0x0c002302
    3a0c:	0000191d 	.word	0x0000191d
    3a10:	02504904 	.word	0x02504904
    3a14:	23030000 	.word	0x23030000
    3a18:	0c0c0180 	.word	0x0c0c0180
    3a1c:	0400001c 	.word	0x0400001c
    3a20:	0000f54b 	.word	0x0000f54b
    3a24:	80230300 	.word	0x80230300
    3a28:	1a040c02 	.word	0x1a040c02
    3a2c:	4e040000 	.word	0x4e040000
    3a30:	000000f5 	.word	0x000000f5
    3a34:	02842303 	.word	0x02842303
    3a38:	00f30800 	.word	0x00f30800
    3a3c:	02600000 	.word	0x02600000
    3a40:	b5090000 	.word	0xb5090000
    3a44:	1f000000 	.word	0x1f000000
    3a48:	19151100 	.word	0x19151100
    3a4c:	01900000 	.word	0x01900000
    3a50:	02a75904 	.word	0x02a75904
    3a54:	850c0000 	.word	0x850c0000
    3a58:	0400001b 	.word	0x0400001b
    3a5c:	0002a75a 	.word	0x0002a75a
    3a60:	00230200 	.word	0x00230200
    3a64:	001b9d0c 	.word	0x001b9d0c
    3a68:	415b0400 	.word	0x415b0400
    3a6c:	02000000 	.word	0x02000000
    3a70:	530c0423 	.word	0x530c0423
    3a74:	0400001a 	.word	0x0400001a
    3a78:	0002ad5d 	.word	0x0002ad5d
    3a7c:	08230200 	.word	0x08230200
    3a80:	0019df0c 	.word	0x0019df0c
    3a84:	075e0400 	.word	0x075e0400
    3a88:	03000002 	.word	0x03000002
    3a8c:	00018823 	.word	0x00018823
    3a90:	02600410 	.word	0x02600410
    3a94:	bf080000 	.word	0xbf080000
    3a98:	bd000002 	.word	0xbd000002
    3a9c:	09000002 	.word	0x09000002
    3aa0:	000000b5 	.word	0x000000b5
    3aa4:	0112001f 	.word	0x0112001f
    3aa8:	02bd0410 	.word	0x02bd0410
    3aac:	590e0000 	.word	0x590e0000
    3ab0:	0800001b 	.word	0x0800001b
    3ab4:	02ee6904 	.word	0x02ee6904
    3ab8:	ca0c0000 	.word	0xca0c0000
    3abc:	04000019 	.word	0x04000019
    3ac0:	0002ee6a 	.word	0x0002ee6a
    3ac4:	00230200 	.word	0x00230200
    3ac8:	00195c0c 	.word	0x00195c0c
    3acc:	416b0400 	.word	0x416b0400
    3ad0:	02000000 	.word	0x02000000
    3ad4:	10000423 	.word	0x10000423
    3ad8:	00002c04 	.word	0x00002c04
    3adc:	1b780e00 	.word	0x1b780e00
    3ae0:	045c0000 	.word	0x045c0000
    3ae4:	000432a9 	.word	0x000432a9
    3ae8:	705f0f00 	.word	0x705f0f00
    3aec:	eeaa0400 	.word	0xeeaa0400
    3af0:	02000002 	.word	0x02000002
    3af4:	5f0f0023 	.word	0x5f0f0023
    3af8:	ab040072 	.word	0xab040072
    3afc:	00000041 	.word	0x00000041
    3b00:	0f042302 	.word	0x0f042302
    3b04:	0400775f 	.word	0x0400775f
    3b08:	000041ac 	.word	0x000041ac
    3b0c:	08230200 	.word	0x08230200
    3b10:	0019fd0c 	.word	0x0019fd0c
    3b14:	33ad0400 	.word	0x33ad0400
    3b18:	02000000 	.word	0x02000000
    3b1c:	a30c0c23 	.word	0xa30c0c23
    3b20:	0400001a 	.word	0x0400001a
    3b24:	000033ae 	.word	0x000033ae
    3b28:	0e230200 	.word	0x0e230200
    3b2c:	66625f0f 	.word	0x66625f0f
    3b30:	c5af0400 	.word	0xc5af0400
    3b34:	02000002 	.word	0x02000002
    3b38:	950c1023 	.word	0x950c1023
    3b3c:	04000019 	.word	0x04000019
    3b40:	000041b0 	.word	0x000041b0
    3b44:	18230200 	.word	0x18230200
    3b48:	0019ed0c 	.word	0x0019ed0c
    3b4c:	f3b70400 	.word	0xf3b70400
    3b50:	02000000 	.word	0x02000000
    3b54:	770c1c23 	.word	0x770c1c23
    3b58:	0400001a 	.word	0x0400001a
    3b5c:	0005c1b9 	.word	0x0005c1b9
    3b60:	20230200 	.word	0x20230200
    3b64:	001af30c 	.word	0x001af30c
    3b68:	f1bb0400 	.word	0xf1bb0400
    3b6c:	02000005 	.word	0x02000005
    3b70:	e10c2423 	.word	0xe10c2423
    3b74:	0400001b 	.word	0x0400001b
    3b78:	000616bd 	.word	0x000616bd
    3b7c:	28230200 	.word	0x28230200
    3b80:	001cc00c 	.word	0x001cc00c
    3b84:	31be0400 	.word	0x31be0400
    3b88:	02000006 	.word	0x02000006
    3b8c:	5f0f2c23 	.word	0x5f0f2c23
    3b90:	04006275 	.word	0x04006275
    3b94:	0002c5c1 	.word	0x0002c5c1
    3b98:	30230200 	.word	0x30230200
    3b9c:	70755f0f 	.word	0x70755f0f
    3ba0:	eec20400 	.word	0xeec20400
    3ba4:	02000002 	.word	0x02000002
    3ba8:	5f0f3823 	.word	0x5f0f3823
    3bac:	04007275 	.word	0x04007275
    3bb0:	000041c3 	.word	0x000041c3
    3bb4:	3c230200 	.word	0x3c230200
    3bb8:	0019c40c 	.word	0x0019c40c
    3bbc:	37c60400 	.word	0x37c60400
    3bc0:	02000006 	.word	0x02000006
    3bc4:	980c4023 	.word	0x980c4023
    3bc8:	0400001c 	.word	0x0400001c
    3bcc:	000647c7 	.word	0x000647c7
    3bd0:	43230200 	.word	0x43230200
    3bd4:	626c5f0f 	.word	0x626c5f0f
    3bd8:	c5ca0400 	.word	0xc5ca0400
    3bdc:	02000002 	.word	0x02000002
    3be0:	130c4423 	.word	0x130c4423
    3be4:	0400001a 	.word	0x0400001a
    3be8:	000041cd 	.word	0x000041cd
    3bec:	4c230200 	.word	0x4c230200
    3bf0:	001a240c 	.word	0x001a240c
    3bf4:	41ce0400 	.word	0x41ce0400
    3bf8:	02000000 	.word	0x02000000
    3bfc:	ef0c5023 	.word	0xef0c5023
    3c00:	0400001c 	.word	0x0400001c
    3c04:	000451d1 	.word	0x000451d1
    3c08:	54230200 	.word	0x54230200
    3c0c:	001ae70c 	.word	0x001ae70c
    3c10:	e8d50400 	.word	0xe8d50400
    3c14:	02000000 	.word	0x02000000
    3c18:	13005823 	.word	0x13005823
    3c1c:	00004101 	.word	0x00004101
    3c20:	00045100 	.word	0x00045100
    3c24:	04511400 	.word	0x04511400
    3c28:	f3140000 	.word	0xf3140000
    3c2c:	14000000 	.word	0x14000000
    3c30:	000005b4 	.word	0x000005b4
    3c34:	00004114 	.word	0x00004114
    3c38:	04100000 	.word	0x04100000
    3c3c:	00000457 	.word	0x00000457
    3c40:	001bc411 	.word	0x001bc411
    3c44:	04040000 	.word	0x04040000
    3c48:	0005b425 	.word	0x0005b425
    3c4c:	1bef1500 	.word	0x1bef1500
    3c50:	41040000 	.word	0x41040000
    3c54:	00004102 	.word	0x00004102
    3c58:	00230200 	.word	0x00230200
    3c5c:	001a0c15 	.word	0x001a0c15
    3c60:	02460400 	.word	0x02460400
    3c64:	000006a4 	.word	0x000006a4
    3c68:	15042302 	.word	0x15042302
    3c6c:	00001a93 	.word	0x00001a93
    3c70:	a4024604 	.word	0xa4024604
    3c74:	02000006 	.word	0x02000006
    3c78:	67150823 	.word	0x67150823
    3c7c:	0400001a 	.word	0x0400001a
    3c80:	06a40246 	.word	0x06a40246
    3c84:	23020000 	.word	0x23020000
    3c88:	1b98150c 	.word	0x1b98150c
    3c8c:	48040000 	.word	0x48040000
    3c90:	00004102 	.word	0x00004102
    3c94:	10230200 	.word	0x10230200
    3c98:	00196a15 	.word	0x00196a15
    3c9c:	02490400 	.word	0x02490400
    3ca0:	000008af 	.word	0x000008af
    3ca4:	15142302 	.word	0x15142302
    3ca8:	00001c42 	.word	0x00001c42
    3cac:	41024b04 	.word	0x41024b04
    3cb0:	02000000 	.word	0x02000000
    3cb4:	a2153023 	.word	0xa2153023
    3cb8:	0400001b 	.word	0x0400001b
    3cbc:	05e6024c 	.word	0x05e6024c
    3cc0:	23020000 	.word	0x23020000
    3cc4:	1b141534 	.word	0x1b141534
    3cc8:	4e040000 	.word	0x4e040000
    3ccc:	00004102 	.word	0x00004102
    3cd0:	38230200 	.word	0x38230200
    3cd4:	001bb215 	.word	0x001bb215
    3cd8:	02500400 	.word	0x02500400
    3cdc:	000008cb 	.word	0x000008cb
    3ce0:	153c2302 	.word	0x153c2302
    3ce4:	00001ad2 	.word	0x00001ad2
    3ce8:	66025304 	.word	0x66025304
    3cec:	02000001 	.word	0x02000001
    3cf0:	7d154023 	.word	0x7d154023
    3cf4:	0400001a 	.word	0x0400001a
    3cf8:	00410254 	.word	0x00410254
    3cfc:	23020000 	.word	0x23020000
    3d00:	1cda1544 	.word	0x1cda1544
    3d04:	55040000 	.word	0x55040000
    3d08:	00016602 	.word	0x00016602
    3d0c:	48230200 	.word	0x48230200
    3d10:	001b2e15 	.word	0x001b2e15
    3d14:	02560400 	.word	0x02560400
    3d18:	000008d1 	.word	0x000008d1
    3d1c:	154c2302 	.word	0x154c2302
    3d20:	00001a9b 	.word	0x00001a9b
    3d24:	41025904 	.word	0x41025904
    3d28:	02000000 	.word	0x02000000
    3d2c:	1c155023 	.word	0x1c155023
    3d30:	0400001a 	.word	0x0400001a
    3d34:	05b4025a 	.word	0x05b4025a
    3d38:	23020000 	.word	0x23020000
    3d3c:	1b4a1554 	.word	0x1b4a1554
    3d40:	7c040000 	.word	0x7c040000
    3d44:	00088d02 	.word	0x00088d02
    3d48:	58230200 	.word	0x58230200
    3d4c:	00191515 	.word	0x00191515
    3d50:	027f0400 	.word	0x027f0400
    3d54:	000002a7 	.word	0x000002a7
    3d58:	02c82303 	.word	0x02c82303
    3d5c:	001ab015 	.word	0x001ab015
    3d60:	02800400 	.word	0x02800400
    3d64:	00000260 	.word	0x00000260
    3d68:	02cc2303 	.word	0x02cc2303
    3d6c:	001c8e15 	.word	0x001c8e15
    3d70:	02830400 	.word	0x02830400
    3d74:	000008e3 	.word	0x000008e3
    3d78:	05dc2303 	.word	0x05dc2303
    3d7c:	0019f515 	.word	0x0019f515
    3d80:	02880400 	.word	0x02880400
    3d84:	00000663 	.word	0x00000663
    3d88:	05e02303 	.word	0x05e02303
    3d8c:	0019da15 	.word	0x0019da15
    3d90:	02890400 	.word	0x02890400
    3d94:	000008ef 	.word	0x000008ef
    3d98:	05ec2303 	.word	0x05ec2303
    3d9c:	ba041000 	.word	0xba041000
    3da0:	02000005 	.word	0x02000005
    3da4:	01160801 	.word	0x01160801
    3da8:	04100000 	.word	0x04100000
    3dac:	00000432 	.word	0x00000432
    3db0:	00410113 	.word	0x00410113
    3db4:	05e60000 	.word	0x05e60000
    3db8:	51140000 	.word	0x51140000
    3dbc:	14000004 	.word	0x14000004
    3dc0:	000000f3 	.word	0x000000f3
    3dc4:	0005e614 	.word	0x0005e614
    3dc8:	00411400 	.word	0x00411400
    3dcc:	10000000 	.word	0x10000000
    3dd0:	0005ec04 	.word	0x0005ec04
    3dd4:	05ba1600 	.word	0x05ba1600
    3dd8:	04100000 	.word	0x04100000
    3ddc:	000005c7 	.word	0x000005c7
    3de0:	006f0113 	.word	0x006f0113
    3de4:	06160000 	.word	0x06160000
    3de8:	51140000 	.word	0x51140000
    3dec:	14000004 	.word	0x14000004
    3df0:	000000f3 	.word	0x000000f3
    3df4:	00006f14 	.word	0x00006f14
    3df8:	00411400 	.word	0x00411400
    3dfc:	10000000 	.word	0x10000000
    3e00:	0005f704 	.word	0x0005f704
    3e04:	41011300 	.word	0x41011300
    3e08:	31000000 	.word	0x31000000
    3e0c:	14000006 	.word	0x14000006
    3e10:	00000451 	.word	0x00000451
    3e14:	0000f314 	.word	0x0000f314
    3e18:	04100000 	.word	0x04100000
    3e1c:	0000061c 	.word	0x0000061c
    3e20:	00002c08 	.word	0x00002c08
    3e24:	00064700 	.word	0x00064700
    3e28:	00b50900 	.word	0x00b50900
    3e2c:	00020000 	.word	0x00020000
    3e30:	00002c08 	.word	0x00002c08
    3e34:	00065700 	.word	0x00065700
    3e38:	00b50900 	.word	0x00b50900
    3e3c:	00000000 	.word	0x00000000
    3e40:	001b6605 	.word	0x001b6605
    3e44:	010e0400 	.word	0x010e0400
    3e48:	000002f4 	.word	0x000002f4
    3e4c:	001c7517 	.word	0x001c7517
    3e50:	13040c00 	.word	0x13040c00
    3e54:	00069e01 	.word	0x00069e01
    3e58:	1b851500 	.word	0x1b851500
    3e5c:	14040000 	.word	0x14040000
    3e60:	00069e01 	.word	0x00069e01
    3e64:	00230200 	.word	0x00230200
    3e68:	001aa915 	.word	0x001aa915
    3e6c:	01150400 	.word	0x01150400
    3e70:	00000041 	.word	0x00000041
    3e74:	15042302 	.word	0x15042302
    3e78:	00001b60 	.word	0x00001b60
    3e7c:	a4011604 	.word	0xa4011604
    3e80:	02000006 	.word	0x02000006
    3e84:	10000823 	.word	0x10000823
    3e88:	00066304 	.word	0x00066304
    3e8c:	57041000 	.word	0x57041000
    3e90:	17000006 	.word	0x17000006
    3e94:	00001962 	.word	0x00001962
    3e98:	012e040e 	.word	0x012e040e
    3e9c:	000006e5 	.word	0x000006e5
    3ea0:	001bcb15 	.word	0x001bcb15
    3ea4:	012f0400 	.word	0x012f0400
    3ea8:	000006e5 	.word	0x000006e5
    3eac:	15002302 	.word	0x15002302
    3eb0:	00001aed 	.word	0x00001aed
    3eb4:	e5013004 	.word	0xe5013004
    3eb8:	02000006 	.word	0x02000006
    3ebc:	15150623 	.word	0x15150623
    3ec0:	0400001c 	.word	0x0400001c
    3ec4:	003a0131 	.word	0x003a0131
    3ec8:	23020000 	.word	0x23020000
    3ecc:	3a08000c 	.word	0x3a08000c
    3ed0:	f5000000 	.word	0xf5000000
    3ed4:	09000006 	.word	0x09000006
    3ed8:	000000b5 	.word	0x000000b5
    3edc:	d0180002 	.word	0xd0180002
    3ee0:	15025f04 	.word	0x15025f04
    3ee4:	15000008 	.word	0x15000008
    3ee8:	00001c59 	.word	0x00001c59
    3eec:	48026004 	.word	0x48026004
    3ef0:	02000000 	.word	0x02000000
    3ef4:	ff150023 	.word	0xff150023
    3ef8:	0400001b 	.word	0x0400001b
    3efc:	05b40261 	.word	0x05b40261
    3f00:	23020000 	.word	0x23020000
    3f04:	1ac51504 	.word	0x1ac51504
    3f08:	62040000 	.word	0x62040000
    3f0c:	00081502 	.word	0x00081502
    3f10:	08230200 	.word	0x08230200
    3f14:	001cb115 	.word	0x001cb115
    3f18:	02630400 	.word	0x02630400
    3f1c:	0000017c 	.word	0x0000017c
    3f20:	15242302 	.word	0x15242302
    3f24:	00001b1f 	.word	0x00001b1f
    3f28:	41026404 	.word	0x41026404
    3f2c:	02000000 	.word	0x02000000
    3f30:	80154823 	.word	0x80154823
    3f34:	0400001b 	.word	0x0400001b
    3f38:	00560265 	.word	0x00560265
    3f3c:	23020000 	.word	0x23020000
    3f40:	1cc71550 	.word	0x1cc71550
    3f44:	66040000 	.word	0x66040000
    3f48:	0006aa02 	.word	0x0006aa02
    3f4c:	58230200 	.word	0x58230200
    3f50:	001b8b15 	.word	0x001b8b15
    3f54:	02670400 	.word	0x02670400
    3f58:	000000dd 	.word	0x000000dd
    3f5c:	15682302 	.word	0x15682302
    3f60:	00001ccc 	.word	0x00001ccc
    3f64:	dd026804 	.word	0xdd026804
    3f68:	02000000 	.word	0x02000000
    3f6c:	ad157023 	.word	0xad157023
    3f70:	04000019 	.word	0x04000019
    3f74:	00dd0269 	.word	0x00dd0269
    3f78:	23020000 	.word	0x23020000
    3f7c:	1c841578 	.word	0x1c841578
    3f80:	6a040000 	.word	0x6a040000
    3f84:	00082502 	.word	0x00082502
    3f88:	80230300 	.word	0x80230300
    3f8c:	1ab91501 	.word	0x1ab91501
    3f90:	6b040000 	.word	0x6b040000
    3f94:	00083502 	.word	0x00083502
    3f98:	88230300 	.word	0x88230300
    3f9c:	1c221501 	.word	0x1c221501
    3fa0:	6c040000 	.word	0x6c040000
    3fa4:	00004102 	.word	0x00004102
    3fa8:	a0230300 	.word	0xa0230300
    3fac:	1a3d1501 	.word	0x1a3d1501
    3fb0:	6d040000 	.word	0x6d040000
    3fb4:	0000dd02 	.word	0x0000dd02
    3fb8:	a4230300 	.word	0xa4230300
    3fbc:	199e1501 	.word	0x199e1501
    3fc0:	6e040000 	.word	0x6e040000
    3fc4:	0000dd02 	.word	0x0000dd02
    3fc8:	ac230300 	.word	0xac230300
    3fcc:	1a2c1501 	.word	0x1a2c1501
    3fd0:	6f040000 	.word	0x6f040000
    3fd4:	0000dd02 	.word	0x0000dd02
    3fd8:	b4230300 	.word	0xb4230300
    3fdc:	19751501 	.word	0x19751501
    3fe0:	70040000 	.word	0x70040000
    3fe4:	0000dd02 	.word	0x0000dd02
    3fe8:	bc230300 	.word	0xbc230300
    3fec:	19841501 	.word	0x19841501
    3ff0:	71040000 	.word	0x71040000
    3ff4:	0000dd02 	.word	0x0000dd02
    3ff8:	c4230300 	.word	0xc4230300
    3ffc:	ba080001 	.word	0xba080001
    4000:	25000005 	.word	0x25000005
    4004:	09000008 	.word	0x09000008
    4008:	000000b5 	.word	0x000000b5
    400c:	ba080019 	.word	0xba080019
    4010:	35000005 	.word	0x35000005
    4014:	09000008 	.word	0x09000008
    4018:	000000b5 	.word	0x000000b5
    401c:	ba080007 	.word	0xba080007
    4020:	45000005 	.word	0x45000005
    4024:	09000008 	.word	0x09000008
    4028:	000000b5 	.word	0x000000b5
    402c:	f0180017 	.word	0xf0180017
    4030:	6d027704 	.word	0x6d027704
    4034:	15000008 	.word	0x15000008
    4038:	00001b04 	.word	0x00001b04
    403c:	6d027904 	.word	0x6d027904
    4040:	02000008 	.word	0x02000008
    4044:	7b150023 	.word	0x7b150023
    4048:	0400001c 	.word	0x0400001c
    404c:	087d027a 	.word	0x087d027a
    4050:	23020000 	.word	0x23020000
    4054:	ee080078 	.word	0xee080078
    4058:	7d000002 	.word	0x7d000002
    405c:	09000008 	.word	0x09000008
    4060:	000000b5 	.word	0x000000b5
    4064:	4808001d 	.word	0x4808001d
    4068:	8d000000 	.word	0x8d000000
    406c:	09000008 	.word	0x09000008
    4070:	000000b5 	.word	0x000000b5
    4074:	f019001d 	.word	0xf019001d
    4078:	af025d04 	.word	0xaf025d04
    407c:	1a000008 	.word	0x1a000008
    4080:	00001bc4 	.word	0x00001bc4
    4084:	f5027204 	.word	0xf5027204
    4088:	1a000006 	.word	0x1a000006
    408c:	00001c9e 	.word	0x00001c9e
    4090:	45027b04 	.word	0x45027b04
    4094:	00000008 	.word	0x00000008
    4098:	0005ba08 	.word	0x0005ba08
    409c:	0008bf00 	.word	0x0008bf00
    40a0:	00b50900 	.word	0x00b50900
    40a4:	00180000 	.word	0x00180000
    40a8:	08cb011b 	.word	0x08cb011b
    40ac:	51140000 	.word	0x51140000
    40b0:	00000004 	.word	0x00000004
    40b4:	08bf0410 	.word	0x08bf0410
    40b8:	04100000 	.word	0x04100000
    40bc:	00000166 	.word	0x00000166
    40c0:	08e3011b 	.word	0x08e3011b
    40c4:	41140000 	.word	0x41140000
    40c8:	00000000 	.word	0x00000000
    40cc:	08e90410 	.word	0x08e90410
    40d0:	04100000 	.word	0x04100000
    40d4:	000008d7 	.word	0x000008d7
    40d8:	00065708 	.word	0x00065708
    40dc:	0008ff00 	.word	0x0008ff00
    40e0:	00b50900 	.word	0x00b50900
    40e4:	00020000 	.word	0x00020000
    40e8:	001ce91c 	.word	0x001ce91c
    40ec:	570c0500 	.word	0x570c0500
    40f0:	05000004 	.word	0x05000004
    40f4:	00000003 	.word	0x00000003
    40f8:	1c361d00 	.word	0x1c361d00
    40fc:	10050000 	.word	0x10050000
    4100:	00000451 	.word	0x00000451
    4104:	00030501 	.word	0x00030501
    4108:	1d000000 	.word	0x1d000000
    410c:	00001c2f 	.word	0x00001c2f
    4110:	09341105 	.word	0x09341105
    4114:	05010000 	.word	0x05010000
    4118:	00000003 	.word	0x00000003
    411c:	04511600 	.word	0x04511600
    4120:	42000000 	.word	0x42000000
    4124:	02000001 	.word	0x02000001
    4128:	0011b200 	.word	0x0011b200
    412c:	f1010400 	.word	0xf1010400
    4130:	01000000 	.word	0x01000000
    4134:	00001d9e 	.word	0x00001d9e
    4138:	00001df2 	.word	0x00001df2
	...
    4144:	00000efb 	.word	0x00000efb
    4148:	0f060102 	.word	0x0f060102
    414c:	02000001 	.word	0x02000001
    4150:	010d0801 	.word	0x010d0801
    4154:	02020000 	.word	0x02020000
    4158:	0001b205 	.word	0x0001b205
    415c:	07020200 	.word	0x07020200
    4160:	00000093 	.word	0x00000093
    4164:	69050403 	.word	0x69050403
    4168:	0200746e 	.word	0x0200746e
    416c:	18e00704 	.word	0x18e00704
    4170:	08020000 	.word	0x08020000
    4174:	00185c05 	.word	0x00185c05
    4178:	07080200 	.word	0x07080200
    417c:	000018d6 	.word	0x000018d6
    4180:	61050402 	.word	0x61050402
    4184:	04000018 	.word	0x04000018
    4188:	72050704 	.word	0x72050704
    418c:	0200001d 	.word	0x0200001d
    4190:	000048d6 	.word	0x000048d6
    4194:	07040200 	.word	0x07040200
    4198:	000018db 	.word	0x000018db
    419c:	16080102 	.word	0x16080102
    41a0:	06000001 	.word	0x06000001
    41a4:	001e2701 	.word	0x001e2701
    41a8:	01320100 	.word	0x01320100
	...
    41b4:	00001197 	.word	0x00001197
    41b8:	000000b2 	.word	0x000000b2
    41bc:	001bd307 	.word	0x001bd307
    41c0:	67330100 	.word	0x67330100
    41c4:	01000000 	.word	0x01000000
    41c8:	00690855 	.word	0x00690855
    41cc:	00673401 	.word	0x00673401
    41d0:	54010000 	.word	0x54010000
    41d4:	e0010600 	.word	0xe0010600
    41d8:	0100001d 	.word	0x0100001d
    41dc:	00000120 	.word	0x00000120
    41e0:	00000000 	.word	0x00000000
    41e4:	11b60000 	.word	0x11b60000
    41e8:	00e40000 	.word	0x00e40000
    41ec:	d3070000 	.word	0xd3070000
    41f0:	0100001b 	.word	0x0100001b
    41f4:	00006721 	.word	0x00006721
    41f8:	08550100 	.word	0x08550100
    41fc:	22010069 	.word	0x22010069
    4200:	00000067 	.word	0x00000067
    4204:	09005401 	.word	0x09005401
    4208:	000000f1 	.word	0x000000f1
    420c:	000000ef 	.word	0x000000ef
    4210:	010b000a 	.word	0x010b000a
    4214:	00ef040c 	.word	0x00ef040c
    4218:	390d0000 	.word	0x390d0000
    421c:	0100001e 	.word	0x0100001e
    4220:	0000e413 	.word	0x0000e413
    4224:	0d010100 	.word	0x0d010100
    4228:	00001d8a 	.word	0x00001d8a
    422c:	00e41401 	.word	0x00e41401
    4230:	01010000 	.word	0x01010000
    4234:	001e4f0d 	.word	0x001e4f0d
    4238:	e4150100 	.word	0xe4150100
    423c:	01000000 	.word	0x01000000
    4240:	1dcf0d01 	.word	0x1dcf0d01
    4244:	16010000 	.word	0x16010000
    4248:	000000e4 	.word	0x000000e4
    424c:	5f0d0101 	.word	0x5f0d0101
    4250:	0100001d 	.word	0x0100001d
    4254:	0000e417 	.word	0x0000e417
    4258:	0d010100 	.word	0x0d010100
    425c:	00001d79 	.word	0x00001d79
    4260:	00e41801 	.word	0x00e41801
    4264:	01010000 	.word	0x01010000
    4268:	00010f00 	.word	0x00010f00
    426c:	56000200 	.word	0x56000200
    4270:	04000012 	.word	0x04000012
    4274:	0000f101 	.word	0x0000f101
    4278:	1ea60100 	.word	0x1ea60100
    427c:	1e6f0000 	.word	0x1e6f0000
	...
    4288:	0fa10000 	.word	0x0fa10000
    428c:	01020000 	.word	0x01020000
    4290:	00010f06 	.word	0x00010f06
    4294:	08010200 	.word	0x08010200
    4298:	0000010d 	.word	0x0000010d
    429c:	b2050202 	.word	0xb2050202
    42a0:	02000001 	.word	0x02000001
    42a4:	00930702 	.word	0x00930702
    42a8:	04030000 	.word	0x04030000
    42ac:	746e6905 	.word	0x746e6905
    42b0:	07040200 	.word	0x07040200
    42b4:	000018e0 	.word	0x000018e0
    42b8:	5c050802 	.word	0x5c050802
    42bc:	02000018 	.word	0x02000018
    42c0:	18d60708 	.word	0x18d60708
    42c4:	04020000 	.word	0x04020000
    42c8:	00186105 	.word	0x00186105
    42cc:	07040400 	.word	0x07040400
    42d0:	04020405 	.word	0x04020405
    42d4:	0018db07 	.word	0x0018db07
    42d8:	76040600 	.word	0x76040600
    42dc:	02000000 	.word	0x02000000
    42e0:	01160801 	.word	0x01160801
    42e4:	72070000 	.word	0x72070000
    42e8:	0200001d 	.word	0x0200001d
    42ec:	000048d6 	.word	0x000048d6
    42f0:	db010800 	.word	0xdb010800
    42f4:	0100001e 	.word	0x0100001e
    42f8:	0067012f 	.word	0x0067012f
	...
    4304:	11d50000 	.word	0x11d50000
    4308:	010c0000 	.word	0x010c0000
    430c:	6d090000 	.word	0x6d090000
    4310:	672b0100 	.word	0x672b0100
    4314:	f4000000 	.word	0xf4000000
    4318:	09000011 	.word	0x09000011
    431c:	2b010063 	.word	0x2b010063
    4320:	00000041 	.word	0x00000041
    4324:	00001228 	.word	0x00001228
    4328:	01006e09 	.word	0x01006e09
    432c:	00007d2b 	.word	0x00007d2b
    4330:	00125100 	.word	0x00125100
    4334:	00730a00 	.word	0x00730a00
    4338:	00703a01 	.word	0x00703a01
    433c:	12850000 	.word	0x12850000
    4340:	690b0000 	.word	0x690b0000
    4344:	413b0100 	.word	0x413b0100
    4348:	0c000000 	.word	0x0c000000
    434c:	00001ee2 	.word	0x00001ee2
    4350:	00693c01 	.word	0x00693c01
    4354:	12a30000 	.word	0x12a30000
    4358:	620c0000 	.word	0x620c0000
    435c:	0100001e 	.word	0x0100001e
    4360:	00010c3d 	.word	0x00010c3d
    4364:	0012cc00 	.word	0x0012cc00
    4368:	00640d00 	.word	0x00640d00
    436c:	00483e01 	.word	0x00483e01
    4370:	55010000 	.word	0x55010000
    4374:	69040600 	.word	0x69040600
    4378:	00000000 	.word	0x00000000
    437c:	000009a1 	.word	0x000009a1
    4380:	13080002 	.word	0x13080002
    4384:	01040000 	.word	0x01040000
    4388:	000000f1 	.word	0x000000f1
    438c:	001ee901 	.word	0x001ee901
    4390:	00186a00 	.word	0x00186a00
	...
    439c:	00107d00 	.word	0x00107d00
    43a0:	05040200 	.word	0x05040200
    43a4:	00746e69 	.word	0x00746e69
    43a8:	e0070403 	.word	0xe0070403
    43ac:	03000018 	.word	0x03000018
    43b0:	010f0601 	.word	0x010f0601
    43b4:	01030000 	.word	0x01030000
    43b8:	00010d08 	.word	0x00010d08
    43bc:	05020300 	.word	0x05020300
    43c0:	000001b2 	.word	0x000001b2
    43c4:	93070203 	.word	0x93070203
    43c8:	03000000 	.word	0x03000000
    43cc:	185c0508 	.word	0x185c0508
    43d0:	08030000 	.word	0x08030000
    43d4:	0018d607 	.word	0x0018d607
    43d8:	1b380400 	.word	0x1b380400
    43dc:	07020000 	.word	0x07020000
    43e0:	00000025 	.word	0x00000025
    43e4:	61050403 	.word	0x61050403
    43e8:	04000018 	.word	0x04000018
    43ec:	00001be7 	.word	0x00001be7
    43f0:	00682c03 	.word	0x00682c03
    43f4:	e0050000 	.word	0xe0050000
    43f8:	0400001a 	.word	0x0400001a
    43fc:	002c0163 	.word	0x002c0163
    4400:	04060000 	.word	0x04060000
    4404:	00a54703 	.word	0x00a54703
    4408:	da070000 	.word	0xda070000
    440c:	0300001a 	.word	0x0300001a
    4410:	00007a48 	.word	0x00007a48
    4414:	1a8c0700 	.word	0x1a8c0700
    4418:	49030000 	.word	0x49030000
    441c:	000000a5 	.word	0x000000a5
    4420:	003a0800 	.word	0x003a0800
    4424:	00b50000 	.word	0x00b50000
    4428:	b5090000 	.word	0xb5090000
    442c:	03000000 	.word	0x03000000
    4430:	07040a00 	.word	0x07040a00
    4434:	4403080b 	.word	0x4403080b
    4438:	000000dd 	.word	0x000000dd
    443c:	001bd10c 	.word	0x001bd10c
    4440:	25450300 	.word	0x25450300
    4444:	02000000 	.word	0x02000000
    4448:	d90c0023 	.word	0xd90c0023
    444c:	0300001b 	.word	0x0300001b
    4450:	0000864a 	.word	0x0000864a
    4454:	04230200 	.word	0x04230200
    4458:	1b6d0400 	.word	0x1b6d0400
    445c:	4b030000 	.word	0x4b030000
    4460:	000000b8 	.word	0x000000b8
    4464:	001a5e04 	.word	0x001a5e04
    4468:	5d4f0300 	.word	0x5d4f0300
    446c:	0d000000 	.word	0x0d000000
    4470:	1c1a0404 	.word	0x1c1a0404
    4474:	15050000 	.word	0x15050000
    4478:	00000100 	.word	0x00000100
    447c:	db070403 	.word	0xdb070403
    4480:	0e000018 	.word	0x0e000018
    4484:	00001a6f 	.word	0x00001a6f
    4488:	662d0518 	.word	0x662d0518
    448c:	0c000001 	.word	0x0c000001
    4490:	00001b85 	.word	0x00001b85
    4494:	01662e05 	.word	0x01662e05
    4498:	23020000 	.word	0x23020000
    449c:	6b5f0f00 	.word	0x6b5f0f00
    44a0:	252f0500 	.word	0x252f0500
    44a4:	02000000 	.word	0x02000000
    44a8:	bc0c0423 	.word	0xbc0c0423
    44ac:	0500001b 	.word	0x0500001b
    44b0:	0000252f 	.word	0x0000252f
    44b4:	08230200 	.word	0x08230200
    44b8:	001a580c 	.word	0x001a580c
    44bc:	252f0500 	.word	0x252f0500
    44c0:	02000000 	.word	0x02000000
    44c4:	660c0c23 	.word	0x660c0c23
    44c8:	0500001c 	.word	0x0500001c
    44cc:	0000252f 	.word	0x0000252f
    44d0:	10230200 	.word	0x10230200
    44d4:	00785f0f 	.word	0x00785f0f
    44d8:	016c3005 	.word	0x016c3005
    44dc:	23020000 	.word	0x23020000
    44e0:	04100014 	.word	0x04100014
    44e4:	00000107 	.word	0x00000107
    44e8:	0000f508 	.word	0x0000f508
    44ec:	00017c00 	.word	0x00017c00
    44f0:	00b50900 	.word	0x00b50900
    44f4:	00000000 	.word	0x00000000
    44f8:	001a870e 	.word	0x001a870e
    44fc:	35052400 	.word	0x35052400
    4500:	00000207 	.word	0x00000207
    4504:	0019bb0c 	.word	0x0019bb0c
    4508:	25360500 	.word	0x25360500
    450c:	02000000 	.word	0x02000000
    4510:	f60c0023 	.word	0xf60c0023
    4514:	0500001b 	.word	0x0500001b
    4518:	00002537 	.word	0x00002537
    451c:	04230200 	.word	0x04230200
    4520:	0019d00c 	.word	0x0019d00c
    4524:	25380500 	.word	0x25380500
    4528:	02000000 	.word	0x02000000
    452c:	df0c0823 	.word	0xdf0c0823
    4530:	0500001c 	.word	0x0500001c
    4534:	00002539 	.word	0x00002539
    4538:	0c230200 	.word	0x0c230200
    453c:	001b0b0c 	.word	0x001b0b0c
    4540:	253a0500 	.word	0x253a0500
    4544:	02000000 	.word	0x02000000
    4548:	fa0c1023 	.word	0xfa0c1023
    454c:	0500001a 	.word	0x0500001a
    4550:	0000253b 	.word	0x0000253b
    4554:	14230200 	.word	0x14230200
    4558:	001c6b0c 	.word	0x001c6b0c
    455c:	253c0500 	.word	0x253c0500
    4560:	02000000 	.word	0x02000000
    4564:	4f0c1823 	.word	0x4f0c1823
    4568:	0500001b 	.word	0x0500001b
    456c:	0000253d 	.word	0x0000253d
    4570:	1c230200 	.word	0x1c230200
    4574:	001ca60c 	.word	0x001ca60c
    4578:	253e0500 	.word	0x253e0500
    457c:	02000000 	.word	0x02000000
    4580:	11002023 	.word	0x11002023
    4584:	000019df 	.word	0x000019df
    4588:	47050108 	.word	0x47050108
    458c:	00000250 	.word	0x00000250
    4590:	001a4b0c 	.word	0x001a4b0c
    4594:	50480500 	.word	0x50480500
    4598:	02000002 	.word	0x02000002
    459c:	1d0c0023 	.word	0x1d0c0023
    45a0:	05000019 	.word	0x05000019
    45a4:	00025049 	.word	0x00025049
    45a8:	80230300 	.word	0x80230300
    45ac:	1c0c0c01 	.word	0x1c0c0c01
    45b0:	4b050000 	.word	0x4b050000
    45b4:	000000f5 	.word	0x000000f5
    45b8:	02802303 	.word	0x02802303
    45bc:	001a040c 	.word	0x001a040c
    45c0:	f54e0500 	.word	0xf54e0500
    45c4:	03000000 	.word	0x03000000
    45c8:	00028423 	.word	0x00028423
    45cc:	0000f308 	.word	0x0000f308
    45d0:	00026000 	.word	0x00026000
    45d4:	00b50900 	.word	0x00b50900
    45d8:	001f0000 	.word	0x001f0000
    45dc:	00191511 	.word	0x00191511
    45e0:	05019000 	.word	0x05019000
    45e4:	0002a759 	.word	0x0002a759
    45e8:	1b850c00 	.word	0x1b850c00
    45ec:	5a050000 	.word	0x5a050000
    45f0:	000002a7 	.word	0x000002a7
    45f4:	0c002302 	.word	0x0c002302
    45f8:	00001b9d 	.word	0x00001b9d
    45fc:	00255b05 	.word	0x00255b05
    4600:	23020000 	.word	0x23020000
    4604:	1a530c04 	.word	0x1a530c04
    4608:	5d050000 	.word	0x5d050000
    460c:	000002ad 	.word	0x000002ad
    4610:	0c082302 	.word	0x0c082302
    4614:	000019df 	.word	0x000019df
    4618:	02075e05 	.word	0x02075e05
    461c:	23030000 	.word	0x23030000
    4620:	10000188 	.word	0x10000188
    4624:	00026004 	.word	0x00026004
    4628:	02bf0800 	.word	0x02bf0800
    462c:	02bd0000 	.word	0x02bd0000
    4630:	b5090000 	.word	0xb5090000
    4634:	1f000000 	.word	0x1f000000
    4638:	10011200 	.word	0x10011200
    463c:	0002bd04 	.word	0x0002bd04
    4640:	1b590e00 	.word	0x1b590e00
    4644:	05080000 	.word	0x05080000
    4648:	0002ee69 	.word	0x0002ee69
    464c:	19ca0c00 	.word	0x19ca0c00
    4650:	6a050000 	.word	0x6a050000
    4654:	000002ee 	.word	0x000002ee
    4658:	0c002302 	.word	0x0c002302
    465c:	0000195c 	.word	0x0000195c
    4660:	00256b05 	.word	0x00256b05
    4664:	23020000 	.word	0x23020000
    4668:	04100004 	.word	0x04100004
    466c:	0000003a 	.word	0x0000003a
    4670:	001b780e 	.word	0x001b780e
    4674:	a9055c00 	.word	0xa9055c00
    4678:	00000432 	.word	0x00000432
    467c:	00705f0f 	.word	0x00705f0f
    4680:	02eeaa05 	.word	0x02eeaa05
    4684:	23020000 	.word	0x23020000
    4688:	725f0f00 	.word	0x725f0f00
    468c:	25ab0500 	.word	0x25ab0500
    4690:	02000000 	.word	0x02000000
    4694:	5f0f0423 	.word	0x5f0f0423
    4698:	ac050077 	.word	0xac050077
    469c:	00000025 	.word	0x00000025
    46a0:	0c082302 	.word	0x0c082302
    46a4:	000019fd 	.word	0x000019fd
    46a8:	0041ad05 	.word	0x0041ad05
    46ac:	23020000 	.word	0x23020000
    46b0:	1aa30c0c 	.word	0x1aa30c0c
    46b4:	ae050000 	.word	0xae050000
    46b8:	00000041 	.word	0x00000041
    46bc:	0f0e2302 	.word	0x0f0e2302
    46c0:	0066625f 	.word	0x0066625f
    46c4:	02c5af05 	.word	0x02c5af05
    46c8:	23020000 	.word	0x23020000
    46cc:	19950c10 	.word	0x19950c10
    46d0:	b0050000 	.word	0xb0050000
    46d4:	00000025 	.word	0x00000025
    46d8:	0c182302 	.word	0x0c182302
    46dc:	000019ed 	.word	0x000019ed
    46e0:	00f3b705 	.word	0x00f3b705
    46e4:	23020000 	.word	0x23020000
    46e8:	1a770c1c 	.word	0x1a770c1c
    46ec:	b9050000 	.word	0xb9050000
    46f0:	000005c1 	.word	0x000005c1
    46f4:	0c202302 	.word	0x0c202302
    46f8:	00001af3 	.word	0x00001af3
    46fc:	05f1bb05 	.word	0x05f1bb05
    4700:	23020000 	.word	0x23020000
    4704:	1be10c24 	.word	0x1be10c24
    4708:	bd050000 	.word	0xbd050000
    470c:	00000616 	.word	0x00000616
    4710:	0c282302 	.word	0x0c282302
    4714:	00001cc0 	.word	0x00001cc0
    4718:	0631be05 	.word	0x0631be05
    471c:	23020000 	.word	0x23020000
    4720:	755f0f2c 	.word	0x755f0f2c
    4724:	c1050062 	.word	0xc1050062
    4728:	000002c5 	.word	0x000002c5
    472c:	0f302302 	.word	0x0f302302
    4730:	0070755f 	.word	0x0070755f
    4734:	02eec205 	.word	0x02eec205
    4738:	23020000 	.word	0x23020000
    473c:	755f0f38 	.word	0x755f0f38
    4740:	c3050072 	.word	0xc3050072
    4744:	00000025 	.word	0x00000025
    4748:	0c3c2302 	.word	0x0c3c2302
    474c:	000019c4 	.word	0x000019c4
    4750:	0637c605 	.word	0x0637c605
    4754:	23020000 	.word	0x23020000
    4758:	1c980c40 	.word	0x1c980c40
    475c:	c7050000 	.word	0xc7050000
    4760:	00000647 	.word	0x00000647
    4764:	0f432302 	.word	0x0f432302
    4768:	00626c5f 	.word	0x00626c5f
    476c:	02c5ca05 	.word	0x02c5ca05
    4770:	23020000 	.word	0x23020000
    4774:	1a130c44 	.word	0x1a130c44
    4778:	cd050000 	.word	0xcd050000
    477c:	00000025 	.word	0x00000025
    4780:	0c4c2302 	.word	0x0c4c2302
    4784:	00001a24 	.word	0x00001a24
    4788:	0025ce05 	.word	0x0025ce05
    478c:	23020000 	.word	0x23020000
    4790:	1cef0c50 	.word	0x1cef0c50
    4794:	d1050000 	.word	0xd1050000
    4798:	00000451 	.word	0x00000451
    479c:	0c542302 	.word	0x0c542302
    47a0:	00001ae7 	.word	0x00001ae7
    47a4:	00e8d505 	.word	0x00e8d505
    47a8:	23020000 	.word	0x23020000
    47ac:	01130058 	.word	0x01130058
    47b0:	00000025 	.word	0x00000025
    47b4:	00000451 	.word	0x00000451
    47b8:	00045114 	.word	0x00045114
    47bc:	00f31400 	.word	0x00f31400
    47c0:	b4140000 	.word	0xb4140000
    47c4:	14000005 	.word	0x14000005
    47c8:	00000025 	.word	0x00000025
    47cc:	57041000 	.word	0x57041000
    47d0:	11000004 	.word	0x11000004
    47d4:	00001bc4 	.word	0x00001bc4
    47d8:	25050400 	.word	0x25050400
    47dc:	000005b4 	.word	0x000005b4
    47e0:	001bef15 	.word	0x001bef15
    47e4:	02410500 	.word	0x02410500
    47e8:	00000025 	.word	0x00000025
    47ec:	15002302 	.word	0x15002302
    47f0:	00001a0c 	.word	0x00001a0c
    47f4:	a4024605 	.word	0xa4024605
    47f8:	02000006 	.word	0x02000006
    47fc:	93150423 	.word	0x93150423
    4800:	0500001a 	.word	0x0500001a
    4804:	06a40246 	.word	0x06a40246
    4808:	23020000 	.word	0x23020000
    480c:	1a671508 	.word	0x1a671508
    4810:	46050000 	.word	0x46050000
    4814:	0006a402 	.word	0x0006a402
    4818:	0c230200 	.word	0x0c230200
    481c:	001b9815 	.word	0x001b9815
    4820:	02480500 	.word	0x02480500
    4824:	00000025 	.word	0x00000025
    4828:	15102302 	.word	0x15102302
    482c:	0000196a 	.word	0x0000196a
    4830:	af024905 	.word	0xaf024905
    4834:	02000008 	.word	0x02000008
    4838:	42151423 	.word	0x42151423
    483c:	0500001c 	.word	0x0500001c
    4840:	0025024b 	.word	0x0025024b
    4844:	23020000 	.word	0x23020000
    4848:	1ba21530 	.word	0x1ba21530
    484c:	4c050000 	.word	0x4c050000
    4850:	0005e602 	.word	0x0005e602
    4854:	34230200 	.word	0x34230200
    4858:	001b1415 	.word	0x001b1415
    485c:	024e0500 	.word	0x024e0500
    4860:	00000025 	.word	0x00000025
    4864:	15382302 	.word	0x15382302
    4868:	00001bb2 	.word	0x00001bb2
    486c:	cb025005 	.word	0xcb025005
    4870:	02000008 	.word	0x02000008
    4874:	d2153c23 	.word	0xd2153c23
    4878:	0500001a 	.word	0x0500001a
    487c:	01660253 	.word	0x01660253
    4880:	23020000 	.word	0x23020000
    4884:	1a7d1540 	.word	0x1a7d1540
    4888:	54050000 	.word	0x54050000
    488c:	00002502 	.word	0x00002502
    4890:	44230200 	.word	0x44230200
    4894:	001cda15 	.word	0x001cda15
    4898:	02550500 	.word	0x02550500
    489c:	00000166 	.word	0x00000166
    48a0:	15482302 	.word	0x15482302
    48a4:	00001b2e 	.word	0x00001b2e
    48a8:	d1025605 	.word	0xd1025605
    48ac:	02000008 	.word	0x02000008
    48b0:	9b154c23 	.word	0x9b154c23
    48b4:	0500001a 	.word	0x0500001a
    48b8:	00250259 	.word	0x00250259
    48bc:	23020000 	.word	0x23020000
    48c0:	1a1c1550 	.word	0x1a1c1550
    48c4:	5a050000 	.word	0x5a050000
    48c8:	0005b402 	.word	0x0005b402
    48cc:	54230200 	.word	0x54230200
    48d0:	001b4a15 	.word	0x001b4a15
    48d4:	027c0500 	.word	0x027c0500
    48d8:	0000088d 	.word	0x0000088d
    48dc:	15582302 	.word	0x15582302
    48e0:	00001915 	.word	0x00001915
    48e4:	a7027f05 	.word	0xa7027f05
    48e8:	03000002 	.word	0x03000002
    48ec:	1502c823 	.word	0x1502c823
    48f0:	00001ab0 	.word	0x00001ab0
    48f4:	60028005 	.word	0x60028005
    48f8:	03000002 	.word	0x03000002
    48fc:	1502cc23 	.word	0x1502cc23
    4900:	00001c8e 	.word	0x00001c8e
    4904:	e3028305 	.word	0xe3028305
    4908:	03000008 	.word	0x03000008
    490c:	1505dc23 	.word	0x1505dc23
    4910:	000019f5 	.word	0x000019f5
    4914:	63028805 	.word	0x63028805
    4918:	03000006 	.word	0x03000006
    491c:	1505e023 	.word	0x1505e023
    4920:	000019da 	.word	0x000019da
    4924:	ef028905 	.word	0xef028905
    4928:	03000008 	.word	0x03000008
    492c:	0005ec23 	.word	0x0005ec23
    4930:	05ba0410 	.word	0x05ba0410
    4934:	01030000 	.word	0x01030000
    4938:	00011608 	.word	0x00011608
    493c:	32041000 	.word	0x32041000
    4940:	13000004 	.word	0x13000004
    4944:	00002501 	.word	0x00002501
    4948:	0005e600 	.word	0x0005e600
    494c:	04511400 	.word	0x04511400
    4950:	f3140000 	.word	0xf3140000
    4954:	14000000 	.word	0x14000000
    4958:	000005e6 	.word	0x000005e6
    495c:	00002514 	.word	0x00002514
    4960:	04100000 	.word	0x04100000
    4964:	000005ec 	.word	0x000005ec
    4968:	0005ba16 	.word	0x0005ba16
    496c:	c7041000 	.word	0xc7041000
    4970:	13000005 	.word	0x13000005
    4974:	00006f01 	.word	0x00006f01
    4978:	00061600 	.word	0x00061600
    497c:	04511400 	.word	0x04511400
    4980:	f3140000 	.word	0xf3140000
    4984:	14000000 	.word	0x14000000
    4988:	0000006f 	.word	0x0000006f
    498c:	00002514 	.word	0x00002514
    4990:	04100000 	.word	0x04100000
    4994:	000005f7 	.word	0x000005f7
    4998:	00250113 	.word	0x00250113
    499c:	06310000 	.word	0x06310000
    49a0:	51140000 	.word	0x51140000
    49a4:	14000004 	.word	0x14000004
    49a8:	000000f3 	.word	0x000000f3
    49ac:	1c041000 	.word	0x1c041000
    49b0:	08000006 	.word	0x08000006
    49b4:	0000003a 	.word	0x0000003a
    49b8:	00000647 	.word	0x00000647
    49bc:	0000b509 	.word	0x0000b509
    49c0:	08000200 	.word	0x08000200
    49c4:	0000003a 	.word	0x0000003a
    49c8:	00000657 	.word	0x00000657
    49cc:	0000b509 	.word	0x0000b509
    49d0:	05000000 	.word	0x05000000
    49d4:	00001b66 	.word	0x00001b66
    49d8:	f4010e05 	.word	0xf4010e05
    49dc:	17000002 	.word	0x17000002
    49e0:	00001c75 	.word	0x00001c75
    49e4:	0113050c 	.word	0x0113050c
    49e8:	0000069e 	.word	0x0000069e
    49ec:	001b8515 	.word	0x001b8515
    49f0:	01140500 	.word	0x01140500
    49f4:	0000069e 	.word	0x0000069e
    49f8:	15002302 	.word	0x15002302
    49fc:	00001aa9 	.word	0x00001aa9
    4a00:	25011505 	.word	0x25011505
    4a04:	02000000 	.word	0x02000000
    4a08:	60150423 	.word	0x60150423
    4a0c:	0500001b 	.word	0x0500001b
    4a10:	06a40116 	.word	0x06a40116
    4a14:	23020000 	.word	0x23020000
    4a18:	04100008 	.word	0x04100008
    4a1c:	00000663 	.word	0x00000663
    4a20:	06570410 	.word	0x06570410
    4a24:	62170000 	.word	0x62170000
    4a28:	0e000019 	.word	0x0e000019
    4a2c:	e5012e05 	.word	0xe5012e05
    4a30:	15000006 	.word	0x15000006
    4a34:	00001bcb 	.word	0x00001bcb
    4a38:	e5012f05 	.word	0xe5012f05
    4a3c:	02000006 	.word	0x02000006
    4a40:	ed150023 	.word	0xed150023
    4a44:	0500001a 	.word	0x0500001a
    4a48:	06e50130 	.word	0x06e50130
    4a4c:	23020000 	.word	0x23020000
    4a50:	1c151506 	.word	0x1c151506
    4a54:	31050000 	.word	0x31050000
    4a58:	00004801 	.word	0x00004801
    4a5c:	0c230200 	.word	0x0c230200
    4a60:	00480800 	.word	0x00480800
    4a64:	06f50000 	.word	0x06f50000
    4a68:	b5090000 	.word	0xb5090000
    4a6c:	02000000 	.word	0x02000000
    4a70:	05d01800 	.word	0x05d01800
    4a74:	0815025f 	.word	0x0815025f
    4a78:	59150000 	.word	0x59150000
    4a7c:	0500001c 	.word	0x0500001c
    4a80:	002c0260 	.word	0x002c0260
    4a84:	23020000 	.word	0x23020000
    4a88:	1bff1500 	.word	0x1bff1500
    4a8c:	61050000 	.word	0x61050000
    4a90:	0005b402 	.word	0x0005b402
    4a94:	04230200 	.word	0x04230200
    4a98:	001ac515 	.word	0x001ac515
    4a9c:	02620500 	.word	0x02620500
    4aa0:	00000815 	.word	0x00000815
    4aa4:	15082302 	.word	0x15082302
    4aa8:	00001cb1 	.word	0x00001cb1
    4aac:	7c026305 	.word	0x7c026305
    4ab0:	02000001 	.word	0x02000001
    4ab4:	1f152423 	.word	0x1f152423
    4ab8:	0500001b 	.word	0x0500001b
    4abc:	00250264 	.word	0x00250264
    4ac0:	23020000 	.word	0x23020000
    4ac4:	1b801548 	.word	0x1b801548
    4ac8:	65050000 	.word	0x65050000
    4acc:	00005602 	.word	0x00005602
    4ad0:	50230200 	.word	0x50230200
    4ad4:	001cc715 	.word	0x001cc715
    4ad8:	02660500 	.word	0x02660500
    4adc:	000006aa 	.word	0x000006aa
    4ae0:	15582302 	.word	0x15582302
    4ae4:	00001b8b 	.word	0x00001b8b
    4ae8:	dd026705 	.word	0xdd026705
    4aec:	02000000 	.word	0x02000000
    4af0:	cc156823 	.word	0xcc156823
    4af4:	0500001c 	.word	0x0500001c
    4af8:	00dd0268 	.word	0x00dd0268
    4afc:	23020000 	.word	0x23020000
    4b00:	19ad1570 	.word	0x19ad1570
    4b04:	69050000 	.word	0x69050000
    4b08:	0000dd02 	.word	0x0000dd02
    4b0c:	78230200 	.word	0x78230200
    4b10:	001c8415 	.word	0x001c8415
    4b14:	026a0500 	.word	0x026a0500
    4b18:	00000825 	.word	0x00000825
    4b1c:	01802303 	.word	0x01802303
    4b20:	001ab915 	.word	0x001ab915
    4b24:	026b0500 	.word	0x026b0500
    4b28:	00000835 	.word	0x00000835
    4b2c:	01882303 	.word	0x01882303
    4b30:	001c2215 	.word	0x001c2215
    4b34:	026c0500 	.word	0x026c0500
    4b38:	00000025 	.word	0x00000025
    4b3c:	01a02303 	.word	0x01a02303
    4b40:	001a3d15 	.word	0x001a3d15
    4b44:	026d0500 	.word	0x026d0500
    4b48:	000000dd 	.word	0x000000dd
    4b4c:	01a42303 	.word	0x01a42303
    4b50:	00199e15 	.word	0x00199e15
    4b54:	026e0500 	.word	0x026e0500
    4b58:	000000dd 	.word	0x000000dd
    4b5c:	01ac2303 	.word	0x01ac2303
    4b60:	001a2c15 	.word	0x001a2c15
    4b64:	026f0500 	.word	0x026f0500
    4b68:	000000dd 	.word	0x000000dd
    4b6c:	01b42303 	.word	0x01b42303
    4b70:	00197515 	.word	0x00197515
    4b74:	02700500 	.word	0x02700500
    4b78:	000000dd 	.word	0x000000dd
    4b7c:	01bc2303 	.word	0x01bc2303
    4b80:	00198415 	.word	0x00198415
    4b84:	02710500 	.word	0x02710500
    4b88:	000000dd 	.word	0x000000dd
    4b8c:	01c42303 	.word	0x01c42303
    4b90:	05ba0800 	.word	0x05ba0800
    4b94:	08250000 	.word	0x08250000
    4b98:	b5090000 	.word	0xb5090000
    4b9c:	19000000 	.word	0x19000000
    4ba0:	05ba0800 	.word	0x05ba0800
    4ba4:	08350000 	.word	0x08350000
    4ba8:	b5090000 	.word	0xb5090000
    4bac:	07000000 	.word	0x07000000
    4bb0:	05ba0800 	.word	0x05ba0800
    4bb4:	08450000 	.word	0x08450000
    4bb8:	b5090000 	.word	0xb5090000
    4bbc:	17000000 	.word	0x17000000
    4bc0:	05f01800 	.word	0x05f01800
    4bc4:	086d0277 	.word	0x086d0277
    4bc8:	04150000 	.word	0x04150000
    4bcc:	0500001b 	.word	0x0500001b
    4bd0:	086d0279 	.word	0x086d0279
    4bd4:	23020000 	.word	0x23020000
    4bd8:	1c7b1500 	.word	0x1c7b1500
    4bdc:	7a050000 	.word	0x7a050000
    4be0:	00087d02 	.word	0x00087d02
    4be4:	78230200 	.word	0x78230200
    4be8:	02ee0800 	.word	0x02ee0800
    4bec:	087d0000 	.word	0x087d0000
    4bf0:	b5090000 	.word	0xb5090000
    4bf4:	1d000000 	.word	0x1d000000
    4bf8:	002c0800 	.word	0x002c0800
    4bfc:	088d0000 	.word	0x088d0000
    4c00:	b5090000 	.word	0xb5090000
    4c04:	1d000000 	.word	0x1d000000
    4c08:	05f01900 	.word	0x05f01900
    4c0c:	08af025d 	.word	0x08af025d
    4c10:	c41a0000 	.word	0xc41a0000
    4c14:	0500001b 	.word	0x0500001b
    4c18:	06f50272 	.word	0x06f50272
    4c1c:	9e1a0000 	.word	0x9e1a0000
    4c20:	0500001c 	.word	0x0500001c
    4c24:	0845027b 	.word	0x0845027b
    4c28:	08000000 	.word	0x08000000
    4c2c:	000005ba 	.word	0x000005ba
    4c30:	000008bf 	.word	0x000008bf
    4c34:	0000b509 	.word	0x0000b509
    4c38:	1b001800 	.word	0x1b001800
    4c3c:	0008cb01 	.word	0x0008cb01
    4c40:	04511400 	.word	0x04511400
    4c44:	10000000 	.word	0x10000000
    4c48:	0008bf04 	.word	0x0008bf04
    4c4c:	66041000 	.word	0x66041000
    4c50:	1b000001 	.word	0x1b000001
    4c54:	0008e301 	.word	0x0008e301
    4c58:	00251400 	.word	0x00251400
    4c5c:	10000000 	.word	0x10000000
    4c60:	0008e904 	.word	0x0008e904
    4c64:	d7041000 	.word	0xd7041000
    4c68:	08000008 	.word	0x08000008
    4c6c:	00000657 	.word	0x00000657
    4c70:	000008ff 	.word	0x000008ff
    4c74:	0000b509 	.word	0x0000b509
    4c78:	1c000200 	.word	0x1c000200
    4c7c:	00001902 	.word	0x00001902
    4c80:	1e060601 	.word	0x1e060601
    4c84:	1d000009 	.word	0x1d000009
    4c88:	00001911 	.word	0x00001911
    4c8c:	18f61d00 	.word	0x18f61d00
    4c90:	1d010000 	.word	0x1d010000
    4c94:	000018ed 	.word	0x000018ed
    4c98:	011e0002 	.word	0x011e0002
    4c9c:	00001f25 	.word	0x00001f25
    4ca0:	25011701 	.word	0x25011701
	...
    4cb0:	8b000013 	.word	0x8b000013
    4cb4:	1f000009 	.word	0x1f000009
    4cb8:	00001f20 	.word	0x00001f20
    4cbc:	00251101 	.word	0x00251101
    4cc0:	131f0000 	.word	0x131f0000
    4cc4:	66200000 	.word	0x66200000
    4cc8:	1101006e 	.word	0x1101006e
    4ccc:	000002bf 	.word	0x000002bf
    4cd0:	0000133d 	.word	0x0000133d
    4cd4:	67726120 	.word	0x67726120
    4cd8:	f3110100 	.word	0xf3110100
    4cdc:	5b000000 	.word	0x5b000000
    4ce0:	20000013 	.word	0x20000013
    4ce4:	11010064 	.word	0x11010064
    4ce8:	000000f3 	.word	0x000000f3
    4cec:	00001379 	.word	0x00001379
    4cf0:	0019e821 	.word	0x0019e821
    4cf4:	8b180100 	.word	0x8b180100
    4cf8:	22000009 	.word	0x22000009
    4cfc:	19010070 	.word	0x19010070
    4d00:	000002a7 	.word	0x000002a7
    4d04:	10005c01 	.word	0x10005c01
    4d08:	00020704 	.word	0x00020704
    4d0c:	1c2f2300 	.word	0x1c2f2300
    4d10:	28050000 	.word	0x28050000
    4d14:	00099f03 	.word	0x00099f03
    4d18:	16010100 	.word	0x16010100
    4d1c:	00000451 	.word	0x00000451
    4d20:	0009ae00 	.word	0x0009ae00
    4d24:	c4000200 	.word	0xc4000200
    4d28:	04000014 	.word	0x04000014
    4d2c:	0000f101 	.word	0x0000f101
    4d30:	1f4a0100 	.word	0x1f4a0100
    4d34:	186a0000 	.word	0x186a0000
	...
    4d40:	11a40000 	.word	0x11a40000
    4d44:	04020000 	.word	0x04020000
    4d48:	0018e007 	.word	0x0018e007
    4d4c:	06010200 	.word	0x06010200
    4d50:	0000010f 	.word	0x0000010f
    4d54:	0d080102 	.word	0x0d080102
    4d58:	02000001 	.word	0x02000001
    4d5c:	01b20502 	.word	0x01b20502
    4d60:	02020000 	.word	0x02020000
    4d64:	00009307 	.word	0x00009307
    4d68:	05040300 	.word	0x05040300
    4d6c:	00746e69 	.word	0x00746e69
    4d70:	5c050802 	.word	0x5c050802
    4d74:	02000018 	.word	0x02000018
    4d78:	18d60708 	.word	0x18d60708
    4d7c:	38040000 	.word	0x38040000
    4d80:	0200001b 	.word	0x0200001b
    4d84:	00004807 	.word	0x00004807
    4d88:	05040200 	.word	0x05040200
    4d8c:	00001861 	.word	0x00001861
    4d90:	001be704 	.word	0x001be704
    4d94:	682c0300 	.word	0x682c0300
    4d98:	05000000 	.word	0x05000000
    4d9c:	00001ae0 	.word	0x00001ae0
    4da0:	25016304 	.word	0x25016304
    4da4:	06000000 	.word	0x06000000
    4da8:	a5470304 	.word	0xa5470304
    4dac:	07000000 	.word	0x07000000
    4db0:	00001ada 	.word	0x00001ada
    4db4:	007a4803 	.word	0x007a4803
    4db8:	8c070000 	.word	0x8c070000
    4dbc:	0300001a 	.word	0x0300001a
    4dc0:	0000a549 	.word	0x0000a549
    4dc4:	33080000 	.word	0x33080000
    4dc8:	b5000000 	.word	0xb5000000
    4dcc:	09000000 	.word	0x09000000
    4dd0:	000000b5 	.word	0x000000b5
    4dd4:	040a0003 	.word	0x040a0003
    4dd8:	03080b07 	.word	0x03080b07
    4ddc:	0000dd44 	.word	0x0000dd44
    4de0:	1bd10c00 	.word	0x1bd10c00
    4de4:	45030000 	.word	0x45030000
    4de8:	00000048 	.word	0x00000048
    4dec:	0c002302 	.word	0x0c002302
    4df0:	00001bd9 	.word	0x00001bd9
    4df4:	00864a03 	.word	0x00864a03
    4df8:	23020000 	.word	0x23020000
    4dfc:	6d040004 	.word	0x6d040004
    4e00:	0300001b 	.word	0x0300001b
    4e04:	0000b84b 	.word	0x0000b84b
    4e08:	1a5e0400 	.word	0x1a5e0400
    4e0c:	4f030000 	.word	0x4f030000
    4e10:	0000005d 	.word	0x0000005d
    4e14:	1a04040d 	.word	0x1a04040d
    4e18:	0500001c 	.word	0x0500001c
    4e1c:	00010015 	.word	0x00010015
    4e20:	07040200 	.word	0x07040200
    4e24:	000018db 	.word	0x000018db
    4e28:	001a6f0e 	.word	0x001a6f0e
    4e2c:	2d051800 	.word	0x2d051800
    4e30:	00000166 	.word	0x00000166
    4e34:	001b850c 	.word	0x001b850c
    4e38:	662e0500 	.word	0x662e0500
    4e3c:	02000001 	.word	0x02000001
    4e40:	5f0f0023 	.word	0x5f0f0023
    4e44:	2f05006b 	.word	0x2f05006b
    4e48:	00000048 	.word	0x00000048
    4e4c:	0c042302 	.word	0x0c042302
    4e50:	00001bbc 	.word	0x00001bbc
    4e54:	00482f05 	.word	0x00482f05
    4e58:	23020000 	.word	0x23020000
    4e5c:	1a580c08 	.word	0x1a580c08
    4e60:	2f050000 	.word	0x2f050000
    4e64:	00000048 	.word	0x00000048
    4e68:	0c0c2302 	.word	0x0c0c2302
    4e6c:	00001c66 	.word	0x00001c66
    4e70:	00482f05 	.word	0x00482f05
    4e74:	23020000 	.word	0x23020000
    4e78:	785f0f10 	.word	0x785f0f10
    4e7c:	6c300500 	.word	0x6c300500
    4e80:	02000001 	.word	0x02000001
    4e84:	10001423 	.word	0x10001423
    4e88:	00010704 	.word	0x00010704
    4e8c:	00f50800 	.word	0x00f50800
    4e90:	017c0000 	.word	0x017c0000
    4e94:	b5090000 	.word	0xb5090000
    4e98:	00000000 	.word	0x00000000
    4e9c:	1a870e00 	.word	0x1a870e00
    4ea0:	05240000 	.word	0x05240000
    4ea4:	00020735 	.word	0x00020735
    4ea8:	19bb0c00 	.word	0x19bb0c00
    4eac:	36050000 	.word	0x36050000
    4eb0:	00000048 	.word	0x00000048
    4eb4:	0c002302 	.word	0x0c002302
    4eb8:	00001bf6 	.word	0x00001bf6
    4ebc:	00483705 	.word	0x00483705
    4ec0:	23020000 	.word	0x23020000
    4ec4:	19d00c04 	.word	0x19d00c04
    4ec8:	38050000 	.word	0x38050000
    4ecc:	00000048 	.word	0x00000048
    4ed0:	0c082302 	.word	0x0c082302
    4ed4:	00001cdf 	.word	0x00001cdf
    4ed8:	00483905 	.word	0x00483905
    4edc:	23020000 	.word	0x23020000
    4ee0:	1b0b0c0c 	.word	0x1b0b0c0c
    4ee4:	3a050000 	.word	0x3a050000
    4ee8:	00000048 	.word	0x00000048
    4eec:	0c102302 	.word	0x0c102302
    4ef0:	00001afa 	.word	0x00001afa
    4ef4:	00483b05 	.word	0x00483b05
    4ef8:	23020000 	.word	0x23020000
    4efc:	1c6b0c14 	.word	0x1c6b0c14
    4f00:	3c050000 	.word	0x3c050000
    4f04:	00000048 	.word	0x00000048
    4f08:	0c182302 	.word	0x0c182302
    4f0c:	00001b4f 	.word	0x00001b4f
    4f10:	00483d05 	.word	0x00483d05
    4f14:	23020000 	.word	0x23020000
    4f18:	1ca60c1c 	.word	0x1ca60c1c
    4f1c:	3e050000 	.word	0x3e050000
    4f20:	00000048 	.word	0x00000048
    4f24:	00202302 	.word	0x00202302
    4f28:	0019df11 	.word	0x0019df11
    4f2c:	05010800 	.word	0x05010800
    4f30:	00025047 	.word	0x00025047
    4f34:	1a4b0c00 	.word	0x1a4b0c00
    4f38:	48050000 	.word	0x48050000
    4f3c:	00000250 	.word	0x00000250
    4f40:	0c002302 	.word	0x0c002302
    4f44:	0000191d 	.word	0x0000191d
    4f48:	02504905 	.word	0x02504905
    4f4c:	23030000 	.word	0x23030000
    4f50:	0c0c0180 	.word	0x0c0c0180
    4f54:	0500001c 	.word	0x0500001c
    4f58:	0000f54b 	.word	0x0000f54b
    4f5c:	80230300 	.word	0x80230300
    4f60:	1a040c02 	.word	0x1a040c02
    4f64:	4e050000 	.word	0x4e050000
    4f68:	000000f5 	.word	0x000000f5
    4f6c:	02842303 	.word	0x02842303
    4f70:	00f30800 	.word	0x00f30800
    4f74:	02600000 	.word	0x02600000
    4f78:	b5090000 	.word	0xb5090000
    4f7c:	1f000000 	.word	0x1f000000
    4f80:	19151100 	.word	0x19151100
    4f84:	01900000 	.word	0x01900000
    4f88:	02a75905 	.word	0x02a75905
    4f8c:	850c0000 	.word	0x850c0000
    4f90:	0500001b 	.word	0x0500001b
    4f94:	0002a75a 	.word	0x0002a75a
    4f98:	00230200 	.word	0x00230200
    4f9c:	001b9d0c 	.word	0x001b9d0c
    4fa0:	485b0500 	.word	0x485b0500
    4fa4:	02000000 	.word	0x02000000
    4fa8:	530c0423 	.word	0x530c0423
    4fac:	0500001a 	.word	0x0500001a
    4fb0:	0002ad5d 	.word	0x0002ad5d
    4fb4:	08230200 	.word	0x08230200
    4fb8:	0019df0c 	.word	0x0019df0c
    4fbc:	075e0500 	.word	0x075e0500
    4fc0:	03000002 	.word	0x03000002
    4fc4:	00018823 	.word	0x00018823
    4fc8:	02600410 	.word	0x02600410
    4fcc:	bf080000 	.word	0xbf080000
    4fd0:	bd000002 	.word	0xbd000002
    4fd4:	09000002 	.word	0x09000002
    4fd8:	000000b5 	.word	0x000000b5
    4fdc:	0112001f 	.word	0x0112001f
    4fe0:	02bd0410 	.word	0x02bd0410
    4fe4:	590e0000 	.word	0x590e0000
    4fe8:	0800001b 	.word	0x0800001b
    4fec:	02ee6905 	.word	0x02ee6905
    4ff0:	ca0c0000 	.word	0xca0c0000
    4ff4:	05000019 	.word	0x05000019
    4ff8:	0002ee6a 	.word	0x0002ee6a
    4ffc:	00230200 	.word	0x00230200
    5000:	00195c0c 	.word	0x00195c0c
    5004:	486b0500 	.word	0x486b0500
    5008:	02000000 	.word	0x02000000
    500c:	10000423 	.word	0x10000423
    5010:	00003304 	.word	0x00003304
    5014:	1b780e00 	.word	0x1b780e00
    5018:	055c0000 	.word	0x055c0000
    501c:	000432a9 	.word	0x000432a9
    5020:	705f0f00 	.word	0x705f0f00
    5024:	eeaa0500 	.word	0xeeaa0500
    5028:	02000002 	.word	0x02000002
    502c:	5f0f0023 	.word	0x5f0f0023
    5030:	ab050072 	.word	0xab050072
    5034:	00000048 	.word	0x00000048
    5038:	0f042302 	.word	0x0f042302
    503c:	0500775f 	.word	0x0500775f
    5040:	000048ac 	.word	0x000048ac
    5044:	08230200 	.word	0x08230200
    5048:	0019fd0c 	.word	0x0019fd0c
    504c:	3aad0500 	.word	0x3aad0500
    5050:	02000000 	.word	0x02000000
    5054:	a30c0c23 	.word	0xa30c0c23
    5058:	0500001a 	.word	0x0500001a
    505c:	00003aae 	.word	0x00003aae
    5060:	0e230200 	.word	0x0e230200
    5064:	66625f0f 	.word	0x66625f0f
    5068:	c5af0500 	.word	0xc5af0500
    506c:	02000002 	.word	0x02000002
    5070:	950c1023 	.word	0x950c1023
    5074:	05000019 	.word	0x05000019
    5078:	000048b0 	.word	0x000048b0
    507c:	18230200 	.word	0x18230200
    5080:	0019ed0c 	.word	0x0019ed0c
    5084:	f3b70500 	.word	0xf3b70500
    5088:	02000000 	.word	0x02000000
    508c:	770c1c23 	.word	0x770c1c23
    5090:	0500001a 	.word	0x0500001a
    5094:	0005c1b9 	.word	0x0005c1b9
    5098:	20230200 	.word	0x20230200
    509c:	001af30c 	.word	0x001af30c
    50a0:	f1bb0500 	.word	0xf1bb0500
    50a4:	02000005 	.word	0x02000005
    50a8:	e10c2423 	.word	0xe10c2423
    50ac:	0500001b 	.word	0x0500001b
    50b0:	000616bd 	.word	0x000616bd
    50b4:	28230200 	.word	0x28230200
    50b8:	001cc00c 	.word	0x001cc00c
    50bc:	31be0500 	.word	0x31be0500
    50c0:	02000006 	.word	0x02000006
    50c4:	5f0f2c23 	.word	0x5f0f2c23
    50c8:	05006275 	.word	0x05006275
    50cc:	0002c5c1 	.word	0x0002c5c1
    50d0:	30230200 	.word	0x30230200
    50d4:	70755f0f 	.word	0x70755f0f
    50d8:	eec20500 	.word	0xeec20500
    50dc:	02000002 	.word	0x02000002
    50e0:	5f0f3823 	.word	0x5f0f3823
    50e4:	05007275 	.word	0x05007275
    50e8:	000048c3 	.word	0x000048c3
    50ec:	3c230200 	.word	0x3c230200
    50f0:	0019c40c 	.word	0x0019c40c
    50f4:	37c60500 	.word	0x37c60500
    50f8:	02000006 	.word	0x02000006
    50fc:	980c4023 	.word	0x980c4023
    5100:	0500001c 	.word	0x0500001c
    5104:	000647c7 	.word	0x000647c7
    5108:	43230200 	.word	0x43230200
    510c:	626c5f0f 	.word	0x626c5f0f
    5110:	c5ca0500 	.word	0xc5ca0500
    5114:	02000002 	.word	0x02000002
    5118:	130c4423 	.word	0x130c4423
    511c:	0500001a 	.word	0x0500001a
    5120:	000048cd 	.word	0x000048cd
    5124:	4c230200 	.word	0x4c230200
    5128:	001a240c 	.word	0x001a240c
    512c:	48ce0500 	.word	0x48ce0500
    5130:	02000000 	.word	0x02000000
    5134:	ef0c5023 	.word	0xef0c5023
    5138:	0500001c 	.word	0x0500001c
    513c:	000451d1 	.word	0x000451d1
    5140:	54230200 	.word	0x54230200
    5144:	001ae70c 	.word	0x001ae70c
    5148:	e8d50500 	.word	0xe8d50500
    514c:	02000000 	.word	0x02000000
    5150:	13005823 	.word	0x13005823
    5154:	00004801 	.word	0x00004801
    5158:	00045100 	.word	0x00045100
    515c:	04511400 	.word	0x04511400
    5160:	f3140000 	.word	0xf3140000
    5164:	14000000 	.word	0x14000000
    5168:	000005b4 	.word	0x000005b4
    516c:	00004814 	.word	0x00004814
    5170:	04100000 	.word	0x04100000
    5174:	00000457 	.word	0x00000457
    5178:	001bc411 	.word	0x001bc411
    517c:	05040000 	.word	0x05040000
    5180:	0005b425 	.word	0x0005b425
    5184:	1bef1500 	.word	0x1bef1500
    5188:	41050000 	.word	0x41050000
    518c:	00004802 	.word	0x00004802
    5190:	00230200 	.word	0x00230200
    5194:	001a0c15 	.word	0x001a0c15
    5198:	02460500 	.word	0x02460500
    519c:	000006a4 	.word	0x000006a4
    51a0:	15042302 	.word	0x15042302
    51a4:	00001a93 	.word	0x00001a93
    51a8:	a4024605 	.word	0xa4024605
    51ac:	02000006 	.word	0x02000006
    51b0:	67150823 	.word	0x67150823
    51b4:	0500001a 	.word	0x0500001a
    51b8:	06a40246 	.word	0x06a40246
    51bc:	23020000 	.word	0x23020000
    51c0:	1b98150c 	.word	0x1b98150c
    51c4:	48050000 	.word	0x48050000
    51c8:	00004802 	.word	0x00004802
    51cc:	10230200 	.word	0x10230200
    51d0:	00196a15 	.word	0x00196a15
    51d4:	02490500 	.word	0x02490500
    51d8:	000008af 	.word	0x000008af
    51dc:	15142302 	.word	0x15142302
    51e0:	00001c42 	.word	0x00001c42
    51e4:	48024b05 	.word	0x48024b05
    51e8:	02000000 	.word	0x02000000
    51ec:	a2153023 	.word	0xa2153023
    51f0:	0500001b 	.word	0x0500001b
    51f4:	05e6024c 	.word	0x05e6024c
    51f8:	23020000 	.word	0x23020000
    51fc:	1b141534 	.word	0x1b141534
    5200:	4e050000 	.word	0x4e050000
    5204:	00004802 	.word	0x00004802
    5208:	38230200 	.word	0x38230200
    520c:	001bb215 	.word	0x001bb215
    5210:	02500500 	.word	0x02500500
    5214:	000008cb 	.word	0x000008cb
    5218:	153c2302 	.word	0x153c2302
    521c:	00001ad2 	.word	0x00001ad2
    5220:	66025305 	.word	0x66025305
    5224:	02000001 	.word	0x02000001
    5228:	7d154023 	.word	0x7d154023
    522c:	0500001a 	.word	0x0500001a
    5230:	00480254 	.word	0x00480254
    5234:	23020000 	.word	0x23020000
    5238:	1cda1544 	.word	0x1cda1544
    523c:	55050000 	.word	0x55050000
    5240:	00016602 	.word	0x00016602
    5244:	48230200 	.word	0x48230200
    5248:	001b2e15 	.word	0x001b2e15
    524c:	02560500 	.word	0x02560500
    5250:	000008d1 	.word	0x000008d1
    5254:	154c2302 	.word	0x154c2302
    5258:	00001a9b 	.word	0x00001a9b
    525c:	48025905 	.word	0x48025905
    5260:	02000000 	.word	0x02000000
    5264:	1c155023 	.word	0x1c155023
    5268:	0500001a 	.word	0x0500001a
    526c:	05b4025a 	.word	0x05b4025a
    5270:	23020000 	.word	0x23020000
    5274:	1b4a1554 	.word	0x1b4a1554
    5278:	7c050000 	.word	0x7c050000
    527c:	00088d02 	.word	0x00088d02
    5280:	58230200 	.word	0x58230200
    5284:	00191515 	.word	0x00191515
    5288:	027f0500 	.word	0x027f0500
    528c:	000002a7 	.word	0x000002a7
    5290:	02c82303 	.word	0x02c82303
    5294:	001ab015 	.word	0x001ab015
    5298:	02800500 	.word	0x02800500
    529c:	00000260 	.word	0x00000260
    52a0:	02cc2303 	.word	0x02cc2303
    52a4:	001c8e15 	.word	0x001c8e15
    52a8:	02830500 	.word	0x02830500
    52ac:	000008e3 	.word	0x000008e3
    52b0:	05dc2303 	.word	0x05dc2303
    52b4:	0019f515 	.word	0x0019f515
    52b8:	02880500 	.word	0x02880500
    52bc:	00000663 	.word	0x00000663
    52c0:	05e02303 	.word	0x05e02303
    52c4:	0019da15 	.word	0x0019da15
    52c8:	02890500 	.word	0x02890500
    52cc:	000008ef 	.word	0x000008ef
    52d0:	05ec2303 	.word	0x05ec2303
    52d4:	ba041000 	.word	0xba041000
    52d8:	02000005 	.word	0x02000005
    52dc:	01160801 	.word	0x01160801
    52e0:	04100000 	.word	0x04100000
    52e4:	00000432 	.word	0x00000432
    52e8:	00480113 	.word	0x00480113
    52ec:	05e60000 	.word	0x05e60000
    52f0:	51140000 	.word	0x51140000
    52f4:	14000004 	.word	0x14000004
    52f8:	000000f3 	.word	0x000000f3
    52fc:	0005e614 	.word	0x0005e614
    5300:	00481400 	.word	0x00481400
    5304:	10000000 	.word	0x10000000
    5308:	0005ec04 	.word	0x0005ec04
    530c:	05ba1600 	.word	0x05ba1600
    5310:	04100000 	.word	0x04100000
    5314:	000005c7 	.word	0x000005c7
    5318:	006f0113 	.word	0x006f0113
    531c:	06160000 	.word	0x06160000
    5320:	51140000 	.word	0x51140000
    5324:	14000004 	.word	0x14000004
    5328:	000000f3 	.word	0x000000f3
    532c:	00006f14 	.word	0x00006f14
    5330:	00481400 	.word	0x00481400
    5334:	10000000 	.word	0x10000000
    5338:	0005f704 	.word	0x0005f704
    533c:	48011300 	.word	0x48011300
    5340:	31000000 	.word	0x31000000
    5344:	14000006 	.word	0x14000006
    5348:	00000451 	.word	0x00000451
    534c:	0000f314 	.word	0x0000f314
    5350:	04100000 	.word	0x04100000
    5354:	0000061c 	.word	0x0000061c
    5358:	00003308 	.word	0x00003308
    535c:	00064700 	.word	0x00064700
    5360:	00b50900 	.word	0x00b50900
    5364:	00020000 	.word	0x00020000
    5368:	00003308 	.word	0x00003308
    536c:	00065700 	.word	0x00065700
    5370:	00b50900 	.word	0x00b50900
    5374:	00000000 	.word	0x00000000
    5378:	001b6605 	.word	0x001b6605
    537c:	010e0500 	.word	0x010e0500
    5380:	000002f4 	.word	0x000002f4
    5384:	001c7517 	.word	0x001c7517
    5388:	13050c00 	.word	0x13050c00
    538c:	00069e01 	.word	0x00069e01
    5390:	1b851500 	.word	0x1b851500
    5394:	14050000 	.word	0x14050000
    5398:	00069e01 	.word	0x00069e01
    539c:	00230200 	.word	0x00230200
    53a0:	001aa915 	.word	0x001aa915
    53a4:	01150500 	.word	0x01150500
    53a8:	00000048 	.word	0x00000048
    53ac:	15042302 	.word	0x15042302
    53b0:	00001b60 	.word	0x00001b60
    53b4:	a4011605 	.word	0xa4011605
    53b8:	02000006 	.word	0x02000006
    53bc:	10000823 	.word	0x10000823
    53c0:	00066304 	.word	0x00066304
    53c4:	57041000 	.word	0x57041000
    53c8:	17000006 	.word	0x17000006
    53cc:	00001962 	.word	0x00001962
    53d0:	012e050e 	.word	0x012e050e
    53d4:	000006e5 	.word	0x000006e5
    53d8:	001bcb15 	.word	0x001bcb15
    53dc:	012f0500 	.word	0x012f0500
    53e0:	000006e5 	.word	0x000006e5
    53e4:	15002302 	.word	0x15002302
    53e8:	00001aed 	.word	0x00001aed
    53ec:	e5013005 	.word	0xe5013005
    53f0:	02000006 	.word	0x02000006
    53f4:	15150623 	.word	0x15150623
    53f8:	0500001c 	.word	0x0500001c
    53fc:	00410131 	.word	0x00410131
    5400:	23020000 	.word	0x23020000
    5404:	4108000c 	.word	0x4108000c
    5408:	f5000000 	.word	0xf5000000
    540c:	09000006 	.word	0x09000006
    5410:	000000b5 	.word	0x000000b5
    5414:	d0180002 	.word	0xd0180002
    5418:	15025f05 	.word	0x15025f05
    541c:	15000008 	.word	0x15000008
    5420:	00001c59 	.word	0x00001c59
    5424:	25026005 	.word	0x25026005
    5428:	02000000 	.word	0x02000000
    542c:	ff150023 	.word	0xff150023
    5430:	0500001b 	.word	0x0500001b
    5434:	05b40261 	.word	0x05b40261
    5438:	23020000 	.word	0x23020000
    543c:	1ac51504 	.word	0x1ac51504
    5440:	62050000 	.word	0x62050000
    5444:	00081502 	.word	0x00081502
    5448:	08230200 	.word	0x08230200
    544c:	001cb115 	.word	0x001cb115
    5450:	02630500 	.word	0x02630500
    5454:	0000017c 	.word	0x0000017c
    5458:	15242302 	.word	0x15242302
    545c:	00001b1f 	.word	0x00001b1f
    5460:	48026405 	.word	0x48026405
    5464:	02000000 	.word	0x02000000
    5468:	80154823 	.word	0x80154823
    546c:	0500001b 	.word	0x0500001b
    5470:	00560265 	.word	0x00560265
    5474:	23020000 	.word	0x23020000
    5478:	1cc71550 	.word	0x1cc71550
    547c:	66050000 	.word	0x66050000
    5480:	0006aa02 	.word	0x0006aa02
    5484:	58230200 	.word	0x58230200
    5488:	001b8b15 	.word	0x001b8b15
    548c:	02670500 	.word	0x02670500
    5490:	000000dd 	.word	0x000000dd
    5494:	15682302 	.word	0x15682302
    5498:	00001ccc 	.word	0x00001ccc
    549c:	dd026805 	.word	0xdd026805
    54a0:	02000000 	.word	0x02000000
    54a4:	ad157023 	.word	0xad157023
    54a8:	05000019 	.word	0x05000019
    54ac:	00dd0269 	.word	0x00dd0269
    54b0:	23020000 	.word	0x23020000
    54b4:	1c841578 	.word	0x1c841578
    54b8:	6a050000 	.word	0x6a050000
    54bc:	00082502 	.word	0x00082502
    54c0:	80230300 	.word	0x80230300
    54c4:	1ab91501 	.word	0x1ab91501
    54c8:	6b050000 	.word	0x6b050000
    54cc:	00083502 	.word	0x00083502
    54d0:	88230300 	.word	0x88230300
    54d4:	1c221501 	.word	0x1c221501
    54d8:	6c050000 	.word	0x6c050000
    54dc:	00004802 	.word	0x00004802
    54e0:	a0230300 	.word	0xa0230300
    54e4:	1a3d1501 	.word	0x1a3d1501
    54e8:	6d050000 	.word	0x6d050000
    54ec:	0000dd02 	.word	0x0000dd02
    54f0:	a4230300 	.word	0xa4230300
    54f4:	199e1501 	.word	0x199e1501
    54f8:	6e050000 	.word	0x6e050000
    54fc:	0000dd02 	.word	0x0000dd02
    5500:	ac230300 	.word	0xac230300
    5504:	1a2c1501 	.word	0x1a2c1501
    5508:	6f050000 	.word	0x6f050000
    550c:	0000dd02 	.word	0x0000dd02
    5510:	b4230300 	.word	0xb4230300
    5514:	19751501 	.word	0x19751501
    5518:	70050000 	.word	0x70050000
    551c:	0000dd02 	.word	0x0000dd02
    5520:	bc230300 	.word	0xbc230300
    5524:	19841501 	.word	0x19841501
    5528:	71050000 	.word	0x71050000
    552c:	0000dd02 	.word	0x0000dd02
    5530:	c4230300 	.word	0xc4230300
    5534:	ba080001 	.word	0xba080001
    5538:	25000005 	.word	0x25000005
    553c:	09000008 	.word	0x09000008
    5540:	000000b5 	.word	0x000000b5
    5544:	ba080019 	.word	0xba080019
    5548:	35000005 	.word	0x35000005
    554c:	09000008 	.word	0x09000008
    5550:	000000b5 	.word	0x000000b5
    5554:	ba080007 	.word	0xba080007
    5558:	45000005 	.word	0x45000005
    555c:	09000008 	.word	0x09000008
    5560:	000000b5 	.word	0x000000b5
    5564:	f0180017 	.word	0xf0180017
    5568:	6d027705 	.word	0x6d027705
    556c:	15000008 	.word	0x15000008
    5570:	00001b04 	.word	0x00001b04
    5574:	6d027905 	.word	0x6d027905
    5578:	02000008 	.word	0x02000008
    557c:	7b150023 	.word	0x7b150023
    5580:	0500001c 	.word	0x0500001c
    5584:	087d027a 	.word	0x087d027a
    5588:	23020000 	.word	0x23020000
    558c:	ee080078 	.word	0xee080078
    5590:	7d000002 	.word	0x7d000002
    5594:	09000008 	.word	0x09000008
    5598:	000000b5 	.word	0x000000b5
    559c:	2508001d 	.word	0x2508001d
    55a0:	8d000000 	.word	0x8d000000
    55a4:	09000008 	.word	0x09000008
    55a8:	000000b5 	.word	0x000000b5
    55ac:	f019001d 	.word	0xf019001d
    55b0:	af025d05 	.word	0xaf025d05
    55b4:	1a000008 	.word	0x1a000008
    55b8:	00001bc4 	.word	0x00001bc4
    55bc:	f5027205 	.word	0xf5027205
    55c0:	1a000006 	.word	0x1a000006
    55c4:	00001c9e 	.word	0x00001c9e
    55c8:	45027b05 	.word	0x45027b05
    55cc:	00000008 	.word	0x00000008
    55d0:	0005ba08 	.word	0x0005ba08
    55d4:	0008bf00 	.word	0x0008bf00
    55d8:	00b50900 	.word	0x00b50900
    55dc:	00180000 	.word	0x00180000
    55e0:	08cb011b 	.word	0x08cb011b
    55e4:	51140000 	.word	0x51140000
    55e8:	00000004 	.word	0x00000004
    55ec:	08bf0410 	.word	0x08bf0410
    55f0:	04100000 	.word	0x04100000
    55f4:	00000166 	.word	0x00000166
    55f8:	08e3011b 	.word	0x08e3011b
    55fc:	48140000 	.word	0x48140000
    5600:	00000000 	.word	0x00000000
    5604:	08e90410 	.word	0x08e90410
    5608:	04100000 	.word	0x04100000
    560c:	000008d7 	.word	0x000008d7
    5610:	00065708 	.word	0x00065708
    5614:	0008ff00 	.word	0x0008ff00
    5618:	00b50900 	.word	0x00b50900
    561c:	00020000 	.word	0x00020000
    5620:	1f39011c 	.word	0x1f39011c
    5624:	12010000 	.word	0x12010000
    5628:	00000001 	.word	0x00000001
    562c:	00000000 	.word	0x00000000
    5630:	00139700 	.word	0x00139700
    5634:	00099200 	.word	0x00099200
    5638:	1c541d00 	.word	0x1c541d00
    563c:	10010000 	.word	0x10010000
    5640:	00000048 	.word	0x00000048
    5644:	000013c2 	.word	0x000013c2
    5648:	0100641e 	.word	0x0100641e
    564c:	0000f310 	.word	0x0000f310
    5650:	00141100 	.word	0x00141100
    5654:	00701f00 	.word	0x00701f00
    5658:	02a71301 	.word	0x02a71301
    565c:	56010000 	.word	0x56010000
    5660:	001f8620 	.word	0x001f8620
    5664:	92140100 	.word	0x92140100
    5668:	20000009 	.word	0x20000009
    566c:	000019e8 	.word	0x000019e8
    5670:	09981501 	.word	0x09981501
    5674:	6e1f0000 	.word	0x6e1f0000
    5678:	48160100 	.word	0x48160100
    567c:	01000000 	.word	0x01000000
    5680:	00692155 	.word	0x00692155
    5684:	00481701 	.word	0x00481701
    5688:	66220000 	.word	0x66220000
    568c:	1801006e 	.word	0x1801006e
    5690:	000002bf 	.word	0x000002bf
    5694:	0000142f 	.word	0x0000142f
    5698:	001f8c23 	.word	0x001f8c23
    569c:	24490100 	.word	0x24490100
    56a0:	000000f8 	.word	0x000000f8
    56a4:	646e691f 	.word	0x646e691f
    56a8:	48270100 	.word	0x48270100
    56ac:	01000000 	.word	0x01000000
    56b0:	10000058 	.word	0x10000058
    56b4:	0002a704 	.word	0x0002a704
    56b8:	07041000 	.word	0x07041000
    56bc:	25000002 	.word	0x25000002
    56c0:	00001c2f 	.word	0x00001c2f
    56c4:	ac032805 	.word	0xac032805
    56c8:	01000009 	.word	0x01000009
    56cc:	04511601 	.word	0x04511601
    56d0:	49000000 	.word	0x49000000
    56d4:	02000000 	.word	0x02000000
    56d8:	00169400 	.word	0x00169400
    56dc:	c3010400 	.word	0xc3010400
    56e0:	18000012 	.word	0x18000012
    56e4:	63000001 	.word	0x63000001
    56e8:	2e6e7472 	.word	0x2e6e7472
    56ec:	006d7361 	.word	0x006d7361
    56f0:	775c3a63 	.word	0x775c3a63
    56f4:	72616e69 	.word	0x72616e69
    56f8:	625c736d 	.word	0x625c736d
    56fc:	646c6975 	.word	0x646c6975
    5700:	6363675c 	.word	0x6363675c
    5704:	6975622d 	.word	0x6975622d
    5708:	675c646c 	.word	0x675c646c
    570c:	47006363 	.word	0x47006363
    5710:	4120554e 	.word	0x4120554e
    5714:	2e322053 	.word	0x2e322053
    5718:	352e3831 	.word	0x352e3831
    571c:	80010030 	.word	0x80010030

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]
       c:	00051308 	andeq	r1, r5, r8, lsl #6
      10:	11010000 	tstne	r1, r0
      14:	11061000 	tstne	r6, r0
      18:	03011201 	movweq	r1, #4609	; 0x1201
      1c:	25081b08 	strcs	r1, [r8, #-2824]
      20:	00051308 	andeq	r1, r5, r8, lsl #6
      24:	11010000 	tstne	r1, r0
      28:	130e2501 	movwne	r2, #58625	; 0xe501
      2c:	1b0e030b 	blne	380c60 <__Stack_Size+0x380860>
      30:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
      34:	00061001 	andeq	r1, r6, r1
      38:	00240200 	eoreq	r0, r4, r0, lsl #4
      3c:	0b3e0b0b 	bleq	f82c70 <__Stack_Size+0xf82870>
      40:	00000e03 	andeq	r0, r0, r3, lsl #28
      44:	03001603 	movweq	r1, #1539	; 0x603
      48:	3b0b3a08 	blcc	2ce870 <__Stack_Size+0x2ce470>
      4c:	0013490b 	andseq	r4, r3, fp, lsl #18
      50:	00350400 	eorseq	r0, r5, r0, lsl #8
      54:	00001349 	andeq	r1, r0, r9, asr #6
      58:	0b010405 	bleq	41074 <__Stack_Size+0x40c74>
      5c:	3b0b3a0b 	blcc	2ce890 <__Stack_Size+0x2ce490>
      60:	0013010b 	andseq	r0, r3, fp, lsl #2
      64:	00280600 	eoreq	r0, r8, r0, lsl #12
      68:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
      6c:	28070000 	stmdacs	r7, {}
      70:	1c080300 	stcne	3, cr0, [r8], {0}
      74:	0800000d 	stmdaeq	r0, {r0, r2, r3}
      78:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      7c:	0b3b0b3a 	bleq	ec2d6c <__Stack_Size+0xec296c>
      80:	00001349 	andeq	r1, r0, r9, asr #6
      84:	0b002409 	bleq	90b0 <__Stack_Size+0x8cb0>
      88:	000b3e0b 	andeq	r3, fp, fp, lsl #28
      8c:	01130a00 	tsteq	r3, r0, lsl #20
      90:	0b3a0b0b 	bleq	e82cc4 <__Stack_Size+0xe828c4>
      94:	1301053b 	movwne	r0, #5435	; 0x153b
      98:	0d0b0000 	stceq	0, cr0, [fp]
      9c:	3a080300 	bcc	200ca4 <__Stack_Size+0x2008a4>
      a0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      a4:	000a3813 	andeq	r3, sl, r3, lsl r8
      a8:	000d0c00 	andeq	r0, sp, r0, lsl #24
      ac:	0b3a0e03 	bleq	e838c0 <__Stack_Size+0xe834c0>
      b0:	1349053b 	movtne	r0, #38203	; 0x953b
      b4:	00000a38 	andeq	r0, r0, r8, lsr sl
      b8:	0b01130d 	bleq	44cf4 <__Stack_Size+0x448f4>
      bc:	3b0b3a0b 	blcc	2ce8f0 <__Stack_Size+0x2ce4f0>
      c0:	0013010b 	andseq	r0, r3, fp, lsl #2
      c4:	000d0e00 	andeq	r0, sp, r0, lsl #28
      c8:	0b3a0e03 	bleq	e838dc <__Stack_Size+0xe834dc>
      cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      d0:	00000a38 	andeq	r0, r0, r8, lsr sl
      d4:	3f002e0f 	svccc	0x00002e0f
      d8:	3a0e030c 	bcc	380d10 <__Stack_Size+0x380910>
      dc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
      e0:	000b200c 	andeq	r2, fp, ip
      e4:	002e1000 	eoreq	r1, lr, r0
      e8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
      ec:	0b3b0b3a 	bleq	ec2ddc <__Stack_Size+0xec29dc>
      f0:	01110c27 	tsteq	r1, r7, lsr #24
      f4:	0a400112 	beq	1000544 <__Stack_Size+0x1000144>
      f8:	2e110000 	wxorcs	wr0, wr1, wr0
      fc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     100:	3b0b3a0e 	blcc	2ce940 <__Stack_Size+0x2ce540>
     104:	110c270b 	tstne	ip, fp, lsl #14
     108:	40011201 	andmi	r1, r1, r1, lsl #4
     10c:	00130106 	andseq	r0, r3, r6, lsl #2
     110:	00051200 	andeq	r1, r5, r0, lsl #4
     114:	0b3a0e03 	bleq	e83928 <__Stack_Size+0xe83528>
     118:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     11c:	00000602 	andeq	r0, r0, r2, lsl #12
     120:	3f002e13 	svccc	0x00002e13
     124:	3a0e030c 	bcc	380d5c <__Stack_Size+0x38095c>
     128:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     12c:	1201110c 	andne	r1, r1, #3	; 0x3
     130:	00064001 	andeq	r4, r6, r1
     134:	00341400 	eorseq	r1, r4, r0, lsl #8
     138:	0b3a0e03 	bleq	e8394c <__Stack_Size+0xe8354c>
     13c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     140:	00000a02 	andeq	r0, r0, r2, lsl #20
     144:	31002e15 	tstcc	r0, r5, lsl lr
     148:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     14c:	00064001 	andeq	r4, r6, r1
     150:	00341600 	eorseq	r1, r4, r0, lsl #12
     154:	0b3a0e03 	bleq	e83968 <__Stack_Size+0xe83568>
     158:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     15c:	2e170000 	wxorcs	wr0, wr7, wr0
     160:	030c3f01 	movweq	r3, #52993	; 0xcf01
     164:	3b0b3a0e 	blcc	2ce9a4 <__Stack_Size+0x2ce5a4>
     168:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     16c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     170:	01064001 	tsteq	r6, r1
     174:	18000013 	stmdane	r0, {r0, r1, r4}
     178:	1331001d 	teqne	r1, #29	; 0x1d
     17c:	01120111 	tsteq	r2, r1, lsl r1
     180:	0b590b58 	bleq	1642ee8 <__Stack_Size+0x1642ae8>
     184:	24190000 	ldrcs	r0, [r9]
     188:	3e0b0b00 	fmacdcc	d0, d11, d0
     18c:	0008030b 	andeq	r0, r8, fp, lsl #6
     190:	00341a00 	eorseq	r1, r4, r0, lsl #20
     194:	0b3a0e03 	bleq	e839a8 <__Stack_Size+0xe835a8>
     198:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     19c:	0a020c3f 	beq	832a0 <__Stack_Size+0x82ea0>
     1a0:	01000000 	tsteq	r0, r0
     1a4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     1a8:	0e030b13 	vmoveq.32	d3[0], r0
     1ac:	01110e1b 	tsteq	r1, fp, lsl lr
     1b0:	06100112 	undefined
     1b4:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
     1b8:	030c3f00 	movweq	r3, #52992	; 0xcf00
     1bc:	3b0b3a0e 	blcc	2ce9fc <__Stack_Size+0x2ce5fc>
     1c0:	110c270b 	tstne	ip, fp, lsl #14
     1c4:	40011201 	andmi	r1, r1, r1, lsl #4
     1c8:	0300000a 	movweq	r0, #10	; 0xa
     1cc:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     1d0:	0b3a0e03 	bleq	e839e4 <__Stack_Size+0xe835e4>
     1d4:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     1d8:	01120111 	tsteq	r2, r1, lsl r1
     1dc:	00000a40 	andeq	r0, r0, r0, asr #20
     1e0:	3f002e04 	svccc	0x00002e04
     1e4:	3a0e030c 	bcc	380e1c <__Stack_Size+0x380a1c>
     1e8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     1ec:	1201110c 	andne	r1, r1, #3	; 0x3
     1f0:	00064001 	andeq	r4, r6, r1
     1f4:	11010000 	tstne	r1, r0
     1f8:	130e2501 	movwne	r2, #58625	; 0xe501
     1fc:	1b0e030b 	blne	380e30 <__Stack_Size+0x380a30>
     200:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     204:	00061001 	andeq	r1, r6, r1
     208:	00240200 	eoreq	r0, r4, r0, lsl #4
     20c:	0b3e0b0b 	bleq	f82e40 <__Stack_Size+0xf82a40>
     210:	00000e03 	andeq	r0, r0, r3, lsl #28
     214:	03001603 	movweq	r1, #1539	; 0x603
     218:	3b0b3a08 	blcc	2cea40 <__Stack_Size+0x2ce640>
     21c:	0013490b 	andseq	r4, r3, fp, lsl #18
     220:	00350400 	eorseq	r0, r5, r0, lsl #8
     224:	00001349 	andeq	r1, r0, r9, asr #6
     228:	0b010405 	bleq	41244 <__Stack_Size+0x40e44>
     22c:	3b0b3a0b 	blcc	2cea60 <__Stack_Size+0x2ce660>
     230:	0013010b 	andseq	r0, r3, fp, lsl #2
     234:	00280600 	eoreq	r0, r8, r0, lsl #12
     238:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     23c:	28070000 	stmdacs	r7, {}
     240:	1c080300 	stcne	3, cr0, [r8], {0}
     244:	0800000d 	stmdaeq	r0, {r0, r2, r3}
     248:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     24c:	0b3b0b3a 	bleq	ec2f3c <__Stack_Size+0xec2b3c>
     250:	00001349 	andeq	r1, r0, r9, asr #6
     254:	0b002409 	bleq	9280 <__Stack_Size+0x8e80>
     258:	000b3e0b 	andeq	r3, fp, fp, lsl #28
     25c:	01130a00 	tsteq	r3, r0, lsl #20
     260:	0b3a0b0b 	bleq	e82e94 <__Stack_Size+0xe82a94>
     264:	1301053b 	movwne	r0, #5435	; 0x153b
     268:	0d0b0000 	stceq	0, cr0, [fp]
     26c:	3a080300 	bcc	200e74 <__Stack_Size+0x200a74>
     270:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     274:	000a3813 	andeq	r3, sl, r3, lsl r8
     278:	000d0c00 	andeq	r0, sp, r0, lsl #24
     27c:	0b3a0e03 	bleq	e83a90 <__Stack_Size+0xe83690>
     280:	1349053b 	movtne	r0, #38203	; 0x953b
     284:	00000a38 	andeq	r0, r0, r8, lsr sl
     288:	3f012e0d 	svccc	0x00012e0d
     28c:	3a0e030c 	bcc	380ec4 <__Stack_Size+0x380ac4>
     290:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     294:	2013490c 	andscs	r4, r3, ip, lsl #18
     298:	0013010b 	andseq	r0, r3, fp, lsl #2
     29c:	00340e00 	eorseq	r0, r4, r0, lsl #28
     2a0:	0b3a0e03 	bleq	e83ab4 <__Stack_Size+0xe836b4>
     2a4:	1349053b 	movtne	r0, #38203	; 0x953b
     2a8:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     2ac:	3a0e0301 	bcc	380eb8 <__Stack_Size+0x380ab8>
     2b0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     2b4:	010b200c 	tsteq	fp, ip
     2b8:	10000013 	andne	r0, r0, r3, lsl r0
     2bc:	08030034 	stmdaeq	r3, {r2, r4, r5}
     2c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     2c4:	00001349 	andeq	r1, r0, r9, asr #6
     2c8:	3f012e11 	svccc	0x00012e11
     2cc:	3a0e030c 	bcc	380f04 <__Stack_Size+0x380b04>
     2d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     2d4:	1201110c 	andne	r1, r1, #3	; 0x3
     2d8:	010a4001 	tsteq	sl, r1
     2dc:	12000013 	andne	r0, r0, #19	; 0x13
     2e0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     2e4:	0b3b0b3a 	bleq	ec2fd4 <__Stack_Size+0xec2bd4>
     2e8:	06021349 	streq	r1, [r2], -r9, asr #6
     2ec:	2e130000 	wxorcs	wr0, wr3, wr0
     2f0:	030c3f00 	movweq	r3, #52992	; 0xcf00
     2f4:	3b0b3a0e 	blcc	2ceb34 <__Stack_Size+0x2ce734>
     2f8:	110c270b 	tstne	ip, fp, lsl #14
     2fc:	40011201 	andmi	r1, r1, r1, lsl #4
     300:	1400000a 	strne	r0, [r0], #-10
     304:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     308:	0b3a0e03 	bleq	e83b1c <__Stack_Size+0xe8371c>
     30c:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     310:	01111349 	tsteq	r1, r9, asr #6
     314:	0a400112 	beq	1000764 <__Stack_Size+0x1000364>
     318:	2e150000 	wxorcs	wr0, wr5, wr0
     31c:	030c3f01 	movweq	r3, #52993	; 0xcf01
     320:	3b0b3a0e 	blcc	2ceb60 <__Stack_Size+0x2ce760>
     324:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     328:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     32c:	010a4001 	tsteq	sl, r1
     330:	16000013 	undefined
     334:	0c3f012e 	ldfeqs	f0, [pc], #-184
     338:	0b3a0e03 	bleq	e83b4c <__Stack_Size+0xe8374c>
     33c:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     340:	01120111 	tsteq	r2, r1, lsl r1
     344:	13010a40 	movwne	r0, #6720	; 0x1a40
     348:	05170000 	ldreq	r0, [r7]
     34c:	3a0e0300 	bcc	380f54 <__Stack_Size+0x380b54>
     350:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     354:	000a0213 	andeq	r0, sl, r3, lsl r2
     358:	00051800 	andeq	r1, r5, r0, lsl #16
     35c:	0b3a0e03 	bleq	e83b70 <__Stack_Size+0xe83770>
     360:	1349053b 	movtne	r0, #38203	; 0x953b
     364:	00000602 	andeq	r0, r0, r2, lsl #12
     368:	03003419 	movweq	r3, #1049	; 0x419
     36c:	3b0b3a0e 	blcc	2cebac <__Stack_Size+0x2ce7ac>
     370:	02134905 	andseq	r4, r3, #81920	; 0x14000
     374:	1a000006 	bne	394 <_Minimum_Stack_Size+0x294>
     378:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     37c:	01120111 	tsteq	r2, r1, lsl r1
     380:	13010a40 	movwne	r0, #6720	; 0x1a40
     384:	341b0000 	ldrcc	r0, [fp]
     388:	02133100 	andseq	r3, r3, #0	; 0x0
     38c:	1c000006 	stcne	0, cr0, [r0], {6}
     390:	0c3f012e 	ldfeqs	f0, [pc], #-184
     394:	0b3a0e03 	bleq	e83ba8 <__Stack_Size+0xe837a8>
     398:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     39c:	01111349 	tsteq	r1, r9, asr #6
     3a0:	06400112 	undefined
     3a4:	00001301 	andeq	r1, r0, r1, lsl #6
     3a8:	31011d1d 	tstcc	r1, sp, lsl sp
     3ac:	58065513 	stmdapl	r6, {r0, r1, r4, r8, sl, ip, lr}
     3b0:	0105590b 	tsteq	r5, fp, lsl #18
     3b4:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     3b8:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     3bc:	341f0000 	ldrcc	r0, [pc], #0	; 3c4 <_Minimum_Stack_Size+0x2c4>
     3c0:	00133100 	andseq	r3, r3, r0, lsl #2
     3c4:	011d2000 	tsteq	sp, r0
     3c8:	06551331 	undefined
     3cc:	05590b58 	ldrbeq	r0, [r9, #-2904]
     3d0:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     3d4:	030c3f01 	movweq	r3, #52993	; 0xcf01
     3d8:	3b0b3a0e 	blcc	2cec18 <__Stack_Size+0x2ce818>
     3dc:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     3e0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     3e4:	01064001 	tsteq	r6, r1
     3e8:	22000013 	andcs	r0, r0, #19	; 0x13
     3ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     3f0:	0b3b0b3a 	bleq	ec30e0 <__Stack_Size+0xec2ce0>
     3f4:	06021349 	streq	r1, [r2], -r9, asr #6
     3f8:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
     3fc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     400:	3b0b3a0e 	blcc	2cec40 <__Stack_Size+0x2ce840>
     404:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     408:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     40c:	00064001 	andeq	r4, r6, r1
     410:	11010000 	tstne	r1, r0
     414:	130e2501 	movwne	r2, #58625	; 0xe501
     418:	1b0e030b 	blne	38104c <__Stack_Size+0x380c4c>
     41c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     420:	00061001 	andeq	r1, r6, r1
     424:	00240200 	eoreq	r0, r4, r0, lsl #4
     428:	0b3e0b0b 	bleq	f8305c <__Stack_Size+0xf82c5c>
     42c:	00000e03 	andeq	r0, r0, r3, lsl #28
     430:	03001603 	movweq	r1, #1539	; 0x603
     434:	3b0b3a08 	blcc	2cec5c <__Stack_Size+0x2ce85c>
     438:	0013490b 	andseq	r4, r3, fp, lsl #18
     43c:	00350400 	eorseq	r0, r5, r0, lsl #8
     440:	00001349 	andeq	r1, r0, r9, asr #6
     444:	0b010405 	bleq	41460 <__Stack_Size+0x41060>
     448:	3b0b3a0b 	blcc	2cec7c <__Stack_Size+0x2ce87c>
     44c:	0013010b 	andseq	r0, r3, fp, lsl #2
     450:	00280600 	eoreq	r0, r8, r0, lsl #12
     454:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     458:	16070000 	strne	r0, [r7], -r0
     45c:	3a0e0300 	bcc	381064 <__Stack_Size+0x380c64>
     460:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     464:	08000013 	stmdaeq	r0, {r0, r1, r4}
     468:	0b0b0024 	bleq	2c0500 <__Stack_Size+0x2c0100>
     46c:	00000b3e 	andeq	r0, r0, lr, lsr fp
     470:	0b011309 	bleq	4509c <__Stack_Size+0x44c9c>
     474:	3b0b3a0b 	blcc	2ceca8 <__Stack_Size+0x2ce8a8>
     478:	00130105 	andseq	r0, r3, r5, lsl #2
     47c:	000d0a00 	andeq	r0, sp, r0, lsl #20
     480:	0b3a0803 	bleq	e82494 <__Stack_Size+0xe82094>
     484:	1349053b 	movtne	r0, #38203	; 0x953b
     488:	00000a38 	andeq	r0, r0, r8, lsr sl
     48c:	03000d0b 	movweq	r0, #3339	; 0xd0b
     490:	3b0b3a0e 	blcc	2cecd0 <__Stack_Size+0x2ce8d0>
     494:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     498:	0c00000a 	stceq	0, cr0, [r0], {10}
     49c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     4a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     4a4:	00001349 	andeq	r1, r0, r9, asr #6
     4a8:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
     4ac:	00130113 	andseq	r0, r3, r3, lsl r1
     4b0:	00210e00 	eoreq	r0, r1, r0, lsl #28
     4b4:	0b2f1349 	bleq	bc51e0 <__Stack_Size+0xbc4de0>
     4b8:	130f0000 	movwne	r0, #61440	; 0xf000
     4bc:	3a0b0b01 	bcc	2c30c8 <__Stack_Size+0x2c2cc8>
     4c0:	010b3b0b 	tsteq	fp, fp, lsl #22
     4c4:	10000013 	andne	r0, r0, r3, lsl r0
     4c8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     4cc:	0b3b0b3a 	bleq	ec31bc <__Stack_Size+0xec2dbc>
     4d0:	0a381349 	beq	e051fc <__Stack_Size+0xe04dfc>
     4d4:	2e110000 	wxorcs	wr0, wr1, wr0
     4d8:	030c3f01 	movweq	r3, #52993	; 0xcf01
     4dc:	3b0b3a0e 	blcc	2ced1c <__Stack_Size+0x2ce91c>
     4e0:	110c270b 	tstne	ip, fp, lsl #14
     4e4:	40011201 	andmi	r1, r1, r1, lsl #4
     4e8:	00130106 	andseq	r0, r3, r6, lsl #2
     4ec:	00051200 	andeq	r1, r5, r0, lsl #4
     4f0:	0b3a0e03 	bleq	e83d04 <__Stack_Size+0xe83904>
     4f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4f8:	00000a02 	andeq	r0, r0, r2, lsl #20
     4fc:	03000513 	movweq	r0, #1299	; 0x513
     500:	3b0b3a0e 	blcc	2ced40 <__Stack_Size+0x2ce940>
     504:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     508:	14000006 	strne	r0, [r0], #-6
     50c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     510:	0b3b0b3a 	bleq	ec3200 <__Stack_Size+0xec2e00>
     514:	0a021349 	beq	85240 <__Stack_Size+0x84e40>
     518:	34150000 	ldrcc	r0, [r5]
     51c:	3a080300 	bcc	201124 <__Stack_Size+0x200d24>
     520:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     524:	00060213 	andeq	r0, r6, r3, lsl r2
     528:	00341600 	eorseq	r1, r4, r0, lsl #12
     52c:	0b3a0e03 	bleq	e83d40 <__Stack_Size+0xe83940>
     530:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     534:	0f170000 	svceq	0x00170000
     538:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     53c:	18000013 	stmdane	r0, {r0, r1, r4}
     540:	0c3f012e 	ldfeqs	f0, [pc], #-184
     544:	0b3a0e03 	bleq	e83d58 <__Stack_Size+0xe83958>
     548:	0c270b3b 	stceq	11, cr0, [r7], #-236
     54c:	01120111 	tsteq	r2, r1, lsl r1
     550:	13010a40 	movwne	r0, #6720	; 0x1a40
     554:	2e190000 	wxorcs	wr0, wr9, wr0
     558:	030c3f01 	movweq	r3, #52993	; 0xcf01
     55c:	3b0b3a0e 	blcc	2ced9c <__Stack_Size+0x2ce99c>
     560:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     564:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     568:	010a4001 	tsteq	sl, r1
     56c:	1a000013 	bne	5c0 <__Stack_Size+0x1c0>
     570:	0c3f012e 	ldfeqs	f0, [pc], #-184
     574:	0b3a0e03 	bleq	e83d88 <__Stack_Size+0xe83988>
     578:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     57c:	01111349 	tsteq	r1, r9, asr #6
     580:	0a400112 	beq	10009d0 <__Stack_Size+0x10005d0>
     584:	00001301 	andeq	r1, r0, r1, lsl #6
     588:	0300051b 	movweq	r0, #1307	; 0x51b
     58c:	3b0b3a0e 	blcc	2cedcc <__Stack_Size+0x2ce9cc>
     590:	02134905 	andseq	r4, r3, #81920	; 0x14000
     594:	1c000006 	stcne	0, cr0, [r0], {6}
     598:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     59c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     5a0:	0a021349 	beq	852cc <__Stack_Size+0x84ecc>
     5a4:	341d0000 	ldrcc	r0, [sp]
     5a8:	3a0e0300 	bcc	3811b0 <__Stack_Size+0x380db0>
     5ac:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5b0:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     5b4:	0c3f012e 	ldfeqs	f0, [pc], #-184
     5b8:	0b3a0e03 	bleq	e83dcc <__Stack_Size+0xe839cc>
     5bc:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     5c0:	01120111 	tsteq	r2, r1, lsl r1
     5c4:	13010a40 	movwne	r0, #6720	; 0x1a40
     5c8:	341f0000 	ldrcc	r0, [pc], #0	; 5d0 <__Stack_Size+0x1d0>
     5cc:	3a080300 	bcc	2011d4 <__Stack_Size+0x200dd4>
     5d0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5d4:	000a0213 	andeq	r0, sl, r3, lsl r2
     5d8:	00342000 	eorseq	r2, r4, r0
     5dc:	0b3a0e03 	bleq	e83df0 <__Stack_Size+0xe839f0>
     5e0:	1349053b 	movtne	r0, #38203	; 0x953b
     5e4:	00000602 	andeq	r0, r0, r2, lsl #12
     5e8:	3f012e21 	svccc	0x00012e21
     5ec:	3a0e030c 	bcc	381224 <__Stack_Size+0x380e24>
     5f0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     5f4:	1201110c 	andne	r1, r1, #3	; 0x3
     5f8:	01064001 	tsteq	r6, r1
     5fc:	22000013 	andcs	r0, r0, #19	; 0x13
     600:	08030034 	stmdaeq	r3, {r2, r4, r5}
     604:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     608:	00001349 	andeq	r1, r0, r9, asr #6
     60c:	3f002e23 	svccc	0x00002e23
     610:	3a0e030c 	bcc	381248 <__Stack_Size+0x380e48>
     614:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     618:	1201110c 	andne	r1, r1, #3	; 0x3
     61c:	00064001 	andeq	r4, r6, r1
     620:	012e2400 	teqeq	lr, r0, lsl #8
     624:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     628:	0b3b0b3a 	bleq	ec3318 <__Stack_Size+0xec2f18>
     62c:	01110c27 	tsteq	r1, r7, lsr #24
     630:	06400112 	undefined
     634:	01000000 	tsteq	r0, r0
     638:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     63c:	0e030b13 	vmoveq.32	d3[0], r0
     640:	01110e1b 	tsteq	r1, fp, lsl lr
     644:	06100112 	undefined
     648:	24020000 	strcs	r0, [r2]
     64c:	3e0b0b00 	fmacdcc	d0, d11, d0
     650:	000e030b 	andeq	r0, lr, fp, lsl #6
     654:	00160300 	andseq	r0, r6, r0, lsl #6
     658:	0b3a0803 	bleq	e8266c <__Stack_Size+0xe8226c>
     65c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     660:	35040000 	strcc	r0, [r4]
     664:	00134900 	andseq	r4, r3, r0, lsl #18
     668:	00260500 	eoreq	r0, r6, r0, lsl #10
     66c:	00001349 	andeq	r1, r0, r9, asr #6
     670:	0b010406 	bleq	41690 <__Stack_Size+0x41290>
     674:	3b0b3a0b 	blcc	2ceea8 <__Stack_Size+0x2ceaa8>
     678:	0013010b 	andseq	r0, r3, fp, lsl #2
     67c:	00280700 	eoreq	r0, r8, r0, lsl #14
     680:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     684:	28080000 	stmdacs	r8, {}
     688:	1c080300 	stcne	3, cr0, [r8], {0}
     68c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
     690:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     694:	0b3b0b3a 	bleq	ec3384 <__Stack_Size+0xec2f84>
     698:	00001349 	andeq	r1, r0, r9, asr #6
     69c:	0b00240a 	bleq	96cc <__Stack_Size+0x92cc>
     6a0:	000b3e0b 	andeq	r3, fp, fp, lsl #28
     6a4:	01130b00 	tsteq	r3, r0, lsl #22
     6a8:	0b3a050b 	bleq	e81adc <__Stack_Size+0xe816dc>
     6ac:	1301053b 	movwne	r0, #5435	; 0x153b
     6b0:	0d0c0000 	stceq	0, cr0, [ip]
     6b4:	3a0e0300 	bcc	3812bc <__Stack_Size+0x380ebc>
     6b8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     6bc:	000a3813 	andeq	r3, sl, r3, lsl r8
     6c0:	000d0d00 	andeq	r0, sp, r0, lsl #26
     6c4:	0b3a0803 	bleq	e826d8 <__Stack_Size+0xe822d8>
     6c8:	1349053b 	movtne	r0, #38203	; 0x953b
     6cc:	00000a38 	andeq	r0, r0, r8, lsr sl
     6d0:	4901010e 	stmdbmi	r1, {r1, r2, r3, r8}
     6d4:	00130113 	andseq	r0, r3, r3, lsl r1
     6d8:	00210f00 	eoreq	r0, r1, r0, lsl #30
     6dc:	0b2f1349 	bleq	bc5408 <__Stack_Size+0xbc5008>
     6e0:	13100000 	tstne	r0, #0	; 0x0
     6e4:	3a0b0b01 	bcc	2c32f0 <__Stack_Size+0x2c2ef0>
     6e8:	01053b0b 	tsteq	r5, fp, lsl #22
     6ec:	11000013 	tstne	r0, r3, lsl r0
     6f0:	0b0b0113 	bleq	2c0b44 <__Stack_Size+0x2c0744>
     6f4:	0b3b0b3a 	bleq	ec33e4 <__Stack_Size+0xec2fe4>
     6f8:	00001301 	andeq	r1, r0, r1, lsl #6
     6fc:	03000d12 	movweq	r0, #3346	; 0xd12
     700:	3b0b3a0e 	blcc	2cef40 <__Stack_Size+0x2ceb40>
     704:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     708:	1300000a 	movwne	r0, #10	; 0xa
     70c:	0c3f012e 	ldfeqs	f0, [pc], #-184
     710:	0b3a0e03 	bleq	e83f24 <__Stack_Size+0xe83b24>
     714:	0c270b3b 	stceq	11, cr0, [r7], #-236
     718:	01120111 	tsteq	r2, r1, lsl r1
     71c:	13010a40 	movwne	r0, #6720	; 0x1a40
     720:	34140000 	ldrcc	r0, [r4]
     724:	3a0e0300 	bcc	38132c <__Stack_Size+0x380f2c>
     728:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     72c:	000a0213 	andeq	r0, sl, r3, lsl r2
     730:	00341500 	eorseq	r1, r4, r0, lsl #10
     734:	0b3a0e03 	bleq	e83f48 <__Stack_Size+0xe83b48>
     738:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     73c:	05160000 	ldreq	r0, [r6]
     740:	3a0e0300 	bcc	381348 <__Stack_Size+0x380f48>
     744:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     748:	00060213 	andeq	r0, r6, r3, lsl r2
     74c:	012e1700 	teqeq	lr, r0, lsl #14
     750:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     754:	0b3b0b3a 	bleq	ec3444 <__Stack_Size+0xec3044>
     758:	01110c27 	tsteq	r1, r7, lsr #24
     75c:	06400112 	undefined
     760:	00001301 	andeq	r1, r0, r1, lsl #6
     764:	03003418 	movweq	r3, #1048	; 0x418
     768:	3b0b3a0e 	blcc	2cefa8 <__Stack_Size+0x2ceba8>
     76c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     770:	19000006 	stmdbne	r0, {r1, r2}
     774:	0b0b000f 	bleq	2c07b8 <__Stack_Size+0x2c03b8>
     778:	00001349 	andeq	r1, r0, r9, asr #6
     77c:	0300051a 	movweq	r0, #1306	; 0x51a
     780:	3b0b3a0e 	blcc	2cefc0 <__Stack_Size+0x2cebc0>
     784:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     788:	1b00000a 	blne	7b8 <__Stack_Size+0x3b8>
     78c:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     790:	0b3a0e03 	bleq	e83fa4 <__Stack_Size+0xe83ba4>
     794:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     798:	01111349 	tsteq	r1, r9, asr #6
     79c:	0a400112 	beq	1000bec <__Stack_Size+0x10007ec>
     7a0:	2e1c0000 	wxorcs	wr0, wr12, wr0
     7a4:	030c3f01 	movweq	r3, #52993	; 0xcf01
     7a8:	3b0b3a0e 	blcc	2cefe8 <__Stack_Size+0x2cebe8>
     7ac:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     7b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     7b4:	010a4001 	tsteq	sl, r1
     7b8:	1d000013 	stcne	0, cr0, [r0, #-76]
     7bc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     7c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     7c4:	06021349 	streq	r1, [r2], -r9, asr #6
     7c8:	341e0000 	ldrcc	r0, [lr]
     7cc:	3a0e0300 	bcc	3813d4 <__Stack_Size+0x380fd4>
     7d0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7d4:	1f000013 	svcne	0x00000013
     7d8:	08030034 	stmdaeq	r3, {r2, r4, r5}
     7dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     7e0:	0a021349 	beq	8550c <__Stack_Size+0x8510c>
     7e4:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     7e8:	030c3f01 	movweq	r3, #52993	; 0xcf01
     7ec:	3b0b3a0e 	blcc	2cf02c <__Stack_Size+0x2cec2c>
     7f0:	110c2705 	tstne	ip, r5, lsl #14
     7f4:	40011201 	andmi	r1, r1, r1, lsl #4
     7f8:	0013010a 	andseq	r0, r3, sl, lsl #2
     7fc:	00052100 	andeq	r2, r5, r0, lsl #2
     800:	0b3a0e03 	bleq	e84014 <__Stack_Size+0xe83c14>
     804:	1349053b 	movtne	r0, #38203	; 0x953b
     808:	00000a02 	andeq	r0, r0, r2, lsl #20
     80c:	3f002e22 	svccc	0x00002e22
     810:	3a0e030c 	bcc	381448 <__Stack_Size+0x381048>
     814:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     818:	1201110c 	andne	r1, r1, #3	; 0x3
     81c:	000a4001 	andeq	r4, sl, r1
     820:	00342300 	eorseq	r2, r4, r0, lsl #6
     824:	0b3a0e03 	bleq	e84038 <__Stack_Size+0xe83c38>
     828:	1349053b 	movtne	r0, #38203	; 0x953b
     82c:	00000a02 	andeq	r0, r0, r2, lsl #20
     830:	3f012e24 	svccc	0x00012e24
     834:	3a0e030c 	bcc	38146c <__Stack_Size+0x38106c>
     838:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     83c:	1201110c 	andne	r1, r1, #3	; 0x3
     840:	01064001 	tsteq	r6, r1
     844:	25000013 	strcs	r0, [r0, #-19]
     848:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     84c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     850:	06021349 	streq	r1, [r2], -r9, asr #6
     854:	34260000 	strtcc	r0, [r6]
     858:	3a080300 	bcc	201460 <__Stack_Size+0x201060>
     85c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     860:	27000013 	smladcs	r0, r3, r0, r0
     864:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     868:	0b3a0e03 	bleq	e8407c <__Stack_Size+0xe83c7c>
     86c:	0c270b3b 	stceq	11, cr0, [r7], #-236
     870:	01111349 	tsteq	r1, r9, asr #6
     874:	06400112 	undefined
     878:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
     87c:	030c3f00 	movweq	r3, #52992	; 0xcf00
     880:	3b0b3a0e 	blcc	2cf0c0 <__Stack_Size+0x2cecc0>
     884:	110c270b 	tstne	ip, fp, lsl #14
     888:	40011201 	andmi	r1, r1, r1, lsl #4
     88c:	00000006 	andeq	r0, r0, r6
     890:	25011101 	strcs	r1, [r1, #-257]
     894:	030b130e 	movweq	r1, #45838	; 0xb30e
     898:	110e1b0e 	tstne	lr, lr, lsl #22
     89c:	10011201 	andne	r1, r1, r1, lsl #4
     8a0:	02000006 	andeq	r0, r0, #6	; 0x6
     8a4:	0b0b0024 	bleq	2c093c <__Stack_Size+0x2c053c>
     8a8:	0e030b3e 	vmoveq.16	d3[0], r0
     8ac:	16030000 	strne	r0, [r3], -r0
     8b0:	3a080300 	bcc	2014b8 <__Stack_Size+0x2010b8>
     8b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8b8:	04000013 	streq	r0, [r0], #-19
     8bc:	13490035 	movtne	r0, #36917	; 0x9035
     8c0:	04050000 	streq	r0, [r5]
     8c4:	3a0b0b01 	bcc	2c34d0 <__Stack_Size+0x2c30d0>
     8c8:	010b3b0b 	tsteq	fp, fp, lsl #22
     8cc:	06000013 	undefined
     8d0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     8d4:	00000d1c 	andeq	r0, r0, ip, lsl sp
     8d8:	03002807 	movweq	r2, #2055	; 0x807
     8dc:	000d1c08 	andeq	r1, sp, r8, lsl #24
     8e0:	00160800 	andseq	r0, r6, r0, lsl #16
     8e4:	0b3a0e03 	bleq	e840f8 <__Stack_Size+0xe83cf8>
     8e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     8ec:	24090000 	strcs	r0, [r9]
     8f0:	3e0b0b00 	fmacdcc	d0, d11, d0
     8f4:	0a00000b 	beq	928 <__Stack_Size+0x528>
     8f8:	0b0b0113 	bleq	2c0d4c <__Stack_Size+0x2c094c>
     8fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     900:	00001301 	andeq	r1, r0, r1, lsl #6
     904:	03000d0b 	movweq	r0, #3339	; 0xd0b
     908:	3b0b3a08 	blcc	2cf130 <__Stack_Size+0x2ced30>
     90c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     910:	0c00000a 	stceq	0, cr0, [r0], {10}
     914:	0c3f012e 	ldfeqs	f0, [pc], #-184
     918:	0b3a0e03 	bleq	e8412c <__Stack_Size+0xe83d2c>
     91c:	0c270b3b 	stceq	11, cr0, [r7], #-236
     920:	01120111 	tsteq	r2, r1, lsl r1
     924:	13010a40 	movwne	r0, #6720	; 0x1a40
     928:	050d0000 	streq	r0, [sp]
     92c:	3a0e0300 	bcc	381534 <__Stack_Size+0x381134>
     930:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     934:	000a0213 	andeq	r0, sl, r3, lsl r2
     938:	00050e00 	andeq	r0, r5, r0, lsl #28
     93c:	0b3a0e03 	bleq	e84150 <__Stack_Size+0xe83d50>
     940:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     944:	00000602 	andeq	r0, r0, r2, lsl #12
     948:	0300340f 	movweq	r3, #1039	; 0x40f
     94c:	3b0b3a0e 	blcc	2cf18c <__Stack_Size+0x2ced8c>
     950:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     954:	10000006 	andne	r0, r0, r6
     958:	0c3f012e 	ldfeqs	f0, [pc], #-184
     95c:	0b3a0e03 	bleq	e84170 <__Stack_Size+0xe83d70>
     960:	0c270b3b 	stceq	11, cr0, [r7], #-236
     964:	01111349 	tsteq	r1, r9, asr #6
     968:	0a400112 	beq	1000db8 <__Stack_Size+0x10009b8>
     96c:	00001301 	andeq	r1, r0, r1, lsl #6
     970:	03003411 	movweq	r3, #1041	; 0x411
     974:	3b0b3a0e 	blcc	2cf1b4 <__Stack_Size+0x2cedb4>
     978:	0013490b 	andseq	r4, r3, fp, lsl #18
     97c:	012e1200 	teqeq	lr, r0, lsl #4
     980:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     984:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     988:	01110c27 	tsteq	r1, r7, lsr #24
     98c:	0a400112 	beq	1000ddc <__Stack_Size+0x10009dc>
     990:	00001301 	andeq	r1, r0, r1, lsl #6
     994:	03000513 	movweq	r0, #1299	; 0x513
     998:	3b0b3a0e 	blcc	2cf1d8 <__Stack_Size+0x2cedd8>
     99c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     9a0:	1400000a 	strne	r0, [r0], #-10
     9a4:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     9a8:	0b3a0e03 	bleq	e841bc <__Stack_Size+0xe83dbc>
     9ac:	0c270b3b 	stceq	11, cr0, [r7], #-236
     9b0:	01120111 	tsteq	r2, r1, lsl r1
     9b4:	00000640 	andeq	r0, r0, r0, asr #12
     9b8:	3f012e15 	svccc	0x00012e15
     9bc:	3a0e030c 	bcc	3815f4 <__Stack_Size+0x3811f4>
     9c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     9c4:	1201110c 	andne	r1, r1, #3	; 0x3
     9c8:	01064001 	tsteq	r6, r1
     9cc:	00000013 	andeq	r0, r0, r3, lsl r0
     9d0:	25011101 	strcs	r1, [r1, #-257]
     9d4:	030b130e 	movweq	r1, #45838	; 0xb30e
     9d8:	110e1b0e 	tstne	lr, lr, lsl #22
     9dc:	10011201 	andne	r1, r1, r1, lsl #4
     9e0:	02000006 	andeq	r0, r0, #6	; 0x6
     9e4:	0b0b0024 	bleq	2c0a7c <__Stack_Size+0x2c067c>
     9e8:	0e030b3e 	vmoveq.16	d3[0], r0
     9ec:	16030000 	strne	r0, [r3], -r0
     9f0:	3a080300 	bcc	2015f8 <__Stack_Size+0x2011f8>
     9f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9f8:	04000013 	streq	r0, [r0], #-19
     9fc:	13490035 	movtne	r0, #36917	; 0x9035
     a00:	04050000 	streq	r0, [r5]
     a04:	3a0b0b01 	bcc	2c3610 <__Stack_Size+0x2c3210>
     a08:	010b3b0b 	tsteq	fp, fp, lsl #22
     a0c:	06000013 	undefined
     a10:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     a14:	00000d1c 	andeq	r0, r0, ip, lsl sp
     a18:	03002807 	movweq	r2, #2055	; 0x807
     a1c:	000d1c08 	andeq	r1, sp, r8, lsl #24
     a20:	00160800 	andseq	r0, r6, r0, lsl #16
     a24:	0b3a0e03 	bleq	e84238 <__Stack_Size+0xe83e38>
     a28:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     a2c:	24090000 	strcs	r0, [r9]
     a30:	3e0b0b00 	fmacdcc	d0, d11, d0
     a34:	0a00000b 	beq	a68 <__Stack_Size+0x668>
     a38:	0b0b0113 	bleq	2c0e8c <__Stack_Size+0x2c0a8c>
     a3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     a40:	00001301 	andeq	r1, r0, r1, lsl #6
     a44:	03000d0b 	movweq	r0, #3339	; 0xd0b
     a48:	3b0b3a08 	blcc	2cf270 <__Stack_Size+0x2cee70>
     a4c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     a50:	0c00000a 	stceq	0, cr0, [r0], {10}
     a54:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a58:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     a5c:	0a381349 	beq	e05788 <__Stack_Size+0xe05388>
     a60:	130d0000 	movwne	r0, #53248	; 0xd000
     a64:	3a0b0b01 	bcc	2c3670 <__Stack_Size+0x2c3270>
     a68:	010b3b0b 	tsteq	fp, fp, lsl #22
     a6c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     a70:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a74:	0b3b0b3a 	bleq	ec3764 <__Stack_Size+0xec3364>
     a78:	0a381349 	beq	e057a4 <__Stack_Size+0xe053a4>
     a7c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     a80:	030c3f01 	movweq	r3, #52993	; 0xcf01
     a84:	3b0b3a0e 	blcc	2cf2c4 <__Stack_Size+0x2ceec4>
     a88:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     a8c:	010b2013 	tsteq	fp, r3, lsl r0
     a90:	10000013 	andne	r0, r0, r3, lsl r0
     a94:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     a98:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     a9c:	00001349 	andeq	r1, r0, r9, asr #6
     aa0:	03003411 	movweq	r3, #1041	; 0x411
     aa4:	3b0b3a08 	blcc	2cf2cc <__Stack_Size+0x2ceecc>
     aa8:	00134905 	andseq	r4, r3, r5, lsl #18
     aac:	00341200 	eorseq	r1, r4, r0, lsl #4
     ab0:	0b3a0e03 	bleq	e842c4 <__Stack_Size+0xe83ec4>
     ab4:	1349053b 	movtne	r0, #38203	; 0x953b
     ab8:	2e130000 	wxorcs	wr0, wr3, wr0
     abc:	030c3f00 	movweq	r3, #52992	; 0xcf00
     ac0:	3b0b3a0e 	blcc	2cf300 <__Stack_Size+0x2cef00>
     ac4:	110c270b 	tstne	ip, fp, lsl #14
     ac8:	40011201 	andmi	r1, r1, r1, lsl #4
     acc:	1400000a 	strne	r0, [r0], #-10
     ad0:	0c3f012e 	ldfeqs	f0, [pc], #-184
     ad4:	0b3a0e03 	bleq	e842e8 <__Stack_Size+0xe83ee8>
     ad8:	0c270b3b 	stceq	11, cr0, [r7], #-236
     adc:	01120111 	tsteq	r2, r1, lsl r1
     ae0:	13010a40 	movwne	r0, #6720	; 0x1a40
     ae4:	05150000 	ldreq	r0, [r5]
     ae8:	3a0e0300 	bcc	3816f0 <__Stack_Size+0x3812f0>
     aec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     af0:	000a0213 	andeq	r0, sl, r3, lsl r2
     af4:	012e1600 	teqeq	lr, r0, lsl #12
     af8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     afc:	0b3b0b3a 	bleq	ec37ec <__Stack_Size+0xec33ec>
     b00:	13490c27 	movtne	r0, #39975	; 0x9c27
     b04:	01120111 	tsteq	r2, r1, lsl r1
     b08:	13010640 	movwne	r0, #5696	; 0x1640
     b0c:	34170000 	ldrcc	r0, [r7]
     b10:	3a0e0300 	bcc	381718 <__Stack_Size+0x381318>
     b14:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b18:	00060213 	andeq	r0, r6, r3, lsl r2
     b1c:	00341800 	eorseq	r1, r4, r0, lsl #16
     b20:	0b3a0e03 	bleq	e84334 <__Stack_Size+0xe83f34>
     b24:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     b28:	1d190000 	ldcne	0, cr0, [r9]
     b2c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     b30:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     b34:	010b590b 	tsteq	fp, fp, lsl #18
     b38:	1a000013 	bne	b8c <__Stack_Size+0x78c>
     b3c:	13310005 	teqne	r1, #5	; 0x5
     b40:	0b1b0000 	bleq	6c0b48 <__Stack_Size+0x6c0748>
     b44:	00065501 	andeq	r5, r6, r1, lsl #10
     b48:	00341c00 	eorseq	r1, r4, r0, lsl #24
     b4c:	00001331 	andeq	r1, r0, r1, lsr r3
     b50:	3100341d 	tstcc	r0, sp, lsl r4
     b54:	000a0213 	andeq	r0, sl, r3, lsl r2
     b58:	011d1e00 	tsteq	sp, r0, lsl #28
     b5c:	01111331 	tsteq	r1, r1, lsr r3
     b60:	0b580112 	bleq	1600fb0 <__Stack_Size+0x1600bb0>
     b64:	00000b59 	andeq	r0, r0, r9, asr fp
     b68:	11010b1f 	tstne	r1, pc, lsl fp
     b6c:	00011201 	andeq	r1, r1, r1, lsl #4
     b70:	00342000 	eorseq	r2, r4, r0
     b74:	06021331 	undefined
     b78:	34210000 	strtcc	r0, [r1]
     b7c:	3a0e0300 	bcc	381784 <__Stack_Size+0x381384>
     b80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b84:	000a0213 	andeq	r0, sl, r3, lsl r2
     b88:	012e2200 	teqeq	lr, r0, lsl #4
     b8c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     b90:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     b94:	01110c27 	tsteq	r1, r7, lsr #24
     b98:	0a400112 	beq	1000fe8 <__Stack_Size+0x1000be8>
     b9c:	00001301 	andeq	r1, r0, r1, lsl #6
     ba0:	03000523 	movweq	r0, #1315	; 0x523
     ba4:	3b0b3a0e 	blcc	2cf3e4 <__Stack_Size+0x2cefe4>
     ba8:	02134905 	andseq	r4, r3, #81920	; 0x14000
     bac:	2400000a 	strcs	r0, [r0], #-10
     bb0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     bb4:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     bb8:	06021349 	streq	r1, [r2], -r9, asr #6
     bbc:	34250000 	strtcc	r0, [r5]
     bc0:	3a0e0300 	bcc	3817c8 <__Stack_Size+0x3813c8>
     bc4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     bc8:	00060213 	andeq	r0, r6, r3, lsl r2
     bcc:	002e2600 	eoreq	r2, lr, r0, lsl #12
     bd0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     bd4:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     bd8:	13490c27 	movtne	r0, #39975	; 0x9c27
     bdc:	01120111 	tsteq	r2, r1, lsl r1
     be0:	00000a40 	andeq	r0, r0, r0, asr #20
     be4:	03003427 	movweq	r3, #1063	; 0x427
     be8:	3b0b3a0e 	blcc	2cf428 <__Stack_Size+0x2cf028>
     bec:	02134905 	andseq	r4, r3, #81920	; 0x14000
     bf0:	2800000a 	stmdacs	r0, {r1, r3}
     bf4:	08030034 	stmdaeq	r3, {r2, r4, r5}
     bf8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
     bfc:	06021349 	streq	r1, [r2], -r9, asr #6
     c00:	0f290000 	svceq	0x00290000
     c04:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     c08:	2a000013 	bcs	c5c <__Stack_Size+0x85c>
     c0c:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     c10:	01120111 	tsteq	r2, r1, lsl r1
     c14:	13010a40 	movwne	r0, #6720	; 0x1a40
     c18:	052b0000 	streq	r0, [fp]!
     c1c:	02133100 	andseq	r3, r3, #0	; 0x0
     c20:	2c000006 	stccs	0, cr0, [r0], {6}
     c24:	0c3f002e 	ldceq	0, cr0, [pc], #-184
     c28:	0b3a0e03 	bleq	e8443c <__Stack_Size+0xe8403c>
     c2c:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236
     c30:	01120111 	tsteq	r2, r1, lsl r1
     c34:	00000a40 	andeq	r0, r0, r0, asr #20
     c38:	3f012e2d 	svccc	0x00012e2d
     c3c:	3a0e030c 	bcc	381874 <__Stack_Size+0x381474>
     c40:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     c44:	1113490c 	tstne	r3, ip, lsl #18
     c48:	40011201 	andmi	r1, r1, r1, lsl #4
     c4c:	0013010a 	andseq	r0, r3, sl, lsl #2
     c50:	01012e00 	tsteq	r1, r0, lsl #28
     c54:	13011349 	movwne	r1, #4937	; 0x1349
     c58:	212f0000 	teqcs	pc, r0
     c5c:	2f134900 	svccs	0x00134900
     c60:	3000000b 	andcc	r0, r0, fp
     c64:	13490026 	movtne	r0, #36902	; 0x9026
     c68:	01000000 	tsteq	r0, r0
     c6c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     c70:	0e030b13 	vmoveq.32	d3[0], r0
     c74:	01110e1b 	tsteq	r1, fp, lsl lr
     c78:	06100112 	undefined
     c7c:	24020000 	strcs	r0, [r2]
     c80:	3e0b0b00 	fmacdcc	d0, d11, d0
     c84:	000e030b 	andeq	r0, lr, fp, lsl #6
     c88:	00160300 	andseq	r0, r6, r0, lsl #6
     c8c:	0b3a0803 	bleq	e82ca0 <__Stack_Size+0xe828a0>
     c90:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c94:	35040000 	strcc	r0, [r4]
     c98:	00134900 	andseq	r4, r3, r0, lsl #18
     c9c:	00260500 	eoreq	r0, r6, r0, lsl #10
     ca0:	00001349 	andeq	r1, r0, r9, asr #6
     ca4:	0b010406 	bleq	41cc4 <__Stack_Size+0x418c4>
     ca8:	3b0b3a0b 	blcc	2cf4dc <__Stack_Size+0x2cf0dc>
     cac:	0013010b 	andseq	r0, r3, fp, lsl #2
     cb0:	00280700 	eoreq	r0, r8, r0, lsl #14
     cb4:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     cb8:	28080000 	stmdacs	r8, {}
     cbc:	1c080300 	stcne	3, cr0, [r8], {0}
     cc0:	0900000d 	stmdbeq	r0, {r0, r2, r3}
     cc4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     cc8:	0b3b0b3a 	bleq	ec39b8 <__Stack_Size+0xec35b8>
     ccc:	00001349 	andeq	r1, r0, r9, asr #6
     cd0:	0b00240a 	bleq	9d00 <__Stack_Size+0x9900>
     cd4:	000b3e0b 	andeq	r3, fp, fp, lsl #28
     cd8:	01130b00 	tsteq	r3, r0, lsl #22
     cdc:	0b3a0b0b 	bleq	e83910 <__Stack_Size+0xe83510>
     ce0:	1301053b 	movwne	r0, #5435	; 0x153b
     ce4:	0d0c0000 	stceq	0, cr0, [ip]
     ce8:	3a0e0300 	bcc	3818f0 <__Stack_Size+0x3814f0>
     cec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     cf0:	000a3813 	andeq	r3, sl, r3, lsl r8
     cf4:	000d0d00 	andeq	r0, sp, r0, lsl #26
     cf8:	0b3a0803 	bleq	e82d0c <__Stack_Size+0xe8290c>
     cfc:	1349053b 	movtne	r0, #38203	; 0x953b
     d00:	00000a38 	andeq	r0, r0, r8, lsr sl
     d04:	3f012e0e 	svccc	0x00012e0e
     d08:	3a0e030c 	bcc	381940 <__Stack_Size+0x381540>
     d0c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     d10:	1201110c 	andne	r1, r1, #3	; 0x3
     d14:	010a4001 	tsteq	sl, r1
     d18:	0f000013 	svceq	0x00000013
     d1c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     d20:	0b3b0b3a 	bleq	ec3a10 <__Stack_Size+0xec3610>
     d24:	0a021349 	beq	85a50 <__Stack_Size+0x85650>
     d28:	2e100000 	wxorcs	wr0, wr0, wr0
     d2c:	030c3f00 	movweq	r3, #52992	; 0xcf00
     d30:	3b0b3a0e 	blcc	2cf570 <__Stack_Size+0x2cf170>
     d34:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     d38:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d3c:	000a4001 	andeq	r4, sl, r1
     d40:	012e1100 	teqeq	lr, r0, lsl #2
     d44:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     d48:	0b3b0b3a 	bleq	ec3a38 <__Stack_Size+0xec3638>
     d4c:	13490c27 	movtne	r0, #39975	; 0x9c27
     d50:	01120111 	tsteq	r2, r1, lsl r1
     d54:	00000a40 	andeq	r0, r0, r0, asr #20
     d58:	03000512 	movweq	r0, #1298	; 0x512
     d5c:	3b0b3a0e 	blcc	2cf59c <__Stack_Size+0x2cf19c>
     d60:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d64:	13000006 	movwne	r0, #6	; 0x6
     d68:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d6c:	0b3b0b3a 	bleq	ec3a5c <__Stack_Size+0xec365c>
     d70:	06021349 	streq	r1, [r2], -r9, asr #6
     d74:	34140000 	ldrcc	r0, [r4]
     d78:	3a080300 	bcc	201980 <__Stack_Size+0x201580>
     d7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d80:	15000013 	strne	r0, [r0, #-19]
     d84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d88:	0b3b0b3a 	bleq	ec3a78 <__Stack_Size+0xec3678>
     d8c:	00001349 	andeq	r1, r0, r9, asr #6
     d90:	00110100 	andseq	r0, r1, r0, lsl #2
     d94:	01110610 	tsteq	r1, r0, lsl r6
     d98:	08030112 	stmdaeq	r3, {r1, r4, r8}
     d9c:	0825081b 	stmdaeq	r5!, {r0, r1, r3, r4, fp}
     da0:	00000513 	andeq	r0, r0, r3, lsl r5
     da4:	01110100 	tsteq	r1, r0, lsl #2
     da8:	0b130e25 	bleq	4c4644 <__Stack_Size+0x4c4244>
     dac:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     db0:	01120111 	tsteq	r2, r1, lsl r1
     db4:	00000610 	andeq	r0, r0, r0, lsl r6
     db8:	0b002402 	bleq	9dc8 <__Stack_Size+0x99c8>
     dbc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     dc0:	0300000e 	movweq	r0, #14	; 0xe
     dc4:	0b0b0024 	bleq	2c0e5c <__Stack_Size+0x2c0a5c>
     dc8:	00000b3e 	andeq	r0, r0, lr, lsr fp
     dcc:	3f012e04 	svccc	0x00012e04
     dd0:	3a0e030c 	bcc	381a08 <__Stack_Size+0x381608>
     dd4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     dd8:	1201110c 	andne	r1, r1, #3	; 0x3
     ddc:	01064001 	tsteq	r6, r1
     de0:	05000013 	streq	r0, [r0, #-19]
     de4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     de8:	0b3b0b3a 	bleq	ec3ad8 <__Stack_Size+0xec36d8>
     dec:	00001349 	andeq	r1, r0, r9, asr #6
     df0:	03003406 	movweq	r3, #1030	; 0x406
     df4:	3b0b3a0e 	blcc	2cf634 <__Stack_Size+0x2cf234>
     df8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     dfc:	07000006 	streq	r0, [r0, -r6]
     e00:	0b0b000f 	bleq	2c0e44 <__Stack_Size+0x2c0a44>
     e04:	00001349 	andeq	r1, r0, r9, asr #6
     e08:	03003408 	movweq	r3, #1032	; 0x408
     e0c:	3b0b3a0e 	blcc	2cf64c <__Stack_Size+0x2cf24c>
     e10:	3f13490b 	svccc	0x0013490b
     e14:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     e18:	00340900 	eorseq	r0, r4, r0, lsl #18
     e1c:	0b3a0e03 	bleq	e84630 <__Stack_Size+0xe84230>
     e20:	0c3f0b3b 	ldceq	11, cr0, [pc], #-236
     e24:	00000c3c 	andeq	r0, r0, ip, lsr ip
     e28:	4901010a 	stmdbmi	r1, {r1, r3, r8}
     e2c:	00130113 	andseq	r0, r3, r3, lsl r1
     e30:	00210b00 	eoreq	r0, r1, r0, lsl #22
     e34:	0b2f1349 	bleq	bc5b60 <__Stack_Size+0xbc5760>
     e38:	150c0000 	strne	r0, [ip]
     e3c:	000c2700 	andeq	r2, ip, r0, lsl #14
     e40:	00340d00 	eorseq	r0, r4, r0, lsl #26
     e44:	0b3a0e03 	bleq	e84658 <__Stack_Size+0xe84258>
     e48:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e4c:	0a020c3f 	beq	83f50 <__Stack_Size+0x83b50>
     e50:	260e0000 	strcs	r0, [lr], -r0
     e54:	00134900 	andseq	r4, r3, r0, lsl #18
     e58:	11010000 	tstne	r1, r0
     e5c:	130e2501 	movwne	r2, #58625	; 0xe501
     e60:	1b0e030b 	blne	381a94 <__Stack_Size+0x381694>
     e64:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     e68:	00061001 	andeq	r1, r6, r1
     e6c:	00240200 	eoreq	r0, r4, r0, lsl #4
     e70:	0b3e0b0b 	bleq	f83aa4 <__Stack_Size+0xf836a4>
     e74:	00000e03 	andeq	r0, r0, r3, lsl #28
     e78:	0b002403 	bleq	9e8c <__Stack_Size+0x9a8c>
     e7c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     e80:	04000008 	streq	r0, [r0], #-8
     e84:	0b0b0024 	bleq	2c0f1c <__Stack_Size+0x2c0b1c>
     e88:	00000b3e 	andeq	r0, r0, lr, lsr fp
     e8c:	27001505 	strcs	r1, [r0, -r5, lsl #10]
     e90:	0600000c 	streq	r0, [r0], -ip
     e94:	0b0b000f 	bleq	2c0ed8 <__Stack_Size+0x2c0ad8>
     e98:	00001349 	andeq	r1, r0, r9, asr #6
     e9c:	03010407 	movweq	r0, #5127	; 0x1407
     ea0:	3a0b0b0e 	bcc	2c3ae0 <__Stack_Size+0x2c36e0>
     ea4:	010b3b0b 	tsteq	fp, fp, lsl #22
     ea8:	08000013 	stmdaeq	r0, {r0, r1, r4}
     eac:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     eb0:	00000d1c 	andeq	r0, r0, ip, lsl sp
     eb4:	3f012e09 	svccc	0x00012e09
     eb8:	3a0e030c 	bcc	381af0 <__Stack_Size+0x3816f0>
     ebc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ec0:	1113490c 	tstne	r3, ip, lsl #18
     ec4:	40011201 	andmi	r1, r1, r1, lsl #4
     ec8:	0a000006 	beq	ee8 <__Stack_Size+0xae8>
     ecc:	08030005 	stmdaeq	r3, {r0, r2}
     ed0:	0b3b0b3a 	bleq	ec3bc0 <__Stack_Size+0xec37c0>
     ed4:	06021349 	streq	r1, [r2], -r9, asr #6
     ed8:	01000000 	tsteq	r0, r0
     edc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     ee0:	0e030b13 	vmoveq.32	d3[0], r0
     ee4:	01110e1b 	tsteq	r1, fp, lsl lr
     ee8:	06100112 	undefined
     eec:	24020000 	strcs	r0, [r2]
     ef0:	3e0b0b00 	fmacdcc	d0, d11, d0
     ef4:	000e030b 	andeq	r0, lr, fp, lsl #6
     ef8:	00240300 	eoreq	r0, r4, r0, lsl #6
     efc:	0b3e0b0b 	bleq	f83b30 <__Stack_Size+0xf83730>
     f00:	00000803 	andeq	r0, r0, r3, lsl #16
     f04:	03001604 	movweq	r1, #1540	; 0x604
     f08:	3b0b3a0e 	blcc	2cf748 <__Stack_Size+0x2cf348>
     f0c:	0013490b 	andseq	r4, r3, fp, lsl #18
     f10:	00160500 	andseq	r0, r6, r0, lsl #10
     f14:	0b3a0e03 	bleq	e84728 <__Stack_Size+0xe84328>
     f18:	1349053b 	movtne	r0, #38203	; 0x953b
     f1c:	17060000 	strne	r0, [r6, -r0]
     f20:	3a0b0b01 	bcc	2c3b2c <__Stack_Size+0x2c372c>
     f24:	010b3b0b 	tsteq	fp, fp, lsl #22
     f28:	07000013 	smladeq	r0, r3, r0, r0
     f2c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     f30:	0b3b0b3a 	bleq	ec3c20 <__Stack_Size+0xec3820>
     f34:	00001349 	andeq	r1, r0, r9, asr #6
     f38:	49010108 	stmdbmi	r1, {r3, r8}
     f3c:	00130113 	andseq	r0, r3, r3, lsl r1
     f40:	00210900 	eoreq	r0, r1, r0, lsl #18
     f44:	0b2f1349 	bleq	bc5c70 <__Stack_Size+0xbc5870>
     f48:	240a0000 	strcs	r0, [sl]
     f4c:	3e0b0b00 	fmacdcc	d0, d11, d0
     f50:	0b00000b 	bleq	f84 <__Stack_Size+0xb84>
     f54:	0b0b0113 	bleq	2c13a8 <__Stack_Size+0x2c0fa8>
     f58:	0b3b0b3a 	bleq	ec3c48 <__Stack_Size+0xec3848>
     f5c:	00001301 	andeq	r1, r0, r1, lsl #6
     f60:	03000d0c 	movweq	r0, #3340	; 0xd0c
     f64:	3b0b3a0e 	blcc	2cf7a4 <__Stack_Size+0x2cf3a4>
     f68:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     f6c:	0d00000a 	stceq	0, cr0, [r0, #-40]
     f70:	0b0b000f 	bleq	2c0fb4 <__Stack_Size+0x2c0bb4>
     f74:	130e0000 	movwne	r0, #57344	; 0xe000
     f78:	0b0e0301 	bleq	381b84 <__Stack_Size+0x381784>
     f7c:	3b0b3a0b 	blcc	2cf7b0 <__Stack_Size+0x2cf3b0>
     f80:	0013010b 	andseq	r0, r3, fp, lsl #2
     f84:	000d0f00 	andeq	r0, sp, r0, lsl #30
     f88:	0b3a0803 	bleq	e82f9c <__Stack_Size+0xe82b9c>
     f8c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f90:	00000a38 	andeq	r0, r0, r8, lsr sl
     f94:	0b000f10 	bleq	4bdc <__Stack_Size+0x47dc>
     f98:	0013490b 	andseq	r4, r3, fp, lsl #18
     f9c:	01131100 	tsteq	r3, r0, lsl #2
     fa0:	050b0e03 	streq	r0, [fp, #-3587]
     fa4:	0b3b0b3a 	bleq	ec3c94 <__Stack_Size+0xec3894>
     fa8:	00001301 	andeq	r1, r0, r1, lsl #6
     fac:	27001512 	smladcs	r0, r2, r5, r1
     fb0:	1300000c 	movwne	r0, #12	; 0xc
     fb4:	0c270115 	stfeqs	f0, [r7], #-84
     fb8:	13011349 	movwne	r1, #4937	; 0x1349
     fbc:	05140000 	ldreq	r0, [r4]
     fc0:	00134900 	andseq	r4, r3, r0, lsl #18
     fc4:	000d1500 	andeq	r1, sp, r0, lsl #10
     fc8:	0b3a0e03 	bleq	e847dc <__Stack_Size+0xe843dc>
     fcc:	1349053b 	movtne	r0, #38203	; 0x953b
     fd0:	00000a38 	andeq	r0, r0, r8, lsr sl
     fd4:	49002616 	stmdbmi	r0, {r1, r2, r4, r9, sl, sp}
     fd8:	17000013 	smladne	r0, r3, r0, r0
     fdc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     fe0:	0b3a0b0b 	bleq	e83c14 <__Stack_Size+0xe83814>
     fe4:	1301053b 	movwne	r0, #5435	; 0x153b
     fe8:	13180000 	tstne	r8, #0	; 0x0
     fec:	3a0b0b01 	bcc	2c3bf8 <__Stack_Size+0x2c37f8>
     ff0:	01053b0b 	tsteq	r5, fp, lsl #22
     ff4:	19000013 	stmdbne	r0, {r0, r1, r4}
     ff8:	0b0b0117 	bleq	2c145c <__Stack_Size+0x2c105c>
     ffc:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1000:	00001301 	andeq	r1, r0, r1, lsl #6
    1004:	03000d1a 	movweq	r0, #3354	; 0xd1a
    1008:	3b0b3a0e 	blcc	2cf848 <__Stack_Size+0x2cf448>
    100c:	00134905 	andseq	r4, r3, r5, lsl #18
    1010:	01151b00 	tsteq	r5, r0, lsl #22
    1014:	13010c27 	movwne	r0, #7207	; 0x1c27
    1018:	2e1c0000 	wxorcs	wr0, wr12, wr0
    101c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1020:	3b0b3a0e 	blcc	2cf860 <__Stack_Size+0x2cf460>
    1024:	110c270b 	tstne	ip, fp, lsl #14
    1028:	40011201 	andmi	r1, r1, r1, lsl #4
    102c:	0013010a 	andseq	r0, r3, sl, lsl #2
    1030:	00051d00 	andeq	r1, r5, r0, lsl #26
    1034:	0b3a0e03 	bleq	e84848 <__Stack_Size+0xe84448>
    1038:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    103c:	00000602 	andeq	r0, r0, r2, lsl #12
    1040:	0300341e 	movweq	r3, #1054	; 0x41e
    1044:	3b0b3a0e 	blcc	2cf884 <__Stack_Size+0x2cf484>
    1048:	3f134905 	svccc	0x00134905
    104c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1050:	11010000 	tstne	r1, r0
    1054:	130e2501 	movwne	r2, #58625	; 0xe501
    1058:	1b0e030b 	blne	381c8c <__Stack_Size+0x38188c>
    105c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1060:	00061001 	andeq	r1, r6, r1
    1064:	00240200 	eoreq	r0, r4, r0, lsl #4
    1068:	0b3e0b0b 	bleq	f83c9c <__Stack_Size+0xf8389c>
    106c:	00000e03 	andeq	r0, r0, r3, lsl #28
    1070:	0b002403 	bleq	a084 <__Stack_Size+0x9c84>
    1074:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1078:	04000008 	streq	r0, [r0], #-8
    107c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1080:	0b3b0b3a 	bleq	ec3d70 <__Stack_Size+0xec3970>
    1084:	00001349 	andeq	r1, r0, r9, asr #6
    1088:	03001605 	movweq	r1, #1541	; 0x605
    108c:	3b0b3a0e 	blcc	2cf8cc <__Stack_Size+0x2cf4cc>
    1090:	00134905 	andseq	r4, r3, r5, lsl #18
    1094:	01170600 	tsteq	r7, r0, lsl #12
    1098:	0b3a0b0b 	bleq	e83ccc <__Stack_Size+0xe838cc>
    109c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    10a0:	0d070000 	stceq	0, cr0, [r7]
    10a4:	3a0e0300 	bcc	381cac <__Stack_Size+0x3818ac>
    10a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10ac:	08000013 	stmdaeq	r0, {r0, r1, r4}
    10b0:	13490101 	movtne	r0, #37121	; 0x9101
    10b4:	00001301 	andeq	r1, r0, r1, lsl #6
    10b8:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    10bc:	000b2f13 	andeq	r2, fp, r3, lsl pc
    10c0:	00240a00 	eoreq	r0, r4, r0, lsl #20
    10c4:	0b3e0b0b 	bleq	f83cf8 <__Stack_Size+0xf838f8>
    10c8:	130b0000 	movwne	r0, #45056	; 0xb000
    10cc:	3a0b0b01 	bcc	2c3cd8 <__Stack_Size+0x2c38d8>
    10d0:	010b3b0b 	tsteq	fp, fp, lsl #22
    10d4:	0c000013 	stceq	0, cr0, [r0], {19}
    10d8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    10dc:	0b3b0b3a 	bleq	ec3dcc <__Stack_Size+0xec39cc>
    10e0:	0a381349 	beq	e05e0c <__Stack_Size+0xe05a0c>
    10e4:	0f0d0000 	svceq	0x000d0000
    10e8:	000b0b00 	andeq	r0, fp, r0, lsl #22
    10ec:	01130e00 	tsteq	r3, r0, lsl #28
    10f0:	0b0b0e03 	bleq	2c4904 <__Stack_Size+0x2c4504>
    10f4:	0b3b0b3a 	bleq	ec3de4 <__Stack_Size+0xec39e4>
    10f8:	00001301 	andeq	r1, r0, r1, lsl #6
    10fc:	03000d0f 	movweq	r0, #3343	; 0xd0f
    1100:	3b0b3a08 	blcc	2cf928 <__Stack_Size+0x2cf528>
    1104:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1108:	1000000a 	andne	r0, r0, sl
    110c:	0b0b000f 	bleq	2c1150 <__Stack_Size+0x2c0d50>
    1110:	00001349 	andeq	r1, r0, r9, asr #6
    1114:	03011311 	movweq	r1, #4881	; 0x1311
    1118:	3a050b0e 	bcc	143d58 <__Stack_Size+0x143958>
    111c:	010b3b0b 	tsteq	fp, fp, lsl #22
    1120:	12000013 	andne	r0, r0, #19	; 0x13
    1124:	0c270015 	stceq	0, cr0, [r7], #-84
    1128:	15130000 	ldrne	r0, [r3]
    112c:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
    1130:	00130113 	andseq	r0, r3, r3, lsl r1
    1134:	00051400 	andeq	r1, r5, r0, lsl #8
    1138:	00001349 	andeq	r1, r0, r9, asr #6
    113c:	03000d15 	movweq	r0, #3349	; 0xd15
    1140:	3b0b3a0e 	blcc	2cf980 <__Stack_Size+0x2cf580>
    1144:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1148:	1600000a 	strne	r0, [r0], -sl
    114c:	13490026 	movtne	r0, #36902	; 0x9026
    1150:	13170000 	tstne	r7, #0	; 0x0
    1154:	0b0e0301 	bleq	381d60 <__Stack_Size+0x381960>
    1158:	3b0b3a0b 	blcc	2cf98c <__Stack_Size+0x2cf58c>
    115c:	00130105 	andseq	r0, r3, r5, lsl #2
    1160:	01131800 	tsteq	r3, r0, lsl #16
    1164:	0b3a0b0b 	bleq	e83d98 <__Stack_Size+0xe83998>
    1168:	1301053b 	movwne	r0, #5435	; 0x153b
    116c:	17190000 	ldrne	r0, [r9, -r0]
    1170:	3a0b0b01 	bcc	2c3d7c <__Stack_Size+0x2c397c>
    1174:	01053b0b 	tsteq	r5, fp, lsl #22
    1178:	1a000013 	bne	11cc <__Stack_Size+0xdcc>
    117c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1180:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1184:	00001349 	andeq	r1, r0, r9, asr #6
    1188:	2701151b 	smladcs	r1, fp, r5, r1
    118c:	0013010c 	andseq	r0, r3, ip, lsl #2
    1190:	00341c00 	eorseq	r1, r4, r0, lsl #24
    1194:	0b3a0e03 	bleq	e849a8 <__Stack_Size+0xe845a8>
    1198:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    119c:	00000a02 	andeq	r0, r0, r2, lsl #20
    11a0:	0300341d 	movweq	r3, #1053	; 0x41d
    11a4:	3b0b3a0e 	blcc	2cf9e4 <__Stack_Size+0x2cf5e4>
    11a8:	3f13490b 	svccc	0x0013490b
    11ac:	000a020c 	andeq	r0, sl, ip, lsl #4
    11b0:	11010000 	tstne	r1, r0
    11b4:	130e2501 	movwne	r2, #58625	; 0xe501
    11b8:	1b0e030b 	blne	381dec <__Stack_Size+0x3819ec>
    11bc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    11c0:	00061001 	andeq	r1, r6, r1
    11c4:	00240200 	eoreq	r0, r4, r0, lsl #4
    11c8:	0b3e0b0b 	bleq	f83dfc <__Stack_Size+0xf839fc>
    11cc:	00000e03 	andeq	r0, r0, r3, lsl #28
    11d0:	0b002403 	bleq	a1e4 <__Stack_Size+0x9de4>
    11d4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    11d8:	04000008 	streq	r0, [r0], #-8
    11dc:	0b0b0024 	bleq	2c1274 <__Stack_Size+0x2c0e74>
    11e0:	00000b3e 	andeq	r0, r0, lr, lsr fp
    11e4:	03001605 	movweq	r1, #1541	; 0x605
    11e8:	3b0b3a0e 	blcc	2cfa28 <__Stack_Size+0x2cf628>
    11ec:	0013490b 	andseq	r4, r3, fp, lsl #18
    11f0:	012e0600 	teqeq	lr, r0, lsl #12
    11f4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    11f8:	0b3b0b3a 	bleq	ec3ee8 <__Stack_Size+0xec3ae8>
    11fc:	01110c27 	tsteq	r1, r7, lsr #24
    1200:	06400112 	undefined
    1204:	00001301 	andeq	r1, r0, r1, lsl #6
    1208:	03003407 	movweq	r3, #1031	; 0x407
    120c:	3b0b3a0e 	blcc	2cfa4c <__Stack_Size+0x2cf64c>
    1210:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1214:	0800000a 	stmdaeq	r0, {r1, r3}
    1218:	08030034 	stmdaeq	r3, {r2, r4, r5}
    121c:	0b3b0b3a 	bleq	ec3f0c <__Stack_Size+0xec3b0c>
    1220:	0a021349 	beq	85f4c <__Stack_Size+0x85b4c>
    1224:	01090000 	tsteq	r9, r0
    1228:	01134901 	tsteq	r3, r1, lsl #18
    122c:	0a000013 	beq	1280 <__Stack_Size+0xe80>
    1230:	00000021 	andeq	r0, r0, r1, lsr #32
    1234:	2700150b 	strcs	r1, [r0, -fp, lsl #10]
    1238:	0c00000c 	stceq	0, cr0, [r0], {12}
    123c:	0b0b000f 	bleq	2c1280 <__Stack_Size+0x2c0e80>
    1240:	00001349 	andeq	r1, r0, r9, asr #6
    1244:	0300340d 	movweq	r3, #1037	; 0x40d
    1248:	3b0b3a0e 	blcc	2cfa88 <__Stack_Size+0x2cf688>
    124c:	3f13490b 	svccc	0x0013490b
    1250:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1254:	11010000 	tstne	r1, r0
    1258:	130e2501 	movwne	r2, #58625	; 0xe501
    125c:	1b0e030b 	blne	381e90 <__Stack_Size+0x381a90>
    1260:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1264:	00061001 	andeq	r1, r6, r1
    1268:	00240200 	eoreq	r0, r4, r0, lsl #4
    126c:	0b3e0b0b 	bleq	f83ea0 <__Stack_Size+0xf83aa0>
    1270:	00000e03 	andeq	r0, r0, r3, lsl #28
    1274:	0b002403 	bleq	a288 <__Stack_Size+0x9e88>
    1278:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    127c:	04000008 	streq	r0, [r0], #-8
    1280:	0b0b0024 	bleq	2c1318 <__Stack_Size+0x2c0f18>
    1284:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1288:	0b000f05 	bleq	4ea4 <__Stack_Size+0x4aa4>
    128c:	0600000b 	streq	r0, [r0], -fp
    1290:	0b0b000f 	bleq	2c12d4 <__Stack_Size+0x2c0ed4>
    1294:	00001349 	andeq	r1, r0, r9, asr #6
    1298:	03001607 	movweq	r1, #1543	; 0x607
    129c:	3b0b3a0e 	blcc	2cfadc <__Stack_Size+0x2cf6dc>
    12a0:	0013490b 	andseq	r4, r3, fp, lsl #18
    12a4:	012e0800 	teqeq	lr, r0, lsl #16
    12a8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    12ac:	0b3b0b3a 	bleq	ec3f9c <__Stack_Size+0xec3b9c>
    12b0:	13490c27 	movtne	r0, #39975	; 0x9c27
    12b4:	01120111 	tsteq	r2, r1, lsl r1
    12b8:	13010640 	movwne	r0, #5696	; 0x1640
    12bc:	05090000 	streq	r0, [r9]
    12c0:	3a080300 	bcc	201ec8 <__Stack_Size+0x201ac8>
    12c4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12c8:	00060213 	andeq	r0, r6, r3, lsl r2
    12cc:	00340a00 	eorseq	r0, r4, r0, lsl #20
    12d0:	0b3a0803 	bleq	e832e4 <__Stack_Size+0xe82ee4>
    12d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    12d8:	00000602 	andeq	r0, r0, r2, lsl #12
    12dc:	0300340b 	movweq	r3, #1035	; 0x40b
    12e0:	3b0b3a08 	blcc	2cfb08 <__Stack_Size+0x2cf708>
    12e4:	0013490b 	andseq	r4, r3, fp, lsl #18
    12e8:	00340c00 	eorseq	r0, r4, r0, lsl #24
    12ec:	0b3a0e03 	bleq	e84b00 <__Stack_Size+0xe84700>
    12f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    12f4:	00000602 	andeq	r0, r0, r2, lsl #12
    12f8:	0300340d 	movweq	r3, #1037	; 0x40d
    12fc:	3b0b3a08 	blcc	2cfb24 <__Stack_Size+0x2cf724>
    1300:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1304:	0000000a 	andeq	r0, r0, sl
    1308:	25011101 	strcs	r1, [r1, #-257]
    130c:	030b130e 	movweq	r1, #45838	; 0xb30e
    1310:	110e1b0e 	tstne	lr, lr, lsl #22
    1314:	10011201 	andne	r1, r1, r1, lsl #4
    1318:	02000006 	andeq	r0, r0, #6	; 0x6
    131c:	0b0b0024 	bleq	2c13b4 <__Stack_Size+0x2c0fb4>
    1320:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1324:	24030000 	strcs	r0, [r3]
    1328:	3e0b0b00 	fmacdcc	d0, d11, d0
    132c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1330:	00160400 	andseq	r0, r6, r0, lsl #8
    1334:	0b3a0e03 	bleq	e84b48 <__Stack_Size+0xe84748>
    1338:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    133c:	16050000 	strne	r0, [r5], -r0
    1340:	3a0e0300 	bcc	381f48 <__Stack_Size+0x381b48>
    1344:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1348:	06000013 	undefined
    134c:	0b0b0117 	bleq	2c17b0 <__Stack_Size+0x2c13b0>
    1350:	0b3b0b3a 	bleq	ec4040 <__Stack_Size+0xec3c40>
    1354:	00001301 	andeq	r1, r0, r1, lsl #6
    1358:	03000d07 	movweq	r0, #3335	; 0xd07
    135c:	3b0b3a0e 	blcc	2cfb9c <__Stack_Size+0x2cf79c>
    1360:	0013490b 	andseq	r4, r3, fp, lsl #18
    1364:	01010800 	tsteq	r1, r0, lsl #16
    1368:	13011349 	movwne	r1, #4937	; 0x1349
    136c:	21090000 	tstcs	r9, r0
    1370:	2f134900 	svccs	0x00134900
    1374:	0a00000b 	beq	13a8 <__Stack_Size+0xfa8>
    1378:	0b0b0024 	bleq	2c1410 <__Stack_Size+0x2c1010>
    137c:	00000b3e 	andeq	r0, r0, lr, lsr fp
    1380:	0b01130b 	bleq	45fb4 <__Stack_Size+0x45bb4>
    1384:	3b0b3a0b 	blcc	2cfbb8 <__Stack_Size+0x2cf7b8>
    1388:	0013010b 	andseq	r0, r3, fp, lsl #2
    138c:	000d0c00 	andeq	r0, sp, r0, lsl #24
    1390:	0b3a0e03 	bleq	e84ba4 <__Stack_Size+0xe847a4>
    1394:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1398:	00000a38 	andeq	r0, r0, r8, lsr sl
    139c:	0b000f0d 	bleq	4fd8 <__Stack_Size+0x4bd8>
    13a0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    13a4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    13a8:	0b3a0b0b 	bleq	e83fdc <__Stack_Size+0xe83bdc>
    13ac:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    13b0:	0d0f0000 	stceq	0, cr0, [pc]
    13b4:	3a080300 	bcc	201fbc <__Stack_Size+0x201bbc>
    13b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13bc:	000a3813 	andeq	r3, sl, r3, lsl r8
    13c0:	000f1000 	andeq	r1, pc, r0
    13c4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    13c8:	13110000 	tstne	r1, #0	; 0x0
    13cc:	0b0e0301 	bleq	381fd8 <__Stack_Size+0x381bd8>
    13d0:	3b0b3a05 	blcc	2cfbec <__Stack_Size+0x2cf7ec>
    13d4:	0013010b 	andseq	r0, r3, fp, lsl #2
    13d8:	00151200 	andseq	r1, r5, r0, lsl #4
    13dc:	00000c27 	andeq	r0, r0, r7, lsr #24
    13e0:	27011513 	smladcs	r1, r3, r5, r1
    13e4:	0113490c 	tsteq	r3, ip, lsl #18
    13e8:	14000013 	strne	r0, [r0], #-19
    13ec:	13490005 	movtne	r0, #36869	; 0x9005
    13f0:	0d150000 	ldceq	0, cr0, [r5]
    13f4:	3a0e0300 	bcc	381ffc <__Stack_Size+0x381bfc>
    13f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    13fc:	000a3813 	andeq	r3, sl, r3, lsl r8
    1400:	00261600 	eoreq	r1, r6, r0, lsl #12
    1404:	00001349 	andeq	r1, r0, r9, asr #6
    1408:	03011317 	movweq	r1, #4887	; 0x1317
    140c:	3a0b0b0e 	bcc	2c404c <__Stack_Size+0x2c3c4c>
    1410:	01053b0b 	tsteq	r5, fp, lsl #22
    1414:	18000013 	stmdane	r0, {r0, r1, r4}
    1418:	0b0b0113 	bleq	2c186c <__Stack_Size+0x2c146c>
    141c:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    1420:	00001301 	andeq	r1, r0, r1, lsl #6
    1424:	0b011719 	bleq	47090 <__Stack_Size+0x46c90>
    1428:	3b0b3a0b 	blcc	2cfc5c <__Stack_Size+0x2cf85c>
    142c:	00130105 	andseq	r0, r3, r5, lsl #2
    1430:	000d1a00 	andeq	r1, sp, r0, lsl #20
    1434:	0b3a0e03 	bleq	e84c48 <__Stack_Size+0xe84848>
    1438:	1349053b 	movtne	r0, #38203	; 0x953b
    143c:	151b0000 	ldrne	r0, [fp]
    1440:	010c2701 	tsteq	ip, r1, lsl #14
    1444:	1c000013 	stcne	0, cr0, [r0], {19}
    1448:	0e030104 	adfeqs	f0, f3, f4
    144c:	0b3a0b0b 	bleq	e84080 <__Stack_Size+0xe83c80>
    1450:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1454:	281d0000 	ldmdacs	sp, {}
    1458:	1c0e0300 	stcne	3, cr0, [lr], {0}
    145c:	1e00000d 	cdpne	0, 0, cr0, cr0, cr13, {0}
    1460:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1464:	0b3a0e03 	bleq	e84c78 <__Stack_Size+0xe84878>
    1468:	0c270b3b 	stceq	11, cr0, [r7], #-236
    146c:	01111349 	tsteq	r1, r9, asr #6
    1470:	06400112 	undefined
    1474:	00001301 	andeq	r1, r0, r1, lsl #6
    1478:	0300051f 	movweq	r0, #1311	; 0x51f
    147c:	3b0b3a0e 	blcc	2cfcbc <__Stack_Size+0x2cf8bc>
    1480:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1484:	20000006 	andcs	r0, r0, r6
    1488:	08030005 	stmdaeq	r3, {r0, r2}
    148c:	0b3b0b3a 	bleq	ec417c <__Stack_Size+0xec3d7c>
    1490:	06021349 	streq	r1, [r2], -r9, asr #6
    1494:	34210000 	strtcc	r0, [r1]
    1498:	3a0e0300 	bcc	3820a0 <__Stack_Size+0x381ca0>
    149c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14a0:	22000013 	andcs	r0, r0, #19	; 0x13
    14a4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    14a8:	0b3b0b3a 	bleq	ec4198 <__Stack_Size+0xec3d98>
    14ac:	0a021349 	beq	861d8 <__Stack_Size+0x85dd8>
    14b0:	34230000 	strtcc	r0, [r3]
    14b4:	3a0e0300 	bcc	3820bc <__Stack_Size+0x381cbc>
    14b8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14bc:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    14c0:	0000000c 	andeq	r0, r0, ip
    14c4:	25011101 	strcs	r1, [r1, #-257]
    14c8:	030b130e 	movweq	r1, #45838	; 0xb30e
    14cc:	110e1b0e 	tstne	lr, lr, lsl #22
    14d0:	10011201 	andne	r1, r1, r1, lsl #4
    14d4:	02000006 	andeq	r0, r0, #6	; 0x6
    14d8:	0b0b0024 	bleq	2c1570 <__Stack_Size+0x2c1170>
    14dc:	0e030b3e 	vmoveq.16	d3[0], r0
    14e0:	24030000 	strcs	r0, [r3]
    14e4:	3e0b0b00 	fmacdcc	d0, d11, d0
    14e8:	0008030b 	andeq	r0, r8, fp, lsl #6
    14ec:	00160400 	andseq	r0, r6, r0, lsl #8
    14f0:	0b3a0e03 	bleq	e84d04 <__Stack_Size+0xe84904>
    14f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    14f8:	16050000 	strne	r0, [r5], -r0
    14fc:	3a0e0300 	bcc	382104 <__Stack_Size+0x381d04>
    1500:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1504:	06000013 	undefined
    1508:	0b0b0117 	bleq	2c196c <__Stack_Size+0x2c156c>
    150c:	0b3b0b3a 	bleq	ec41fc <__Stack_Size+0xec3dfc>
    1510:	00001301 	andeq	r1, r0, r1, lsl #6
    1514:	03000d07 	movweq	r0, #3335	; 0xd07
    1518:	3b0b3a0e 	blcc	2cfd58 <__Stack_Size+0x2cf958>
    151c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1520:	01010800 	tsteq	r1, r0, lsl #16
    1524:	13011349 	movwne	r1, #4937	; 0x1349
    1528:	21090000 	tstcs	r9, r0
    152c:	2f134900 	svccs	0x00134900
    1530:	0a00000b 	beq	1564 <__Stack_Size+0x1164>
    1534:	0b0b0024 	bleq	2c15cc <__Stack_Size+0x2c11cc>
    1538:	00000b3e 	andeq	r0, r0, lr, lsr fp
    153c:	0b01130b 	bleq	46170 <__Stack_Size+0x45d70>
    1540:	3b0b3a0b 	blcc	2cfd74 <__Stack_Size+0x2cf974>
    1544:	0013010b 	andseq	r0, r3, fp, lsl #2
    1548:	000d0c00 	andeq	r0, sp, r0, lsl #24
    154c:	0b3a0e03 	bleq	e84d60 <__Stack_Size+0xe84960>
    1550:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1554:	00000a38 	andeq	r0, r0, r8, lsr sl
    1558:	0b000f0d 	bleq	5194 <__Stack_Size+0x4d94>
    155c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    1560:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1564:	0b3a0b0b 	bleq	e84198 <__Stack_Size+0xe83d98>
    1568:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    156c:	0d0f0000 	stceq	0, cr0, [pc]
    1570:	3a080300 	bcc	202178 <__Stack_Size+0x201d78>
    1574:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1578:	000a3813 	andeq	r3, sl, r3, lsl r8
    157c:	000f1000 	andeq	r1, pc, r0
    1580:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1584:	13110000 	tstne	r1, #0	; 0x0
    1588:	0b0e0301 	bleq	382194 <__Stack_Size+0x381d94>
    158c:	3b0b3a05 	blcc	2cfda8 <__Stack_Size+0x2cf9a8>
    1590:	0013010b 	andseq	r0, r3, fp, lsl #2
    1594:	00151200 	andseq	r1, r5, r0, lsl #4
    1598:	00000c27 	andeq	r0, r0, r7, lsr #24
    159c:	27011513 	smladcs	r1, r3, r5, r1
    15a0:	0113490c 	tsteq	r3, ip, lsl #18
    15a4:	14000013 	strne	r0, [r0], #-19
    15a8:	13490005 	movtne	r0, #36869	; 0x9005
    15ac:	0d150000 	ldceq	0, cr0, [r5]
    15b0:	3a0e0300 	bcc	3821b8 <__Stack_Size+0x381db8>
    15b4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    15b8:	000a3813 	andeq	r3, sl, r3, lsl r8
    15bc:	00261600 	eoreq	r1, r6, r0, lsl #12
    15c0:	00001349 	andeq	r1, r0, r9, asr #6
    15c4:	03011317 	movweq	r1, #4887	; 0x1317
    15c8:	3a0b0b0e 	bcc	2c4208 <__Stack_Size+0x2c3e08>
    15cc:	01053b0b 	tsteq	r5, fp, lsl #22
    15d0:	18000013 	stmdane	r0, {r0, r1, r4}
    15d4:	0b0b0113 	bleq	2c1a28 <__Stack_Size+0x2c1628>
    15d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!
    15dc:	00001301 	andeq	r1, r0, r1, lsl #6
    15e0:	0b011719 	bleq	4724c <__Stack_Size+0x46e4c>
    15e4:	3b0b3a0b 	blcc	2cfe18 <__Stack_Size+0x2cfa18>
    15e8:	00130105 	andseq	r0, r3, r5, lsl #2
    15ec:	000d1a00 	andeq	r1, sp, r0, lsl #20
    15f0:	0b3a0e03 	bleq	e84e04 <__Stack_Size+0xe84a04>
    15f4:	1349053b 	movtne	r0, #38203	; 0x953b
    15f8:	151b0000 	ldrne	r0, [fp]
    15fc:	010c2701 	tsteq	ip, r1, lsl #14
    1600:	1c000013 	stcne	0, cr0, [r0], {19}
    1604:	0c3f012e 	ldfeqs	f0, [pc], #-184
    1608:	0b3a0e03 	bleq	e84e1c <__Stack_Size+0xe84a1c>
    160c:	0c270b3b 	stceq	11, cr0, [r7], #-236
    1610:	01120111 	tsteq	r2, r1, lsl r1
    1614:	13010640 	movwne	r0, #5696	; 0x1640
    1618:	051d0000 	ldreq	r0, [sp]
    161c:	3a0e0300 	bcc	382224 <__Stack_Size+0x381e24>
    1620:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1624:	00060213 	andeq	r0, r6, r3, lsl r2
    1628:	00051e00 	andeq	r1, r5, r0, lsl #28
    162c:	0b3a0803 	bleq	e83640 <__Stack_Size+0xe83240>
    1630:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1634:	00000602 	andeq	r0, r0, r2, lsl #12
    1638:	0300341f 	movweq	r3, #1055	; 0x41f
    163c:	3b0b3a08 	blcc	2cfe64 <__Stack_Size+0x2cfa64>
    1640:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1644:	2000000a 	andcs	r0, r0, sl
    1648:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    164c:	0b3b0b3a 	bleq	ec433c <__Stack_Size+0xec3f3c>
    1650:	00001349 	andeq	r1, r0, r9, asr #6
    1654:	03003421 	movweq	r3, #1057	; 0x421
    1658:	3b0b3a08 	blcc	2cfe80 <__Stack_Size+0x2cfa80>
    165c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1660:	00342200 	eorseq	r2, r4, r0, lsl #4
    1664:	0b3a0803 	bleq	e83678 <__Stack_Size+0xe83278>
    1668:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    166c:	00000602 	andeq	r0, r0, r2, lsl #12
    1670:	03000a23 	movweq	r0, #2595	; 0xa23
    1674:	3b0b3a0e 	blcc	2cfeb4 <__Stack_Size+0x2cfab4>
    1678:	2400000b 	strcs	r0, [r0], #-11
    167c:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    1680:	34250000 	strtcc	r0, [r5]
    1684:	3a0e0300 	bcc	38228c <__Stack_Size+0x381e8c>
    1688:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    168c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1690:	0000000c 	andeq	r0, r0, ip
    1694:	10001101 	andne	r1, r0, r1, lsl #2
    1698:	03065506 	movweq	r5, #25862	; 0x6506
    169c:	25081b08 	strcs	r1, [r8, #-2824]
    16a0:	00051308 	andeq	r1, r5, r8, lsl #6
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000045 	andeq	r0, r0, r5, asr #32
       4:	001f0002 	andseq	r0, pc, r2
       8:	01020000 	tsteq	r2, r0
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	tsteq	r0, r0
      18:	00010000 	andeq	r0, r1, r0
      1c:	69747263 	ldmdbvs	r4!, {r0, r1, r5, r6, r9, ip, sp, lr}^
      20:	6d73612e 	ldfvse	f6, [r3, #-184]!
      24:	00000000 	andeq	r0, r0, r0
      28:	02050000 	andeq	r0, r5, #0	; 0x0
      2c:	00000000 	andeq	r0, r0, r0
      30:	0100cc03 	tsteq	r0, r3, lsl #24
      34:	01000602 	tsteq	r0, r2, lsl #12
      38:	02050001 	andeq	r0, r5, #1	; 0x1
      3c:	00000000 	andeq	r0, r0, r0
      40:	0100d703 	tsteq	r0, r3, lsl #14
      44:	01000602 	tsteq	r0, r2, lsl #12
      48:	00009601 	andeq	r9, r0, r1, lsl #12
      4c:	40000200 	andmi	r0, r0, r0, lsl #4
      50:	02000000 	andeq	r0, r0, #0	; 0x0
      54:	0d0efb01 	vstreq	d15, [lr, #-4]
      58:	01010100 	tsteq	r1, r0, lsl #2
      5c:	00000001 	andeq	r0, r0, r1
      60:	01000001 	tsteq	r0, r1
      64:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
      68:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
      6c:	2f2e2e2f 	svccs	0x002e2e2f
      70:	2d636367 	stclcs	3, cr6, [r3, #-412]!
      74:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
      78:	696c2f30 	stmdbvs	ip!, {r4, r5, r8, r9, sl, fp, sp}^
      7c:	6f6c6762 	svcvs	0x006c6762
      80:	612f7373 	teqvs	pc, r3, ror r3
      84:	00006d72 	andeq	r6, r0, r2, ror sp
      88:	30747263 	rsbscc	r7, r4, r3, ror #4
      8c:	0100532e 	tsteq	r0, lr, lsr #6
      90:	00000000 	andeq	r0, r0, r0
      94:	00000205 	andeq	r0, r0, r5, lsl #4
      98:	d2030000 	andle	r0, r3, #0	; 0x0
      9c:	2f2f0100 	svccs	0x002f0100
      a0:	2f2f2f33 	svccs	0x002f2f33
      a4:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      a8:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      ac:	2f302f2f 	svccs	0x00302f2f
      b0:	2f2f302f 	svccs	0x002f302f
      b4:	2f302f2f 	svccs	0x00302f2f
      b8:	09032f30 	stmdbeq	r3, {r4, r5, r8, r9, sl, fp, sp}
      bc:	2f2f322e 	svccs	0x002f322e
      c0:	032f2f30 	teqeq	pc, #192	; 0xc0
      c4:	2f342e0e 	svccs	0x00342e0e
      c8:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
      cc:	2f2f2f2f 	svccs	0x002f2f2f
      d0:	f9032f30 	undefined instruction 0xf9032f30
      d4:	2f2f2e00 	svccs	0x002f2e00
      d8:	2f2f2f2f 	svccs	0x002f2f2f
      dc:	10023030 	andne	r3, r2, r0, lsr r0
      e0:	ef010100 	svc	0x00010100
      e4:	02000000 	andeq	r0, r0, #0	; 0x0
      e8:	00007200 	andeq	r7, r0, r0, lsl #4
      ec:	fb010200 	blx	408f6 <__Stack_Size+0x404f6>
      f0:	01000d0e 	tsteq	r0, lr, lsl #26
      f4:	00010101 	andeq	r0, r1, r1, lsl #2
      f8:	00010000 	andeq	r0, r1, r0
      fc:	50410100 	subpl	r0, r1, r0, lsl #2
     100:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
     104:	74730063 	ldrbtvc	r0, [r3], #-99
     108:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     10c:	5f783031 	svcpl	0x00783031
     110:	2f62696c 	svccs	0x0062696c
     114:	00636e69 	rsbeq	r6, r3, r9, ror #28
     118:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     11c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     120:	73000001 	movwvc	r0, #1	; 0x1
     124:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     128:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     12c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     130:	00682e65 	rsbeq	r2, r8, r5, ror #28
     134:	73000002 	movwvc	r0, #2	; 0x2
     138:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     13c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     140:	70616d5f 	rsbvc	r6, r1, pc, asr sp
     144:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     148:	74730000 	ldrbtvc	r0, [r3]
     14c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     150:	5f783031 	svcpl	0x00783031
     154:	6f697067 	svcvs	0x00697067
     158:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     15c:	00000000 	andeq	r0, r0, r0
     160:	31340205 	teqcc	r4, r5, lsl #4
     164:	d4030800 	strle	r0, [r3], #-2048
     168:	3d130101 	ldfccs	f0, [r3, #-4]
     16c:	22204d3d 	eorcs	r4, r0, #3904	; 0xf40
     170:	4c4d303e 	mcrrmi	0, 3, r3, sp, cr14
     174:	4a65033d 	bmi	1940e70 <__Stack_Size+0x1940a70>
     178:	31222c22 	teqcc	r2, r2, lsr #24
     17c:	3c68033d 	stclcc	3, cr0, [r8], #-244
     180:	301f4e30 	andscc	r4, pc, r0, lsr lr
     184:	2f2f2b21 	svccs	0x002f2b21
     188:	2b31312f 	blcs	c4c64c <__Stack_Size+0xc4c24c>
     18c:	2f2f2f2f 	svccs	0x002f2f2f
     190:	26665f03 	strbtcs	r5, [r6], -r3, lsl #30
     194:	262e7a03 	strtcs	r7, [lr], -r3, lsl #20
     198:	7fb8034c 	svcvc	0x00b8034c
     19c:	4d31312e 	ldfmis	f3, [r1, #-184]!
     1a0:	3f3f3130 	svccc	0x003f3130
     1a4:	694d3f3f 	stmdbvs	sp, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp}^
     1a8:	523f5d3f 	eorspl	r5, pc, #4032	; 0xfc0
     1ac:	95033d4c 	strls	r3, [r3, #-3404]
     1b0:	03302e7f 	teqeq	r0, #2032	; 0x7f0
     1b4:	032e00f9 	teqeq	lr, #249	; 0xf9
     1b8:	30667f8d 	rsbcc	r7, r6, sp, lsl #31
     1bc:	3e595932 	mrccc	9, 2, r5, cr9, cr2, {1}
     1c0:	593e5959 	ldmdbpl	lr!, {r0, r3, r4, r6, r8, fp, ip, lr}
     1c4:	59593e59 	ldmdbpl	r9, {r0, r3, r4, r6, r9, sl, fp, ip, sp}^
     1c8:	3e59593e 	mrccc	9, 2, r5, cr9, cr14, {1}
     1cc:	593e5959 	ldmdbpl	lr!, {r0, r3, r4, r6, r8, fp, ip, lr}
     1d0:	00080259 	andeq	r0, r8, r9, asr r2
     1d4:	01510101 	cmpeq	r1, r1, lsl #2
     1d8:	00020000 	andeq	r0, r2, r0
     1dc:	0000002d 	andeq	r0, r0, sp, lsr #32
     1e0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     1e4:	0101000d 	tsteq	r1, sp
     1e8:	00000101 	andeq	r0, r0, r1, lsl #2
     1ec:	00000100 	andeq	r0, r0, r0, lsl #2
     1f0:	50504101 	subspl	r4, r0, r1, lsl #2
     1f4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     1f8:	74730000 	ldrbtvc	r0, [r3]
     1fc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     200:	5f783031 	svcpl	0x00783031
     204:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
     208:	00000100 	andeq	r0, r0, r0, lsl #2
     20c:	02050000 	andeq	r0, r5, #0	; 0x0
     210:	0800333c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, ip, sp}
     214:	13012303 	movwne	r2, #4867	; 0x1303
     218:	032e0a03 	teqeq	lr, #12288	; 0x3000
     21c:	0f032e0f 	svceq	0x00032e0f
     220:	2e0f032e 	cdpcs	3, 0, cr0, cr15, cr14, {1}
     224:	132e0f03 	teqne	lr, #12	; 0xc
     228:	132e0a03 	teqne	lr, #12288	; 0x3000
     22c:	132e0a03 	teqne	lr, #12288	; 0x3000
     230:	132e1603 	teqne	lr, #3145728	; 0x300000
     234:	132e0a03 	teqne	lr, #12288	; 0x3000
     238:	132e0a03 	teqne	lr, #12288	; 0x3000
     23c:	132e0a03 	teqne	lr, #12288	; 0x3000
     240:	132e0a03 	teqne	lr, #12288	; 0x3000
     244:	132e0a03 	teqne	lr, #12288	; 0x3000
     248:	132e0a03 	teqne	lr, #12288	; 0x3000
     24c:	132e0a03 	teqne	lr, #12288	; 0x3000
     250:	132e0a03 	teqne	lr, #12288	; 0x3000
     254:	132e0a03 	teqne	lr, #12288	; 0x3000
     258:	142e0a03 	strtne	r0, [lr], #-2563
     25c:	132e0a03 	teqne	lr, #12288	; 0x3000
     260:	132e0a03 	teqne	lr, #12288	; 0x3000
     264:	132e0a03 	teqne	lr, #12288	; 0x3000
     268:	132e0a03 	teqne	lr, #12288	; 0x3000
     26c:	132e0a03 	teqne	lr, #12288	; 0x3000
     270:	132e0a03 	teqne	lr, #12288	; 0x3000
     274:	132e0a03 	teqne	lr, #12288	; 0x3000
     278:	142e0b03 	strtne	r0, [lr], #-2819
     27c:	132e0b03 	teqne	lr, #3072	; 0xc00
     280:	132e0b03 	teqne	lr, #3072	; 0xc00
     284:	132e0a03 	teqne	lr, #12288	; 0x3000
     288:	132e0a03 	teqne	lr, #12288	; 0x3000
     28c:	132e0a03 	teqne	lr, #12288	; 0x3000
     290:	132e0a03 	teqne	lr, #12288	; 0x3000
     294:	132e0b03 	teqne	lr, #3072	; 0xc00
     298:	132e0b03 	teqne	lr, #3072	; 0xc00
     29c:	132e0a03 	teqne	lr, #12288	; 0x3000
     2a0:	142e0a03 	strtne	r0, [lr], #-2563
     2a4:	142e0a03 	strtne	r0, [lr], #-2563
     2a8:	142e0a03 	strtne	r0, [lr], #-2563
     2ac:	132e0a03 	teqne	lr, #12288	; 0x3000
     2b0:	132e0a03 	teqne	lr, #12288	; 0x3000
     2b4:	132e0a03 	teqne	lr, #12288	; 0x3000
     2b8:	132e0a03 	teqne	lr, #12288	; 0x3000
     2bc:	132e0a03 	teqne	lr, #12288	; 0x3000
     2c0:	132e0a03 	teqne	lr, #12288	; 0x3000
     2c4:	132e0a03 	teqne	lr, #12288	; 0x3000
     2c8:	132e0a03 	teqne	lr, #12288	; 0x3000
     2cc:	142e0a03 	strtne	r0, [lr], #-2563
     2d0:	142e0a03 	strtne	r0, [lr], #-2563
     2d4:	132e0a03 	teqne	lr, #12288	; 0x3000
     2d8:	132e0a03 	teqne	lr, #12288	; 0x3000
     2dc:	132e0a03 	teqne	lr, #12288	; 0x3000
     2e0:	132e0b03 	teqne	lr, #3072	; 0xc00
     2e4:	132e0b03 	teqne	lr, #3072	; 0xc00
     2e8:	132e0a03 	teqne	lr, #12288	; 0x3000
     2ec:	132e0a03 	teqne	lr, #12288	; 0x3000
     2f0:	132e0a03 	teqne	lr, #12288	; 0x3000
     2f4:	132e0a03 	teqne	lr, #12288	; 0x3000
     2f8:	142e0a03 	strtne	r0, [lr], #-2563
     2fc:	132e0a03 	teqne	lr, #12288	; 0x3000
     300:	132e0a03 	teqne	lr, #12288	; 0x3000
     304:	152e0a03 	strne	r0, [lr, #-2563]!
     308:	132e0a03 	teqne	lr, #12288	; 0x3000
     30c:	132e0a03 	teqne	lr, #12288	; 0x3000
     310:	132e0a03 	teqne	lr, #12288	; 0x3000
     314:	132e0a03 	teqne	lr, #12288	; 0x3000
     318:	132e0a03 	teqne	lr, #12288	; 0x3000
     31c:	132e0b03 	teqne	lr, #3072	; 0xc00
     320:	2e7ad803 	cdpcs	8, 7, cr13, cr10, cr3, {0}
     324:	02022f2f 	andeq	r2, r2, #188	; 0xbc
     328:	1f010100 	svcne	0x00010100
     32c:	02000002 	andeq	r0, r0, #2	; 0x2
     330:	00008800 	andeq	r8, r0, r0, lsl #16
     334:	fb010200 	blx	40b3e <__Stack_Size+0x4073e>
     338:	01000d0e 	tsteq	r0, lr, lsl #26
     33c:	00010101 	andeq	r0, r1, r1, lsl #2
     340:	00010000 	andeq	r0, r1, r0
     344:	74730100 	ldrbtvc	r0, [r3], #-256
     348:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     34c:	5f783031 	svcpl	0x00783031
     350:	2f62696c 	svccs	0x0062696c
     354:	00637273 	rsbeq	r7, r3, r3, ror r2
     358:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     35c:	30316632 	eorscc	r6, r1, r2, lsr r6
     360:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     364:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
     368:	73000063 	movwvc	r0, #99	; 0x63
     36c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     370:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     374:	616c665f 	cmnvs	ip, pc, asr r6
     378:	632e6873 	teqvs	lr, #7536640	; 0x730000
     37c:	00000100 	andeq	r0, r0, r0, lsl #2
     380:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     384:	30316632 	eorscc	r6, r1, r2, lsr r6
     388:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     38c:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     390:	00000200 	andeq	r0, r0, r0, lsl #4
     394:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     398:	30316632 	eorscc	r6, r1, r2, lsr r6
     39c:	616d5f78 	smcvs	54776
     3a0:	00682e70 	rsbeq	r2, r8, r0, ror lr
     3a4:	73000002 	movwvc	r0, #2	; 0x2
     3a8:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     3ac:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     3b0:	616c665f 	cmnvs	ip, pc, asr r6
     3b4:	682e6873 	stmdavs	lr!, {r0, r1, r4, r5, r6, fp, sp, lr}
     3b8:	00000200 	andeq	r0, r0, r0, lsl #4
     3bc:	02050000 	andeq	r0, r5, #0	; 0x0
     3c0:	08003458 	stmdaeq	r0, {r3, r4, r6, sl, ip, sp}
     3c4:	0100d603 	tsteq	r0, r3, lsl #12
     3c8:	033d5917 	teqeq	sp, #376832	; 0x5c000
     3cc:	59174a0d 	ldmdbpl	r7, {r0, r2, r3, r9, fp, lr}
     3d0:	4a0d033d 	bmi	3410cc <__Stack_Size+0x340ccc>
     3d4:	033d5917 	teqeq	sp, #376832	; 0x5c000
     3d8:	3d144a0b 	fldscc	s8, [r4, #-44]
     3dc:	660a033d 	undefined
     3e0:	f5035914 	undefined instruction 0xf5035914
     3e4:	3d143c03 	ldccc	12, cr3, [r4, #-12]
     3e8:	143c0a03 	ldrtne	r0, [ip], #-2563
     3ec:	4a0b032f 	bmi	2c10b0 <__Stack_Size+0x2c0cb0>
     3f0:	58090315 	stmdapl	r9, {r0, r2, r4, r8, r9}
     3f4:	153c0a03 	ldrne	r0, [ip, #-2563]!
     3f8:	03580a03 	cmpeq	r8, #12288	; 0x3000
     3fc:	23173c0e 	tstcs	r7, #3584	; 0xe00
     400:	10035a5d 	andne	r5, r3, sp, asr sl
     404:	0330183c 	teqeq	r0, #3932160	; 0x3c0000
     408:	0b03580b 	bleq	d643c <__Stack_Size+0xd603c>
     40c:	3c0f0366 	stccc	3, cr0, [pc], {102}
     410:	0b032f17 	bleq	cc074 <__Stack_Size+0xcbc74>
     414:	6c7a154a 	cfldr64vs	mvdx1, [sl], #-296
     418:	03660c03 	cmneq	r6, #768	; 0x300
     41c:	5c033c0c 	stcpl	12, cr3, [r3], {12}
     420:	20240320 	eorcs	r0, r4, r0, lsr #6
     424:	03205c03 	teqeq	r0, #768	; 0x300
     428:	5c032024 	stcpl	0, cr2, [r3], {36}
     42c:	036c5e20 	cmneq	ip, #512	; 0x200
     430:	03227438 	teqeq	r2, #939524096	; 0x38000000
     434:	6c907fba 	ldcvs	15, cr7, [r0], {186}
     438:	6623036c 	strtvs	r0, [r3], -ip, ror #6
     43c:	032e5103 	teqeq	lr, #-1073741824	; 0xc0000000
     440:	222000c4 	eorcs	r0, r0, #196	; 0xc4
     444:	a52e6503 	strge	r6, [lr, #-1283]!
     448:	7def0343 	stclvc	3, cr0, [pc, #268]!
     44c:	2009034a 	andcs	r0, r9, sl, asr #6
     450:	032e7703 	teqeq	lr, #786432	; 0xc0000
     454:	03212009 	teqeq	r1, #9	; 0x9
     458:	0a032e76 	beq	cbe38 <__Stack_Size+0xcba38>
     45c:	73032320 	movwvc	r2, #13088	; 0x3320
     460:	2e0d0320 	cdpcs	3, 0, cr0, cr13, cr0, {1}
     464:	1e223130 	mcrne	1, 1, r3, cr2, cr0, {1}
     468:	233e773e 	teqcs	lr, #16252928	; 0xf80000
     46c:	7f8e036b 	svcvc	0x008e036b
     470:	314c4282 	smlalbbcc	r4, ip, r2, r2
     474:	2e790335 	mrccs	3, 3, r0, cr9, cr5, {1}
     478:	1c243e21 	stcne	14, cr3, [r4], #-132
     47c:	31304d3d 	teqcc	r0, sp, lsr sp
     480:	4e224c69 	cdpmi	12, 2, cr4, cr2, cr9, {3}
     484:	87314c4e 	ldrhi	r4, [r1, -lr, asr #24]!
     488:	f8036c23 	undefined instruction 0xf8036c23
     48c:	0320827e 	teqeq	r0, #-536870905	; 0xe0000007
     490:	313e200f 	teqcc	lr, pc
     494:	032e7403 	teqeq	lr, #50331648	; 0x3000000
     498:	3d212e0c 	stccc	14, cr2, [r1, #-48]!
     49c:	03207303 	teqeq	r0, #201326592	; 0xc000000
     4a0:	1e30200d 	cdpne	0, 3, cr2, cr0, cr13, {0}
     4a4:	1d232222 	sfmne	f2, 4, [r3, #-136]!
     4a8:	2e6d0323 	cdpcs	3, 6, cr0, cr13, cr3, {1}
     4ac:	a03c1503 	eorsge	r1, ip, r3, lsl #10
     4b0:	03231d23 	teqeq	r3, #2240	; 0x8c0
     4b4:	1c032e67 	stcne	14, cr2, [r3], {103}
     4b8:	1d23a03c 	stcne	0, cr10, [r3, #-240]!
     4bc:	2e600323 	cdpcs	3, 6, cr0, cr0, cr3, {1}
     4c0:	a0202303 	eorge	r2, r0, r3, lsl #6
     4c4:	31231d23 	teqcc	r3, r3, lsr #26
     4c8:	90038723 	andls	r8, r3, r3, lsr #14
     4cc:	2620827f 	undefined
     4d0:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
     4d4:	03363130 	teqeq	r6, #12	; 0xc
     4d8:	3f212078 	svccc	0x00212078
     4dc:	2330234b 	teqcs	r0, #738197505	; 0x2c000001
     4e0:	7fbb036b 	svcvc	0x00bb036b
     4e4:	03272058 	teqeq	r7, #88	; 0x58
     4e8:	30272079 	eorcc	r2, r7, r9, ror r0
     4ec:	4c1c2431 	cfldrsmi	mvf2, [ip], {49}
     4f0:	6b233022 	blvs	8cc580 <__Stack_Size+0x8cc180>
     4f4:	4a7fab03 	bmi	1feb108 <__Stack_Size+0x1fead08>
     4f8:	79032720 	stmdbvc	r3, {r5, r8, r9, sl, sp}
     4fc:	32302720 	eorscc	r2, r0, #8388608	; 0x800000
     500:	314c1b25 	cmpcc	ip, r5, lsr #22
     504:	03313230 	teqeq	r1, #3	; 0x3
     508:	6c233c0a 	stcvs	12, cr3, [r3], #-40
     50c:	4a7f9303 	bmi	1fe5120 <__Stack_Size+0x1fe4d20>
     510:	36314c24 	ldrtcc	r4, [r1], -r4, lsr #24
     514:	212e7803 	teqcs	lr, r3, lsl #16
     518:	3d1c243f 	cfldrscc	mvf2, [ip, #-252]
     51c:	6931304d 	ldmdbvs	r1!, {r0, r2, r3, r6, ip, sp}
     520:	233f2b23 	teqcs	pc, #35840	; 0x8c00
     524:	0a03231d 	beq	c91a0 <__Stack_Size+0xc8da0>
     528:	036c232e 	cmneq	ip, #-1207959552	; 0xb8000000
     52c:	24827fab 	strcs	r7, [r2], #4011
     530:	234b314c 	movtcs	r3, #45388	; 0xb14c
     534:	233e3f2b 	teqcs	lr, #172	; 0xac
     538:	3c42036b 	mcrrcc	3, 6, r0, r2, cr11
     53c:	25314c43 	ldrcs	r4, [r1, #-3139]!
     540:	3d1b2529 	cfldr32cc	mvfx2, [fp, #-164]
     544:	23304d21 	teqcs	r0, #2112	; 0x840
     548:	0005026b 	andeq	r0, r5, fp, ror #4
     54c:	01740101 	cmneq	r4, r1, lsl #2
     550:	00020000 	andeq	r0, r2, r0
     554:	00000086 	andeq	r0, r0, r6, lsl #1
     558:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     55c:	0101000d 	tsteq	r1, sp
     560:	00000101 	andeq	r0, r0, r1, lsl #2
     564:	00000100 	andeq	r0, r0, r0, lsl #2
     568:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     56c:	31663233 	cmncc	r6, r3, lsr r2
     570:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     574:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
     578:	73006372 	movwvc	r6, #882	; 0x372
     57c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     580:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     584:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     588:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     58c:	74730000 	ldrbtvc	r0, [r3]
     590:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     594:	5f783031 	svcpl	0x00783031
     598:	6f697067 	svcvs	0x00697067
     59c:	0100632e 	tsteq	r0, lr, lsr #6
     5a0:	74730000 	ldrbtvc	r0, [r3]
     5a4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     5a8:	5f783031 	svcpl	0x00783031
     5ac:	65707974 	ldrbvs	r7, [r0, #-2420]!
     5b0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     5b4:	74730000 	ldrbtvc	r0, [r3]
     5b8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     5bc:	5f783031 	svcpl	0x00783031
     5c0:	2e70616d 	rpwcssz	f6, f0, #5.0
     5c4:	00020068 	andeq	r0, r2, r8, rrx
     5c8:	6d747300 	ldclvs	3, cr7, [r4]
     5cc:	31663233 	cmncc	r6, r3, lsr r2
     5d0:	675f7830 	smmlarvs	pc, r0, r8, r7
     5d4:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
     5d8:	00020068 	andeq	r0, r2, r8, rrx
     5dc:	05000000 	streq	r0, [r0]
     5e0:	00398002 	eorseq	r8, r9, r2
     5e4:	00fc0308 	rscseq	r0, ip, r8, lsl #6
     5e8:	200a0301 	andcs	r0, sl, r1, lsl #6
     5ec:	03200c03 	teqeq	r0, #768	; 0x300
     5f0:	03332076 	teqeq	r3, #118	; 0x76
     5f4:	33352e79 	teqcc	r5, #1936	; 0x790
     5f8:	032e6a03 	teqeq	lr, #12288	; 0x3000
     5fc:	32222016 	eorcc	r2, r2, #22	; 0x16
     600:	2132303e 	teqcs	r2, lr, lsr r0
     604:	23312b31 	teqcs	r1, #50176	; 0xc400
     608:	28207a03 	stmdacs	r0!, {r0, r1, r9, fp, ip, sp, lr}
     60c:	0322273a 	teqeq	r2, #15204352	; 0xe80000
     610:	1f033c66 	svcne	0x00033c66
     614:	3130253c 	teqcc	r0, ip, lsr r5
     618:	21322f5a 	teqcs	r2, sl, asr pc
     61c:	23312b31 	teqcs	r1, #50176	; 0xc400
     620:	28207a03 	stmdacs	r0!, {r0, r1, r9, fp, ip, sp, lr}
     624:	0322253a 	teqeq	r2, #243269632	; 0xe800000
     628:	1b033c69 	blne	cf7d4 <__Stack_Size+0xcf3d4>
     62c:	0b03223c 	bleq	c8f24 <__Stack_Size+0xc8b24>
     630:	2f3d143c 	svccs	0x003d143c
     634:	200c032f 	andcs	r0, ip, pc, lsr #6
     638:	58090319 	stmdapl	r9, {r0, r3, r4, r8, r9}
     63c:	16200a03 	strtne	r0, [r0], -r3, lsl #20
     640:	2e0c032f 	cdpcs	3, 0, cr0, cr12, cr15, {1}
     644:	58090319 	stmdapl	r9, {r0, r3, r4, r8, r9}
     648:	16200a03 	strtne	r0, [r0], -r3, lsl #20
     64c:	2e0d032f 	cdpcs	3, 0, cr0, cr13, cr15, {1}
     650:	0d032117 	stfeqs	f2, [r3, #-92]
     654:	03211720 	teqeq	r1, #8388608	; 0x800000
     658:	22182010 	andscs	r2, r8, #16	; 0x10
     65c:	0c032232 	sfmeq	f2, 4, [r3], {50}
     660:	0321162e 	teqeq	r1, #48234496	; 0x2e00000
     664:	3019200d 	andscc	r2, r9, sp
     668:	22222222 	eorcs	r2, r2, #536870914	; 0x20000002
     66c:	200f0321 	andcs	r0, pc, r1, lsr #6
     670:	312c3019 	teqcc	ip, r9, lsl r0
     674:	2f22302d 	svccs	0x0022302d
     678:	163c0b03 	ldrtne	r0, [ip], -r3, lsl #22
     67c:	4a26032f 	bmi	981340 <__Stack_Size+0x980f40>
     680:	2c200c03 	stccs	12, cr0, [r0], #-12
     684:	27207603 	strcs	r7, [r0, -r3, lsl #12]!
     688:	33292223 	teqcc	r9, #805306370	; 0x30000002
     68c:	4c2f1f23 	stcmi	15, cr1, [pc], #-140
     690:	31676b3f 	cmncc	r7, pc, lsr fp
     694:	032f5b22 	teqeq	pc, #34816	; 0x8800
     698:	3e274a0f 	fmulscc	s8, s14, s30
     69c:	599f1f2f 	ldmibpl	pc, {r0, r1, r2, r3, r5, r8, r9, sl, fp, ip}
     6a0:	4a7ca703 	bmi	1f2a2b4 <__Stack_Size+0x1f29eb4>
     6a4:	2f212d21 	svccs	0x00212d21
     6a8:	2e45034b 	cdpcs	3, 4, cr0, cr5, cr11, {2}
     6ac:	1c241c24 	stcne	12, cr1, [r4], #-144
     6b0:	4ba10824 	blmi	fe842748 <SCS_BASE+0x1e834748>
     6b4:	4b324b32 	blmi	c93384 <__Stack_Size+0xc92f84>
     6b8:	4b324b32 	blmi	c93388 <__Stack_Size+0xc92f88>
     6bc:	59324b32 	ldmdbpl	r2!, {r1, r4, r5, r8, r9, fp, lr}
     6c0:	0006025e 	andeq	r0, r6, lr, asr r2
     6c4:	01a60101 	undefined instruction 0x01a60101
     6c8:	00020000 	andeq	r0, r2, r0
     6cc:	00000086 	andeq	r0, r0, r6, lsl #1
     6d0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     6d4:	0101000d 	tsteq	r1, sp
     6d8:	00000101 	andeq	r0, r0, r1, lsl #2
     6dc:	00000100 	andeq	r0, r0, r0, lsl #2
     6e0:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     6e4:	31663233 	cmncc	r6, r3, lsr r2
     6e8:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     6ec:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
     6f0:	73006372 	movwvc	r6, #882	; 0x372
     6f4:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     6f8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     6fc:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     700:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     704:	74730000 	ldrbtvc	r0, [r3]
     708:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     70c:	5f783031 	svcpl	0x00783031
     710:	6369766e 	cmnvs	r9, #115343360	; 0x6e00000
     714:	0100632e 	tsteq	r0, lr, lsr #6
     718:	74730000 	ldrbtvc	r0, [r3]
     71c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     720:	5f783031 	svcpl	0x00783031
     724:	65707974 	ldrbvs	r7, [r0, #-2420]!
     728:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     72c:	74730000 	ldrbtvc	r0, [r3]
     730:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     734:	5f783031 	svcpl	0x00783031
     738:	2e70616d 	rpwcssz	f6, f0, #5.0
     73c:	00020068 	andeq	r0, r2, r8, rrx
     740:	6d747300 	ldclvs	3, cr7, [r4]
     744:	31663233 	cmncc	r6, r3, lsr r2
     748:	6e5f7830 	mrcvs	8, 2, r7, cr15, cr0, {1}
     74c:	2e636976 	mcrcs	9, 3, r6, cr3, cr6, {3}
     750:	00020068 	andeq	r0, r2, r8, rrx
     754:	05000000 	streq	r0, [r0]
     758:	003c0802 	eorseq	r0, ip, r2, lsl #16
     75c:	01240308 	teqeq	r4, r8, lsl #6
     760:	352d3d15 	strcc	r3, [sp, #-3349]!
     764:	2f207a03 	svccs	0x00207a03
     768:	241c322f 	ldrcs	r3, [ip], #-559
     76c:	242c302c 	strtcs	r3, [ip], #-44
     770:	153c0b03 	ldrne	r0, [ip, #-2819]!
     774:	2f211e3e 	svccs	0x00211e3e
     778:	3e232121 	sufccsp	f2, f3, f1
     77c:	21212f21 	teqcs	r1, r1, lsr #30
     780:	17661603 	strbne	r1, [r6, -r3, lsl #12]!
     784:	4a0d0367 	bmi	341528 <__Stack_Size+0x341128>
     788:	3f200a03 	svccc	0x00200a03
     78c:	0a031c24 	beq	c7824 <__Stack_Size+0xc7424>
     790:	20760320 	rsbscs	r0, r6, r0, lsr #6
     794:	2b3f3d5c 	blcs	fcfd0c <__Stack_Size+0xfcf90c>
     798:	2b241f31 	blcs	908464 <__Stack_Size+0x908064>
     79c:	301e6a22 	andscc	r6, lr, r2, lsr #20
     7a0:	93883122 	orrls	r3, r8, #-2147483640	; 0x80000008
     7a4:	14580b03 	ldrbne	r0, [r8], #-2819
     7a8:	2121212f 	teqcs	r1, pc, lsr #2
     7ac:	2000d703 	andcs	sp, r0, r3, lsl #14
     7b0:	0b036713 	bleq	da404 <__Stack_Size+0xda004>
     7b4:	034c1966 	movteq	r1, #51558	; 0xc966
     7b8:	0a039e09 	beq	e7fe4 <__Stack_Size+0xe7be4>
     7bc:	032f164a 	teqeq	pc, #77594624	; 0x4a00000
     7c0:	91164a0a 	tstls	r6, sl, lsl #20
     7c4:	133c0b03 	teqne	ip, #3072	; 0xc00
     7c8:	4a0b034b 	bmi	2c14fc <__Stack_Size+0x2c10fc>
     7cc:	09034c19 	stmdbeq	r3, {r0, r3, r4, sl, fp, lr}
     7d0:	4a0b039e 	bmi	2c1650 <__Stack_Size+0x2c1250>
     7d4:	10032f13 	andne	r2, r3, r3, lsl pc
     7d8:	0375174a 	cmneq	r5, #19398656	; 0x1280000
     7dc:	3d133c0a 	ldccc	12, cr3, [r3, #-40]
     7e0:	13580a03 	cmpne	r8, #12288	; 0x3000
     7e4:	5811033d 	ldmdapl	r1, {r0, r2, r3, r4, r5, r8, r9}
     7e8:	5a5c2217 	bpl	170904c <__Stack_Size+0x1708c4c>
     7ec:	193c1103 	ldmdbne	ip!, {r0, r1, r8, ip}
     7f0:	5a5c225a 	bpl	1709160 <__Stack_Size+0x1708d60>
     7f4:	034a1803 	movteq	r1, #43011	; 0xa803
     7f8:	4b782009 	blmi	1e08824 <__Stack_Size+0x1e08424>
     7fc:	033f3169 	teqeq	pc, #1073741850	; 0x4000001a
     800:	03282e79 	teqeq	r8, #1936	; 0x790
     804:	7525207a 	strvc	r2, [r5, #-122]!
     808:	4a100359 	bmi	401574 <__Stack_Size+0x401174>
     80c:	034c2319 	movteq	r2, #49945	; 0xc319
     810:	0f03820b 	svceq	0x0003820b
     814:	0109033c 	tsteq	r9, ip, lsr r3
     818:	4a0e0383 	bmi	38162c <__Stack_Size+0x38122c>
     81c:	91010903 	tstls	r1, r3, lsl #18
     820:	033c1403 	teqeq	ip, #50331648	; 0x3000000
     824:	035a010a 	cmpeq	sl, #-2147483646	; 0x80000002
     828:	1103820b 	tstne	r3, fp, lsl #4
     82c:	3e23193c 	mcrcc	9, 1, r1, cr3, cr12, {1}
     830:	7803303e 	stmdavc	r3, {r1, r2, r3, r4, r5, ip, sp}
     834:	78032858 	stmdavc	r3, {r3, r4, r6, fp, sp}
     838:	224b3620 	subcs	r3, fp, #33554432	; 0x2000000
     83c:	03314140 	teqeq	r1, #16	; 0x10
     840:	09033c0f 	stmdbeq	r3, {r0, r1, r2, r3, sl, fp, ip, sp}
     844:	1c323001 	ldcne	0, cr3, [r2], #-4
     848:	8d032324 	stchi	3, cr2, [r3, #-144]
     84c:	2f2f3c7c 	svccs	0x002f3c7c
     850:	242e6f03 	strtcs	r6, [lr], #-3843
     854:	032f241c 	teqeq	pc, #469762048	; 0x1c000000
     858:	2f2f3c6d 	svccs	0x002f3c6d
     85c:	2f2e7203 	svccs	0x002e7203
     860:	2e72032f 	cdpcs	3, 7, cr0, cr2, cr15, {1}
     864:	72032f2f 	andvc	r2, r3, #188	; 0xbc
     868:	022f2f2e 	eoreq	r2, pc, #184	; 0xb8
     86c:	01010002 	tsteq	r1, r2
     870:	000000d2 	ldrdeq	r0, [r0], -r2
     874:	00710002 	rsbseq	r0, r1, r2
     878:	01020000 	tsteq	r2, r0
     87c:	000d0efb 	strdeq	r0, [sp], -fp
     880:	01010101 	tsteq	r1, r1, lsl #2
     884:	01000000 	tsteq	r0, r0
     888:	73010000 	movwvc	r0, #4096	; 0x1000
     88c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     890:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     894:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     898:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     89c:	6d747300 	ldclvs	3, cr7, [r4]
     8a0:	31663233 	cmncc	r6, r3, lsr r2
     8a4:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     8a8:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}
     8ac:	0000636e 	andeq	r6, r0, lr, ror #6
     8b0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     8b4:	30316632 	eorscc	r6, r1, r2, lsr r6
     8b8:	77705f78 	undefined
     8bc:	00632e72 	rsbeq	r2, r3, r2, ror lr
     8c0:	73000001 	movwvc	r0, #1	; 0x1
     8c4:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     8c8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     8cc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     8d0:	00682e65 	rsbeq	r2, r8, r5, ror #28
     8d4:	73000002 	movwvc	r0, #2	; 0x2
     8d8:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     8dc:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     8e0:	70616d5f 	rsbvc	r6, r1, pc, asr sp
     8e4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     8e8:	00000000 	andeq	r0, r0, r0
     8ec:	3f8c0205 	svccc	0x008c0205
     8f0:	d1030800 	tstle	r3, r0, lsl #16
     8f4:	2f160100 	svccs	0x00160100
     8f8:	164a0b03 	strbne	r0, [sl], -r3, lsl #22
     8fc:	4a14032f 	bmi	5015c0 <__Stack_Size+0x5011c0>
     900:	23313118 	teqcs	r1, #6	; 0x6
     904:	4a0b0321 	bmi	2c1590 <__Stack_Size+0x2c1190>
     908:	d8032f16 	stmdale	r3, {r1, r2, r4, r8, r9, sl, fp, sp}
     90c:	03184a00 	tsteq	r8, #0	; 0x0
     910:	0d03660b 	stceq	6, cr6, [r3, #-44]
     914:	0359164a 	cmpeq	r9, #77594624	; 0x4a00000
     918:	1e143c43 	cdpne	12, 1, cr3, cr4, cr3, {2}
     91c:	3f221e22 	svccc	0x00221e22
     920:	032f934d 	teqeq	pc, #872415233	; 0x34000001
     924:	031a4a49 	tsteq	sl, #299008	; 0x49000
     928:	03282078 	teqeq	r8, #120	; 0x78
     92c:	0b032078 	bleq	c8b14 <__Stack_Size+0xc8714>
     930:	23233120 	teqcs	r3, #8	; 0x8
     934:	233f1d69 	teqcs	pc, #6720	; 0x1a40
     938:	f5033041 	undefined instruction 0xf5033041
     93c:	67214a7e 	undefined
     940:	0001024b 	andeq	r0, r1, fp, asr #4
     944:	01b40101 	undefined instruction 0x01b40101
     948:	00020000 	andeq	r0, r2, r0
     94c:	00000084 	andeq	r0, r0, r4, lsl #1
     950:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     954:	0101000d 	tsteq	r1, sp
     958:	00000101 	andeq	r0, r0, r1, lsl #2
     95c:	00000100 	andeq	r0, r0, r0, lsl #2
     960:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     964:	31663233 	cmncc	r6, r3, lsr r2
     968:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     96c:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
     970:	73006372 	movwvc	r6, #882	; 0x372
     974:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     978:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     97c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     980:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     984:	74730000 	ldrbtvc	r0, [r3]
     988:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     98c:	5f783031 	svcpl	0x00783031
     990:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     994:	00010063 	andeq	r0, r1, r3, rrx
     998:	6d747300 	ldclvs	3, cr7, [r4]
     99c:	31663233 	cmncc	r6, r3, lsr r2
     9a0:	745f7830 	ldrbvc	r7, [pc], #2096	; 9a8 <__Stack_Size+0x5a8>
     9a4:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     9a8:	00020068 	andeq	r0, r2, r8, rrx
     9ac:	6d747300 	ldclvs	3, cr7, [r4]
     9b0:	31663233 	cmncc	r6, r3, lsr r2
     9b4:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]
     9b8:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
     9bc:	00000200 	andeq	r0, r0, r0, lsl #4
     9c0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     9c4:	30316632 	eorscc	r6, r1, r2, lsr r6
     9c8:	63725f78 	cmnvs	r2, #480	; 0x1e0
     9cc:	00682e63 	rsbeq	r2, r8, r3, ror #28
     9d0:	00000002 	andeq	r0, r0, r2
     9d4:	6c020500 	cfstr32vs	mvfx0, [r2], {0}
     9d8:	03080040 	movweq	r0, #32832	; 0x8040
     9dc:	140100fc 	strne	r0, [r1], #-252
     9e0:	4d695b5b 	fstmdbxmi	r9!, {d21-d65}
     9e4:	11032f4d 	tstne	r3, sp, asr #30
     9e8:	03261866 	teqeq	r6, #6684672	; 0x660000
     9ec:	4d4d2e7a 	stclmi	14, cr2, [sp, #-488]
     9f0:	0350415c 	cmpeq	r0, #23	; 0x17
     9f4:	03213c0c 	teqeq	r1, #3072	; 0xc00
     9f8:	032006a3 	teqeq	r0, #170917888	; 0xa300000
     9fc:	032079dd 	teqeq	r0, #3620864	; 0x374000
     a00:	032006a3 	teqeq	r0, #170917888	; 0xa300000
     a04:	2f2079e5 	svccs	0x002079e5
     a08:	9a03212d 	bls	c8ec4 <__Stack_Size+0xc8ac4>
     a0c:	f3035806 	vsub.i8	d5, d3, d6
     a10:	0c035879 	stceq	8, cr5, [r3], {121}
     a14:	3131184a 	teqcc	r1, sl, asr #16
     a18:	0d032131 	stfeqs	f2, [r3, #-196]
     a1c:	032f163c 	teqeq	pc, #62914560	; 0x3c00000
     a20:	34194a14 	ldrcc	r4, [r9], #-2580
     a24:	0c03214d 	stfeqs	f2, [r3], {77}
     a28:	032f163c 	teqeq	pc, #62914560	; 0x3c00000
     a2c:	31184a0e 	tstcc	r8, lr, lsl #20
     a30:	03212331 	teqeq	r1, #-1006632960	; 0xc4000000
     a34:	4b134a0e 	blmi	4d3274 <__Stack_Size+0x4d2e74>
     a38:	184a1503 	stmdane	sl, {r0, r1, r8, sl, ip}^
     a3c:	21233131 	teqcs	r3, r1, lsr r1
     a40:	184a1103 	stmdane	sl, {r0, r1, r8, ip}^
     a44:	21233131 	teqcs	r3, r1, lsr r1
     a48:	184a1103 	stmdane	sl, {r0, r1, r8, ip}^
     a4c:	21313131 	teqcs	r1, r1, lsr r1
     a50:	173c1303 	ldrne	r1, [ip, -r3, lsl #6]!
     a54:	035a5d23 	cmpeq	sl, #2240	; 0x8c0
     a58:	2f163c10 	svccs	0x00163c10
     a5c:	184a1003 	stmdane	sl, {r0, r1, ip}^
     a60:	21233131 	teqcs	r3, r1, lsr r1
     a64:	184a0f03 	stmdane	sl, {r0, r1, r8, r9, sl, fp}^
     a68:	207a0334 	rsbscs	r0, sl, r4, lsr r3
     a6c:	032a2723 	teqeq	sl, #9175040	; 0x8c0000
     a70:	03343c09 	teqeq	r4, #2304	; 0x900
     a74:	2f164a0c 	svccs	0x00164a0c
     a78:	174a1103 	strbne	r1, [sl, -r3, lsl #2]
     a7c:	4a0d034b 	bmi	3417b0 <__Stack_Size+0x3413b0>
     a80:	0b032f16 	bleq	cc6e0 <__Stack_Size+0xcc2e0>
     a84:	241c164a 	ldrcs	r1, [ip], #-1610
     a88:	660c0322 	strvs	r0, [ip], -r2, lsr #6
     a8c:	30224c21 	eorcc	r4, r2, r1, lsr #24
     a90:	7869273a 	stmdavc	r9!, {r1, r3, r4, r5, r8, r9, sl, sp}^
     a94:	7a03267a 	bvc	ca484 <__Stack_Size+0xca084>
     a98:	1b253420 	blne	94db20 <__Stack_Size+0x94d720>
     a9c:	69417733 	stmdbvs	r1, {r0, r1, r4, r5, r8, r9, sl, ip, sp, lr}^
     aa0:	78033641 	stmdavc	r3, {r0, r6, r9, sl, ip, sp}
     aa4:	67413f20 	strbvs	r3, [r1, -r0, lsr #30]
     aa8:	17901503 	ldrne	r1, [r0, r3, lsl #10]
     aac:	035a5c22 	cmpeq	sl, #8704	; 0x2200
     ab0:	22173c14 	andscs	r3, r7, #5120	; 0x1400
     ab4:	15035a5c 	strne	r5, [r3, #-2652]
     ab8:	5c22173c 	stcpl	7, cr1, [r2], #-240
     abc:	3c13035a 	ldccc	3, cr0, [r3], {90}
     ac0:	5a5c2217 	bpl	1709324 <__Stack_Size+0x1708f24>
     ac4:	173c1403 	ldrne	r1, [ip, -r3, lsl #8]!
     ac8:	035a5c22 	cmpeq	sl, #8704	; 0x2200
     acc:	2f163c0b 	svccs	0x00163c0b
     ad0:	164a0b03 	strbne	r0, [sl], -r3, lsl #22
     ad4:	4a10032f 	bmi	401798 <__Stack_Size+0x401398>
     ad8:	16032f17 	undefined
     adc:	0109034a 	tsteq	r9, sl, asr #6
     ae0:	30923022 	addscc	r3, r2, r2, lsr #32
     ae4:	82110394 	andshi	r0, r1, #1342177282	; 0x50000002
     ae8:	143c0d03 	ldrtne	r0, [ip], #-3331
     aec:	3c110359 	ldccc	3, cr0, [r1], {89}
     af0:	660b0319 	undefined
     af4:	184a1103 	stmdane	sl, {r0, r1, r8, ip}^
     af8:	0004022f 	andeq	r0, r4, pc, lsr #4
     afc:	00b90101 	adcseq	r0, r9, r1, lsl #2
     b00:	00020000 	andeq	r0, r2, r0
     b04:	00000075 	andeq	r0, r0, r5, ror r0
     b08:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     b0c:	0101000d 	tsteq	r1, sp
     b10:	00000101 	andeq	r0, r0, r1, lsl #2
     b14:	00000100 	andeq	r0, r0, r0, lsl #2
     b18:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
     b1c:	31663233 	cmncc	r6, r3, lsr r2
     b20:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
     b24:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
     b28:	73006372 	movwvc	r6, #882	; 0x372
     b2c:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     b30:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     b34:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     b38:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     b3c:	74730000 	ldrbtvc	r0, [r3]
     b40:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     b44:	5f783031 	svcpl	0x00783031
     b48:	74737973 	ldrbtvc	r7, [r3], #-2419
     b4c:	2e6b6369 	cdpcs	3, 6, cr6, cr11, cr9, {3}
     b50:	00010063 	andeq	r0, r1, r3, rrx
     b54:	6d747300 	ldclvs	3, cr7, [r4]
     b58:	31663233 	cmncc	r6, r3, lsr r2
     b5c:	745f7830 	ldrbvc	r7, [pc], #2096	; b64 <__Stack_Size+0x764>
     b60:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     b64:	00020068 	andeq	r0, r2, r8, rrx
     b68:	6d747300 	ldclvs	3, cr7, [r4]
     b6c:	31663233 	cmncc	r6, r3, lsr r2
     b70:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]
     b74:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
     b78:	00000200 	andeq	r0, r0, r0, lsl #4
     b7c:	02050000 	andeq	r0, r5, #0	; 0x0
     b80:	08004410 	stmdaeq	r0, {r4, sl, lr}
     b84:	16012b03 	strne	r2, [r1], -r3, lsl #22
     b88:	035a4e30 	cmpeq	sl, #768	; 0x300
     b8c:	2f163c0b 	svccs	0x00163c0b
     b90:	164a0e03 	strbne	r0, [sl], -r3, lsl #28
     b94:	6a3e4c30 	bvs	f93c5c <__Stack_Size+0xf9385c>
     b98:	4a0b033e 	bmi	2c1898 <__Stack_Size+0x2c1498>
     b9c:	5a5c2216 	bpl	17093fc <__Stack_Size+0x1708ffc>
     ba0:	133c0a03 	teqne	ip, #12288	; 0x3000
     ba4:	4a0e032f 	bmi	381868 <__Stack_Size+0x381468>
     ba8:	03010a03 	movweq	r0, #6659	; 0x1a03
     bac:	0a032e76 	beq	cc58c <__Stack_Size+0xcc18c>
     bb0:	03782220 	cmneq	r8, #2	; 0x2
     bb4:	0402580c 	streq	r5, [r2], #-2060
     bb8:	a0010100 	andge	r0, r1, r0, lsl #2
     bbc:	02000000 	andeq	r0, r0, #0	; 0x0
     bc0:	00003900 	andeq	r3, r0, r0, lsl #18
     bc4:	fb010200 	blx	413ce <__Stack_Size+0x40fce>
     bc8:	01000d0e 	tsteq	r0, lr, lsl #26
     bcc:	00010101 	andeq	r0, r1, r1, lsl #2
     bd0:	00010000 	andeq	r0, r1, r0
     bd4:	74730100 	ldrbtvc	r0, [r3], #-256
     bd8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     bdc:	5f783031 	svcpl	0x00783031
     be0:	2f62696c 	svccs	0x0062696c
     be4:	00637273 	rsbeq	r7, r3, r3, ror r2
     be8:	726f6300 	rsbvc	r6, pc, #0	; 0x0
     bec:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!
     bf0:	616d5f33 	cmnvs	sp, r3, lsr pc
     bf4:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     bf8:	00010073 	andeq	r0, r1, r3, ror r0
     bfc:	05000000 	streq	r0, [r0]
     c00:	0044b402 	subeq	fp, r4, r2, lsl #8
     c04:	01340308 	teqeq	r4, r8, lsl #6
     c08:	200b0321 	andcs	r0, fp, r1, lsr #6
     c0c:	200b0321 	andcs	r0, fp, r1, lsr #6
     c10:	200b0321 	andcs	r0, fp, r1, lsr #6
     c14:	200b032f 	andcs	r0, fp, pc, lsr #6
     c18:	200b032f 	andcs	r0, fp, pc, lsr #6
     c1c:	200b032f 	andcs	r0, fp, pc, lsr #6
     c20:	200b0321 	andcs	r0, fp, r1, lsr #6
     c24:	200b032f 	andcs	r0, fp, pc, lsr #6
     c28:	0a032f2f 	beq	cc8ec <__Stack_Size+0xcc4ec>
     c2c:	0b032f20 	bleq	cc8b4 <__Stack_Size+0xcc4b4>
     c30:	0b032f20 	bleq	cc8b8 <__Stack_Size+0xcc4b8>
     c34:	0b032f20 	bleq	cc8bc <__Stack_Size+0xcc4bc>
     c38:	0a032f20 	beq	cc8c0 <__Stack_Size+0xcc4c0>
     c3c:	0b032120 	bleq	c90c4 <__Stack_Size+0xc8cc4>
     c40:	0b032120 	bleq	c90c8 <__Stack_Size+0xc8cc8>
     c44:	0b032120 	bleq	c90cc <__Stack_Size+0xc8ccc>
     c48:	0b032120 	bleq	c90d0 <__Stack_Size+0xc8cd0>
     c4c:	0b032f20 	bleq	cc8d4 <__Stack_Size+0xcc4d4>
     c50:	0a032f20 	beq	cc8d8 <__Stack_Size+0xcc4d8>
     c54:	0b032120 	bleq	c90dc <__Stack_Size+0xc8cdc>
     c58:	01022120 	tsteq	r2, r0, lsr #2
     c5c:	5a010100 	bpl	41064 <__Stack_Size+0x40c64>
     c60:	02000000 	andeq	r0, r0, #0	; 0x0
     c64:	00003b00 	andeq	r3, r0, r0, lsl #22
     c68:	fb010200 	blx	41472 <__Stack_Size+0x41072>
     c6c:	01000d0e 	tsteq	r0, lr, lsl #26
     c70:	00010101 	andeq	r0, r1, r1, lsl #2
     c74:	00010000 	andeq	r0, r1, r0
     c78:	74730100 	ldrbtvc	r0, [r3], #-256
     c7c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     c80:	5f783031 	svcpl	0x00783031
     c84:	2f62696c 	svccs	0x0062696c
     c88:	00637273 	rsbeq	r7, r3, r3, ror r2
     c8c:	6d747300 	ldclvs	3, cr7, [r4]
     c90:	31663233 	cmncc	r6, r3, lsr r2
     c94:	765f7830 	undefined
     c98:	6f746365 	svcvs	0x00746365
     c9c:	00632e72 	rsbeq	r2, r3, r2, ror lr
     ca0:	00000001 	andeq	r0, r0, r1
     ca4:	24020500 	strcs	r0, [r2], #-1280
     ca8:	03080045 	movweq	r0, #32837	; 0x8045
     cac:	58010191 	stmdapl	r1, {r0, r4, r7, r8}
     cb0:	60563e27 	subsvs	r3, r6, r7, lsr #28
     cb4:	2f364822 	svccs	0x00364822
     cb8:	01000e02 	tsteq	r0, r2, lsl #28
     cbc:	00007001 	andeq	r7, r0, r1
     cc0:	57000200 	strpl	r0, [r0, -r0, lsl #4]
     cc4:	02000000 	andeq	r0, r0, #0	; 0x0
     cc8:	0d0efb01 	vstreq	d15, [lr, #-4]
     ccc:	01010100 	tsteq	r1, r0, lsl #2
     cd0:	00000001 	andeq	r0, r0, r1
     cd4:	01000001 	tsteq	r0, r1
     cd8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
     cdc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
     ce0:	2f2e2e2f 	svccs	0x002e2e2f
     ce4:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
     ce8:	342d6363 	strtcc	r6, [sp], #-867
     cec:	302e332e 	eorcc	r3, lr, lr, lsr #6
     cf0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     cf4:	2f62696c 	svccs	0x0062696c
     cf8:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
     cfc:	6474732f 	ldrbtvs	r7, [r4], #-815
     d00:	0062696c 	rsbeq	r6, r2, ip, ror #18
     d04:	65746100 	ldrbvs	r6, [r4, #-256]!
     d08:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
     d0c:	00010063 	andeq	r0, r1, r3, rrx
     d10:	65746100 	ldrbvs	r6, [r4, #-256]!
     d14:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
     d18:	00010068 	andeq	r0, r1, r8, rrx
     d1c:	05000000 	streq	r0, [r0]
     d20:	00000002 	andeq	r0, r0, r2
     d24:	013f0300 	teqeq	pc, r0, lsl #6
     d28:	672f2d4b 	strvs	r2, [pc, -fp, asr #26]!
     d2c:	01000602 	tsteq	r0, r2, lsl #12
     d30:	0000eb01 	andeq	lr, r0, r1, lsl #22
     d34:	d0000200 	andle	r0, r0, r0, lsl #4
     d38:	02000000 	andeq	r0, r0, #0	; 0x0
     d3c:	0d0efb01 	vstreq	d15, [lr, #-4]
     d40:	01010100 	tsteq	r1, r0, lsl #2
     d44:	00000001 	andeq	r0, r0, r1
     d48:	01000001 	tsteq	r0, r1
     d4c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
     d50:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
     d54:	2f2e2e2f 	svccs	0x002e2e2f
     d58:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
     d5c:	342d6363 	strtcc	r6, [sp], #-867
     d60:	302e332e 	eorcc	r3, lr, lr, lsr #6
     d64:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     d68:	2f62696c 	svccs	0x0062696c
     d6c:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
     d70:	6474732f 	ldrbtvs	r7, [r4], #-815
     d74:	0062696c 	rsbeq	r6, r2, ip, ror #18
     d78:	772f3a63 	strvc	r3, [pc, -r3, ror #20]!
     d7c:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
     d80:	622f736d 	eorvs	r7, pc, #-1275068415	; 0xb4000001
     d84:	646c6975 	strbtvs	r6, [ip], #-2421
     d88:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     d8c:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
     d90:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
     d94:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     d98:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
     d9c:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}
     da0:	756c636e 	strbvc	r6, [ip, #-878]!
     da4:	732f6564 	teqvc	pc, #419430400	; 0x19000000
     da8:	63007379 	movwvs	r7, #889	; 0x379
     dac:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
     db0:	6d72616e 	ldfvse	f6, [r2, #-440]!
     db4:	75622f73 	strbvc	r2, [r2, #-3955]!
     db8:	2f646c69 	svccs	0x00646c69
     dbc:	2d636367 	stclcs	3, cr6, [r3, #-412]!
     dc0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
     dc4:	63672f64 	cmnvs	r7, #400	; 0x190
     dc8:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
     dcc:	64756c63 	ldrbtvs	r6, [r5], #-3171
     dd0:	65000065 	strvs	r0, [r0, #-101]
     dd4:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
     dd8:	00010063 	andeq	r0, r1, r3, rrx
     ddc:	636f6c00 	cmnvs	pc, #0	; 0x0
     de0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     de4:	5f000002 	svcpl	0x00000002
     de8:	65707974 	ldrbvs	r7, [r0, #-2420]!
     dec:	00682e73 	rsbeq	r2, r8, r3, ror lr
     df0:	73000002 	movwvc	r0, #2	; 0x2
     df4:	65646474 	strbvs	r6, [r4, #-1140]!
     df8:	00682e66 	rsbeq	r2, r8, r6, ror #28
     dfc:	72000003 	andvc	r0, r0, #3	; 0x3
     e00:	746e6565 	strbtvc	r6, [lr], #-1381
     e04:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     e08:	00000000 	andeq	r0, r0, r0
     e0c:	00000205 	andeq	r0, r0, r5, lsl #4
     e10:	3b030000 	blcc	c0e18 <__Stack_Size+0xc0a18>
     e14:	2f2d1301 	svccs	0x002d1301
     e18:	024b8330 	subeq	r8, fp, #-1073741824	; 0xc0000000
     e1c:	01010006 	tsteq	r1, r6
     e20:	000000d7 	ldrdeq	r0, [r0], -r7
     e24:	00d10002 	sbcseq	r0, r1, r2
     e28:	01020000 	tsteq	r2, r0
     e2c:	000d0efb 	strdeq	r0, [sp], -fp
     e30:	01010101 	tsteq	r1, r1, lsl #2
     e34:	01000000 	tsteq	r0, r0
     e38:	63010000 	movwvs	r0, #4096	; 0x1000
     e3c:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
     e40:	6d72616e 	ldfvse	f6, [r2, #-440]!
     e44:	75622f73 	strbvc	r2, [r2, #-3955]!
     e48:	2f646c69 	svccs	0x00646c69
     e4c:	2d636367 	stclcs	3, cr6, [r3, #-412]!
     e50:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
     e54:	656e2f30 	strbvs	r2, [lr, #-3888]!
     e58:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     e5c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     e60:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
     e64:	64756c63 	ldrbtvs	r6, [r5], #-3171
     e68:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     e6c:	3a630073 	bcc	18c1040 <__Stack_Size+0x18c0c40>
     e70:	6e69772f 	cdpvs	7, 6, cr7, cr9, cr15, {1}
     e74:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
     e78:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
     e7c:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
     e80:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
     e84:	646c6975 	strbtvs	r6, [ip], #-2421
     e88:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     e8c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     e90:	6564756c 	strbvs	r7, [r4, #-1388]!
     e94:	2f2e2e00 	svccs	0x002e2e00
     e98:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
     e9c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
     ea0:	2f2e2e2f 	svccs	0x002e2e2f
     ea4:	2d636367 	stclcs	3, cr6, [r3, #-412]!
     ea8:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
     eac:	656e2f30 	strbvs	r2, [lr, #-3888]!
     eb0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
     eb4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
     eb8:	65722f63 	ldrbvs	r2, [r2, #-3939]!
     ebc:	00746e65 	rsbseq	r6, r4, r5, ror #28
     ec0:	636f6c00 	cmnvs	pc, #0	; 0x0
     ec4:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     ec8:	5f000001 	svcpl	0x00000001
     ecc:	65707974 	ldrbvs	r7, [r0, #-2420]!
     ed0:	00682e73 	rsbeq	r2, r8, r3, ror lr
     ed4:	73000001 	movwvc	r0, #1	; 0x1
     ed8:	65646474 	strbvs	r6, [r4, #-1140]!
     edc:	00682e66 	rsbeq	r2, r8, r6, ror #28
     ee0:	72000002 	andvc	r0, r0, #2	; 0x2
     ee4:	746e6565 	strbtvc	r6, [lr], #-1381
     ee8:	0100682e 	tsteq	r0, lr, lsr #16
     eec:	6d690000 	stclvs	0, cr0, [r9]
     ef0:	65727570 	ldrbvs	r7, [r2, #-1392]!
     ef4:	0300632e 	movweq	r6, #814	; 0x32e
     ef8:	a2000000 	andge	r0, r0, #0	; 0x0
     efc:	02000000 	andeq	r0, r0, #0	; 0x0
     f00:	00007a00 	andeq	r7, r0, r0, lsl #20
     f04:	fb010200 	blx	4170e <__Stack_Size+0x4130e>
     f08:	01000d0e 	tsteq	r0, lr, lsl #26
     f0c:	00010101 	andeq	r0, r1, r1, lsl #2
     f10:	00010000 	andeq	r0, r1, r0
     f14:	2e2e0100 	sufcse	f0, f6, f0
     f18:	2f2e2e2f 	svccs	0x002e2e2f
     f1c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
     f20:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
     f24:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     f28:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
     f2c:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
     f30:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     f34:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
     f38:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!
     f3c:	00637369 	rsbeq	r7, r3, r9, ror #6
     f40:	772f3a63 	strvc	r3, [pc, -r3, ror #20]!
     f44:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
     f48:	622f736d 	eorvs	r7, pc, #-1275068415	; 0xb4000001
     f4c:	646c6975 	strbtvs	r6, [ip], #-2421
     f50:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     f54:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
     f58:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
     f5c:	692f6363 	stmdbvs	pc!, {r0, r1, r5, r6, r8, r9, sp, lr}
     f60:	756c636e 	strbvc	r6, [ip, #-878]!
     f64:	00006564 	andeq	r6, r0, r4, ror #10
     f68:	74696e69 	strbtvc	r6, [r9], #-3689
     f6c:	0100632e 	tsteq	r0, lr, lsr #6
     f70:	74730000 	ldrbtvc	r0, [r3]
     f74:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     f78:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     f7c:	00000000 	andeq	r0, r0, r0
     f80:	00000205 	andeq	r0, r0, r5, lsl #4
     f84:	31030000 	tstcc	r3, r0
     f88:	67673201 	strbvs	r3, [r7, -r1, lsl #4]!
     f8c:	032f6965 	teqeq	pc, #1654784	; 0x194000
     f90:	67328265 	ldrvs	r8, [r2, -r5, ror #4]!
     f94:	30696567 	rsbcc	r6, r9, r7, ror #10
     f98:	68656767 	stmdavs	r5!, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}^
     f9c:	01000c02 	tsteq	r0, r2, lsl #24
     fa0:	0000d801 	andeq	sp, r0, r1, lsl #16
     fa4:	7e000200 	cdpvc	2, 0, cr0, cr0, cr0, {0}
     fa8:	02000000 	andeq	r0, r0, #0	; 0x0
     fac:	0d0efb01 	vstreq	d15, [lr, #-4]
     fb0:	01010100 	tsteq	r1, r0, lsl #2
     fb4:	00000001 	andeq	r0, r0, r1
     fb8:	01000001 	tsteq	r0, r1
     fbc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
     fc0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
     fc4:	2f2e2e2f 	svccs	0x002e2e2f
     fc8:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
     fcc:	342d6363 	strtcc	r6, [sp], #-867
     fd0:	302e332e 	eorcc	r3, lr, lr, lsr #6
     fd4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     fd8:	2f62696c 	svccs	0x0062696c
     fdc:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
     fe0:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
     fe4:	00676e69 	rsbeq	r6, r7, r9, ror #28
     fe8:	772f3a63 	strvc	r3, [pc, -r3, ror #20]!
     fec:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
     ff0:	622f736d 	eorvs	r7, pc, #-1275068415	; 0xb4000001
     ff4:	646c6975 	strbtvs	r6, [ip], #-2421
     ff8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
     ffc:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    1000:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    1004:	692f6363 	stmdbvs	pc!, {r0, r1, r5, r6, r8, r9, sp, lr}
    1008:	756c636e 	strbvc	r6, [ip, #-878]!
    100c:	00006564 	andeq	r6, r0, r4, ror #10
    1010:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
    1014:	632e7465 	teqvs	lr, #1694498816	; 0x65000000
    1018:	00000100 	andeq	r0, r0, r0, lsl #2
    101c:	64647473 	strbtvs	r7, [r4], #-1139
    1020:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    1024:	00000200 	andeq	r0, r0, r0, lsl #4
    1028:	02050000 	andeq	r0, r5, #0	; 0x0
    102c:	00000000 	andeq	r0, r0, r0
    1030:	03012e03 	movweq	r2, #7683	; 0x1e03
    1034:	6e030112 	mcrvs	1, 0, r0, cr3, cr2, {0}
    1038:	2e0b032e 	cdpcs	3, 0, cr0, cr11, cr14, {1}
    103c:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    1040:	03312e0f 	teqeq	r1, #240	; 0xf0
    1044:	76036613 	undefined
    1048:	09032f2e 	stmdbeq	r3, {r1, r2, r3, r5, r8, r9, sl, fp, sp}
    104c:	7a036c2e 	bvc	dc10c <__Stack_Size+0xdbd0c>
    1050:	2f2f302e 	svccs	0x002f302e
    1054:	2e56032f 	cdpcs	3, 5, cr0, cr6, cr15, {1}
    1058:	032e2503 	teqeq	lr, #12582912	; 0xc00000
    105c:	2e032e5b 	mcrcs	14, 0, r2, cr3, cr11, {2}
    1060:	2e520382 	cdpcs	3, 5, cr0, cr2, cr2, {4}
    1064:	032e2e03 	teqeq	lr, #48	; 0x30
    1068:	0b032e77 	bleq	cca4c <__Stack_Size+0xcc64c>
    106c:	5203482e 	andpl	r4, r3, #3014656	; 0x2e0000
    1070:	9e340366 	cdpls	3, 3, cr0, cr4, cr6, {3}
    1074:	51488431 	cmppl	r8, r1, lsr r4
    1078:	01000602 	tsteq	r0, r2, lsl #12
    107c:	00012301 	andeq	r2, r1, r1, lsl #6
    1080:	e0000200 	and	r0, r0, r0, lsl #4
    1084:	02000000 	andeq	r0, r0, #0	; 0x0
    1088:	0d0efb01 	vstreq	d15, [lr, #-4]
    108c:	01010100 	tsteq	r1, r0, lsl #2
    1090:	00000001 	andeq	r0, r0, r1
    1094:	01000001 	tsteq	r0, r1
    1098:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    109c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    10a0:	2f2e2e2f 	svccs	0x002e2e2f
    10a4:	672f2e2e 	strvs	r2, [pc, -lr, lsr #28]!
    10a8:	342d6363 	strtcc	r6, [sp], #-867
    10ac:	302e332e 	eorcc	r3, lr, lr, lsr #6
    10b0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    10b4:	2f62696c 	svccs	0x0062696c
    10b8:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    10bc:	6474732f 	ldrbtvs	r7, [r4], #-815
    10c0:	0062696c 	rsbeq	r6, r2, ip, ror #18
    10c4:	772f3a63 	strvc	r3, [pc, -r3, ror #20]!
    10c8:	72616e69 	rsbvc	r6, r1, #1680	; 0x690
    10cc:	622f736d 	eorvs	r7, pc, #-1275068415	; 0xb4000001
    10d0:	646c6975 	strbtvs	r6, [ip], #-2421
    10d4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    10d8:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    10dc:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    10e0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    10e4:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    10e8:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}
    10ec:	756c636e 	strbvc	r6, [ip, #-878]!
    10f0:	732f6564 	teqvc	pc, #419430400	; 0x19000000
    10f4:	63007379 	movwvs	r7, #889	; 0x379
    10f8:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
    10fc:	6d72616e 	ldfvse	f6, [r2, #-440]!
    1100:	75622f73 	strbvc	r2, [r2, #-3955]!
    1104:	2f646c69 	svccs	0x00646c69
    1108:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    110c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    1110:	63672f64 	cmnvs	r7, #400	; 0x190
    1114:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    1118:	64756c63 	ldrbtvs	r6, [r5], #-3171
    111c:	5f000065 	svcpl	0x00000065
    1120:	6574615f 	ldrbvs	r6, [r4, #-351]!
    1124:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
    1128:	00010063 	andeq	r0, r1, r3, rrx
    112c:	636f6c00 	cmnvs	pc, #0	; 0x0
    1130:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    1134:	5f000002 	svcpl	0x00000002
    1138:	65707974 	ldrbvs	r7, [r0, #-2420]!
    113c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1140:	73000002 	movwvc	r0, #2	; 0x2
    1144:	65646474 	strbvs	r6, [r4, #-1140]!
    1148:	00682e66 	rsbeq	r2, r8, r6, ror #28
    114c:	72000003 	andvc	r0, r0, #3	; 0x3
    1150:	746e6565 	strbtvc	r6, [lr], #-1381
    1154:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1158:	74610000 	strbtvc	r0, [r1]
    115c:	74697865 	strbtvc	r7, [r9], #-2149
    1160:	0100682e 	tsteq	r0, lr, lsr #16
    1164:	00000000 	andeq	r0, r0, r0
    1168:	00000205 	andeq	r0, r0, r5, lsl #4
    116c:	16030000 	strne	r0, [r3], -r0
    1170:	010a0301 	tsteq	sl, r1, lsl #6
    1174:	032e7603 	teqeq	lr, #3145728	; 0x300000
    1178:	2f4b2e0a 	svccs	0x004b2e0a
    117c:	032e7403 	teqeq	lr, #50331648	; 0x3000000
    1180:	2f2d2e0d 	svccs	0x002d2e0d
    1184:	032e7303 	teqeq	lr, #201326592	; 0xc000000
    1188:	1703660d 	strne	r6, [r3, -sp, lsl #12]
    118c:	4a1b034a 	bmi	6c1ebc <__Stack_Size+0x6c1abc>
    1190:	4a7603a3 	bmi	1d82024 <__Stack_Size+0x1d81c24>
    1194:	2d2f2b4c 	vstmdbcs	pc!, {d2-<overflow reg d39>}
    1198:	302f2b32 	eorcc	r2, pc, r2, lsr fp
    119c:	02312d2c 	eorseq	r2, r1, #2816	; 0xb00
    11a0:	01010006 	tsteq	r1, r6
    11a4:	0000011b 	andeq	r0, r0, fp, lsl r1
    11a8:	00d90002 	sbcseq	r0, r9, r2
    11ac:	01020000 	tsteq	r2, r0
    11b0:	000d0efb 	strdeq	r0, [sp], -fp
    11b4:	01010101 	tsteq	r1, r1, lsl #2
    11b8:	01000000 	tsteq	r0, r0
    11bc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    11c0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    11c4:	2f2e2e2f 	svccs	0x002e2e2f
    11c8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    11cc:	63672f2e 	cmnvs	r7, #184	; 0xb8
    11d0:	2e342d63 	cdpcs	13, 3, cr2, cr4, cr3, {3}
    11d4:	2f302e33 	svccs	0x00302e33
    11d8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440
    11dc:	6c2f6269 	sfmvs	f6, 4, [pc], #-420
    11e0:	2f636269 	svccs	0x00636269
    11e4:	6c647473 	cfstrdvs	mvd7, [r4], #-460
    11e8:	63006269 	movwvs	r6, #617	; 0x269
    11ec:	69772f3a 	ldmdbvs	r7!, {r1, r3, r4, r5, r8, r9, sl, fp, sp}^
    11f0:	6d72616e 	ldfvse	f6, [r2, #-440]!
    11f4:	75622f73 	strbvc	r2, [r2, #-3955]!
    11f8:	2f646c69 	svccs	0x00646c69
    11fc:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1200:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    1204:	656e2f30 	strbvs	r2, [lr, #-3888]!
    1208:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    120c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1210:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    1214:	64756c63 	ldrbtvs	r6, [r5], #-3171
    1218:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    121c:	3a630073 	bcc	18c13f0 <__Stack_Size+0x18c0ff0>
    1220:	6e69772f 	cdpvs	7, 6, cr7, cr9, cr15, {1}
    1224:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1228:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    122c:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    1230:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
    1234:	646c6975 	strbtvs	r6, [ip], #-2421
    1238:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    123c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1240:	6564756c 	strbvs	r7, [r4, #-1388]!
    1244:	5f5f0000 	svcpl	0x005f0000
    1248:	6c6c6163 	stfvse	f6, [ip], #-396
    124c:	6574615f 	ldrbvs	r6, [r4, #-351]!
    1250:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
    1254:	00010063 	andeq	r0, r1, r3, rrx
    1258:	636f6c00 	cmnvs	pc, #0	; 0x0
    125c:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    1260:	5f000002 	svcpl	0x00000002
    1264:	65707974 	ldrbvs	r7, [r0, #-2420]!
    1268:	00682e73 	rsbeq	r2, r8, r3, ror lr
    126c:	73000002 	movwvc	r0, #2	; 0x2
    1270:	65646474 	strbvs	r6, [r4, #-1140]!
    1274:	00682e66 	rsbeq	r2, r8, r6, ror #28
    1278:	72000003 	andvc	r0, r0, #3	; 0x3
    127c:	746e6565 	strbtvc	r6, [lr], #-1381
    1280:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1284:	00000000 	andeq	r0, r0, r0
    1288:	00000205 	andeq	r0, r0, r5, lsl #4
    128c:	11030000 	tstne	r3, r0
    1290:	2e0a0301 	cdpcs	3, 0, cr0, cr10, cr1, {0}
    1294:	4a4a7603 	bmi	129eaa8 <__Stack_Size+0x129e6a8>
    1298:	034a2c03 	movteq	r2, #44035	; 0xac03
    129c:	69032e77 	stmdbvs	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    12a0:	03c1512e 	biceq	r5, r1, #-2147483637	; 0x8000000b
    12a4:	3e039e79 	mcrcc	14, 0, r9, cr3, cr9, {3}
    12a8:	664f0366 	strbvs	r0, [pc], -r6, ror #6
    12ac:	304b2f2d 	subcc	r2, fp, sp, lsr #30
    12b0:	31635031 	cmncc	r3, r1, lsr r0
    12b4:	03896730 	orreq	r6, r9, #12582912	; 0xc00000
    12b8:	09039e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, ip, pc}
    12bc:	0a02d14a 	beq	b57ec <__Stack_Size+0xb53ec>
    12c0:	45010100 	strmi	r0, [r1, #-256]
    12c4:	02000000 	andeq	r0, r0, #0	; 0x0
    12c8:	00001f00 	andeq	r1, r0, r0, lsl #30
    12cc:	fb010200 	blx	41ad6 <__Stack_Size+0x416d6>
    12d0:	01000d0e 	tsteq	r0, lr, lsl #26
    12d4:	00010101 	andeq	r0, r1, r1, lsl #2
    12d8:	00010000 	andeq	r0, r1, r0
    12dc:	63000100 	movwvs	r0, #256	; 0x100
    12e0:	2e6e7472 	mcrcs	4, 3, r7, cr14, cr2, {3}
    12e4:	006d7361 	rsbeq	r7, sp, r1, ror #6
    12e8:	00000000 	andeq	r0, r0, r0
    12ec:	00020500 	andeq	r0, r2, r0, lsl #10
    12f0:	03000000 	movweq	r0, #0	; 0x0
    12f4:	020100ce 	andeq	r0, r1, #206	; 0xce
    12f8:	01010006 	tsteq	r1, r6
    12fc:	00020500 	andeq	r0, r2, r0, lsl #10
    1300:	03000000 	movweq	r0, #0	; 0x0
    1304:	020100d2 	andeq	r0, r1, #210	; 0xd2
    1308:	01010006 	tsteq	r1, r6

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 	undefined instruction 0xffffffff
   8:	7c010001 	stcvc	0, cr0, [r1], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
  1c:	00000014 	andeq	r0, r0, r4, lsl r0
  20:	00000014 	andeq	r0, r0, r4, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	08003148 	stmdaeq	r0, {r3, r6, r8, ip, sp}
  2c:	0000002c 	andeq	r0, r0, ip, lsr #32
  30:	8e080e42 	cdphi	14, 0, cr0, cr8, cr2, {2}
  34:	00028401 	andeq	r8, r2, r1, lsl #8
  38:	00000014 	andeq	r0, r0, r4, lsl r0
  3c:	00000000 	andeq	r0, r0, r0
  40:	08003174 	stmdaeq	r0, {r2, r4, r5, r6, r8, ip, sp}
  44:	00000016 	andeq	r0, r0, r6, lsl r0
  48:	46040e42 	strmi	r0, [r4], -r2, asr #28
  4c:	018e080e 	orreq	r0, lr, lr, lsl #16
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	0800318c 	stmdaeq	r0, {r2, r3, r7, r8, ip, sp}
  5c:	0000004c 	andeq	r0, r0, ip, asr #32
  60:	42100e42 	andsmi	r0, r0, #1056	; 0x420
  64:	018e180e 	orreq	r1, lr, lr, lsl #16
  68:	03850286 	orreq	r0, r5, #1610612744	; 0x60000008
  6c:	00000484 	andeq	r0, r0, r4, lsl #9
  70:	00000014 	andeq	r0, r0, r4, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	080031d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, ip, sp}
  7c:	00000014 	andeq	r0, r0, r4, lsl r0
  80:	46040e42 	strmi	r0, [r4], -r2, asr #28
  84:	018e080e 	orreq	r0, lr, lr, lsl #16
  88:	00000014 	andeq	r0, r0, r4, lsl r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	080031ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, ip, sp}
  94:	00000074 	andeq	r0, r0, r4, ror r0
  98:	42040e42 	andmi	r0, r4, #1056	; 0x420
  9c:	018e080e 	orreq	r0, lr, lr, lsl #16
  a0:	00000014 	andeq	r0, r0, r4, lsl r0
  a4:	00000000 	andeq	r0, r0, r0
  a8:	08003260 	stmdaeq	r0, {r5, r6, r9, ip, sp}
  ac:	000000dc 	ldrdeq	r0, [r0], -ip
  b0:	42040e42 	andmi	r0, r4, #1056	; 0x420
  b4:	018e080e 	orreq	r0, lr, lr, lsl #16
  b8:	0000000c 	.word	0x0000000c
  bc:	ffffffff 	.word	0xffffffff
  c0:	7c010001 	.word	0x7c010001
  c4:	000d0c0e 	.word	0x000d0c0e
  c8:	0000000c 	.word	0x0000000c
  cc:	000000b8 	.word	0x000000b8
  d0:	0800333c 	.word	0x0800333c
  d4:	00000002 	.word	0x00000002
  d8:	0000000c 	.word	0x0000000c
  dc:	000000b8 	.word	0x000000b8
  e0:	08003340 	.word	0x08003340
  e4:	00000002 	.word	0x00000002
  e8:	0000000c 	.word	0x0000000c
  ec:	000000b8 	.word	0x000000b8
  f0:	08003344 	.word	0x08003344
  f4:	00000002 	.word	0x00000002
  f8:	0000000c 	.word	0x0000000c
  fc:	000000b8 	.word	0x000000b8
 100:	08003348 	.word	0x08003348
 104:	00000002 	.word	0x00000002
 108:	0000000c 	.word	0x0000000c
 10c:	000000b8 	.word	0x000000b8
 110:	0800334c 	.word	0x0800334c
 114:	00000002 	.word	0x00000002
 118:	0000000c 	.word	0x0000000c
 11c:	000000b8 	.word	0x000000b8
 120:	08003350 	.word	0x08003350
 124:	00000002 	.word	0x00000002
 128:	0000000c 	.word	0x0000000c
 12c:	000000b8 	.word	0x000000b8
 130:	08003354 	.word	0x08003354
 134:	00000002 	.word	0x00000002
 138:	0000000c 	.word	0x0000000c
 13c:	000000b8 	.word	0x000000b8
 140:	08003358 	.word	0x08003358
 144:	00000002 	.word	0x00000002
 148:	0000000c 	.word	0x0000000c
 14c:	000000b8 	.word	0x000000b8
 150:	0800335c 	.word	0x0800335c
 154:	00000002 	.word	0x00000002
 158:	0000000c 	.word	0x0000000c
 15c:	000000b8 	.word	0x000000b8
 160:	08003360 	.word	0x08003360
 164:	00000002 	.word	0x00000002
 168:	0000000c 	.word	0x0000000c
 16c:	000000b8 	.word	0x000000b8
 170:	08003364 	.word	0x08003364
 174:	00000002 	.word	0x00000002
 178:	0000000c 	.word	0x0000000c
 17c:	000000b8 	.word	0x000000b8
 180:	08003368 	.word	0x08003368
 184:	00000002 	.word	0x00000002
 188:	0000000c 	.word	0x0000000c
 18c:	000000b8 	.word	0x000000b8
 190:	0800336c 	.word	0x0800336c
 194:	00000002 	.word	0x00000002
 198:	0000000c 	.word	0x0000000c
 19c:	000000b8 	.word	0x000000b8
 1a0:	08003370 	.word	0x08003370
 1a4:	00000002 	.word	0x00000002
 1a8:	0000000c 	.word	0x0000000c
 1ac:	000000b8 	.word	0x000000b8
 1b0:	08003374 	.word	0x08003374
 1b4:	00000002 	.word	0x00000002
 1b8:	0000000c 	.word	0x0000000c
 1bc:	000000b8 	.word	0x000000b8
 1c0:	08003378 	.word	0x08003378
 1c4:	00000002 	.word	0x00000002
 1c8:	0000000c 	.word	0x0000000c
 1cc:	000000b8 	.word	0x000000b8
 1d0:	0800337c 	.word	0x0800337c
 1d4:	00000002 	.word	0x00000002
 1d8:	0000000c 	.word	0x0000000c
 1dc:	000000b8 	.word	0x000000b8
 1e0:	08003380 	.word	0x08003380
 1e4:	00000002 	.word	0x00000002
 1e8:	0000000c 	.word	0x0000000c
 1ec:	000000b8 	.word	0x000000b8
 1f0:	08003384 	.word	0x08003384
 1f4:	00000002 	.word	0x00000002
 1f8:	0000000c 	.word	0x0000000c
 1fc:	000000b8 	.word	0x000000b8
 200:	08003388 	.word	0x08003388
 204:	00000002 	.word	0x00000002
 208:	0000000c 	.word	0x0000000c
 20c:	000000b8 	.word	0x000000b8
 210:	0800338c 	.word	0x0800338c
 214:	00000002 	.word	0x00000002
 218:	0000000c 	.word	0x0000000c
 21c:	000000b8 	.word	0x000000b8
 220:	08003390 	.word	0x08003390
 224:	00000002 	.word	0x00000002
 228:	0000000c 	.word	0x0000000c
 22c:	000000b8 	.word	0x000000b8
 230:	08003394 	.word	0x08003394
 234:	00000002 	.word	0x00000002
 238:	0000000c 	.word	0x0000000c
 23c:	000000b8 	.word	0x000000b8
 240:	08003398 	.word	0x08003398
 244:	00000002 	.word	0x00000002
 248:	0000000c 	.word	0x0000000c
 24c:	000000b8 	.word	0x000000b8
 250:	0800339c 	.word	0x0800339c
 254:	00000002 	.word	0x00000002
 258:	0000000c 	.word	0x0000000c
 25c:	000000b8 	.word	0x000000b8
 260:	080033a0 	.word	0x080033a0
 264:	00000002 	.word	0x00000002
 268:	0000000c 	.word	0x0000000c
 26c:	000000b8 	.word	0x000000b8
 270:	080033a4 	.word	0x080033a4
 274:	00000002 	.word	0x00000002
 278:	0000000c 	.word	0x0000000c
 27c:	000000b8 	.word	0x000000b8
 280:	080033a8 	.word	0x080033a8
 284:	00000002 	.word	0x00000002
 288:	0000000c 	.word	0x0000000c
 28c:	000000b8 	.word	0x000000b8
 290:	080033ac 	.word	0x080033ac
 294:	00000002 	.word	0x00000002
 298:	0000000c 	.word	0x0000000c
 29c:	000000b8 	.word	0x000000b8
 2a0:	080033b0 	.word	0x080033b0
 2a4:	00000002 	.word	0x00000002
 2a8:	0000000c 	.word	0x0000000c
 2ac:	000000b8 	.word	0x000000b8
 2b0:	080033b4 	.word	0x080033b4
 2b4:	00000002 	.word	0x00000002
 2b8:	0000000c 	.word	0x0000000c
 2bc:	000000b8 	.word	0x000000b8
 2c0:	080033b8 	.word	0x080033b8
 2c4:	00000002 	.word	0x00000002
 2c8:	0000000c 	.word	0x0000000c
 2cc:	000000b8 	.word	0x000000b8
 2d0:	080033bc 	.word	0x080033bc
 2d4:	00000002 	.word	0x00000002
 2d8:	0000000c 	.word	0x0000000c
 2dc:	000000b8 	.word	0x000000b8
 2e0:	080033c0 	.word	0x080033c0
 2e4:	00000002 	.word	0x00000002
 2e8:	0000000c 	.word	0x0000000c
 2ec:	000000b8 	.word	0x000000b8
 2f0:	080033c4 	.word	0x080033c4
 2f4:	00000002 	.word	0x00000002
 2f8:	0000000c 	.word	0x0000000c
 2fc:	000000b8 	.word	0x000000b8
 300:	080033c8 	.word	0x080033c8
 304:	00000002 	.word	0x00000002
 308:	0000000c 	.word	0x0000000c
 30c:	000000b8 	.word	0x000000b8
 310:	080033cc 	.word	0x080033cc
 314:	00000002 	.word	0x00000002
 318:	0000000c 	.word	0x0000000c
 31c:	000000b8 	.word	0x000000b8
 320:	080033d0 	.word	0x080033d0
 324:	00000002 	.word	0x00000002
 328:	0000000c 	.word	0x0000000c
 32c:	000000b8 	.word	0x000000b8
 330:	080033d4 	.word	0x080033d4
 334:	00000002 	.word	0x00000002
 338:	0000000c 	.word	0x0000000c
 33c:	000000b8 	.word	0x000000b8
 340:	080033d8 	.word	0x080033d8
 344:	00000002 	.word	0x00000002
 348:	0000000c 	.word	0x0000000c
 34c:	000000b8 	.word	0x000000b8
 350:	080033dc 	.word	0x080033dc
 354:	00000002 	.word	0x00000002
 358:	0000000c 	.word	0x0000000c
 35c:	000000b8 	.word	0x000000b8
 360:	080033e0 	.word	0x080033e0
 364:	00000002 	.word	0x00000002
 368:	0000000c 	.word	0x0000000c
 36c:	000000b8 	.word	0x000000b8
 370:	080033e4 	.word	0x080033e4
 374:	00000002 	.word	0x00000002
 378:	0000000c 	.word	0x0000000c
 37c:	000000b8 	.word	0x000000b8
 380:	080033e8 	.word	0x080033e8
 384:	00000002 	.word	0x00000002
 388:	0000000c 	.word	0x0000000c
 38c:	000000b8 	.word	0x000000b8
 390:	080033ec 	.word	0x080033ec
 394:	00000002 	.word	0x00000002
 398:	0000000c 	.word	0x0000000c
 39c:	000000b8 	.word	0x000000b8
 3a0:	080033f0 	.word	0x080033f0
 3a4:	00000002 	.word	0x00000002
 3a8:	0000000c 	.word	0x0000000c
 3ac:	000000b8 	.word	0x000000b8
 3b0:	080033f4 	.word	0x080033f4
 3b4:	00000002 	.word	0x00000002
 3b8:	0000000c 	.word	0x0000000c
 3bc:	000000b8 	.word	0x000000b8
 3c0:	080033f8 	.word	0x080033f8
 3c4:	00000002 	.word	0x00000002
 3c8:	0000000c 	.word	0x0000000c
 3cc:	000000b8 	.word	0x000000b8
 3d0:	080033fc 	.word	0x080033fc
 3d4:	00000002 	.word	0x00000002
 3d8:	0000000c 	.word	0x0000000c
 3dc:	000000b8 	.word	0x000000b8
 3e0:	08003400 	.word	0x08003400
 3e4:	00000002 	.word	0x00000002
 3e8:	0000000c 	.word	0x0000000c
 3ec:	000000b8 	.word	0x000000b8
 3f0:	08003404 	.word	0x08003404
 3f4:	00000002 	.word	0x00000002
 3f8:	0000000c 	.word	0x0000000c
 3fc:	000000b8 	.word	0x000000b8
 400:	08003408 	.word	0x08003408
 404:	00000002 	.word	0x00000002
 408:	0000000c 	.word	0x0000000c
 40c:	000000b8 	.word	0x000000b8
 410:	0800340c 	.word	0x0800340c
 414:	00000002 	.word	0x00000002
 418:	0000000c 	.word	0x0000000c
 41c:	000000b8 	.word	0x000000b8
 420:	08003410 	.word	0x08003410
 424:	00000002 	.word	0x00000002
 428:	0000000c 	.word	0x0000000c
 42c:	000000b8 	.word	0x000000b8
 430:	08003414 	.word	0x08003414
 434:	00000002 	.word	0x00000002
 438:	0000000c 	.word	0x0000000c
 43c:	000000b8 	.word	0x000000b8
 440:	08003418 	.word	0x08003418
 444:	00000002 	.word	0x00000002
 448:	0000000c 	.word	0x0000000c
 44c:	000000b8 	.word	0x000000b8
 450:	0800341c 	.word	0x0800341c
 454:	00000002 	.word	0x00000002
 458:	0000000c 	.word	0x0000000c
 45c:	000000b8 	.word	0x000000b8
 460:	08003420 	.word	0x08003420
 464:	00000002 	.word	0x00000002
 468:	0000000c 	.word	0x0000000c
 46c:	000000b8 	.word	0x000000b8
 470:	08003424 	.word	0x08003424
 474:	00000002 	.word	0x00000002
 478:	0000000c 	.word	0x0000000c
 47c:	000000b8 	.word	0x000000b8
 480:	08003428 	.word	0x08003428
 484:	00000002 	.word	0x00000002
 488:	0000000c 	.word	0x0000000c
 48c:	000000b8 	.word	0x000000b8
 490:	0800342c 	.word	0x0800342c
 494:	00000002 	.word	0x00000002
 498:	0000000c 	.word	0x0000000c
 49c:	000000b8 	.word	0x000000b8
 4a0:	08003430 	.word	0x08003430
 4a4:	00000002 	.word	0x00000002
 4a8:	0000000c 	.word	0x0000000c
 4ac:	000000b8 	.word	0x000000b8
 4b0:	08003434 	.word	0x08003434
 4b4:	00000002 	.word	0x00000002
 4b8:	0000000c 	.word	0x0000000c
 4bc:	000000b8 	.word	0x000000b8
 4c0:	08003438 	.word	0x08003438
 4c4:	00000002 	.word	0x00000002
 4c8:	0000000c 	.word	0x0000000c
 4cc:	000000b8 	.word	0x000000b8
 4d0:	0800343c 	.word	0x0800343c
 4d4:	00000002 	.word	0x00000002
 4d8:	0000000c 	.word	0x0000000c
 4dc:	000000b8 	.word	0x000000b8
 4e0:	08003440 	.word	0x08003440
 4e4:	00000002 	.word	0x00000002
 4e8:	0000000c 	.word	0x0000000c
 4ec:	000000b8 	.word	0x000000b8
 4f0:	08003444 	.word	0x08003444
 4f4:	00000002 	.word	0x00000002
 4f8:	0000000c 	.word	0x0000000c
 4fc:	000000b8 	.word	0x000000b8
 500:	08003448 	.word	0x08003448
 504:	00000002 	.word	0x00000002
 508:	00000014 	.word	0x00000014
 50c:	000000b8 	.word	0x000000b8
 510:	0800344c 	.word	0x0800344c
 514:	0000000c 	.word	0x0000000c
 518:	42040e42 	.word	0x42040e42
 51c:	018e080e 	.word	0x018e080e
 520:	0000000c 	.word	0x0000000c
 524:	ffffffff 	.word	0xffffffff
 528:	7c010001 	.word	0x7c010001
 52c:	000d0c0e 	.word	0x000d0c0e
 530:	0000000c 	.word	0x0000000c
 534:	00000520 	.word	0x00000520
 538:	08003458 	.word	0x08003458
 53c:	00000018 	.word	0x00000018
 540:	0000000c 	.word	0x0000000c
 544:	00000520 	.word	0x00000520
 548:	08003470 	.word	0x08003470
 54c:	00000018 	.word	0x00000018
 550:	0000000c 	.word	0x0000000c
 554:	00000520 	.word	0x00000520
 558:	08003488 	.word	0x08003488
 55c:	00000018 	.word	0x00000018
 560:	0000000c 	.word	0x0000000c
 564:	00000520 	.word	0x00000520
 568:	080034a0 	.word	0x080034a0
 56c:	00000018 	.word	0x00000018
 570:	0000000c 	.word	0x0000000c
 574:	00000520 	.word	0x00000520
 578:	080034b8 	.word	0x080034b8
 57c:	00000010 	.word	0x00000010
 580:	0000000c 	.word	0x0000000c
 584:	00000520 	.word	0x00000520
 588:	080034c8 	.word	0x080034c8
 58c:	0000000c 	.word	0x0000000c
 590:	0000000c 	.word	0x0000000c
 594:	00000520 	.word	0x00000520
 598:	080034d4 	.word	0x080034d4
 59c:	0000000c 	.word	0x0000000c
 5a0:	0000000c 	.word	0x0000000c
 5a4:	00000520 	.word	0x00000520
 5a8:	080034e0 	.word	0x080034e0
 5ac:	00000010 	.word	0x00000010
 5b0:	0000000c 	.word	0x0000000c
 5b4:	00000520 	.word	0x00000520
 5b8:	080034f0 	.word	0x080034f0
 5bc:	00000010 	.word	0x00000010
 5c0:	0000000c 	.word	0x0000000c
 5c4:	00000520 	.word	0x00000520
 5c8:	08003500 	.word	0x08003500
 5cc:	0000001c 	.word	0x0000001c
 5d0:	0000000c 	.word	0x0000000c
 5d4:	00000520 	.word	0x00000520
 5d8:	0800351c 	.word	0x0800351c
 5dc:	00000020 	.word	0x00000020
 5e0:	0000000c 	.word	0x0000000c
 5e4:	00000520 	.word	0x00000520
 5e8:	0800353c 	.word	0x0800353c
 5ec:	0000000c 	.word	0x0000000c
 5f0:	0000000c 	.word	0x0000000c
 5f4:	00000520 	.word	0x00000520
 5f8:	08003548 	.word	0x08003548
 5fc:	0000002c 	.word	0x0000002c
 600:	00000018 	.word	0x00000018
 604:	00000520 	.word	0x00000520
 608:	08003574 	.word	0x08003574
 60c:	00000094 	.word	0x00000094
 610:	44080e42 	.word	0x44080e42
 614:	018e100e 	.word	0x018e100e
 618:	00000284 	.word	0x00000284
 61c:	0000001c 	.word	0x0000001c
 620:	00000520 	.word	0x00000520
 624:	08003608 	.word	0x08003608
 628:	0000005c 	.word	0x0000005c
 62c:	8e140e42 	.word	0x8e140e42
 630:	86028701 	.word	0x86028701
 634:	84048503 	.word	0x84048503
 638:	180e4605 	.word	0x180e4605
 63c:	00000018 	.word	0x00000018
 640:	00000520 	.word	0x00000520
 644:	08003664 	.word	0x08003664
 648:	0000009c 	.word	0x0000009c
 64c:	8e0c0e42 	.word	0x8e0c0e42
 650:	84028501 	.word	0x84028501
 654:	100e4403 	.word	0x100e4403
 658:	00000014 	.word	0x00000014
 65c:	00000520 	.word	0x00000520
 660:	08003700 	.word	0x08003700
 664:	000000c0 	.word	0x000000c0
 668:	8e080e42 	.word	0x8e080e42
 66c:	00028401 	.word	0x00028401
 670:	00000018 	.word	0x00000018
 674:	00000520 	.word	0x00000520
 678:	080037c0 	.word	0x080037c0
 67c:	00000044 	.word	0x00000044
 680:	8e100e42 	.word	0x8e100e42
 684:	85028601 	.word	0x85028601
 688:	00048403 	.word	0x00048403
 68c:	00000018 	.word	0x00000018
 690:	00000520 	.word	0x00000520
 694:	08003804 	.word	0x08003804
 698:	00000038 	.word	0x00000038
 69c:	8e100e42 	.word	0x8e100e42
 6a0:	85028601 	.word	0x85028601
 6a4:	00048403 	.word	0x00048403
 6a8:	00000018 	.word	0x00000018
 6ac:	00000520 	.word	0x00000520
 6b0:	0800383c 	.word	0x0800383c
 6b4:	00000048 	.word	0x00000048
 6b8:	8e100e42 	.word	0x8e100e42
 6bc:	85028601 	.word	0x85028601
 6c0:	00048403 	.word	0x00048403
 6c4:	00000014 	.word	0x00000014
 6c8:	00000520 	.word	0x00000520
 6cc:	08003884 	.word	0x08003884
 6d0:	00000078 	.word	0x00000078
 6d4:	8e080e42 	.word	0x8e080e42
 6d8:	00028401 	.word	0x00028401
 6dc:	00000014 	.word	0x00000014
 6e0:	00000520 	.word	0x00000520
 6e4:	080038fc 	.word	0x080038fc
 6e8:	0000003c 	.word	0x0000003c
 6ec:	8e080e42 	.word	0x8e080e42
 6f0:	00028401 	.word	0x00028401
 6f4:	00000018 	.word	0x00000018
 6f8:	00000520 	.word	0x00000520
 6fc:	08003938 	.word	0x08003938
 700:	00000048 	.word	0x00000048
 704:	8e0c0e42 	.word	0x8e0c0e42
 708:	84028501 	.word	0x84028501
 70c:	100e4403 	.word	0x100e4403
 710:	0000000c 	.word	0x0000000c
 714:	ffffffff 	.word	0xffffffff
 718:	7c010001 	.word	0x7c010001
 71c:	000d0c0e 	.word	0x000d0c0e
 720:	0000001c 	.word	0x0000001c
 724:	00000710 	.word	0x00000710
 728:	08003980 	.word	0x08003980
 72c:	000000a6 	.word	0x000000a6
 730:	8e140e42 	.word	0x8e140e42
 734:	86028701 	.word	0x86028701
 738:	84048503 	.word	0x84048503
 73c:	200e5a05 	.word	0x200e5a05
 740:	0000000c 	.word	0x0000000c
 744:	00000710 	.word	0x00000710
 748:	08003a28 	.word	0x08003a28
 74c:	00000010 	.word	0x00000010
 750:	0000000c 	.word	0x0000000c
 754:	00000710 	.word	0x00000710
 758:	08003a38 	.word	0x08003a38
 75c:	0000000c 	.word	0x0000000c
 760:	0000000c 	.word	0x0000000c
 764:	00000710 	.word	0x00000710
 768:	08003a44 	.word	0x08003a44
 76c:	00000006 	.word	0x00000006
 770:	0000000c 	.word	0x0000000c
 774:	00000710 	.word	0x00000710
 778:	08003a4c 	.word	0x08003a4c
 77c:	0000000c 	.word	0x0000000c
 780:	0000000c 	.word	0x0000000c
 784:	00000710 	.word	0x00000710
 788:	08003a58 	.word	0x08003a58
 78c:	00000006 	.word	0x00000006
 790:	0000000c 	.word	0x0000000c
 794:	00000710 	.word	0x00000710
 798:	08003a60 	.word	0x08003a60
 79c:	00000004 	.word	0x00000004
 7a0:	0000000c 	.word	0x0000000c
 7a4:	00000710 	.word	0x00000710
 7a8:	08003a64 	.word	0x08003a64
 7ac:	00000004 	.word	0x00000004
 7b0:	0000000c 	.word	0x0000000c
 7b4:	00000710 	.word	0x00000710
 7b8:	08003a68 	.word	0x08003a68
 7bc:	0000000a 	.word	0x0000000a
 7c0:	0000000c 	.word	0x0000000c
 7c4:	00000710 	.word	0x00000710
 7c8:	08003a74 	.word	0x08003a74
 7cc:	00000004 	.word	0x00000004
 7d0:	0000000c 	.word	0x0000000c
 7d4:	00000710 	.word	0x00000710
 7d8:	08003a78 	.word	0x08003a78
 7dc:	00000010 	.word	0x00000010
 7e0:	0000000c 	.word	0x0000000c
 7e4:	00000710 	.word	0x00000710
 7e8:	08003a88 	.word	0x08003a88
 7ec:	00000020 	.word	0x00000020
 7f0:	0000000c 	.word	0x0000000c
 7f4:	00000710 	.word	0x00000710
 7f8:	08003aa8 	.word	0x08003aa8
 7fc:	0000000c 	.word	0x0000000c
 800:	00000018 	.word	0x00000018
 804:	00000710 	.word	0x00000710
 808:	08003ab4 	.word	0x08003ab4
 80c:	00000060 	.word	0x00000060
 810:	8e0c0e42 	.word	0x8e0c0e42
 814:	84028501 	.word	0x84028501
 818:	00000003 	.word	0x00000003
 81c:	00000014 	.word	0x00000014
 820:	00000710 	.word	0x00000710
 824:	08003b14 	.word	0x08003b14
 828:	00000034 	.word	0x00000034
 82c:	8e080e42 	.word	0x8e080e42
 830:	00028401 	.word	0x00028401
 834:	00000014 	.word	0x00000014
 838:	00000710 	.word	0x00000710
 83c:	08003b48 	.word	0x08003b48
 840:	00000018 	.word	0x00000018
 844:	46040e42 	.word	0x46040e42
 848:	018e080e 	.word	0x018e080e
 84c:	00000014 	.word	0x00000014
 850:	00000710 	.word	0x00000710
 854:	08003b60 	.word	0x08003b60
 858:	000000a8 	.word	0x000000a8
 85c:	44040e42 	.word	0x44040e42
 860:	018e100e 	.word	0x018e100e
 864:	0000000c 	.word	0x0000000c
 868:	ffffffff 	.word	0xffffffff
 86c:	7c010001 	.word	0x7c010001
 870:	000d0c0e 	.word	0x000d0c0e
 874:	0000000c 	.word	0x0000000c
 878:	00000864 	.word	0x00000864
 87c:	08003c08 	.word	0x08003c08
 880:	00000034 	.word	0x00000034
 884:	0000000c 	.word	0x0000000c
 888:	00000864 	.word	0x00000864
 88c:	08003c3c 	.word	0x08003c3c
 890:	00000030 	.word	0x00000030
 894:	0000000c 	.word	0x0000000c
 898:	00000864 	.word	0x00000864
 89c:	08003c6c 	.word	0x08003c6c
 8a0:	00000014 	.word	0x00000014
 8a4:	00000018 	.word	0x00000018
 8a8:	00000864 	.word	0x00000864
 8ac:	08003c80 	.word	0x08003c80
 8b0:	0000007c 	.word	0x0000007c
 8b4:	8e0c0e42 	.word	0x8e0c0e42
 8b8:	84028501 	.word	0x84028501
 8bc:	00000003 	.word	0x00000003
 8c0:	0000000c 	.word	0x0000000c
 8c4:	00000864 	.word	0x00000864
 8c8:	08003cfc 	.word	0x08003cfc
 8cc:	0000000c 	.word	0x0000000c
 8d0:	0000000c 	.word	0x0000000c
 8d4:	00000864 	.word	0x00000864
 8d8:	08003d08 	.word	0x08003d08
 8dc:	00000018 	.word	0x00000018
 8e0:	0000000c 	.word	0x0000000c
 8e4:	00000864 	.word	0x00000864
 8e8:	08003d20 	.word	0x08003d20
 8ec:	00000024 	.word	0x00000024
 8f0:	0000000c 	.word	0x0000000c
 8f4:	00000864 	.word	0x00000864
 8f8:	08003d44 	.word	0x08003d44
 8fc:	0000000c 	.word	0x0000000c
 900:	0000000c 	.word	0x0000000c
 904:	00000864 	.word	0x00000864
 908:	08003d50 	.word	0x08003d50
 90c:	00000018 	.word	0x00000018
 910:	0000000c 	.word	0x0000000c
 914:	00000864 	.word	0x00000864
 918:	08003d68 	.word	0x08003d68
 91c:	00000010 	.word	0x00000010
 920:	0000000c 	.word	0x0000000c
 924:	00000864 	.word	0x00000864
 928:	08003d78 	.word	0x08003d78
 92c:	00000024 	.word	0x00000024
 930:	0000000c 	.word	0x0000000c
 934:	00000864 	.word	0x00000864
 938:	08003d9c 	.word	0x08003d9c
 93c:	0000000c 	.word	0x0000000c
 940:	0000000c 	.word	0x0000000c
 944:	00000864 	.word	0x00000864
 948:	08003da8 	.word	0x08003da8
 94c:	00000014 	.word	0x00000014
 950:	0000000c 	.word	0x0000000c
 954:	00000864 	.word	0x00000864
 958:	08003dbc 	.word	0x08003dbc
 95c:	00000010 	.word	0x00000010
 960:	0000000c 	.word	0x0000000c
 964:	00000864 	.word	0x00000864
 968:	08003dcc 	.word	0x08003dcc
 96c:	00000010 	.word	0x00000010
 970:	0000000c 	.word	0x0000000c
 974:	00000864 	.word	0x00000864
 978:	08003ddc 	.word	0x08003ddc
 97c:	0000001c 	.word	0x0000001c
 980:	0000000c 	.word	0x0000000c
 984:	0864      	.short	0x0864
 986:	00          	.byte	0x00
 987:	00          	.byte	0x00
 988:	08003df8 	.word	0x08003df8
 98c:	00000028 	.word	0x00000028
 990:	00000014 	.word	0x00000014
 994:	00000864 	.word	0x00000864
 998:	08003e20 	.word	0x08003e20
 99c:	00000058 	.word	0x00000058
 9a0:	8e080e42 	.word	0x8e080e42
 9a4:	00028401 	.word	0x00028401
 9a8:	0000000c 	.word	0x0000000c
 9ac:	00000864 	.word	0x00000864
 9b0:	08003e78 	.word	0x08003e78
 9b4:	00000020 	.word	0x00000020
 9b8:	0000000c 	.word	0x0000000c
 9bc:	00000864 	.word	0x00000864
 9c0:	08003e98 	.word	0x08003e98
 9c4:	00000018 	.word	0x00000018
 9c8:	0000000c 	.word	0x0000000c
 9cc:	00000864 	.word	0x00000864
 9d0:	08003eb0 	.word	0x08003eb0
 9d4:	00000018 	.word	0x00000018
 9d8:	0000000c 	.word	0x0000000c
 9dc:	00000864 	.word	0x00000864
 9e0:	08003ec8 	.word	0x08003ec8
 9e4:	00000020 	.word	0x00000020
 9e8:	0000000c 	.word	0x0000000c
 9ec:	00000864 	.word	0x00000864
 9f0:	08003ee8 	.word	0x08003ee8
 9f4:	00000044 	.word	0x00000044
 9f8:	0000000c 	.word	0x0000000c
 9fc:	00000864 	.word	0x00000864
 a00:	08003f2c 	.word	0x08003f2c
 a04:	00000014 	.word	0x00000014
 a08:	00000014 	.word	0x00000014
 a0c:	00000864 	.word	0x00000864
 a10:	08003f40 	.word	0x08003f40
 a14:	0000000c 	.word	0x0000000c
 a18:	42040e42 	.word	0x42040e42
 a1c:	018e080e 	.word	0x018e080e
 a20:	00000014 	.word	0x00000014
 a24:	00000864 	.word	0x00000864
 a28:	08003f4c 	.word	0x08003f4c
 a2c:	0000000e 	.word	0x0000000e
 a30:	44040e42 	.word	0x44040e42
 a34:	018e080e 	.word	0x018e080e
 a38:	00000014 	.word	0x00000014
 a3c:	00000864 	.word	0x00000864
 a40:	08003f5c 	.word	0x08003f5c
 a44:	0000000c 	.word	0x0000000c
 a48:	42040e42 	.word	0x42040e42
 a4c:	018e080e 	.word	0x018e080e
 a50:	00000014 	.word	0x00000014
 a54:	00000864 	.word	0x00000864
 a58:	08003f68 	.word	0x08003f68
 a5c:	0000000c 	.word	0x0000000c
 a60:	42040e42 	.word	0x42040e42
 a64:	018e080e 	.word	0x018e080e
 a68:	00000014 	.word	0x00000014
 a6c:	00000864 	.word	0x00000864
 a70:	08003f74 	.word	0x08003f74
 a74:	0000000c 	.word	0x0000000c
 a78:	42040e42 	.word	0x42040e42
 a7c:	018e080e 	.word	0x018e080e
 a80:	00000014 	.word	0x00000014
 a84:	00000864 	.word	0x00000864
 a88:	08003f80 	.word	0x08003f80
 a8c:	0000000c 	.word	0x0000000c
 a90:	42040e42 	.word	0x42040e42
 a94:	018e080e 	.word	0x018e080e
 a98:	0000000c 	.word	0x0000000c
 a9c:	ffffffff 	.word	0xffffffff
 aa0:	7c010001 	.word	0x7c010001
 aa4:	000d0c0e 	.word	0x000d0c0e
 aa8:	0000000c 	.word	0x0000000c
 aac:	00000a98 	.word	0x00000a98
 ab0:	08003f8c 	.word	0x08003f8c
 ab4:	0000000c 	.word	0x0000000c
 ab8:	0000000c 	.word	0x0000000c
 abc:	00000a98 	.word	0x00000a98
 ac0:	08003f98 	.word	0x08003f98
 ac4:	0000000c 	.word	0x0000000c
 ac8:	0000000c 	.word	0x0000000c
 acc:	00000a98 	.word	0x00000a98
 ad0:	08003fa4 	.word	0x08003fa4
 ad4:	00000014 	.word	0x00000014
 ad8:	0000000c 	.word	0x0000000c
 adc:	00000a98 	.word	0x00000a98
 ae0:	08003fb8 	.word	0x08003fb8
 ae4:	0000000c 	.word	0x0000000c
 ae8:	0000000c 	.word	0x0000000c
 aec:	00000a98 	.word	0x00000a98
 af0:	08003fc4 	.word	0x08003fc4
 af4:	00000014 	.word	0x00000014
 af8:	0000000c 	.word	0x0000000c
 afc:	00000a98 	.word	0x00000a98
 b00:	08003fd8 	.word	0x08003fd8
 b04:	00000010 	.word	0x00000010
 b08:	00000014 	.word	0x00000014
 b0c:	00000a98 	.word	0x00000a98
 b10:	08003fe8 	.word	0x08003fe8
 b14:	00000034 	.word	0x00000034
 b18:	44040e44 	.word	0x44040e44
 b1c:	018e080e 	.word	0x018e080e
 b20:	00000014 	.word	0x00000014
 b24:	00000a98 	.word	0x00000a98
 b28:	0800401c 	.word	0x0800401c
 b2c:	00000038 	.word	0x00000038
 b30:	44040e44 	.word	0x44040e44
 b34:	018e080e 	.word	0x018e080e
 b38:	00000014 	.word	0x00000014
 b3c:	00000a98 	.word	0x00000a98
 b40:	08004054 	.word	0x08004054
 b44:	00000018 	.word	0x00000018
 b48:	8e080e42 	.word	0x8e080e42
 b4c:	00028401 	.word	0x00028401
 b50:	0000000c 	.word	0x0000000c
 b54:	ffffffff 	.word	0xffffffff
 b58:	7c010001 	.word	0x7c010001
 b5c:	000d0c0e 	.word	0x000d0c0e
 b60:	0000000c 	.word	0x0000000c
 b64:	00000b50 	.word	0x00000b50
 b68:	0800406c 	.word	0x0800406c
 b6c:	00000040 	.word	0x00000040
 b70:	0000000c 	.word	0x0000000c
 b74:	00000b50 	.word	0x00000b50
 b78:	080040ac 	.word	0x080040ac
 b7c:	00000034 	.word	0x00000034
 b80:	00000010 	.word	0x00000010
 b84:	00000b50 	.word	0x00000b50
 b88:	080040e0 	.word	0x080040e0
 b8c:	00000030 	.word	0x00000030
 b90:	00080e42 	.word	0x00080e42
 b94:	0000000c 	.word	0x0000000c
 b98:	00000b50 	.word	0x00000b50
 b9c:	08004110 	.word	0x08004110
 ba0:	00000014 	.word	0x00000014
 ba4:	0000000c 	.word	0x0000000c
 ba8:	00000b50 	.word	0x00000b50
 bac:	08004124 	.word	0x08004124
 bb0:	0000000c 	.word	0x0000000c
 bb4:	0000000c 	.word	0x0000000c
 bb8:	00000b50 	.word	0x00000b50
 bbc:	08004130 	.word	0x08004130
 bc0:	00000014 	.word	0x00000014
 bc4:	0000000c 	.word	0x0000000c
 bc8:	00000b50 	.word	0x00000b50
 bcc:	08004144 	.word	0x08004144
 bd0:	0000000c 	.word	0x0000000c
 bd4:	0000000c 	.word	0x0000000c
 bd8:	00000b50 	.word	0x00000b50
 bdc:	08004150 	.word	0x08004150
 be0:	00000014 	.word	0x00000014
 be4:	0000000c 	.word	0x0000000c
 be8:	00000b50 	.word	0x00000b50
 bec:	08004164 	.word	0x08004164
 bf0:	00000010 	.word	0x00000010
 bf4:	0000000c 	.word	0x0000000c
 bf8:	00000b50 	.word	0x00000b50
 bfc:	08004174 	.word	0x08004174
 c00:	00000014 	.word	0x00000014
 c04:	0000000c 	.word	0x0000000c
 c08:	00000b50 	.word	0x00000b50
 c0c:	08004188 	.word	0x08004188
 c10:	00000014 	.word	0x00000014
 c14:	0000000c 	.word	0x0000000c
 c18:	00000b50 	.word	0x00000b50
 c1c:	0800419c 	.word	0x0800419c
 c20:	00000014 	.word	0x00000014
 c24:	0000000c 	.word	0x0000000c
 c28:	00000b50 	.word	0x00000b50
 c2c:	080041b0 	.word	0x080041b0
 c30:	0000001c 	.word	0x0000001c
 c34:	0000000c 	.word	0x0000000c
 c38:	00000b50 	.word	0x00000b50
 c3c:	080041cc 	.word	0x080041cc
 c40:	0000000c 	.word	0x0000000c
 c44:	0000000c 	.word	0x0000000c
 c48:	00000b50 	.word	0x00000b50
 c4c:	080041d8 	.word	0x080041d8
 c50:	00000014 	.word	0x00000014
 c54:	0000000c 	.word	0x0000000c
 c58:	00000b50 	.word	0x00000b50
 c5c:	080041ec 	.word	0x080041ec
 c60:	00000020 	.word	0x00000020
 c64:	0000000c 	.word	0x0000000c
 c68:	00000b50 	.word	0x00000b50
 c6c:	0800420c 	.word	0x0800420c
 c70:	0000000c 	.word	0x0000000c
 c74:	0000000c 	.word	0x0000000c
 c78:	00000b50 	.word	0x00000b50
 c7c:	08004218 	.word	0x08004218
 c80:	00000010 	.word	0x00000010
 c84:	0000000c 	.word	0x0000000c
 c88:	00000b50 	.word	0x00000b50
 c8c:	08004228 	.word	0x08004228
 c90:	0000000c 	.word	0x0000000c
 c94:	0000000c 	.word	0x0000000c
 c98:	00000b50 	.word	0x00000b50
 c9c:	08004234 	.word	0x08004234
 ca0:	000000b8 	.word	0x000000b8
 ca4:	0000000c 	.word	0x0000000c
 ca8:	00000b50 	.word	0x00000b50
 cac:	080042ec 	.word	0x080042ec
 cb0:	0000001c 	.word	0x0000001c
 cb4:	0000000c 	.word	0x0000000c
 cb8:	00000b50 	.word	0x00000b50
 cbc:	08004308 	.word	0x08004308
 cc0:	0000001c 	.word	0x0000001c
 cc4:	0000000c 	.word	0x0000000c
 cc8:	00000b50 	.word	0x00000b50
 ccc:	08004324 	.word	0x08004324
 cd0:	0000001c 	.word	0x0000001c
 cd4:	0000000c 	.word	0x0000000c
 cd8:	00000b50 	.word	0x00000b50
 cdc:	08004340 	.word	0x08004340
 ce0:	0000001c 	.word	0x0000001c
 ce4:	0000000c 	.word	0x0000000c
 ce8:	00000b50 	.word	0x00000b50
 cec:	0800435c 	.word	0x0800435c
 cf0:	0000001c 	.word	0x0000001c
 cf4:	0000000c 	.word	0x0000000c
 cf8:	00000b50 	.word	0x00000b50
 cfc:	08004378 	.word	0x08004378
 d00:	0000000c 	.word	0x0000000c
 d04:	0000000c 	.word	0x0000000c
 d08:	00000b50 	.word	0x00000b50
 d0c:	08004384 	.word	0x08004384
 d10:	0000000c 	.word	0x0000000c
 d14:	0000000c 	.word	0x0000000c
 d18:	00000b50 	.word	0x00000b50
 d1c:	08004390 	.word	0x08004390
 d20:	0000000c 	.word	0x0000000c
 d24:	0000000c 	.word	0x0000000c
 d28:	00000b50 	.word	0x00000b50
 d2c:	0800439c 	.word	0x0800439c
 d30:	00000044 	.word	0x00000044
 d34:	0000000c 	.word	0x0000000c
 d38:	00000b50 	.word	0x00000b50
 d3c:	080043e0 	.word	0x080043e0
 d40:	00000010 	.word	0x00000010
 d44:	0000000c 	.word	0x0000000c
 d48:	00000b50 	.word	0x00000b50
 d4c:	080043f0 	.word	0x080043f0
 d50:	00000014 	.word	0x00000014
 d54:	0000000c 	.word	0x0000000c
 d58:	00000b50 	.word	0x00000b50
 d5c:	08004404 	.word	0x08004404
 d60:	000c      	.short	0x000c
 d62:	0000      	.short	0x0000
 d64:	0000000c 	.word	0x0000000c
 d68:	ffffffff 	.word	0xffffffff
 d6c:	7c010001 	.word	0x7c010001
 d70:	000d0c0e 	.word	0x000d0c0e
 d74:	0000000c 	.word	0x0000000c
 d78:	00000d64 	.word	0x00000d64
 d7c:	08004410 	.word	0x08004410
 d80:	0000001c 	.word	0x0000001c
 d84:	0000000c 	.word	0x0000000c
 d88:	00000d64 	.word	0x00000d64
 d8c:	0800442c 	.word	0x0800442c
 d90:	0000000c 	.word	0x0000000c
 d94:	0000000c 	.word	0x0000000c
 d98:	00000d64 	.word	0x00000d64
 d9c:	08004438 	.word	0x08004438
 da0:	0000002c 	.word	0x0000002c
 da4:	0000000c 	.word	0x0000000c
 da8:	00000d64 	.word	0x00000d64
 dac:	08004464 	.word	0x08004464
 db0:	0000001c 	.word	0x0000001c
 db4:	0000000c 	.word	0x0000000c
 db8:	00000d64 	.word	0x00000d64
 dbc:	08004480 	.word	0x08004480
 dc0:	0000000c 	.word	0x0000000c
 dc4:	0000000c 	.word	0x0000000c
 dc8:	00000d64 	.word	0x00000d64
 dcc:	0800448c 	.word	0x0800448c
 dd0:	00000028 	.word	0x00000028
 dd4:	0000000c 	.word	0x0000000c
 dd8:	ffffffff 	.word	0xffffffff
 ddc:	7c010001 	.word	0x7c010001
 de0:	000d0c0e 	.word	0x000d0c0e
 de4:	00000018 	.word	0x00000018
 de8:	00000dd4 	.word	0x00000dd4
 dec:	08004524 	.word	0x08004524
 df0:	00000054 	.word	0x00000054
 df4:	000d0946 	.word	0x000d0946
 df8:	8e080e44 	.word	0x8e080e44
 dfc:	00028d01 	.word	0x00028d01
 e00:	0000000c 	.word	0x0000000c
 e04:	ffffffff 	.word	0xffffffff
 e08:	7c010001 	.word	0x7c010001
 e0c:	000d0c0e 	.word	0x000d0c0e
 e10:	00000014 	.word	0x00000014
 e14:	00000e00 	.word	0x00000e00
 e18:	00000000 	.word	0x00000000
 e1c:	00000028 	.word	0x00000028
 e20:	4c040e44 	.word	0x4c040e44
 e24:	018e080e 	.word	0x018e080e
 e28:	0000000c 	.word	0x0000000c
 e2c:	ffffffff 	.word	0xffffffff
 e30:	7c010001 	.word	0x7c010001
 e34:	000d0c0e 	.word	0x000d0c0e
 e38:	0000000c 	.word	0x0000000c
 e3c:	00000e28 	.word	0x00000e28
 e40:	00000000 	.word	0x00000000
 e44:	00000030 	.word	0x00000030
 e48:	0000000c 	.word	0x0000000c
 e4c:	ffffffff 	.word	0xffffffff
 e50:	7c010001 	.word	0x7c010001
 e54:	000d0c0e 	.word	0x000d0c0e
 e58:	00000018 	.word	0x00000018
 e5c:	00000e48 	.word	0x00000e48
 e60:	00000000 	.word	0x00000000
 e64:	00000048 	.word	0x00000048
 e68:	8e100e44 	.word	0x8e100e44
 e6c:	85028601 	.word	0x85028601
 e70:	00048403 	.word	0x00048403
 e74:	00000018 	.word	0x00000018
 e78:	00000e48 	.word	0x00000e48
 e7c:	00000000 	.word	0x00000000
 e80:	00000080 	.word	0x00000080
 e84:	8e100e44 	.word	0x8e100e44
 e88:	85028601 	.word	0x85028601
 e8c:	00048403 	.word	0x00048403
 e90:	0000000c 	.word	0x0000000c
 e94:	ffffffff 	.word	0xffffffff
 e98:	7c010001 	.word	0x7c010001
 e9c:	000d0c0e 	.word	0x000d0c0e
 ea0:	00000014 	.word	0x00000014
 ea4:	00000e90 	.word	0x00000e90
 ea8:	00000000 	.word	0x00000000
 eac:	000000d0 	.word	0x000000d0
 eb0:	85080e48 	.word	0x85080e48
 eb4:	00028401 	.word	0x00028401
 eb8:	0000000c 	.word	0x0000000c
 ebc:	ffffffff 	.word	0xffffffff
 ec0:	7c010001 	.word	0x7c010001
 ec4:	000d0c0e 	.word	0x000d0c0e
 ec8:	0000001c 	.word	0x0000001c
 ecc:	00000eb8 	.word	0x00000eb8
 ed0:	00000000 	.word	0x00000000
 ed4:	0000009c 	.word	0x0000009c
 ed8:	88140e48 	.word	0x88140e48
 edc:	86028701 	.word	0x86028701
 ee0:	84048503 	.word	0x84048503
 ee4:	00000005 	.word	0x00000005
 ee8:	0000000c 	.word	0x0000000c
 eec:	ffffffff 	.word	0xffffffff
 ef0:	7c010001 	.word	0x7c010001
 ef4:	000d0c0e 	.word	0x000d0c0e
 ef8:	00000024 	.word	0x00000024
 efc:	00000ee8 	.word	0x00000ee8
 f00:	00000000 	.word	0x00000000
 f04:	0000010c 	.word	0x0000010c
 f08:	8e240e44 	.word	0x8e240e44
 f0c:	8a028b01 	.word	0x8a028b01
 f10:	88048903 	.word	0x88048903
 f14:	86068705 	.word	0x86068705
 f18:	84088507 	.word	0x84088507
 f1c:	300e4c09 	.word	0x300e4c09

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4f495047 	svcmi	0x00495047
       4:	6570535f 	ldrbvs	r5, [r0, #-863]!
       8:	4c006465 	cfstrsmi	mvf6, [r0], {101}
       c:	00524b43 	subseq	r4, r2, r3, asr #22
      10:	4f495047 	svcmi	0x00495047
      14:	646f4d5f 	strbtvs	r4, [pc], #3423	; 1c <_Minimum_Stack_Size-0xe4>
      18:	4e495f65 	cdpmi	15, 4, cr5, cr9, cr5, {3}
      1c:	4f4c465f 	svcmi	0x004c465f
      20:	4e495441 	cdpmi	4, 4, cr5, cr9, cr1, {2}
      24:	546e0047 	strbtpl	r0, [lr], #-71
      28:	00656d69 	rsbeq	r6, r5, r9, ror #26
      2c:	4f495047 	svcmi	0x00495047
      30:	646f4d5f 	strbtvs	r4, [pc], #3423	; 38 <_Minimum_Stack_Size-0xc8>
      34:	46415f65 	strbmi	r5, [r1], -r5, ror #30
      38:	00444f5f 	subeq	r4, r4, pc, asr pc
      3c:	2f505041 	svccs	0x00505041
      40:	2f637273 	svccs	0x00637273
      44:	6e69616d 	powvsez	f6, f1, #5.0
      48:	4300632e 	movwmi	r6, #814	; 0x32e
      4c:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
      50:	5c737265 	lfmpl	f7, 2, [r3], #-404
      54:	6372614d 	cmnvs	r2, #1073741843	; 0x40000013
      58:	776f445c 	undefined
      5c:	616f6c6e 	cmnvs	pc, lr, ror #24
      60:	305c7364 	subscc	r7, ip, r4, ror #6
      64:	454c2031 	strbmi	r2, [ip, #-49]
      68:	50470044 	subpl	r0, r7, r4, asr #32
      6c:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]
      70:	5f65646f 	svcpl	0x0065646f
      74:	00445049 	subeq	r5, r4, r9, asr #32
      78:	54737953 	ldrbtpl	r7, [r3], #-2387
      7c:	5f6b6369 	svcpl	0x006b6369
      80:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
      84:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
      88:	6f697461 	svcvs	0x00697461
      8c:	5342006e 	movtpl	r0, #8302	; 0x206e
      90:	73005252 	movwvc	r5, #594	; 0x252
      94:	74726f68 	ldrbtvc	r6, [r2], #-3944
      98:	736e7520 	cmnvc	lr, #134217728	; 0x8000000
      9c:	656e6769 	strbvs	r6, [lr, #-1897]!
      a0:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
      a4:	446d0074 	strbtmi	r0, [sp], #-116
      a8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
      ac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      b0:	6f4d5f4f 	svcvs	0x004d5f4f
      b4:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^
      b8:	47005550 	smlsdmi	r0, r0, r5, r5
      bc:	5f4f4950 	svcpl	0x004f4950
      c0:	65646f4d 	strbvs	r6, [r4, #-3917]!
      c4:	414e4500 	cmpmi	lr, r0, lsl #10
      c8:	00454c42 	subeq	r4, r5, r2, asr #24
      cc:	4f495047 	svcmi	0x00495047
      d0:	6570535f 	ldrbvs	r5, [r0, #-863]!
      d4:	315f6465 	cmpcc	pc, r5, ror #8
      d8:	7a484d30 	bvc	12135a0 <__Stack_Size+0x12131a0>
      dc:	43555300 	cmpmi	r5, #0	; 0x0
      e0:	53534543 	cmppl	r3, #281018368	; 0x10c00000
      e4:	72724500 	rsbsvc	r4, r2, #0	; 0x0
      e8:	7453726f 	ldrbvc	r7, [r3], #-623
      ec:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
      f0:	554e4700 	strbpl	r4, [lr, #-1792]
      f4:	34204320 	strtcc	r4, [r0], #-800
      f8:	302e332e 	eorcc	r3, lr, lr, lsr #6
      fc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     100:	70535f4f 	subsvc	r5, r3, pc, asr #30
     104:	5f646565 	svcpl	0x00646565
     108:	7a484d32 	bvc	12135d8 <__Stack_Size+0x12131d8>
     10c:	736e7500 	cmnvc	lr, #0	; 0x0
     110:	656e6769 	strbvs	r6, [lr, #-1897]!
     114:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     118:	6d007261 	sfmvs	f7, 4, [r0, #-388]
     11c:	006e6961 	rsbeq	r6, lr, r1, ror #18
     120:	53495f5f 	movtpl	r5, #40799	; 0x9f5f
     124:	45445f52 	strbmi	r5, [r4, #-3922]
     128:	0059414c 	subseq	r4, r9, ip, asr #2
     12c:	4f495047 	svcmi	0x00495047
     130:	646f4d5f 	strbtvs	r4, [pc], #3423	; 138 <_Minimum_Stack_Size+0x38>
     134:	754f5f65 	strbvc	r5, [pc, #-3941]	; fffff1d7 <SCS_BASE+0x1fff11d7>
     138:	50505f74 	subspl	r5, r0, r4, ror pc
     13c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     140:	6f435f4f 	svcvs	0x00435f4f
     144:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     148:	74617275 	strbtvc	r7, [r1], #-629
     14c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     150:	5f434352 	svcpl	0x00434352
     154:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     158:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     15c:	6f697461 	svcvs	0x00697461
     160:	5047006e 	subpl	r0, r7, lr, rrx
     164:	535f4f49 	cmppl	pc, #292	; 0x124
     168:	64656570 	strbtvs	r6, [r5], #-1392
     16c:	4d30355f 	cfldr32mi	mvfx3, [r0, #-380]!
     170:	4e007a48 	fnmacsmi	s14, s0, s16
     174:	5f434956 	svcpl	0x00434956
     178:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     17c:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     180:	6f697461 	svcvs	0x00697461
     184:	5047006e 	subpl	r0, r7, lr, rrx
     188:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]
     18c:	5f65646f 	svcpl	0x0065646f
     190:	505f4641 	subspl	r4, pc, r1, asr #12
     194:	50470050 	subpl	r0, r7, r0, asr r0
     198:	505f4f49 	subspl	r4, pc, r9, asr #30
     19c:	47006e69 	strmi	r6, [r0, -r9, ror #28]
     1a0:	5f4f4950 	svcpl	0x004f4950
     1a4:	74696e49 	strbtvc	r6, [r9], #-3657
     1a8:	75727453 	ldrbvc	r7, [r2, #-1107]!
     1ac:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
     1b0:	68730065 	ldmdavs	r3!, {r0, r2, r5, r6}^
     1b4:	2074726f 	rsbscs	r7, r4, pc, ror #4
     1b8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     1bc:	4f495047 	svcmi	0x00495047
     1c0:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     1c4:	70795474 	rsbsvc	r5, r9, r4, ror r4
     1c8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     1cc:	54776700 	ldrbtpl	r6, [r7], #-1792
     1d0:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
     1d4:	6c654467 	cfstrdvs	mvd4, [r5], #-412
     1d8:	48007961 	stmdami	r0, {r0, r5, r6, r8, fp, ip, sp, lr}
     1dc:	74534553 	ldrbvc	r4, [r3], #-1363
     1e0:	55747261 	ldrbpl	r7, [r4, #-609]!
     1e4:	61745370 	cmnvs	r4, r0, ror r3
     1e8:	00737574 	rsbseq	r7, r3, r4, ror r5
     1ec:	4f525245 	svcmi	0x00525245
     1f0:	50470052 	subpl	r0, r7, r2, asr r0
     1f4:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]
     1f8:	5f65646f 	svcpl	0x0065646f
     1fc:	004e4941 	subeq	r4, lr, r1, asr #18
     200:	4f495047 	svcmi	0x00495047
     204:	65657053 	strbvs	r7, [r5, #-83]!
     208:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     20c:	65446570 	strbvs	r6, [r4, #-1392]
     210:	49440066 	stmdbmi	r4, {r1, r2, r5, r6}^
     214:	4c424153 	stfmie	f4, [r2], {83}
     218:	50470045 	subpl	r0, r7, r5, asr #32
     21c:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]
     220:	5f65646f 	svcpl	0x0065646f
     224:	5f74754f 	svcpl	0x0074754f
     228:	4700444f 	strmi	r4, [r0, -pc, asr #8]
     22c:	4d4f4950 	stclmi	9, cr4, [pc, #-320]
     230:	5f65646f 	svcpl	0x0065646f
     234:	65707954 	ldrbvs	r7, [r0, #-2388]!
     238:	00666544 	rsbeq	r6, r6, r4, asr #10
     23c:	46737542 	ldrbtmi	r7, [r3], -r2, asr #10
     240:	746c7561 	strbtvc	r7, [ip], #-1377
     244:	65637845 	strbvs	r7, [r3, #-2117]!
     248:	6f697470 	svcvs	0x00697470
     24c:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     250:	5f324954 	svcpl	0x00324954
     254:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     258:	6c646e61 	stclvs	14, cr6, [r4], #-388
     25c:	44007265 	strmi	r7, [r0], #-613
     260:	5f32414d 	svcpl	0x0032414d
     264:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     268:	326c656e 	rsbcc	r6, ip, #461373440	; 0x1b800000
     26c:	5152495f 	cmppl	r2, pc, asr r9
     270:	646e6148 	strbtvs	r6, [lr], #-328
     274:	0072656c 	rsbseq	r6, r2, ip, ror #10
     278:	314d4954 	cmpcc	sp, r4, asr r9
     27c:	4b52425f 	blmi	1490c00 <__Stack_Size+0x1490800>
     280:	5152495f 	cmppl	r2, pc, asr r9
     284:	646e6148 	strbtvs	r6, [lr], #-328
     288:	0072656c 	rsbseq	r6, r2, ip, ror #10
     28c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     290:	52495f30 	subpl	r5, r9, #192	; 0xc0
     294:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     298:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     29c:	44565000 	ldrbmi	r5, [r6]
     2a0:	5152495f 	cmppl	r2, pc, asr r9
     2a4:	646e6148 	strbtvs	r6, [lr], #-328
     2a8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     2ac:	64726148 	ldrbtvs	r6, [r2], #-328
     2b0:	6c756146 	ldfvse	f6, [r5], #-280
     2b4:	63784574 	cmnvs	r8, #486539264	; 0x1d000000
     2b8:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
     2bc:	41006e6f 	tstmi	r0, pc, ror #28
     2c0:	5f314344 	svcpl	0x00314344
     2c4:	52495f32 	subpl	r5, r9, #200	; 0xc8
     2c8:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     2cc:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     2d0:	4d415400 	cfstrdmi	mvd5, [r1]
     2d4:	5f524550 	svcpl	0x00524550
     2d8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     2dc:	6c646e61 	stclvs	14, cr6, [r4], #-388
     2e0:	54007265 	strpl	r7, [r0], #-613
     2e4:	5f324d49 	svcpl	0x00324d49
     2e8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     2ec:	6c646e61 	stclvs	14, cr6, [r4], #-388
     2f0:	43007265 	movwmi	r7, #613	; 0x265
     2f4:	525f4e41 	subspl	r4, pc, #1040	; 0x410
     2f8:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^
     2fc:	61485152 	cmpvs	r8, r2, asr r1
     300:	656c646e 	strbvs	r6, [ip, #-1134]!
     304:	79530072 	ldmdbvc	r3, {r1, r4, r5, r6}^
     308:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
     30c:	6e61486b 	cdpvs	8, 6, cr4, cr1, cr11, {3}
     310:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     314:	62654400 	rsbvs	r4, r5, #0	; 0x0
     318:	6f4d6775 	svcvs	0x004d6775
     31c:	6f74696e 	svcvs	0x0074696e
     320:	4d440072 	stclmi	0, cr0, [r4, #-456]
     324:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     328:	6e6e6168 	powvsez	f6, f6, #0.0
     32c:	5f336c65 	svcpl	0x00336c65
     330:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     334:	6c646e61 	stclvs	14, cr6, [r4], #-388
     338:	54007265 	strpl	r7, [r0], #-613
     33c:	5f314d49 	svcpl	0x00314d49
     340:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^
     344:	61485152 	cmpvs	r8, r2, asr r1
     348:	656c646e 	strbvs	r6, [ip, #-1134]!
     34c:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     350:	555f384d 	ldrbpl	r3, [pc, #-2125]	; fffffb0b <SCS_BASE+0x1fff1b0b>
     354:	52495f50 	subpl	r5, r9, #320	; 0x140
     358:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     35c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     360:	4d495400 	cfstrdmi	mvd5, [r9]
     364:	43435f31 	movtmi	r5, #16177	; 0x3f31
     368:	5152495f 	cmppl	r2, pc, asr r9
     36c:	646e6148 	strbtvs	r6, [lr], #-328
     370:	0072656c 	rsbseq	r6, r2, ip, ror #10
     374:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     378:	5f43435f 	svcpl	0x0043435f
     37c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     380:	6c646e61 	stclvs	14, cr6, [r4], #-388
     384:	45007265 	strmi	r7, [r0, #-613]
     388:	31495458 	cmpcc	r9, r8, asr r4
     38c:	30315f35 	eorscc	r5, r1, r5, lsr pc
     390:	5152495f 	cmppl	r2, pc, asr r9
     394:	646e6148 	strbtvs	r6, [lr], #-328
     398:	0072656c 	rsbseq	r6, r2, ip, ror #10
     39c:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     3a0:	4752545f 	undefined
     3a4:	4d4f435f 	stclmi	3, cr4, [pc, #-380]
     3a8:	5152495f 	cmppl	r2, pc, asr r9
     3ac:	646e6148 	strbtvs	r6, [lr], #-328
     3b0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     3b4:	31414d44 	cmpcc	r1, r4, asr #26
     3b8:	6168435f 	cmnvs	r8, pc, asr r3
     3bc:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     3c0:	52495f31 	subpl	r5, r9, #196	; 0xc4
     3c4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     3c8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     3cc:	43565300 	cmpmi	r6, #0	; 0x0
     3d0:	646e6148 	strbtvs	r6, [lr], #-328
     3d4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     3d8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     3dc:	495f3354 	ldmdbmi	pc, {r2, r4, r6, r8, r9, ip, sp}^
     3e0:	61485152 	cmpvs	r8, r2, asr r1
     3e4:	656c646e 	strbvs	r6, [ip, #-1134]!
     3e8:	54520072 	ldrbpl	r0, [r2], #-114
     3ec:	52495f43 	subpl	r5, r9, #268	; 0x10c
     3f0:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     3f4:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     3f8:	4d495400 	cfstrdmi	mvd5, [r9]
     3fc:	52495f35 	subpl	r5, r9, #212	; 0xd4
     400:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     404:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     408:	414d4400 	cmpmi	sp, r0, lsl #8
     40c:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     410:	656e6e61 	strbvs	r6, [lr, #-3681]!
     414:	355f346c 	ldrbcc	r3, [pc, #-1132]	; ffffffb0 <SCS_BASE+0x1fff1fb0>
     418:	5152495f 	cmppl	r2, pc, asr r9
     41c:	646e6148 	strbtvs	r6, [lr], #-328
     420:	0072656c 	rsbseq	r6, r2, ip, ror #10
     424:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!
     428:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
     42c:	63784565 	cmnvs	r8, #423624704	; 0x19400000
     430:	69747065 	ldmdbvs	r4!, {r0, r2, r5, r6, ip, sp, lr}^
     434:	4e006e6f 	cdpmi	14, 0, cr6, cr0, cr15, {3}
     438:	7845494d 	stmdavc	r5, {r0, r2, r3, r6, r8, fp, lr}^
     43c:	74706563 	ldrbtvc	r6, [r0], #-1379
     440:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     444:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     448:	52495f33 	subpl	r5, r9, #204	; 0xcc
     44c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     450:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     454:	414d4400 	cmpmi	sp, r0, lsl #8
     458:	68435f32 	stmdavs	r3, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     45c:	656e6e61 	strbvs	r6, [lr, #-3681]!
     460:	495f336c 	ldmdbmi	pc, {r2, r3, r5, r6, r8, r9, ip, sp}^
     464:	61485152 	cmpvs	r8, r2, asr r1
     468:	656c646e 	strbvs	r6, [ip, #-1134]!
     46c:	53550072 	cmppl	r5, #114	; 0x72
     470:	6b615742 	blvs	1856180 <__Stack_Size+0x1855d80>
     474:	5f705565 	svcpl	0x00705565
     478:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     47c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     480:	53007265 	movwpl	r7, #613	; 0x265
     484:	5f4f4944 	svcpl	0x004f4944
     488:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     48c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     490:	46007265 	strmi	r7, [r0], -r5, ror #4
     494:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     498:	5152495f 	cmppl	r2, pc, asr r9
     49c:	646e6148 	strbtvs	r6, [lr], #-328
     4a0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     4a4:	67617355 	undefined
     4a8:	75614665 	strbvc	r4, [r1, #-1637]!
     4ac:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
     4b0:	74706563 	ldrbtvc	r6, [r0], #-1379
     4b4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     4b8:	31433249 	cmpcc	r3, r9, asr #4
     4bc:	5f56455f 	svcpl	0x0056455f
     4c0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     4c4:	6c646e61 	stclvs	14, cr6, [r4], #-388
     4c8:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     4cc:	6c414354 	mcrrvs	3, 5, r4, r1, cr4
     4d0:	5f6d7261 	svcpl	0x006d7261
     4d4:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     4d8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     4dc:	44007265 	strmi	r7, [r0], #-613
     4e0:	5f31414d 	svcpl	0x0031414d
     4e4:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     4e8:	366c656e 	strbtcc	r6, [ip], -lr, ror #10
     4ec:	5152495f 	cmppl	r2, pc, asr r9
     4f0:	646e6148 	strbtvs	r6, [lr], #-328
     4f4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     4f8:	33495053 	movtcc	r5, #36947	; 0x9053
     4fc:	5152495f 	cmppl	r2, pc, asr r9
     500:	646e6148 	strbtvs	r6, [lr], #-328
     504:	0072656c 	rsbseq	r6, r2, ip, ror #10
     508:	334d4954 	movtcc	r4, #55636	; 0xd954
     50c:	5152495f 	cmppl	r2, pc, asr r9
     510:	646e6148 	strbtvs	r6, [lr], #-328
     514:	0072656c 	rsbseq	r6, r2, ip, ror #10
     518:	5f4e4143 	svcpl	0x004e4143
     51c:	5f454353 	svcpl	0x00454353
     520:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     524:	6c646e61 	stclvs	14, cr6, [r4], #-388
     528:	44007265 	strmi	r7, [r0], #-613
     52c:	5f31414d 	svcpl	0x0031414d
     530:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     534:	346c656e 	strbtcc	r6, [ip], #-1390
     538:	5152495f 	cmppl	r2, pc, asr r9
     53c:	646e6148 	strbtvs	r6, [lr], #-328
     540:	0072656c 	rsbseq	r6, r2, ip, ror #10
     544:	434d5346 	movtmi	r5, #54086	; 0xd346
     548:	5152495f 	cmppl	r2, pc, asr r9
     54c:	646e6148 	strbtvs	r6, [lr], #-328
     550:	0072656c 	rsbseq	r6, r2, ip, ror #10
     554:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     558:	52495f31 	subpl	r5, r9, #196	; 0xc4
     55c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     560:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     564:	43444100 	movtmi	r4, #16640	; 0x4100
     568:	52495f33 	subpl	r5, r9, #204	; 0xcc
     56c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     570:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     574:	43324900 	teqmi	r2, #0	; 0x0
     578:	56455f32 	undefined
     57c:	5152495f 	cmppl	r2, pc, asr r9
     580:	646e6148 	strbtvs	r6, [lr], #-328
     584:	0072656c 	rsbseq	r6, r2, ip, ror #10
     588:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     58c:	5f52455f 	svcpl	0x0052455f
     590:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     594:	6c646e61 	stclvs	14, cr6, [r4], #-388
     598:	55007265 	strpl	r7, [r0, #-613]
     59c:	54524153 	ldrbpl	r4, [r2], #-339
     5a0:	52495f31 	subpl	r5, r9, #196	; 0xc4
     5a4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     5a8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     5ac:	42535500 	subsmi	r5, r3, #0	; 0x0
     5b0:	5f504c5f 	svcpl	0x00504c5f
     5b4:	5f4e4143 	svcpl	0x004e4143
     5b8:	5f305852 	svcpl	0x00305852
     5bc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     5c0:	6c646e61 	stclvs	14, cr6, [r4], #-388
     5c4:	55007265 	strpl	r7, [r0, #-613]
     5c8:	485f4253 	ldmdami	pc, {r0, r1, r4, r6, r9, lr}^
     5cc:	41435f50 	cmpmi	r3, r0, asr pc
     5d0:	58545f4e 	ldmdapl	r4, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     5d4:	5152495f 	cmppl	r2, pc, asr r9
     5d8:	646e6148 	strbtvs	r6, [lr], #-328
     5dc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     5e0:	31433249 	cmpcc	r3, r9, asr #4
     5e4:	5f52455f 	svcpl	0x0052455f
     5e8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     5ec:	6c646e61 	stclvs	14, cr6, [r4], #-388
     5f0:	53007265 	movwpl	r7, #613	; 0x265
     5f4:	5f314950 	svcpl	0x00314950
     5f8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     5fc:	6c646e61 	stclvs	14, cr6, [r4], #-388
     600:	54007265 	strpl	r7, [r0], #-613
     604:	5f384d49 	svcpl	0x00384d49
     608:	5f4b5242 	svcpl	0x004b5242
     60c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     610:	6c646e61 	stclvs	14, cr6, [r4], #-388
     614:	44007265 	strmi	r7, [r0], #-613
     618:	5f31414d 	svcpl	0x0031414d
     61c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     620:	326c656e 	rsbcc	r6, ip, #461373440	; 0x1b800000
     624:	5152495f 	cmppl	r2, pc, asr r9
     628:	646e6148 	strbtvs	r6, [lr], #-328
     62c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     630:	54524155 	ldrbpl	r4, [r2], #-341
     634:	52495f34 	subpl	r5, r9, #208	; 0xd0
     638:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     63c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     640:	41535500 	cmpmi	r3, r0, lsl #10
     644:	5f325452 	svcpl	0x00325452
     648:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     64c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     650:	54007265 	strpl	r7, [r0], #-613
     654:	5f344d49 	svcpl	0x00344d49
     658:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     65c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     660:	54007265 	strpl	r7, [r0], #-613
     664:	5f314d49 	svcpl	0x00314d49
     668:	5f475254 	svcpl	0x00475254
     66c:	5f4d4f43 	svcpl	0x004d4f43
     670:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     674:	6c646e61 	stclvs	14, cr6, [r4], #-388
     678:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     67c:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^
     680:	61485152 	cmpvs	r8, r2, asr r1
     684:	656c646e 	strbvs	r6, [ip, #-1134]!
     688:	4d440072 	stclmi	0, cr0, [r4, #-456]
     68c:	435f3241 	cmpmi	pc, #268435460	; 0x10000004
     690:	6e6e6168 	powvsez	f6, f6, #0.0
     694:	5f316c65 	svcpl	0x00316c65
     698:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     69c:	6c646e61 	stclvs	14, cr6, [r4], #-388
     6a0:	54007265 	strpl	r7, [r0], #-613
     6a4:	5f374d49 	svcpl	0x00374d49
     6a8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     6ac:	6c646e61 	stclvs	14, cr6, [r4], #-388
     6b0:	57007265 	strpl	r7, [r0, -r5, ror #4]
     6b4:	5f474457 	svcpl	0x00474457
     6b8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     6bc:	6c646e61 	stclvs	14, cr6, [r4], #-388
     6c0:	53007265 	movwpl	r7, #613	; 0x265
     6c4:	5f324950 	svcpl	0x00324950
     6c8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     6cc:	6c646e61 	stclvs	14, cr6, [r4], #-388
     6d0:	45007265 	strmi	r7, [r0, #-613]
     6d4:	34495458 	strbcc	r5, [r9], #-1112
     6d8:	5152495f 	cmppl	r2, pc, asr r9
     6dc:	646e6148 	strbtvs	r6, [lr], #-328
     6e0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     6e4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     6e8:	5f355f39 	svcpl	0x00355f39
     6ec:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     6f0:	6c646e61 	stclvs	14, cr6, [r4], #-388
     6f4:	50007265 	andpl	r7, r0, r5, ror #4
     6f8:	53646e65 	cmnpl	r4, #1616	; 0x650
     6fc:	54004356 	strpl	r4, [r0], #-854
     700:	5f364d49 	svcpl	0x00364d49
     704:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     708:	6c646e61 	stclvs	14, cr6, [r4], #-388
     70c:	41007265 	tstmi	r0, r5, ror #4
     710:	732f5050 	teqvc	pc, #80	; 0x50
     714:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
     718:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     71c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     720:	2e74695f 	mrccs	9, 3, r6, cr4, cr15, {2}
     724:	4d440063 	stclmi	0, cr0, [r4, #-396]
     728:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     72c:	6e6e6168 	powvsez	f6, f6, #0.0
     730:	5f376c65 	svcpl	0x00376c65
     734:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     738:	6c646e61 	stclvs	14, cr6, [r4], #-388
     73c:	55007265 	strpl	r7, [r0, #-613]
     740:	35545241 	ldrbcc	r5, [r4, #-577]
     744:	5152495f 	cmppl	r2, pc, asr r9
     748:	646e6148 	strbtvs	r6, [lr], #-328
     74c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     750:	31414d44 	cmpcc	r1, r4, asr #26
     754:	6168435f 	cmnvs	r8, pc, asr r3
     758:	6c656e6e 	stclvs	14, cr6, [r5], #-440
     75c:	52495f35 	subpl	r5, r9, #212	; 0xd4
     760:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     764:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     768:	414c4600 	cmpmi	ip, r0, lsl #12
     76c:	495f4853 	ldmdbmi	pc, {r0, r1, r4, r6, fp, lr}^
     770:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
     774:	00676966 	rsbeq	r6, r7, r6, ror #18
     778:	495f424f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r9, lr}^
     77c:	00474457 	subeq	r4, r7, r7, asr r4
     780:	32505257 	subscc	r5, r0, #1879048197	; 0x70000005
     784:	7461445f 	strbtvc	r4, [r1], #-1119
     788:	424f0061 	submi	r0, pc, #97	; 0x61
     78c:	4f54535f 	svcmi	0x0054535f
     790:	4c460050 	mcrrmi	0, 5, r0, r6, cr0
     794:	5f485341 	svcpl	0x00485341
     798:	73617245 	cmnvc	r1, #1342177284	; 0x50000004
     79c:	74704f65 	ldrbtvc	r4, [r0], #-3941
     7a0:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
     7a4:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
     7a8:	61657200 	cmnvs	r5, r0, lsl #4
     7ac:	74756f64 	ldrbtvc	r6, [r5], #-3940
     7b0:	74617473 	strbtvc	r7, [r1], #-1139
     7b4:	46007375 	undefined
     7b8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     7bc:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
     7c0:	575f524f 	ldrbpl	r5, [pc, -pc, asr #4]
     7c4:	46005052 	undefined
     7c8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     7cc:	6172455f 	cmnvs	r2, pc, asr r5
     7d0:	61506573 	cmpvs	r0, r3, ror r5
     7d4:	46006567 	strmi	r6, [r0], -r7, ror #10
     7d8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     7dc:	74614c5f 	strbtvc	r4, [r1], #-3167
     7e0:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     7e4:	414c4600 	cmpmi	ip, r0, lsl #12
     7e8:	475f4853 	undefined
     7ec:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
     7f0:	74656665 	strbtvc	r6, [r5], #-1637
     7f4:	75426863 	strbvc	r6, [r2, #-2147]
     7f8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     7fc:	74617453 	strbtvc	r7, [r1], #-1107
     800:	57007375 	smlsdxpl	r0, r5, r3, r7
     804:	00525052 	subseq	r5, r2, r2, asr r0
     808:	53414c46 	movtpl	r4, #7238	; 0x1c46
     80c:	6e555f48 	cdpvs	15, 5, cr5, cr5, cr8, {2}
     810:	6b636f6c 	blvs	18dc5c8 <__Stack_Size+0x18dc1c8>
     814:	414c4600 	cmpmi	ip, r0, lsl #12
     818:	455f4853 	ldrbmi	r4, [pc, #-2131]	; ffffffcd <SCS_BASE+0x1fff1fcd>
     81c:	65736172 	ldrbvs	r6, [r3, #-370]!
     820:	506c6c41 	rsbpl	r6, ip, r1, asr #24
     824:	73656761 	cmnvc	r5, #25427968	; 0x1840000
     828:	6c656400 	cfstrdvs	mvd6, [r5]
     82c:	46007961 	strmi	r7, [r0], -r1, ror #18
     830:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     834:	6174535f 	cmnvs	r4, pc, asr r3
     838:	00737574 	rsbseq	r7, r3, r4, ror r5
     83c:	5377654e 	cmnpl	r7, #327155712	; 0x13800000
     840:	65746174 	ldrbvs	r6, [r4, #-372]!
     844:	50525700 	subspl	r5, r2, r0, lsl #14
     848:	52570030 	subspl	r0, r7, #48	; 0x30
     84c:	57003150 	smlsdpl	r0, r0, r1, r3
     850:	00325052 	eorseq	r5, r2, r2, asr r0
     854:	33505257 	cmpcc	r0, #1879048197	; 0x70000005
     858:	414c4600 	cmpmi	ip, r0, lsl #12
     85c:	475f4853 	undefined
     860:	72577465 	subsvc	r7, r7, #1694498816	; 0x65000000
     864:	50657469 	rsbpl	r7, r5, r9, ror #8
     868:	65746f72 	ldrbvs	r6, [r4, #-3954]!
     86c:	6f697463 	svcvs	0x00697463
     870:	74704f6e 	ldrbtvc	r4, [r0], #-3950
     874:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
     878:	00657479 	rsbeq	r7, r5, r9, ror r4
     87c:	4b54504f 	blmi	15149c0 <__Stack_Size+0x15145c0>
     880:	00525945 	subseq	r5, r2, r5, asr #18
     884:	53414c46 	movtpl	r4, #7238	; 0x1c46
     888:	73555f48 	cmpvc	r5, #288	; 0x120
     88c:	704f7265 	subvc	r7, pc, r5, ror #4
     890:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     894:	65747942 	ldrbvs	r7, [r4, #-2370]!
     898:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     89c:	46006769 	strmi	r6, [r0], -r9, ror #14
     8a0:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     8a4:	6165525f 	cmnvs	r5, pc, asr r2
     8a8:	74754f64 	ldrbtvc	r4, [r5], #-3940
     8ac:	746f7250 	strbtvc	r7, [pc], #592	; 8b4 <__Stack_Size+0x4b4>
     8b0:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     8b4:	66006e6f 	strvs	r6, [r0], -pc, ror #28
     8b8:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     8bc:	74617473 	strbtvc	r7, [r1], #-1139
     8c0:	62007375 	andvs	r7, r0, #-738197503	; 0xd4000001
     8c4:	74737469 	ldrbtvc	r7, [r3], #-1129
     8c8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     8cc:	67615000 	strbvs	r5, [r1, -r0]!
     8d0:	64415f65 	strbvs	r5, [r1], #-3941
     8d4:	73657264 	cmnvc	r5, #1073741830	; 0x40000006
     8d8:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
     8dc:	5f485341 	svcpl	0x00485341
     8e0:	4f525245 	svcmi	0x00525245
     8e4:	47505f52 	undefined
     8e8:	414c4600 	cmpmi	ip, r0, lsl #12
     8ec:	4c5f4853 	mrrcmi	8, 5, r4, pc, cr3
     8f0:	006b636f 	rsbeq	r6, fp, pc, ror #6
     8f4:	33505257 	cmpcc	r0, #1879048197	; 0x70000005
     8f8:	7461445f 	strbtvc	r4, [r1], #-1119
     8fc:	74730061 	ldrbtvc	r0, [r3], #-97
     900:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     904:	5f783031 	svcpl	0x00783031
     908:	2f62696c 	svccs	0x0062696c
     90c:	2f637273 	svccs	0x00637273
     910:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     914:	30316632 	eorscc	r6, r1, r2, lsr r6
     918:	6c665f78 	stclvs	15, cr5, [r6], #-480
     91c:	2e687361 	cdpcs	3, 6, cr7, cr8, cr1, {3}
     920:	4c460063 	mcrrmi	0, 6, r0, r6, cr3
     924:	5f485341 	svcpl	0x00485341
     928:	66657250 	undefined
     92c:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     930:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     934:	6d437265 	sfmvs	f7, 2, [r3, #-404]
     938:	4c460064 	mcrrmi	0, 6, r0, r6, cr4
     93c:	5f485341 	svcpl	0x00485341
     940:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
     944:	5367616c 	cmnpl	r7, #27	; 0x1b
     948:	75746174 	ldrbvc	r6, [r4, #-372]!
     94c:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
     950:	5f485341 	svcpl	0x00485341
     954:	61656c43 	cmnvs	r5, r3, asr #24
     958:	616c4672 	smcvs	50274
     95c:	4c460067 	mcrrmi	0, 6, r0, r6, cr7
     960:	5f485341 	svcpl	0x00485341
     964:	504d4f43 	subpl	r4, sp, r3, asr #30
     968:	4554454c 	ldrbmi	r4, [r4, #-1356]
     96c:	414c4600 	cmpmi	ip, r0, lsl #12
     970:	425f4853 	subsmi	r4, pc, #5439488	; 0x530000
     974:	00595355 	subseq	r5, r9, r5, asr r3
     978:	31505257 	cmpcc	r0, r7, asr r2
     97c:	7461445f 	strbtvc	r4, [r1], #-1119
     980:	4c460061 	mcrrmi	0, 6, r0, r6, cr1
     984:	5f485341 	svcpl	0x00485341
     988:	454d4954 	strbmi	r4, [sp, #-2388]
     98c:	0054554f 	subseq	r5, r4, pc, asr #10
     990:	656d6954 	strbvs	r6, [sp, #-2388]!
     994:	0074756f 	rsbseq	r7, r4, pc, ror #10
     998:	53414c46 	movtpl	r4, #7238	; 0x1c46
     99c:	65475f48 	strbvs	r5, [r7, #-3912]
     9a0:	61655274 	smcvs	21796
     9a4:	74754f64 	ldrbtvc	r4, [r5], #-3940
     9a8:	746f7250 	strbtvc	r7, [pc], #592	; 9b0 <__Stack_Size+0x5b0>
     9ac:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     9b0:	74536e6f 	ldrbvc	r6, [r3], #-3695
     9b4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     9b8:	5f424f00 	svcpl	0x00424f00
     9bc:	42445453 	submi	r5, r4, #1392508928	; 0x53000000
     9c0:	52570059 	subspl	r0, r7, #89	; 0x59
     9c4:	445f3050 	ldrbmi	r3, [pc], #80	; 9cc <__Stack_Size+0x5cc>
     9c8:	00617461 	rsbeq	r7, r1, r1, ror #8
     9cc:	53414c46 	movtpl	r4, #7238	; 0x1c46
     9d0:	61485f48 	cmpvs	r8, r8, asr #30
     9d4:	7943666c 	stmdbvc	r3, {r2, r3, r5, r6, r9, sl, sp, lr}^
     9d8:	41656c63 	cmnmi	r5, r3, ror #24
     9dc:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
     9e0:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
     9e4:	5f485341 	svcpl	0x00485341
     9e8:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     9ec:	75746174 	ldrbvc	r6, [r4, #-372]!
     9f0:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
     9f4:	5f485341 	svcpl	0x00485341
     9f8:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     9fc:	7257656c 	subsvc	r6, r7, #452984832	; 0x1b000000
     a00:	50657469 	rsbpl	r7, r5, r9, ror #8
     a04:	65746f72 	ldrbvs	r6, [r4, #-3954]!
     a08:	6f697463 	svcvs	0x00697463
     a0c:	4c46006e 	mcrrmi	0, 6, r0, r6, cr14
     a10:	5f485341 	svcpl	0x00485341
     a14:	4c746553 	cfldr64mi	mvdx6, [r4], #-332
     a18:	6e657461 	cdpvs	4, 6, cr7, cr5, cr1, {3}
     a1c:	46007963 	strmi	r7, [r0], -r3, ror #18
     a20:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     a24:	6c61485f 	stclvs	8, cr4, [r1], #-380
     a28:	63794366 	cmnvs	r9, #-1744830463	; 0x98000001
     a2c:	6341656c 	movtvs	r6, #5484	; 0x156c
     a30:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
     a34:	00646d43 	rsbeq	r6, r4, r3, asr #26
     a38:	53414c46 	movtpl	r4, #7238	; 0x1c46
     a3c:	72505f48 	subsvc	r5, r0, #288	; 0x120
     a40:	6172676f 	cmnvs	r2, pc, ror #14
     a44:	74704f6d 	ldrbtvc	r4, [r0], #-3949
     a48:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
     a4c:	44657479 	strbtmi	r7, [r5], #-1145
     a50:	00617461 	rsbeq	r7, r1, r1, ror #8
     a54:	53414c46 	movtpl	r4, #7238	; 0x1c46
     a58:	65475f48 	strbvs	r5, [r7, #-3912]
     a5c:	65735574 	ldrbvs	r5, [r3, #-1396]!
     a60:	74704f72 	ldrbtvc	r4, [r0], #-3954
     a64:	426e6f69 	rsbmi	r6, lr, #420	; 0x1a4
     a68:	00657479 	rsbeq	r7, r5, r9, ror r4
     a6c:	53414c46 	movtpl	r4, #7238	; 0x1c46
     a70:	72505f48 	subsvc	r5, r0, #288	; 0x120
     a74:	6172676f 	cmnvs	r2, pc, ror #14
     a78:	6c61486d 	stclvs	8, cr4, [r1], #-436
     a7c:	726f5766 	rsbvc	r5, pc, #26738688	; 0x1980000
     a80:	4c460064 	mcrrmi	0, 6, r0, r6, cr4
     a84:	5f485341 	svcpl	0x00485341
     a88:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
     a8c:	6e754600 	cdpvs	6, 7, cr4, cr5, cr0, {0}
     a90:	6f697463 	svcvs	0x00697463
     a94:	536c616e 	cmnpl	ip, #-2147483621	; 0x8000001b
     a98:	65746174 	ldrbvs	r6, [r4, #-372]!
     a9c:	45535500 	ldrbmi	r5, [r3, #-1280]
     aa0:	61440052 	qdaddvs	r0, r2, r4
     aa4:	00306174 	eorseq	r6, r0, r4, ror r1
     aa8:	61746144 	cmnvs	r4, r4, asr #2
     aac:	4c460031 	mcrrmi	0, 3, r0, r6, cr1
     ab0:	5f485341 	svcpl	0x00485341
     ab4:	65676150 	strbvs	r6, [r7, #-336]!
     ab8:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
     abc:	5f485341 	svcpl	0x00485341
     ac0:	46005449 	strmi	r5, [r0], -r9, asr #8
     ac4:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     ac8:	6f72505f 	svcvs	0x0072505f
     acc:	6d617267 	sfmvs	f7, 2, [r1, #-412]!
     ad0:	64726f57 	ldrbtvs	r6, [r2], #-3927
     ad4:	53455200 	movtpl	r5, #20992	; 0x5200
     ad8:	45565245 	ldrbmi	r5, [r6, #-581]
     adc:	4c460044 	mcrrmi	0, 4, r0, r6, cr4
     ae0:	5f485341 	svcpl	0x00485341
     ae4:	74696157 	strbtvc	r6, [r9], #-343
     ae8:	4c726f46 	ldclmi	15, cr6, [r2], #-280
     aec:	4f747361 	svcmi	0x00747361
     af0:	61726570 	cmnvs	r2, r0, ror r5
     af4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     af8:	414c4600 	cmpmi	ip, r0, lsl #12
     afc:	505f4853 	subspl	r4, pc, r3, asr r8
     b00:	65666572 	strbvs	r6, [r6, #-1394]!
     b04:	42686374 	rsbmi	r6, r8, #-805306367	; 0xd0000001
     b08:	65666675 	strbvs	r6, [r6, #-1653]!
     b0c:	50470072 	subpl	r0, r7, r2, ror r0
     b10:	545f4f49 	ldrbpl	r4, [pc], #3913	; b18 <__Stack_Size+0x718>
     b14:	44657079 	strbtmi	r7, [r5], #-121
     b18:	70006665 	andvc	r6, r0, r5, ror #12
     b1c:	6f706e69 	svcvs	0x00706e69
     b20:	69420073 	stmdbvs	r2, {r0, r1, r4, r5, r6}^
     b24:	45535f74 	ldrbmi	r5, [r3, #-3956]
     b28:	50470054 	subpl	r0, r7, r4, asr r0
     b2c:	525f4f49 	subspl	r4, pc, #292	; 0x124
     b30:	4f646165 	svcmi	0x00646165
     b34:	75707475 	ldrbvc	r7, [r0, #-1141]!
     b38:	74614474 	strbtvc	r4, [r1], #-1140
     b3c:	50470061 	subpl	r0, r7, r1, rrx
     b40:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; fffffbff <SCS_BASE+0x1fff1bff>
     b44:	746e6576 	strbtvc	r6, [lr], #-1398
     b48:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     b4c:	6d437475 	cfstrdvs	mvd7, [r3, #-468]
     b50:	50470064 	subpl	r0, r7, r4, rrx
     b54:	535f4f49 	cmppl	pc, #292	; 0x124
     b58:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
     b5c:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
     b60:	69420074 	stmdbvs	r2, {r2, r4, r5, r6}^
     b64:	6c615674 	stclvs	6, cr5, [r1], #-464
     b68:	74694200 	strbtvc	r4, [r9], #-512
     b6c:	5345525f 	movtpl	r5, #21087	; 0x525f
     b70:	47005445 	strmi	r5, [r0, -r5, asr #8]
     b74:	5f4f4950 	svcpl	0x004f4950
     b78:	74697257 	strbtvc	r7, [r9], #-599
     b7c:	74694265 	strbtvc	r4, [r9], #-613
     b80:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     b84:	65535f4f 	ldrbvs	r5, [r3, #-3919]
     b88:	74694274 	strbtvc	r4, [r9], #-628
     b8c:	50470073 	subpl	r0, r7, r3, ror r0
     b90:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^
     b94:	0074696e 	rsbseq	r6, r4, lr, ror #18
     b98:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     b9c:	73005243 	movwvc	r5, #579	; 0x243
     ba0:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     ba4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     ba8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     bac:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     bb0:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!
     bb4:	31663233 	cmncc	r6, r3, lsr r2
     bb8:	675f7830 	smmlarvs	pc, r0, r8, r7
     bbc:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
     bc0:	69700063 	ldmdbvs	r0!, {r0, r1, r5, r6}^
     bc4:	73616d6e 	cmnvc	r1, #7040	; 0x1b80
     bc8:	5047006b 	subpl	r0, r7, fp, rrx
     bcc:	505f4f49 	subspl	r4, pc, r9, asr #30
     bd0:	5374726f 	cmnpl	r4, #-268435450	; 0xf0000006
     bd4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     bd8:	50470065 	subpl	r0, r7, r5, rrx
     bdc:	445f4f49 	ldrbmi	r4, [pc], #3913	; be4 <__Stack_Size+0x7e4>
     be0:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     be4:	50470074 	subpl	r0, r7, r4, ror r0
     be8:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; fffffca7 <SCS_BASE+0x1fff1ca7>
     bec:	746e6576 	strbtvc	r6, [lr], #-1398
     bf0:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     bf4:	6f437475 	svcvs	0x00437475
     bf8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     bfc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     c00:	65525f4f 	ldrbvs	r5, [r2, #-3919]
     c04:	0070616d 	rsbseq	r6, r0, sp, ror #2
     c08:	4f495047 	svcmi	0x00495047
     c0c:	6165525f 	cmnvs	r5, pc, asr r2
     c10:	706e4964 	rsbvc	r4, lr, r4, ror #18
     c14:	61447475 	cmpvs	r4, r5, ror r4
     c18:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
     c1c:	6d740074 	ldclvs	0, cr0, [r4, #-464]!
     c20:	67657270 	undefined
     c24:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     c28:	65525f4f 	ldrbvs	r5, [r2, #-3919]
     c2c:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
     c30:	00737469 	rsbseq	r7, r3, r9, ror #8
     c34:	74726f50 	ldrbtvc	r6, [r2], #-3920
     c38:	006c6156 	rsbeq	r6, ip, r6, asr r1
     c3c:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
     c40:	6d746e65 	ldclvs	14, cr6, [r4, #-404]!
     c44:	0065646f 	rsbeq	r6, r5, pc, ror #8
     c48:	4f495047 	svcmi	0x00495047
     c4c:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     c50:	616d6552 	cmnvs	sp, r2, asr r5
     c54:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
     c58:	00676966 	rsbeq	r6, r7, r6, ror #18
     c5c:	4f495047 	svcmi	0x00495047
     c60:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     c64:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     c68:	47006563 	strmi	r6, [r0, -r3, ror #10]
     c6c:	5f4f4950 	svcpl	0x004f4950
     c70:	64616552 	strbtvs	r6, [r1], #-1362
     c74:	75706e49 	ldrbvc	r6, [r0, #-3657]!
     c78:	74614474 	strbtvc	r4, [r1], #-1140
     c7c:	6d740061 	ldclvs	0, cr0, [r4, #-388]!
     c80:	73616d70 	cmnvc	r1, #7168	; 0x1c00
     c84:	5047006b 	subpl	r0, r7, fp, rrx
     c88:	505f4f49 	subspl	r4, pc, r9, asr #30
     c8c:	6f4c6e69 	svcvs	0x004c6e69
     c90:	6f436b63 	svcvs	0x00436b63
     c94:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     c98:	72756300 	rsbsvc	r6, r5, #0	; 0x0
     c9c:	746e6572 	strbtvc	r6, [lr], #-1394
     ca0:	006e6970 	rsbeq	r6, lr, r0, ror r9
     ca4:	4f495047 	svcmi	0x00495047
     ca8:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     cac:	74006574 	strvc	r6, [r0], #-1396
     cb0:	0031706d 	eorseq	r7, r1, sp, rrx
     cb4:	4f495047 	svcmi	0x00495047
     cb8:	5458455f 	ldrbpl	r4, [r8], #-1375
     cbc:	6e694c49 	cdpvs	12, 6, cr4, cr9, cr9, {2}
     cc0:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
     cc4:	00676966 	rsbeq	r6, r7, r6, ror #18
     cc8:	41746942 	cmnmi	r4, r2, asr #18
     ccc:	6f697463 	svcvs	0x00697463
     cd0:	414d006e 	cmpmi	sp, lr, rrx
     cd4:	47005250 	smlsdmi	r0, r0, r2, r5
     cd8:	784f4950 	stmdavc	pc, {r4, r6, r8, fp, lr}^
     cdc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     ce0:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     ce4:	74537469 	ldrbvc	r7, [r3], #-1129
     ce8:	74637572 	strbtvc	r7, [r3], #-1394
     cec:	43564500 	cmpmi	r6, #0	; 0x0
     cf0:	50470052 	subpl	r0, r7, r2, asr r0
     cf4:	525f4f49 	subspl	r4, pc, #292	; 0x124
     cf8:	4f646165 	svcmi	0x00646165
     cfc:	75707475 	ldrbvc	r7, [r0, #-1141]!
     d00:	74614474 	strbtvc	r4, [r1], #-1140
     d04:	74694261 	strbtvc	r4, [r9], #-609
     d08:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     d0c:	46415f4f 	strbmi	r5, [r1], -pc, asr #30
     d10:	65444f49 	strbvs	r4, [r4, #-3913]
     d14:	74696e49 	strbtvc	r6, [r9], #-3657
     d18:	42414900 	submi	r4, r1, #0	; 0x0
     d1c:	564e0052 	undefined
     d20:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^
     d24:	5474696e 	ldrbtpl	r6, [r4], #-2414
     d28:	44657079 	strbtmi	r7, [r5], #-121
     d2c:	4e006665 	cfmadd32mi	mvax3, mvfx6, mvfx0, mvfx5
     d30:	5f434956 	svcpl	0x00434956
     d34:	61656c43 	cmnvs	r5, r3, asr #24
     d38:	51524972 	cmppl	r2, r2, ror r9
     d3c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     d40:	506c656e 	rsbpl	r6, ip, lr, ror #10
     d44:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     d48:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     d4c:	564e0074 	undefined
     d50:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^
     d54:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     d58:	656e6e61 	strbvs	r6, [lr, #-3681]!
     d5c:	646d436c 	strbtvs	r4, [sp], #-876
     d60:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     d64:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     d68:	74537469 	ldrbvc	r7, [r3], #-1129
     d6c:	74637572 	strbtvc	r7, [r3], #-1394
     d70:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     d74:	65475f43 	strbvs	r5, [r7, #-3907]
     d78:	72754374 	rsbsvc	r4, r5, #-805306367	; 0xd0000001
     d7c:	746e6572 	strbtvc	r6, [lr], #-1394
     d80:	646e6550 	strbtvs	r6, [lr], #-1360
     d84:	49676e69 	stmdbmi	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     d88:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     d8c:	656e6e61 	strbvs	r6, [lr, #-3681]!
     d90:	564e006c 	strbpl	r0, [lr], -ip, rrx
     d94:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
     d98:	61467465 	cmpvs	r6, r5, ror #8
     d9c:	41746c75 	cmnmi	r4, r5, ror ip
     da0:	65726464 	ldrbvs	r6, [r2, #-1124]!
     da4:	53007373 	movwpl	r7, #883	; 0x373
     da8:	65747379 	ldrbvs	r7, [r4, #-889]!
     dac:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
     db0:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     db4:	50627553 	rsbpl	r7, r2, r3, asr r5
     db8:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     dbc:	00797469 	rsbseq	r7, r9, r9, ror #8
     dc0:	4349564e 	movtmi	r5, #38478	; 0x964e
     dc4:	5152495f 	cmppl	r2, pc, asr r9
     dc8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     dcc:	006c656e 	rsbeq	r6, ip, lr, ror #10
     dd0:	4349564e 	movtmi	r5, #38478	; 0x964e
     dd4:	5445535f 	strbpl	r5, [r5], #-863
     dd8:	4d495250 	sfmmi	f5, 2, [r9, #-320]
     ddc:	004b5341 	subeq	r5, fp, r1, asr #6
     de0:	4349564e 	movtmi	r5, #38478	; 0x964e
     de4:	6e65475f 	mcrvs	7, 3, r4, cr5, cr15, {2}
     de8:	74617265 	strbtvc	r7, [r1], #-613
     dec:	73795365 	cmnvc	r9, #-1811939327	; 0x94000001
     df0:	526d6574 	rsbpl	r6, sp, #486539264	; 0x1d000000
     df4:	74657365 	strbtvc	r7, [r5], #-869
     df8:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     dfc:	00657270 	rsbeq	r7, r5, r0, ror r2
     e00:	4349564e 	movtmi	r5, #38478	; 0x964e
     e04:	5345525f 	movtpl	r5, #21087	; 0x525f
     e08:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
     e0c:	53414d49 	movtpl	r4, #7497	; 0x1d49
     e10:	6166004b 	cmnvs	r6, fp, asr #32
     e14:	61746c75 	cmnvs	r4, r5, ror ip
     e18:	65726464 	ldrbvs	r6, [r2, #-1124]!
     e1c:	4e007373 	mcrmi	3, 0, r7, cr0, cr3, {3}
     e20:	5f434956 	svcpl	0x00434956
     e24:	74737953 	ldrbtvc	r7, [r3], #-2387
     e28:	61486d65 	cmpvs	r8, r5, ror #26
     e2c:	656c646e 	strbvs	r6, [ip, #-1134]!
     e30:	69725072 	ldmdbvs	r2!, {r1, r4, r5, r6, ip, lr}^
     e34:	7469726f 	strbtvc	r7, [r9], #-623
     e38:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
     e3c:	00676966 	rsbeq	r6, r7, r6, ror #18
     e40:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     e44:	30316632 	eorscc	r6, r1, r2, lsr r6
     e48:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e4c:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     e50:	74732f63 	ldrbtvc	r2, [r3], #-3939
     e54:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     e58:	5f783031 	svcpl	0x00783031
     e5c:	6369766e 	cmnvs	r9, #115343360	; 0x6e00000
     e60:	5200632e 	andpl	r6, r0, #-1207959552	; 0xb8000000
     e64:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     e68:	30444556 	subcc	r4, r4, r6, asr r5
     e6c:	53455200 	movtpl	r5, #20992	; 0x5200
     e70:	45565245 	ldrbmi	r5, [r6, #-581]
     e74:	4e003244 	cdpmi	2, 0, cr3, cr0, cr4, {2}
     e78:	5f434956 	svcpl	0x00434956
     e7c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
     e80:	44495550 	strbmi	r5, [r9], #-1360
     e84:	646e6900 	strbtvs	r6, [lr], #-2304
     e88:	4e007865 	cdpmi	8, 0, cr7, cr0, cr5, {3}
     e8c:	5f434956 	svcpl	0x00434956
     e90:	6f697250 	svcvs	0x00697250
     e94:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     e98:	756f7247 	strbvc	r7, [pc, #-583]!	; c59 <__Stack_Size+0x859>
     e9c:	564e0070 	undefined
     ea0:	525f4349 	subspl	r4, pc, #603979777	; 0x24000001
     ea4:	54455345 	strbpl	r5, [r5], #-837
     ea8:	4c554146 	ldfmie	f4, [r5], {70}
     eac:	53414d54 	movtpl	r4, #7508	; 0x1d54
     eb0:	564e004b 	strbpl	r0, [lr], -fp, asr #32
     eb4:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
     eb8:	75437465 	strbvc	r7, [r3, #-1125]
     ebc:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     ec0:	74634174 	strbtvc	r4, [r3], #-372
     ec4:	48657669 	stmdami	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
     ec8:	6c646e61 	stclvs	14, cr6, [r4], #-388
     ecc:	53007265 	movwpl	r7, #613	; 0x265
     ed0:	65747379 	ldrbvs	r7, [r4, #-889]!
     ed4:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
     ed8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     edc:	53434900 	movtpl	r4, #14592	; 0x3900
     ee0:	53520052 	cmppl	r2, #82	; 0x52
     ee4:	45565245 	ldrbmi	r5, [r6, #-581]
     ee8:	4e003144 	adfmism	f3, f0, f4
     eec:	5f434956 	svcpl	0x00434956
     ef0:	656e6547 	strbvs	r6, [lr, #-1351]!
     ef4:	65746172 	ldrbvs	r6, [r4, #-370]!
     ef8:	65726f43 	ldrbvs	r6, [r2, #-3907]!
     efc:	65736552 	ldrbvs	r6, [r3, #-1362]!
     f00:	564e0074 	undefined
     f04:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^
     f08:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     f0c:	656e6e61 	strbvs	r6, [lr, #-3681]!
     f10:	6572506c 	ldrbvs	r5, [r2, #-108]!
     f14:	74706d65 	ldrbtvc	r6, [r0], #-3429
     f18:	506e6f69 	rsbpl	r6, lr, r9, ror #30
     f1c:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     f20:	00797469 	rsbseq	r7, r9, r9, ror #8
     f24:	4349564e 	movtmi	r5, #38478	; 0x964e
     f28:	7465475f 	strbtvc	r4, [r5], #-1887
     f2c:	74737953 	ldrbtvc	r7, [r3], #-2387
     f30:	61486d65 	cmpvs	r8, r5, ror #26
     f34:	656c646e 	strbvs	r6, [ip, #-1134]!
     f38:	74634172 	strbtvc	r4, [r3], #-370
     f3c:	42657669 	rsbmi	r7, r5, #110100480	; 0x6900000
     f40:	74537469 	ldrbvc	r7, [r3], #-1129
     f44:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     f48:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     f4c:	41425f43 	cmpmi	r2, r3, asr #30
     f50:	52504553 	subspl	r4, r0, #348127232	; 0x14c00000
     f54:	4e4f4349 	cdpmi	3, 4, cr4, cr15, cr9, {2}
     f58:	00474946 	subeq	r4, r7, r6, asr #18
     f5c:	52414642 	subpl	r4, r1, #69206016	; 0x4200000
     f60:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     f64:	65535f43 	ldrbvs	r5, [r3, #-3907]
     f68:	51524974 	cmppl	r2, r4, ror r9
     f6c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     f70:	506c656e 	rsbpl	r6, ip, lr, ror #10
     f74:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     f78:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     f7c:	6d740074 	ldclvs	0, cr0, [r4, #-464]!
     f80:	736f7070 	cmnvc	pc, #112	; 0x70
     f84:	53464300 	movtpl	r4, #25344	; 0x6300
     f88:	564e0052 	undefined
     f8c:	535f4349 	cmppl	pc, #603979777	; 0x24000001
     f90:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
     f94:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!
     f98:	646e6148 	strbtvs	r6, [lr], #-328
     f9c:	5072656c 	rsbspl	r6, r2, ip, ror #10
     fa0:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     fa4:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     fa8:	49410074 	stmdbmi	r1, {r2, r4, r5, r6}^
     fac:	00524352 	subseq	r4, r2, r2, asr r3
     fb0:	4349564e 	movtmi	r5, #38478	; 0x964e
     fb4:	7465535f 	strbtvc	r5, [r5], #-863
     fb8:	74636556 	strbtvc	r6, [r3], #-1366
     fbc:	6154726f 	cmpvs	r4, pc, ror #4
     fc0:	00656c62 	rsbeq	r6, r5, r2, ror #24
     fc4:	52504349 	subspl	r4, r0, #603979777	; 0x24000001
     fc8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     fcc:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     fd0:	53007469 	movwpl	r7, #1129	; 0x469
     fd4:	00525048 	subseq	r5, r2, r8, asr #32
     fd8:	53434853 	movtpl	r4, #14419	; 0x3853
     fdc:	564e0052 	undefined
     fe0:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
     fe4:	41427465 	cmpmi	r2, r5, ror #8
     fe8:	52504553 	subspl	r4, r0, #348127232	; 0x14c00000
     fec:	4d4d0049 	stclmi	0, cr0, [sp, #-292]
     ff0:	00524146 	subseq	r4, r2, r6, asr #2
     ff4:	73706d74 	cmnvc	r0, #7424	; 0x1d00
     ff8:	4e006275 	mcrmi	2, 0, r6, cr0, cr5, {3}
     ffc:	5f434956 	svcpl	0x00434956
    1000:	74737953 	ldrbtvc	r7, [r3], #-2387
    1004:	61486d65 	cmpvs	r8, r5, ror #26
    1008:	656c646e 	strbvs	r6, [ip, #-1134]!
    100c:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    1010:	00676966 	rsbeq	r6, r7, r6, ror #18
    1014:	4349564e 	movtmi	r5, #38478	; 0x964e
    1018:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    101c:	4c6d6574 	cfstr64mi	mvdx6, [sp], #-464
    1020:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
    1024:	00676966 	rsbeq	r6, r7, r6, ror #18
    1028:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    102c:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
    1030:	5f434956 	svcpl	0x00434956
    1034:	75727453 	ldrbvc	r7, [r2, #-1107]!
    1038:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    103c:	49007469 	stmdbmi	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1040:	00524543 	subseq	r4, r2, r3, asr #10
    1044:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    1048:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    104c:	00797469 	rsbseq	r7, r9, r9, ror #8
    1050:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
    1054:	50534900 	subspl	r4, r3, r0, lsl #18
    1058:	46440052 	undefined
    105c:	4e005253 	mcrmi	2, 0, r5, cr0, cr3, {2}
    1060:	5f434956 	svcpl	0x00434956
    1064:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    1068:	6e6e6168 	powvsez	f6, f6, #0.0
    106c:	75536c65 	ldrbvc	r6, [r3, #-3173]
    1070:	69725062 	ldmdbvs	r2!, {r1, r5, r6, ip, lr}^
    1074:	7469726f 	strbtvc	r7, [r9], #-623
    1078:	46480079 	undefined
    107c:	4e005253 	mcrmi	2, 0, r5, cr0, cr3, {2}
    1080:	5f434956 	svcpl	0x00434956
    1084:	46544553 	undefined
    1088:	544c5541 	strbpl	r5, [ip], #-1345
    108c:	4b53414d 	blmi	14d15c8 <__Stack_Size+0x14d11c8>
    1090:	53464100 	movtpl	r4, #24832	; 0x6100
    1094:	53490052 	movtpl	r0, #36946	; 0x9052
    1098:	52005245 	andpl	r5, r0, #1342177284	; 0x50000004
    109c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    10a0:	33444556 	movtcc	r4, #17750	; 0x4556
    10a4:	53455200 	movtpl	r5, #20992	; 0x5200
    10a8:	45565245 	ldrbmi	r5, [r6, #-581]
    10ac:	4e003444 	cdpmi	4, 0, cr3, cr0, cr4, {2}
    10b0:	5f434956 	svcpl	0x00434956
    10b4:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    10b8:	746c7561 	strbtvc	r7, [ip], #-1377
    10bc:	646e6148 	strbtvs	r6, [lr], #-328
    10c0:	5372656c 	cmnpl	r2, #452984832	; 0x1b000000
    10c4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    10c8:	74007365 	strvc	r7, [r0], #-869
    10cc:	0032706d 	eorseq	r7, r2, sp, rrx
    10d0:	4349564e 	movtmi	r5, #38478	; 0x964e
    10d4:	7465475f 	strbtvc	r4, [r5], #-1887
    10d8:	74737953 	ldrbtvc	r7, [r3], #-2387
    10dc:	61486d65 	cmpvs	r8, r5, ror #26
    10e0:	656c646e 	strbvs	r6, [ip, #-1134]!
    10e4:	6e655072 	mcrvs	0, 3, r5, cr5, cr2, {3}
    10e8:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    10ec:	53746942 	cmnpl	r4, #1081344	; 0x108000
    10f0:	75746174 	ldrbvc	r6, [r4, #-372]!
    10f4:	564e0073 	undefined
    10f8:	435f4349 	cmpmi	pc, #603979777	; 0x24000001
    10fc:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    1100:	74737953 	ldrbtvc	r7, [r3], #-2387
    1104:	61486d65 	cmpvs	r8, r5, ror #26
    1108:	656c646e 	strbvs	r6, [ip, #-1134]!
    110c:	6e655072 	mcrvs	0, 3, r5, cr5, cr2, {3}
    1110:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1114:	00746942 	rsbseq	r6, r4, r2, asr #18
    1118:	6c756166 	ldfvse	f6, [r5], #-408
    111c:	756f7374 	strbvc	r7, [pc, #-884]!	; db0 <__Stack_Size+0x9b0>
    1120:	73656372 	cmnvc	r5, #-939524095	; 0xc8000001
    1124:	73795300 	cmnvc	r9, #0	; 0x0
    1128:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    112c:	6c646e61 	stclvs	14, cr6, [r4], #-388
    1130:	72507265 	subsvc	r7, r0, #1342177286	; 0x50000006
    1134:	706d6565 	rsbvc	r6, sp, r5, ror #10
    1138:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    113c:	6f697250 	svcvs	0x00697250
    1140:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1144:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1148:	65475f43 	strbvs	r5, [r7, #-3907]
    114c:	51524974 	cmppl	r2, r4, ror r9
    1150:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1154:	506c656e 	rsbpl	r6, ip, lr, ror #10
    1158:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    115c:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1160:	61745374 	cmnvs	r4, r4, ror r3
    1164:	00737574 	rsbseq	r7, r3, r4, ror r5
    1168:	4349564e 	movtmi	r5, #38478	; 0x964e
    116c:	4243535f 	submi	r5, r3, #2080374785	; 0x7c000001
    1170:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    1174:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    1178:	72507765 	subsvc	r7, r0, #26476544	; 0x1940000
    117c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1180:	4e007974 	mcrmi	9, 0, r7, cr0, cr4, {3}
    1184:	5f434956 	svcpl	0x00434956
    1188:	74636556 	strbtvc	r6, [r3], #-1366
    118c:	00626154 	rsbeq	r6, r2, r4, asr r1
    1190:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    1194:	72696576 	rsbvc	r6, r9, #494927872	; 0x1d800000
    1198:	61747371 	cmnvs	r4, r1, ror r3
    119c:	00737574 	rsbseq	r7, r3, r4, ror r5
    11a0:	646e6168 	strbtvs	r6, [lr], #-360
    11a4:	6d72656c 	cfldr64vs	mvdx6, [r2, #-432]!
    11a8:	006b7361 	rsbeq	r7, fp, r1, ror #6
    11ac:	50776f4c 	rsbspl	r6, r7, ip, asr #30
    11b0:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    11b4:	65646f4d 	strbvs	r6, [r4, #-3917]!
    11b8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    11bc:	65475f43 	strbvs	r5, [r7, #-3907]
    11c0:	51524974 	cmppl	r2, r4, ror r9
    11c4:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    11c8:	416c656e 	cmnmi	ip, lr, ror #10
    11cc:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    11d0:	74694265 	strbtvc	r4, [r9], #-613
    11d4:	74617453 	strbtvc	r7, [r1], #-1107
    11d8:	4e007375 	mcrmi	3, 0, r7, cr0, cr5, {3}
    11dc:	5f434956 	svcpl	0x00434956
    11e0:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    11e4:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    11e8:	5f434956 	svcpl	0x00434956
    11ec:	6f697250 	svcvs	0x00697250
    11f0:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    11f4:	756f7247 	strbvc	r7, [pc, #-583]!	; fb5 <__Stack_Size+0xbb5>
    11f8:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    11fc:	00676966 	rsbeq	r6, r7, r6, ror #18
    1200:	646e6570 	strbtvs	r6, [lr], #-1392
    1204:	69676e69 	stmdbvs	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    1208:	74737172 	ldrbtvc	r7, [r3], #-370
    120c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1210:	52575000 	subspl	r5, r7, #0	; 0x0
    1214:	746e455f 	strbtvc	r4, [lr], #-1375
    1218:	54537265 	ldrbpl	r7, [r3], #-613
    121c:	42444e41 	submi	r4, r4, #1040	; 0x410
    1220:	646f4d59 	strbtvs	r4, [pc], #3417	; 1228 <__Stack_Size+0xe28>
    1224:	57500065 	ldrbpl	r0, [r0, -r5, rrx]
    1228:	6c435f52 	mcrrvs	15, 5, r5, r3, cr2
    122c:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    1230:	0067616c 	rsbeq	r6, r7, ip, ror #2
    1234:	5f525750 	svcpl	0x00525750
    1238:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    123c:	50007469 	andpl	r7, r0, r9, ror #8
    1240:	525f5257 	subspl	r5, pc, #1879048197	; 0x70000005
    1244:	6c756765 	ldclvs	7, cr6, [r5], #-404
    1248:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    124c:	52575000 	subspl	r5, r7, #0	; 0x0
    1250:	4456505f 	ldrbmi	r5, [r6], #-95
    1254:	6576654c 	ldrbvs	r6, [r6, #-1356]!
    1258:	5750006c 	ldrbpl	r0, [r0, -ip, rrx]
    125c:	4c465f52 	mcrrmi	15, 5, r5, r6, cr2
    1260:	50004741 	andpl	r4, r0, r1, asr #14
    1264:	505f5257 	subspl	r5, pc, r7, asr r2
    1268:	6d434456 	cfstrdvs	mvd4, [r3, #-344]
    126c:	74730064 	ldrbtvc	r0, [r3], #-100
    1270:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1274:	5f783031 	svcpl	0x00783031
    1278:	2f62696c 	svccs	0x0062696c
    127c:	2f637273 	svccs	0x00637273
    1280:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1284:	30316632 	eorscc	r6, r1, r2, lsr r6
    1288:	77705f78 	undefined
    128c:	00632e72 	rsbeq	r2, r3, r2, ror lr
    1290:	5f525750 	svcpl	0x00525750
    1294:	4c445650 	mcrrmi	6, 5, r5, r4, cr0
    1298:	6c657665 	stclvs	6, cr7, [r5], #-404
    129c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    12a0:	50006769 	andpl	r6, r0, r9, ror #14
    12a4:	475f5257 	undefined
    12a8:	6c467465 	cfstrdvs	mvd7, [r6], {101}
    12ac:	74536761 	ldrbvc	r6, [r3], #-1889
    12b0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    12b4:	52575000 	subspl	r5, r7, #0	; 0x0
    12b8:	746e455f 	strbtvc	r4, [lr], #-1375
    12bc:	54537265 	ldrbpl	r7, [r3], #-613
    12c0:	6f4d504f 	svcvs	0x004d504f
    12c4:	50006564 	andpl	r6, r0, r4, ror #10
    12c8:	535f5257 	cmppl	pc, #1879048197	; 0x70000005
    12cc:	45504f54 	ldrbmi	r4, [r0, #-3924]
    12d0:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    12d4:	52575000 	subspl	r5, r7, #0	; 0x0
    12d8:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    12dc:	4170756b 	cmnmi	r0, fp, ror #10
    12e0:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
    12e4:	646d4373 	strbtvs	r4, [sp], #-883
    12e8:	52575000 	subspl	r5, r7, #0	; 0x0
    12ec:	6b61575f 	blvs	1857070 <__Stack_Size+0x1856c70>
    12f0:	50705565 	rsbspl	r5, r0, r5, ror #10
    12f4:	6d436e69 	stclvs	14, cr6, [r3, #-420]
    12f8:	50410064 	subpl	r0, r1, r4, rrx
    12fc:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
    1300:	52005254 	andpl	r5, r0, #1073741829	; 0x40000005
    1304:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^
    1308:	004b4c43 	subeq	r4, fp, r3, asr #24
    130c:	5f434352 	svcpl	0x00434352
    1310:	43434441 	movtmi	r4, #13377	; 0x3441
    1314:	6f434b4c 	svcvs	0x00434b4c
    1318:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    131c:	43435200 	movtmi	r5, #12800	; 0x3200
    1320:	656c435f 	strbvs	r4, [ip, #-863]!
    1324:	54497261 	strbpl	r7, [r9], #-609
    1328:	646e6550 	strbtvs	r6, [lr], #-1360
    132c:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1330:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
    1334:	415f4343 	cmpmi	pc, r3, asr #6
    1338:	50324250 	eorspl	r4, r2, r0, asr r2
    133c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1340:	73655268 	cmnvc	r5, #-2147483642	; 0x80000006
    1344:	6d437465 	cfstrdvs	mvd7, [r3, #-404]
    1348:	43520064 	cmpmi	r2, #100	; 0x64
    134c:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    1350:	43520045 	cmpmi	r2, #69	; 0x45
    1354:	65475f43 	strbvs	r5, [r7, #-3907]
    1358:	53544974 	cmppl	r4, #1900544	; 0x1d0000
    135c:	75746174 	ldrbvc	r6, [r4, #-372]!
    1360:	44420073 	strbmi	r0, [r2], #-115
    1364:	52005243 	andpl	r5, r0, #805306372	; 0x30000004
    1368:	415f4343 	cmpmi	pc, r3, asr #6
    136c:	50324250 	eorspl	r4, r2, r0, asr r2
    1370:	70697265 	rsbvc	r7, r9, r5, ror #4
    1374:	43520068 	cmpmi	r2, #104	; 0x68
    1378:	43505f43 	cmpmi	r0, #268	; 0x10c
    137c:	00324b4c 	eorseq	r4, r2, ip, asr #22
    1380:	5f434352 	svcpl	0x00434352
    1384:	434c4c50 	movtmi	r4, #52304	; 0xcc50
    1388:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    138c:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1390:	6b636f6c 	blvs	18dd148 <__Stack_Size+0x18dcd48>
    1394:	70795473 	rsbsvc	r5, r9, r3, ror r4
    1398:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    139c:	43435200 	movtmi	r5, #12800	; 0x3200
    13a0:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    13a4:	006c754d 	rsbeq	r7, ip, sp, asr #10
    13a8:	5f434352 	svcpl	0x00434352
    13ac:	50424841 	subpl	r4, r2, r1, asr #16
    13b0:	70697265 	rsbvc	r7, r9, r5, ror #4
    13b4:	6f6c4368 	svcvs	0x006c4368
    13b8:	6d436b63 	vstrvs	d22, [r3, #-396]
    13bc:	46430064 	strbmi	r0, [r3], -r4, rrx
    13c0:	48005247 	stmdami	r0, {r0, r1, r2, r6, r9, ip, lr}
    13c4:	5f4b4c43 	svcpl	0x004b4c43
    13c8:	71657246 	cmnvc	r5, r6, asr #4
    13cc:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    13d0:	50410079 	subpl	r0, r1, r9, ror r0
    13d4:	4e453142 	dvfmism	f3, f5, f2
    13d8:	72700052 	rsbsvc	r0, r0, #82	; 0x52
    13dc:	00637365 	rsbeq	r7, r3, r5, ror #6
    13e0:	5f434352 	svcpl	0x00434352
    13e4:	434f434d 	movtmi	r4, #62285	; 0xf34d
    13e8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    13ec:	43520067 	cmpmi	r2, #103	; 0x67
    13f0:	65445f43 	strbvs	r5, [r4, #-3907]
    13f4:	74696e49 	strbtvc	r6, [r9], #-3657
    13f8:	43435200 	movtmi	r5, #12800	; 0x3200
    13fc:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1400:	726f4674 	rsbvc	r4, pc, #121634816	; 0x7400000
    1404:	53455348 	movtpl	r5, #21320	; 0x5348
    1408:	74726174 	ldrbtvc	r6, [r2], #-372
    140c:	52007055 	andpl	r7, r0, #85	; 0x55
    1410:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    1414:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    1418:	756f534b 	strbvc	r5, [pc, #-843]!	; 10d5 <__Stack_Size+0xcd5>
    141c:	00656372 	rsbeq	r6, r5, r2, ror r3
    1420:	5f434352 	svcpl	0x00434352
    1424:	31425041 	cmpcc	r2, r1, asr #32
    1428:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    142c:	65526870 	ldrbvs	r6, [r2, #-2160]
    1430:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1434:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1438:	505f4343 	subspl	r4, pc, r3, asr #6
    143c:	6f434c4c 	svcvs	0x00434c4c
    1440:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1444:	6c6c7000 	stclvs	0, cr7, [ip]
    1448:	6c6c756d 	cfstr64vs	mvdx7, [ip], #-436
    144c:	43435200 	movtmi	r5, #12800	; 0x3200
    1450:	4253555f 	subsmi	r5, r3, #398458880	; 0x17c00000
    1454:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1458:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    145c:	43520067 	cmpmi	r2, #103	; 0x67
    1460:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    1464:	646d4349 	strbtvs	r4, [sp], #-841
    1468:	43435200 	movtmi	r5, #12800	; 0x3200
    146c:	7465475f 	strbtvc	r4, [r5], #-1887
    1470:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    1474:	6f534b4c 	svcvs	0x00534b4c
    1478:	65637275 	strbvs	r7, [r3, #-629]!
    147c:	42504100 	subsmi	r4, r0, #0	; 0x0
    1480:	54535232 	ldrbpl	r5, [r3], #-562
    1484:	43520052 	cmpmi	r2, #82	; 0x52
    1488:	50415f43 	subpl	r5, r1, r3, asr #30
    148c:	65503142 	ldrbvs	r3, [r0, #-322]
    1490:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1494:	6c6c7000 	stclvs	0, cr7, [ip]
    1498:	72756f73 	rsbsvc	r6, r5, #460	; 0x1cc
    149c:	41006563 	tstmi	r0, r3, ror #10
    14a0:	4e454248 	cdpmi	2, 4, cr4, cr5, cr8, {2}
    14a4:	43520052 	cmpmi	r2, #82	; 0x52
    14a8:	43505f43 	cmpmi	r0, #268	; 0x10c
    14ac:	43314b4c 	teqmi	r1, #77824	; 0x13000
    14b0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    14b4:	74730067 	ldrbtvc	r0, [r3], #-103
    14b8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    14bc:	00676572 	rsbeq	r6, r7, r2, ror r5
    14c0:	5f434352 	svcpl	0x00434352
    14c4:	31425041 	cmpcc	r2, r1, asr #32
    14c8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    14cc:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    14d0:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    14d4:	4100646d 	tstmi	r0, sp, ror #8
    14d8:	45324250 	ldrmi	r4, [r2, #-592]!
    14dc:	5300524e 	movwpl	r5, #590	; 0x24e
    14e0:	74726174 	ldrbtvc	r6, [r2], #-372
    14e4:	6f437055 	svcvs	0x00437055
    14e8:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    14ec:	43520072 	cmpmi	r2, #114	; 0x72
    14f0:	61425f43 	cmpvs	r2, r3, asr #30
    14f4:	70756b63 	rsbsvc	r6, r5, r3, ror #22
    14f8:	65736552 	ldrbvs	r6, [r3, #-1362]!
    14fc:	646d4374 	strbtvs	r4, [sp], #-884
    1500:	43435200 	movtmi	r5, #12800	; 0x3200
    1504:	6a64415f 	bvs	1911a88 <__Stack_Size+0x1911688>
    1508:	48747375 	ldmdami	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    150c:	61434953 	cmpvs	r3, r3, asr r9
    1510:	7262696c 	rsbvc	r6, r2, #1769472	; 0x1b0000
    1514:	6f697461 	svcvs	0x00697461
    1518:	6c61566e 	stclvs	6, cr5, [r1], #-440
    151c:	41006575 	tstmi	r0, r5, ror r5
    1520:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
    1524:	72465f4b 	subvc	r5, r6, #300	; 0x12c
    1528:	65757165 	ldrbvs	r7, [r5, #-357]!
    152c:	0079636e 	rsbseq	r6, r9, lr, ror #6
    1530:	5f434352 	svcpl	0x00434352
    1534:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    1538:	43435200 	movtmi	r5, #12800	; 0x3200
    153c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1540:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1544:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1548:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    154c:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    1550:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1554:	00676966 	rsbeq	r6, r7, r6, ror #18
    1558:	5f434352 	svcpl	0x00434352
    155c:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1560:	5367616c 	cmnpl	r7, #27	; 0x1b
    1564:	75746174 	ldrbvc	r6, [r4, #-372]!
    1568:	43520073 	cmpmi	r2, #115	; 0x73
    156c:	54525f43 	ldrbpl	r5, [r2], #-3907
    1570:	4b4c4343 	blmi	1312284 <__Stack_Size+0x1311e84>
    1574:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1578:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    157c:	555f4343 	ldrbpl	r4, [pc, #-835]	; 1241 <__Stack_Size+0xe41>
    1580:	4c434253 	sfmmi	f4, 2, [r3], {83}
    1584:	756f534b 	strbvc	r5, [pc, #-843]!	; 1241 <__Stack_Size+0xe41>
    1588:	00656372 	rsbeq	r6, r5, r2, ror r3
    158c:	5f434352 	svcpl	0x00434352
    1590:	61656c43 	cmnvs	r5, r3, asr #24
    1594:	616c4672 	smcvs	50274
    1598:	43520067 	cmpmi	r2, #103	; 0x67
    159c:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    15a0:	4b4c4353 	blmi	13122f4 <__Stack_Size+0x1311ef4>
    15a4:	45534800 	ldrbmi	r4, [r3, #-2048]
    15a8:	74617453 	strbtvc	r7, [r1], #-1107
    15ac:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
    15b0:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^
    15b4:	6f434553 	svcvs	0x00434553
    15b8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    15bc:	53595300 	cmppl	r9, #0	; 0x0
    15c0:	5f4b4c43 	svcpl	0x004b4c43
    15c4:	71657246 	cmnvc	r5, r6, asr #4
    15c8:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    15cc:	43520079 	cmpmi	r2, #121	; 0x79
    15d0:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    15d4:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    15d8:	4c435000 	marmi	acc0, r5, r3
    15dc:	465f324b 	ldrbmi	r3, [pc], -fp, asr #4
    15e0:	75716572 	ldrbvc	r6, [r1, #-1394]!
    15e4:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    15e8:	43435200 	movtmi	r5, #12800	; 0x3200
    15ec:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    15f0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    15f4:	43520067 	cmpmi	r2, #103	; 0x67
    15f8:	50415f43 	subpl	r5, r1, r3, asr #30
    15fc:	65503242 	ldrbvs	r3, [r0, #-578]
    1600:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1604:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1608:	646d436b 	strbtvs	r4, [sp], #-875
    160c:	43435200 	movtmi	r5, #12800	; 0x3200
    1610:	4553485f 	ldrbmi	r4, [r3, #-2143]
    1614:	43435200 	movtmi	r5, #12800	; 0x3200
    1618:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    161c:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1620:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1624:	43500065 	cmpmi	r0, #101	; 0x65
    1628:	5f314b4c 	svcpl	0x00314b4c
    162c:	71657246 	cmnvc	r5, r6, asr #4
    1630:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    1634:	43520079 	cmpmi	r2, #121	; 0x79
    1638:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    163c:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
    1640:	00676966 	rsbeq	r6, r7, r6, ror #18
    1644:	41425041 	cmpmi	r2, r1, asr #32
    1648:	72504248 	subsvc	r4, r0, #-2147483644	; 0x80000004
    164c:	54637365 	strbtpl	r7, [r3], #-869
    1650:	656c6261 	strbvs	r6, [ip, #-609]!
    1654:	43435200 	movtmi	r5, #12800	; 0x3200
    1658:	7465475f 	strbtvc	r4, [r5], #-1887
    165c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1660:	7246736b 	subvc	r7, r6, #-1409286143	; 0xac000001
    1664:	73007165 	movwvc	r7, #357	; 0x165
    1668:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    166c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1670:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1674:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1678:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!
    167c:	31663233 	cmncc	r6, r3, lsr r2
    1680:	725f7830 	subsvc	r7, pc, #3145728	; 0x300000
    1684:	632e6363 	teqvs	lr, #-1946157055	; 0x8c000001
    1688:	43435200 	movtmi	r5, #12800	; 0x3200
    168c:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    1690:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1694:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1698:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    169c:	6b636f6c 	blvs	18dd454 <__Stack_Size+0x18dd054>
    16a0:	75636553 	strbvc	r6, [r3, #-1363]!
    16a4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    16a8:	74737953 	ldrbtvc	r7, [r3], #-2387
    16ac:	6d436d65 	stclvs	13, cr6, [r3, #-404]
    16b0:	43520064 	cmpmi	r2, #100	; 0x64
    16b4:	43485f43 	movtmi	r5, #36675	; 0x8f43
    16b8:	6f434b4c 	svcvs	0x00434b4c
    16bc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    16c0:	43435200 	movtmi	r5, #12800	; 0x3200
    16c4:	4953485f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, fp, lr}^
    16c8:	00646d43 	rsbeq	r6, r4, r3, asr #26
    16cc:	5f434352 	svcpl	0x00434352
    16d0:	004f434d 	subeq	r4, pc, sp, asr #6
    16d4:	5f434352 	svcpl	0x00434352
    16d8:	52005449 	andpl	r5, r0, #1224736768	; 0x49000000
    16dc:	415f4343 	cmpmi	pc, r3, asr #6
    16e0:	65504248 	ldrbvs	r4, [r0, #-584]
    16e4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    16e8:	43435200 	movtmi	r5, #12800	; 0x3200
    16ec:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
    16f0:	6f43324b 	svcvs	0x0043324b
    16f4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    16f8:	43444100 	movtmi	r4, #16640	; 0x4100
    16fc:	73657250 	cmnvc	r5, #5	; 0x5
    1700:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
    1704:	5300656c 	movwpl	r6, #1388	; 0x56c
    1708:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    170c:	475f6b63 	ldrbmi	r6, [pc, -r3, ror #22]
    1710:	6f437465 	svcvs	0x00437465
    1714:	65746e75 	ldrbvs	r6, [r4, #-3701]!
    1718:	79530072 	ldmdbvc	r3, {r1, r4, r5, r6}^
    171c:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1720:	65535f6b 	ldrbvs	r5, [r3, #-3947]
    1724:	6c655274 	sfmvs	f5, 2, [r5], #-464
    1728:	0064616f 	rsbeq	r6, r4, pc, ror #2
    172c:	54737953 	ldrbtpl	r7, [r3], #-2387
    1730:	5f6b6369 	svcpl	0x006b6369
    1734:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1738:	5367616c 	cmnpl	r7, #27	; 0x1b
    173c:	75746174 	ldrbvc	r6, [r4, #-372]!
    1740:	79530073 	ldmdbvc	r3, {r0, r1, r4, r5, r6}^
    1744:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    1748:	4c465f6b 	mcrrmi	15, 6, r5, r6, cr11
    174c:	43004741 	movwmi	r4, #1857	; 0x741
    1750:	42494c41 	submi	r4, r9, #16640	; 0x4100
    1754:	6d747300 	ldclvs	3, cr7, [r4]
    1758:	31663233 	cmncc	r6, r3, lsr r2
    175c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    1760:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    1764:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    1768:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    176c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1770:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    1774:	6b636974 	blvs	18dbd4c <__Stack_Size+0x18db94c>
    1778:	4300632e 	movwmi	r6, #814	; 0x32e
    177c:	004c5254 	subeq	r5, ip, r4, asr r2
    1780:	54737953 	ldrbtpl	r7, [r3], #-2387
    1784:	5f6b6369 	svcpl	0x006b6369
    1788:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    178c:	43726574 	cmnmi	r2, #486539264	; 0x1d000000
    1790:	5300646d 	movwpl	r6, #1133	; 0x46d
    1794:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1798:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    179c:	746e756f 	strbtvc	r7, [lr], #-1391
    17a0:	53007265 	movwpl	r7, #613	; 0x265
    17a4:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    17a8:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    17ac:	6f534b4c 	svcvs	0x00534b4c
    17b0:	65637275 	strbvs	r7, [r3, #-629]!
    17b4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    17b8:	4c006769 	stcmi	7, cr6, [r0], {105}
    17bc:	0044414f 	subeq	r4, r4, pc, asr #2
    17c0:	54737953 	ldrbtpl	r7, [r3], #-2387
    17c4:	5f6b6369 	svcpl	0x006b6369
    17c8:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    17cc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    17d0:	79530065 	ldmdbvc	r3, {r0, r2, r5, r6}^
    17d4:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    17d8:	54495f6b 	strbpl	r5, [r9], #-3947
    17dc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    17e0:	5f006769 	svcpl	0x00006769
    17e4:	61747365 	cmnvs	r4, r5, ror #6
    17e8:	5f006b63 	svcpl	0x00006b63
    17ec:	74616473 	strbtvc	r6, [r1], #-1139
    17f0:	65520061 	ldrbvs	r0, [r2, #-97]
    17f4:	5f746573 	svcpl	0x00746573
    17f8:	646e6148 	strbtvs	r6, [lr], #-328
    17fc:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1800:	446c7570 	strbtmi	r7, [ip], #-1392
    1804:	00747365 	rsbseq	r7, r4, r5, ror #6
    1808:	6469735f 	strbtvs	r7, [r9], #-863
    180c:	00617461 	rsbeq	r7, r1, r1, ror #8
    1810:	7362655f 	cmnvc	r2, #398458880	; 0x17c00000
    1814:	655f0073 	ldrbvs	r0, [pc, #-115]	; 17a9 <__Stack_Size+0x13a9>
    1818:	61746164 	cmnvs	r4, r4, ror #2
    181c:	6d747300 	ldclvs	3, cr7, [r4]
    1820:	31663233 	cmncc	r6, r3, lsr r2
    1824:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0
    1828:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    182c:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    1830:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1834:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1838:	6365765f 	cmnvs	r5, #99614720	; 0x5f00000
    183c:	2e726f74 	mrccs	15, 3, r6, cr2, cr4, {3}
    1840:	5f670063 	svcpl	0x00670063
    1844:	566e6670 	undefined
    1848:	6f746365 	svcvs	0x00746365
    184c:	70007372 	andvc	r7, r0, r2, ror r3
    1850:	72536c75 	subsvc	r6, r3, #29952	; 0x7500
    1854:	735f0063 	cmpvc	pc, #99	; 0x63
    1858:	00737362 	rsbseq	r7, r3, r2, ror #6
    185c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
    1860:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
    1864:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
    1868:	3a630074 	bcc	18c1a40 <__Stack_Size+0x18c1640>
    186c:	6e69775c 	mcrvs	7, 3, r7, cr9, cr12, {2}
    1870:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1874:	6975625c 	ldmdbvs	r5!, {r2, r3, r4, r6, r9, sp, lr}^
    1878:	675c646c 	ldrbvs	r6, [ip, -ip, ror #8]
    187c:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
    1880:	646c6975 	strbtvs	r6, [ip], #-2421
    1884:	6d72615c 	ldfvse	f6, [r2, #-368]!
    1888:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    188c:	656e5c69 	strbvs	r5, [lr, #-3177]!
    1890:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1894:	62696c5c 	rsbvs	r6, r9, #23552	; 0x5c00
    1898:	74735c63 	ldrbtvc	r5, [r3], #-3171
    189c:	62696c64 	rsbvs	r6, r9, #25600	; 0x6400
    18a0:	2f2e2e00 	svccs	0x002e2e00
    18a4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    18a8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    18ac:	2f2e2e2f 	svccs	0x002e2e2f
    18b0:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    18b4:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    18b8:	656e2f30 	strbvs	r2, [lr, #-3888]!
    18bc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    18c0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    18c4:	74732f63 	ldrbtvc	r2, [r3], #-3939
    18c8:	62696c64 	rsbvs	r6, r9, #25600	; 0x6400
    18cc:	6574612f 	ldrbvs	r6, [r4, #-303]!
    18d0:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
    18d4:	6f6c0063 	svcvs	0x006c0063
    18d8:	6c20676e 	stcvs	7, cr6, [r0], #-440
    18dc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
    18e0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
    18e4:	64656e67 	strbtvs	r6, [r5], #-3687
    18e8:	746e6920 	strbtvc	r6, [lr], #-2336
    18ec:	655f5f00 	ldrbvs	r5, [pc, #-3840]	; 9f4 <__Stack_Size+0x5f4>
    18f0:	78635f74 	stmdavc	r3!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    18f4:	5f5f0061 	svcpl	0x005f0061
    18f8:	6f5f7465 	svcvs	0x005f7465
    18fc:	6978656e 	ldmdbvs	r8!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    1900:	5f5f0074 	svcpl	0x005f0074
    1904:	78657461 	stmdavc	r5!, {r0, r5, r6, sl, ip, sp, lr}^
    1908:	745f7469 	ldrbvc	r7, [pc], #1129	; 1910 <__Stack_Size+0x1510>
    190c:	73657079 	cmnvc	r5, #121	; 0x79
    1910:	655f5f00 	ldrbvs	r5, [pc, #-3840]	; a18 <__Stack_Size+0x618>
    1914:	74615f74 	strbtvc	r5, [r1], #-3956
    1918:	74697865 	strbtvc	r7, [r9], #-2149
    191c:	73645f00 	cmnvc	r4, #0	; 0x0
    1920:	61685f6f 	cmnvs	r8, pc, ror #30
    1924:	656c646e 	strbvs	r6, [ip, #-1134]!
    1928:	2f2e2e00 	svccs	0x002e2e00
    192c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1930:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1934:	2f2e2e2f 	svccs	0x002e2e2f
    1938:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    193c:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    1940:	656e2f30 	strbvs	r2, [lr, #-3888]!
    1944:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1948:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    194c:	74732f63 	ldrbtvc	r2, [r3], #-3939
    1950:	62696c64 	rsbvs	r6, r9, #25600	; 0x6400
    1954:	6978652f 	ldmdbvs	r8!, {r0, r1, r2, r3, r5, r8, sl, sp, lr}^
    1958:	00632e74 	rsbeq	r2, r3, r4, ror lr
    195c:	7a69735f 	bvc	1a5e6e0 <__Stack_Size+0x1a5e2e0>
    1960:	725f0065 	subsvc	r0, pc, #101	; 0x65
    1964:	34646e61 	strbtcc	r6, [r4], #-3681
    1968:	655f0038 	ldrbvs	r0, [pc, #-56]	; 1938 <__Stack_Size+0x1538>
    196c:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
    1970:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1974:	63775f00 	cmnvs	r7, #0	; 0x0
    1978:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!
    197c:	74735f62 	ldrbtvc	r5, [r3], #-3938
    1980:	00657461 	rsbeq	r7, r5, r1, ror #8
    1984:	7363775f 	cmnvc	r3, #24903680	; 0x17c0000
    1988:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!
    198c:	735f7362 	cmpvc	pc, #-2013265919	; 0x88000001
    1990:	65746174 	ldrbvs	r6, [r4, #-372]!
    1994:	626c5f00 	rsbvs	r5, ip, #0	; 0x0
    1998:	7a697366 	bvc	1a5e738 <__Stack_Size+0x1a5e338>
    199c:	6d5f0065 	ldclvs	0, cr0, [pc, #-404]
    19a0:	6f747262 	svcvs	0x00747262
    19a4:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
    19a8:	65746174 	ldrbvs	r6, [r4, #-372]!
    19ac:	63775f00 	cmnvs	r7, #0	; 0x0
    19b0:	626d6f74 	rsbvs	r6, sp, #464	; 0x1d0
    19b4:	6174735f 	cmnvs	r4, pc, asr r3
    19b8:	5f006574 	svcpl	0x00006574
    19bc:	5f6d745f 	svcpl	0x006d745f
    19c0:	00636573 	rsbeq	r6, r3, r3, ror r5
    19c4:	7562755f 	strbvc	r7, [r2, #-1375]!
    19c8:	625f0066 	subsvs	r0, pc, #102	; 0x66
    19cc:	00657361 	rsbeq	r7, r5, r1, ror #6
    19d0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!
    19d4:	756f685f 	strbvc	r6, [pc, #-2143]!	; 117d <__Stack_Size+0xd7d>
    19d8:	5f5f0072 	svcpl	0x005f0072
    19dc:	5f006673 	svcpl	0x00006673
    19e0:	655f6e6f 	ldrbvs	r6, [pc, #-3695]	; b79 <__Stack_Size+0x779>
    19e4:	5f746978 	svcpl	0x00746978
    19e8:	73677261 	cmnvc	r7, #268435462	; 0x10000006
    19ec:	6f635f00 	svcvs	0x00635f00
    19f0:	65696b6f 	strbvs	r6, [r9, #-2927]!
    19f4:	735f5f00 	cmpvc	pc, #0	; 0x0
    19f8:	65756c67 	ldrbvs	r6, [r5, #-3175]!
    19fc:	6c665f00 	stclvs	15, cr5, [r6]
    1a00:	00736761 	rsbseq	r6, r3, r1, ror #14
    1a04:	5f73695f 	svcpl	0x0073695f
    1a08:	00617863 	rsbeq	r7, r1, r3, ror #16
    1a0c:	6474735f 	ldrbtvs	r7, [r4], #-863
    1a10:	5f006e69 	svcpl	0x00006e69
    1a14:	736b6c62 	cmnvc	fp, #25088	; 0x6200
    1a18:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1a1c:	7476635f 	ldrbtvc	r6, [r6], #-863
    1a20:	00667562 	rsbeq	r7, r6, r2, ror #10
    1a24:	66666f5f 	uqsubaddxvs	r6, r6, pc
    1a28:	00746573 	rsbseq	r6, r4, r3, ror r5
    1a2c:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
    1a30:	776f7472 	undefined
    1a34:	735f7363 	cmpvc	pc, #-1946157055	; 0x8c000001
    1a38:	65746174 	ldrbvs	r6, [r4, #-372]!
    1a3c:	626d5f00 	rsbvs	r5, sp, #0	; 0x0
    1a40:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
    1a44:	6174735f 	cmnvs	r4, pc, asr r3
    1a48:	5f006574 	svcpl	0x00006574
    1a4c:	72616e66 	rsbvc	r6, r1, #1632	; 0x660
    1a50:	5f007367 	svcpl	0x00007367
    1a54:	00736e66 	rsbseq	r6, r3, r6, ror #28
    1a58:	6769735f 	undefined
    1a5c:	665f006e 	ldrbvs	r0, [pc], -lr, rrx
    1a60:	6b636f6c 	blvs	18dd818 <__Stack_Size+0x18dd418>
    1a64:	5f00745f 	svcpl	0x0000745f
    1a68:	65647473 	strbvs	r7, [r4, #-1139]!
    1a6c:	5f007272 	svcpl	0x00007272
    1a70:	69676942 	stmdbvs	r7!, {r1, r6, r8, fp, sp, lr}^
    1a74:	5f00746e 	svcpl	0x0000746e
    1a78:	64616572 	strbtvs	r6, [r1], #-1394
    1a7c:	65725f00 	ldrbvs	r5, [r2, #-3840]!
    1a80:	746c7573 	strbtvc	r7, [ip], #-1395
    1a84:	5f006b5f 	svcpl	0x00006b5f
    1a88:	006d745f 	rsbeq	r7, sp, pc, asr r4
    1a8c:	63775f5f 	cmnvs	r7, #380	; 0x17c
    1a90:	5f006268 	svcpl	0x00006268
    1a94:	6f647473 	svcvs	0x00647473
    1a98:	5f007475 	svcpl	0x00007475
    1a9c:	6c747663 	ldclvs	6, cr7, [r4], #-396
    1aa0:	5f006e65 	svcpl	0x00006e65
    1aa4:	656c6966 	strbvs	r6, [ip, #-2406]!
    1aa8:	696e5f00 	stmdbvs	lr!, {r8, r9, sl, fp, ip, lr}^
    1aac:	0073626f 	rsbseq	r6, r3, pc, ror #4
    1ab0:	6574615f 	ldrbvs	r6, [r4, #-351]!
    1ab4:	30746978 	rsbscc	r6, r4, r8, ror r9
    1ab8:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
    1abc:	6c616e67 	stclvs	14, cr6, [r1], #-412
    1ac0:	6675625f 	undefined
    1ac4:	73615f00 	cmnvc	r1, #0	; 0x0
    1ac8:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!
    1acc:	75625f65 	strbvc	r5, [r2, #-3941]!
    1ad0:	725f0066 	subsvc	r0, pc, #102	; 0x66
    1ad4:	6c757365 	ldclvs	3, cr7, [r5], #-404
    1ad8:	5f5f0074 	svcpl	0x005f0074
    1adc:	00686377 	rsbeq	r6, r8, r7, ror r3
    1ae0:	746e6977 	strbtvc	r6, [lr], #-2423
    1ae4:	5f00745f 	svcpl	0x0000745f
    1ae8:	6b636f6c 	blvs	18dd8a0 <__Stack_Size+0x18dd4a0>
    1aec:	756d5f00 	strbvc	r5, [sp, #-3840]!
    1af0:	5f00746c 	svcpl	0x0000746c
    1af4:	74697277 	strbtvc	r7, [r9], #-631
    1af8:	5f5f0065 	svcpl	0x005f0065
    1afc:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    1b00:	00726165 	rsbseq	r6, r2, r5, ror #2
    1b04:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    1b08:	5f006674 	svcpl	0x00006674
    1b0c:	5f6d745f 	svcpl	0x006d745f
    1b10:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
    1b14:	64735f5f 	ldrbtvs	r5, [r3], #-3935
    1b18:	6e696469 	cdpvs	4, 6, cr6, cr9, cr9, {3}
    1b1c:	5f007469 	svcpl	0x00007469
    1b20:	6d6d6167 	stfvse	f6, [sp, #-412]!
    1b24:	69735f61 	ldmdbvs	r3!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    1b28:	61676e67 	cmnvs	r7, r7, ror #28
    1b2c:	665f006d 	ldrbvs	r0, [pc], -sp, rrx
    1b30:	6c656572 	cfstr64vs	mvdx6, [r5], #-456
    1b34:	00747369 	rsbseq	r7, r4, r9, ror #6
    1b38:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    1b3c:	45525f4b 	ldrbmi	r5, [r2, #-3915]
    1b40:	53525543 	cmppl	r2, #281018368	; 0x10c00000
    1b44:	5f455649 	svcpl	0x00455649
    1b48:	6e5f0054 	mrcvs	0, 2, r0, cr15, cr4, {2}
    1b4c:	5f007765 	svcpl	0x00007765
    1b50:	5f6d745f 	svcpl	0x006d745f
    1b54:	79616479 	stmdbvc	r1!, {r0, r3, r4, r5, r6, sl, sp, lr}^
    1b58:	735f5f00 	cmpvc	pc, #0	; 0x0
    1b5c:	00667562 	rsbeq	r7, r6, r2, ror #10
    1b60:	626f695f 	rsbvs	r6, pc, #1556480	; 0x17c000
    1b64:	5f5f0073 	svcpl	0x005f0073
    1b68:	454c4946 	strbmi	r4, [ip, #-2374]
    1b6c:	626d5f00 	rsbvs	r5, sp, #0	; 0x0
    1b70:	74617473 	strbtvc	r7, [r1], #-1139
    1b74:	00745f65 	rsbseq	r5, r4, r5, ror #30
    1b78:	46735f5f 	uhsubaddxmi	r5, r3, pc
    1b7c:	00454c49 	subeq	r4, r5, r9, asr #24
    1b80:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
    1b84:	656e5f64 	strbvs	r5, [lr, #-3940]!
    1b88:	5f007478 	svcpl	0x00007478
    1b8c:	656c626d 	strbvs	r6, [ip, #-621]!
    1b90:	74735f6e 	ldrbtvc	r5, [r3], #-3950
    1b94:	00657461 	rsbeq	r7, r5, r1, ror #8
    1b98:	636e695f 	cmnvs	lr, #1556480	; 0x17c000
    1b9c:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
    1ba0:	635f0064 	cmpvs	pc, #100	; 0x64
    1ba4:	65727275 	ldrbvs	r7, [r2, #-629]!
    1ba8:	6c5f746e 	cfldrdvs	mvd7, [pc], {110}
    1bac:	6c61636f 	stclvs	3, cr6, [r1], #-444
    1bb0:	5f5f0065 	svcpl	0x005f0065
    1bb4:	61656c63 	cmnvs	r5, r3, ror #24
    1bb8:	0070756e 	rsbseq	r7, r0, lr, ror #10
    1bbc:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    1bc0:	00736477 	rsbseq	r6, r3, r7, ror r4
    1bc4:	6565725f 	strbvs	r7, [r5, #-607]!
    1bc8:	5f00746e 	svcpl	0x0000746e
    1bcc:	64656573 	strbtvs	r6, [r5], #-1395
    1bd0:	635f5f00 	cmpvs	pc, #0	; 0x0
    1bd4:	746e756f 	strbtvc	r7, [lr], #-1391
    1bd8:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    1bdc:	65756c61 	ldrbvs	r6, [r5, #-3169]!
    1be0:	65735f00 	ldrbvs	r5, [r3, #-3840]!
    1be4:	5f006b65 	svcpl	0x00006b65
    1be8:	736f7066 	cmnvc	pc, #102	; 0x66
    1bec:	5f00745f 	svcpl	0x0000745f
    1bf0:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
    1bf4:	5f5f006f 	svcpl	0x005f006f
    1bf8:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]
    1bfc:	5f006e69 	svcpl	0x00006e69
    1c00:	74727473 	ldrbtvc	r7, [r2], #-1139
    1c04:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15
    1c08:	00747361 	rsbseq	r7, r4, r1, ror #6
    1c0c:	746e665f 	strbtvc	r6, [lr], #-1631
    1c10:	73657079 	cmnvc	r5, #121	; 0x79
    1c14:	64615f00 	strbtvs	r5, [r1], #-3840
    1c18:	5f5f0064 	svcpl	0x005f0064
    1c1c:	6e6f4c55 	mcrvs	12, 3, r4, cr15, cr5, {2}
    1c20:	675f0067 	ldrbvs	r0, [pc, -r7, rrx]
    1c24:	61647465 	cmnvs	r4, r5, ror #8
    1c28:	655f6574 	ldrbvs	r6, [pc, #-1396]	; 16bc <__Stack_Size+0x12bc>
    1c2c:	5f007272 	svcpl	0x00007272
    1c30:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
    1c34:	695f6c61 	ldmdbvs	pc, {r0, r5, r6, sl, fp, sp, lr}^
    1c38:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    1c3c:	74705f65 	ldrbtvc	r5, [r0], #-3941
    1c40:	635f0072 	cmpvs	pc, #114	; 0x72
    1c44:	65727275 	ldrbvs	r7, [r2, #-629]!
    1c48:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
    1c4c:	67657461 	strbvs	r7, [r5, -r1, ror #8]!
    1c50:	0079726f 	rsbseq	r7, r9, pc, ror #4
    1c54:	65646f63 	strbvs	r6, [r4, #-3939]!
    1c58:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
    1c5c:	64657375 	strbtvs	r7, [r5], #-885
    1c60:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
    1c64:	775f0064 	ldrbvc	r0, [pc, -r4, rrx]
    1c68:	5f007364 	svcpl	0x00007364
    1c6c:	5f6d745f 	svcpl	0x006d745f
    1c70:	79616477 	stmdbvc	r1!, {r0, r1, r2, r4, r5, r6, sl, sp, lr}^
    1c74:	6c675f00 	stclvs	15, cr5, [r7]
    1c78:	5f006575 	svcpl	0x00006575
    1c7c:	6c616d6e 	stclvs	13, cr6, [r1], #-440
    1c80:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    1c84:	34366c5f 	ldrtcc	r6, [r6], #-3167
    1c88:	75625f61 	strbvc	r5, [r2, #-3937]!
    1c8c:	735f0066 	cmpvc	pc, #102	; 0x66
    1c90:	665f6769 	ldrbvs	r6, [pc], -r9, ror #14
    1c94:	00636e75 	rsbeq	r6, r3, r5, ror lr
    1c98:	75626e5f 	strbvc	r6, [r2, #-3679]!
    1c9c:	755f0066 	ldrbvc	r0, [pc, #-102]	; 1c3e <__Stack_Size+0x183e>
    1ca0:	6573756e 	ldrbvs	r7, [r3, #-1390]!
    1ca4:	5f5f0064 	svcpl	0x005f0064
    1ca8:	695f6d74 	ldmdbvs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    1cac:	74736473 	ldrbtvc	r6, [r3], #-1139
    1cb0:	6f6c5f00 	svcvs	0x006c5f00
    1cb4:	746c6163 	strbtvc	r6, [ip], #-355
    1cb8:	5f656d69 	svcpl	0x00656d69
    1cbc:	00667562 	rsbeq	r7, r6, r2, ror #10
    1cc0:	6f6c635f 	svcvs	0x006c635f
    1cc4:	5f006573 	svcpl	0x00006573
    1cc8:	00383472 	eorseq	r3, r8, r2, ror r4
    1ccc:	74626d5f 	strbtvc	r6, [r2], #-3423
    1cd0:	5f63776f 	svcpl	0x0063776f
    1cd4:	74617473 	strbtvc	r7, [r1], #-1139
    1cd8:	705f0065 	subsvc	r0, pc, r5, rrx
    1cdc:	5f007335 	svcpl	0x00007335
    1ce0:	5f6d745f 	svcpl	0x006d745f
    1ce4:	7961646d 	stmdbvc	r1!, {r0, r2, r3, r5, r6, sl, sp, lr}^
    1ce8:	706d6900 	rsbvc	r6, sp, r0, lsl #18
    1cec:	5f657275 	svcpl	0x00657275
    1cf0:	61746164 	cmnvs	r4, r4, ror #2
    1cf4:	2f2e2e00 	svccs	0x002e2e00
    1cf8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1cfc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1d00:	2f2e2e2f 	svccs	0x002e2e2f
    1d04:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1d08:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    1d0c:	656e2f30 	strbvs	r2, [lr, #-3888]!
    1d10:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1d14:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1d18:	65722f63 	ldrbvs	r2, [r2, #-3939]!
    1d1c:	2f746e65 	svccs	0x00746e65
    1d20:	75706d69 	ldrbvc	r6, [r0, #-3433]!
    1d24:	632e6572 	teqvs	lr, #478150656	; 0x1c800000
    1d28:	5c3a6300 	ldcpl	3, cr6, [sl]
    1d2c:	616e6977 	smcvs	59031
    1d30:	5c736d72 	ldclpl	13, cr6, [r3], #-456
    1d34:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    1d38:	63675c64 	cmnvs	r7, #25600	; 0x6400
    1d3c:	75622d63 	strbvc	r2, [r2, #-3427]!
    1d40:	5c646c69 	stclpl	12, cr6, [r4], #-420
    1d44:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!
    1d48:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1d4c:	77656e5c 	undefined
    1d50:	5c62696c 	stclpl	9, cr6, [r2], #-432
    1d54:	6362696c 	cmnvs	r2, #1769472	; 0x1b0000
    1d58:	6565725c 	strbvs	r7, [r5, #-604]!
    1d5c:	5f00746e 	svcpl	0x0000746e
    1d60:	6e69665f 	mcrvs	6, 3, r6, cr9, cr15, {2}
    1d64:	72615f69 	rsbvc	r5, r1, #420	; 0x1a4
    1d68:	5f796172 	svcpl	0x00796172
    1d6c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    1d70:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
    1d74:	745f657a 	ldrbvc	r6, [pc], #1402	; 1d7c <__Stack_Size+0x197c>
    1d78:	665f5f00 	ldrbvs	r5, [pc], -r0, lsl #30
    1d7c:	5f696e69 	svcpl	0x00696e69
    1d80:	61727261 	cmnvs	r2, r1, ror #4
    1d84:	6e655f79 	mcrvs	15, 3, r5, cr5, cr9, {3}
    1d88:	5f5f0064 	svcpl	0x005f0064
    1d8c:	69657270 	stmdbvs	r5!, {r4, r5, r6, r9, ip, sp, lr}^
    1d90:	5f74696e 	svcpl	0x0074696e
    1d94:	61727261 	cmnvs	r2, r1, ror #4
    1d98:	6e655f79 	mcrvs	15, 3, r5, cr5, cr9, {3}
    1d9c:	2e2e0064 	cdpcs	0, 2, cr0, cr14, cr4, {3}
    1da0:	2f2e2e2f 	svccs	0x002e2e2f
    1da4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1da8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1dac:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1db0:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    1db4:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    1db8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1dbc:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1dc0:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!
    1dc4:	2f637369 	svccs	0x00637369
    1dc8:	74696e69 	strbtvc	r6, [r9], #-3689
    1dcc:	5f00632e 	svcpl	0x0000632e
    1dd0:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1dd4:	72615f74 	rsbvc	r5, r1, #464	; 0x1d0
    1dd8:	5f796172 	svcpl	0x00796172
    1ddc:	00646e65 	rsbeq	r6, r4, r5, ror #28
    1de0:	696c5f5f 	stmdbvs	ip!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1de4:	695f6362 	ldmdbvs	pc, {r1, r5, r6, r8, r9, sp, lr}^
    1de8:	5f74696e 	svcpl	0x0074696e
    1dec:	61727261 	cmnvs	r2, r1, ror #4
    1df0:	3a630079 	bcc	18c1fdc <__Stack_Size+0x18c1bdc>
    1df4:	6e69775c 	mcrvs	7, 3, r7, cr9, cr12, {2}
    1df8:	736d7261 	cmnvc	sp, #268435462	; 0x10000006
    1dfc:	6975625c 	ldmdbvs	r5!, {r2, r3, r4, r6, r9, sp, lr}^
    1e00:	675c646c 	ldrbvs	r6, [ip, -ip, ror #8]
    1e04:	622d6363 	eorvs	r6, sp, #-1946157055	; 0x8c000001
    1e08:	646c6975 	strbtvs	r6, [ip], #-2421
    1e0c:	6d72615c 	ldfvse	f6, [r2, #-368]!
    1e10:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1e14:	656e5c69 	strbvs	r5, [lr, #-3177]!
    1e18:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1e1c:	62696c5c 	rsbvs	r6, r9, #23552	; 0x5c00
    1e20:	696d5c63 	stmdbvs	sp!, {r0, r1, r5, r6, sl, fp, ip, lr}^
    1e24:	5f006373 	svcpl	0x00006373
    1e28:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1e2c:	69665f63 	stmdbvs	r6!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1e30:	615f696e 	cmpvs	pc, lr, ror #18
    1e34:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    1e38:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1e3c:	6e696572 	mcrvs	5, 3, r6, cr9, cr2, {3}
    1e40:	615f7469 	cmpvs	pc, r9, ror #8
    1e44:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    1e48:	6174735f 	cmnvs	r4, pc, asr r3
    1e4c:	5f007472 	svcpl	0x00007472
    1e50:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1e54:	72615f74 	rsbvc	r5, r1, #464	; 0x1d0
    1e58:	5f796172 	svcpl	0x00796172
    1e5c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    1e60:	6c610074 	stclvs	0, cr0, [r1], #-464
    1e64:	656e6769 	strbvs	r6, [lr, #-1897]!
    1e68:	64615f64 	strbtvs	r5, [r1], #-3940
    1e6c:	63007264 	movwvs	r7, #612	; 0x264
    1e70:	69775c3a 	ldmdbvs	r7!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    1e74:	6d72616e 	ldfvse	f6, [r2, #-440]!
    1e78:	75625c73 	strbvc	r5, [r2, #-3187]!
    1e7c:	5c646c69 	stclpl	12, cr6, [r4], #-420
    1e80:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1e84:	6c697562 	cfstr64vs	mvdx7, [r9], #-392
    1e88:	72615c64 	rsbvc	r5, r1, #25600	; 0x6400
    1e8c:	61652d6d 	cmnvs	r5, sp, ror #26
    1e90:	6e5c6962 	cdpvs	9, 5, cr6, cr12, cr2, {3}
    1e94:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1e98:	696c5c62 	stmdbvs	ip!, {r1, r5, r6, sl, fp, ip, lr}^
    1e9c:	735c6362 	cmpvc	ip, #-2013265919	; 0x88000001
    1ea0:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    1ea4:	2e2e0067 	cdpcs	0, 2, cr0, cr14, cr7, {3}
    1ea8:	2f2e2e2f 	svccs	0x002e2e2f
    1eac:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1eb0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1eb4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1eb8:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    1ebc:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    1ec0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1ec4:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1ec8:	732f6362 	teqvc	pc, #-2013265919	; 0x88000001
    1ecc:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    1ed0:	656d2f67 	strbvs	r2, [sp, #-3943]!
    1ed4:	7465736d 	strbtvc	r7, [r5], #-877
    1ed8:	6d00632e 	stcvs	3, cr6, [r0, #-184]
    1edc:	65736d65 	ldrbvs	r6, [r3, #-3429]!
    1ee0:	75620074 	strbvc	r0, [r2, #-116]!
    1ee4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1ee8:	2f2e2e00 	svccs	0x002e2e00
    1eec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1ef0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1ef4:	2f2e2e2f 	svccs	0x002e2e2f
    1ef8:	2d636367 	stclcs	3, cr6, [r3, #-412]!
    1efc:	2e332e34 	mrccs	14, 1, r2, cr3, cr4, {1}
    1f00:	656e2f30 	strbvs	r2, [lr, #-3888]!
    1f04:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1f08:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1f0c:	74732f63 	ldrbtvc	r2, [r3], #-3939
    1f10:	62696c64 	rsbvs	r6, r9, #25600	; 0x6400
    1f14:	615f5f2f 	cmpvs	pc, pc, lsr #30
    1f18:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1f1c:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1f20:	65707974 	ldrbvs	r7, [r0, #-2420]!
    1f24:	725f5f00 	subsvc	r5, pc, #0	; 0x0
    1f28:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    1f2c:	5f726574 	svcpl	0x00726574
    1f30:	74697865 	strbtvc	r7, [r9], #-2149
    1f34:	636f7270 	cmnvs	pc, #7	; 0x7
    1f38:	635f5f00 	cmpvs	pc, #0	; 0x0
    1f3c:	5f6c6c61 	svcpl	0x006c6c61
    1f40:	74697865 	strbtvc	r7, [r9], #-2149
    1f44:	636f7270 	cmnvs	pc, #7	; 0x7
    1f48:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
    1f4c:	2f2e2e2f 	svccs	0x002e2e2f
    1f50:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1f54:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1f58:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1f5c:	332e342d 	teqcc	lr, #754974720	; 0x2d000000
    1f60:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    1f64:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1f68:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1f6c:	732f6362 	teqvc	pc, #-2013265919	; 0x88000001
    1f70:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    1f74:	5f5f2f62 	svcpl	0x005f2f62
    1f78:	6c6c6163 	stfvse	f6, [ip], #-396
    1f7c:	6574615f 	ldrbvs	r6, [r4, #-351]!
    1f80:	2e746978 	mrccs	9, 3, r6, cr4, cr8, {3}
    1f84:	616c0063 	cmnvs	ip, r3, rrx
    1f88:	00707473 	rsbseq	r7, r0, r3, ror r4
    1f8c:	74736572 	ldrbtvc	r6, [r3], #-1394
    1f90:	00747261 	rsbseq	r7, r4, r1, ror #4

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000014 	andeq	r0, r0, r4, lsl r0
       4:	00000016 	andeq	r0, r0, r6, lsl r0
       8:	165d0001 	ldrbne	r0, [sp], -r1
       c:	40000000 	andmi	r0, r0, r0
      10:	02000000 	andeq	r0, r0, #0	; 0x0
      14:	00087d00 	andeq	r7, r8, r0, lsl #26
      18:	00000000 	andeq	r0, r0, r0
      1c:	14000000 	strne	r0, [r0]
      20:	1a000000 	bne	28 <_Minimum_Stack_Size-0xd8>
      24:	01000000 	tsteq	r0, r0
      28:	001a5000 	andseq	r5, sl, r0
      2c:	00400000 	subeq	r0, r0, r0
      30:	00010000 	andeq	r0, r1, r0
      34:	00000054 	andeq	r0, r0, r4, asr r0
      38:	00000000 	andeq	r0, r0, r0
      3c:	00004000 	andeq	r4, r0, r0
      40:	00004200 	andeq	r4, r0, r0, lsl #4
      44:	5d000100 	stfpls	f0, [r0]
      48:	00000042 	andeq	r0, r0, r2, asr #32
      4c:	00000048 	andeq	r0, r0, r8, asr #32
      50:	047d0002 	ldrbteq	r0, [sp], #-2
      54:	00000048 	andeq	r0, r0, r8, asr #32
      58:	00000056 	andeq	r0, r0, r6, asr r0
      5c:	087d0002 	ldmdaeq	sp!, {r1}^
	...
      68:	00000058 	andeq	r0, r0, r8, asr r0
      6c:	0000005a 	andeq	r0, r0, sl, asr r0
      70:	5a5d0001 	bpl	174007c <__Stack_Size+0x173fc7c>
      74:	5c000000 	stcpl	0, cr0, [r0], {0}
      78:	02000000 	andeq	r0, r0, #0	; 0x0
      7c:	5c107d00 	ldcpl	13, cr7, [r0], {0}
      80:	a4000000 	strge	r0, [r0]
      84:	02000000 	andeq	r0, r0, #0	; 0x0
      88:	00187d00 	andseq	r7, r8, r0, lsl #26
      8c:	00000000 	andeq	r0, r0, r0
      90:	a4000000 	strge	r0, [r0]
      94:	a6000000 	strge	r0, [r0], -r0
      98:	01000000 	tsteq	r0, r0
      9c:	00a65d00 	adceq	r5, r6, r0, lsl #26
      a0:	00ac0000 	adceq	r0, ip, r0
      a4:	00020000 	andeq	r0, r2, r0
      a8:	00ac047d 	adceq	r0, ip, sp, ror r4
      ac:	00b80000 	adcseq	r0, r8, r0
      b0:	00020000 	andeq	r0, r2, r0
      b4:	0000087d 	andeq	r0, r0, sp, ror r8
      b8:	00000000 	andeq	r0, r0, r0
      bc:	00b80000 	adcseq	r0, r8, r0
      c0:	00ba0000 	adcseq	r0, sl, r0
      c4:	00010000 	andeq	r0, r1, r0
      c8:	0000ba5d 	andeq	fp, r0, sp, asr sl
      cc:	0000bc00 	andeq	fp, r0, r0, lsl #24
      d0:	7d000200 	sfmvc	f0, 4, [r0]
      d4:	0000bc04 	andeq	fp, r0, r4, lsl #24
      d8:	00012c00 	andeq	r2, r1, r0, lsl #24
      dc:	7d000200 	sfmvc	f0, 4, [r0]
      e0:	00000008 	andeq	r0, r0, r8
      e4:	00000000 	andeq	r0, r0, r0
      e8:	00012c00 	andeq	r2, r1, r0, lsl #24
      ec:	00012e00 	andeq	r2, r1, r0, lsl #28
      f0:	5d000100 	stfpls	f0, [r0]
      f4:	0000012e 	andeq	r0, r0, lr, lsr #2
      f8:	00000130 	andeq	r0, r0, r0, lsr r1
      fc:	047d0002 	ldrbteq	r0, [sp], #-2
     100:	00000130 	andeq	r0, r0, r0, lsr r1
     104:	00000208 	andeq	r0, r0, r8, lsl #4
     108:	087d0002 	ldmdaeq	sp!, {r1}^
	...
     114:	00000110 	.word	0x00000110
     118:	00000112 	.word	0x00000112
     11c:	125d0001 	.word	0x125d0001
     120:	14000001 	.word	0x14000001
     124:	02000001 	.word	0x02000001
     128:	14047d00 	.word	0x14047d00
     12c:	1c000001 	.word	0x1c000001
     130:	02000001 	.word	0x02000001
     134:	00087d00 	.word	0x00087d00
	...
     140:	0e000000 	.word	0x0e000000
     144:	01000000 	.word	0x01000000
     148:	00005000 	.word	0x00005000
     14c:	00000000 	.word	0x00000000
     150:	00180000 	.word	0x00180000
     154:	00260000 	.word	0x00260000
     158:	00010000 	.word	0x00010000
     15c:	00000050 	.word	0x00000050
     160:	00000000 	.word	0x00000000
     164:	00003000 	.word	0x00003000
     168:	00003e00 	.word	0x00003e00
     16c:	50000100 	.word	0x50000100
	...
     178:	000000c4 	.word	0x000000c4
     17c:	000000d0 	.word	0x000000d0
     180:	d2500001 	.word	0xd2500001
     184:	de000000 	.word	0xde000000
     188:	01000000 	.word	0x01000000
     18c:	00005000 	.word	0x00005000
     190:	00000000 	.word	0x00000000
     194:	00d00000 	.word	0x00d00000
     198:	00d20000 	.word	0x00d20000
     19c:	00010000 	.word	0x00010000
     1a0:	0000de50 	.word	0x0000de50
     1a4:	0000de00 	.word	0x0000de00
     1a8:	50000100 	.word	0x50000100
	...
     1b4:	000000fc 	.word	0x000000fc
     1b8:	000000fe 	.word	0x000000fe
     1bc:	08500001 	.word	0x08500001
     1c0:	0a000001 	.word	0x0a000001
     1c4:	01000001 	.word	0x01000001
     1c8:	01165000 	.word	0x01165000
     1cc:	01160000 	.word	0x01160000
     1d0:	00010000 	.word	0x00010000
     1d4:	00000050 	.word	0x00000050
     1d8:	00000000 	.word	0x00000000
     1dc:	00011c00 	.word	0x00011c00
     1e0:	00011e00 	.word	0x00011e00
     1e4:	5d000100 	.word	0x5d000100
     1e8:	0000011e 	.word	0x0000011e
     1ec:	00000122 	.word	0x00000122
     1f0:	087d0002 	.word	0x087d0002
     1f4:	00000122 	.word	0x00000122
     1f8:	000001b0 	.word	0x000001b0
     1fc:	107d0002 	.word	0x107d0002
	...
     208:	0000011c 	.word	0x0000011c
     20c:	0000012c 	.word	0x0000012c
     210:	2c500001 	.word	0x2c500001
     214:	b0000001 	.word	0xb0000001
     218:	01000001 	.word	0x01000001
     21c:	00005100 	.word	0x00005100
     220:	00000000 	.word	0x00000000
     224:	012e0000 	.word	0x012e0000
     228:	01300000 	.word	0x01300000
     22c:	00010000 	.word	0x00010000
     230:	00013a50 	.word	0x00013a50
     234:	00013c00 	.word	0x00013c00
     238:	50000100 	.word	0x50000100
     23c:	00000148 	.word	0x00000148
     240:	000001a8 	.word	0x000001a8
     244:	00500001 	.word	0x00500001
     248:	00000000 	.word	0x00000000
     24c:	4a000000 	.word	0x4a000000
     250:	4c000001 	.word	0x4c000001
     254:	02000001 	.word	0x02000001
     258:	4c7c9100 	.word	0x4c7c9100
     25c:	52000001 	.word	0x52000001
     260:	02000001 	.word	0x02000001
     264:	52047d00 	.word	0x52047d00
     268:	58000001 	.word	0x58000001
     26c:	02000001 	.word	0x02000001
     270:	587c9100 	.word	0x587c9100
     274:	5e000001 	.word	0x5e000001
     278:	02000001 	.word	0x02000001
     27c:	5e047d00 	.word	0x5e047d00
     280:	86000001 	.word	0x86000001
     284:	02000001 	.word	0x02000001
     288:	8e7c9100 	.word	0x8e7c9100
     28c:	b0000001 	.word	0xb0000001
     290:	02000001 	.word	0x02000001
     294:	007c9100 	.word	0x007c9100
     298:	00000000 	.word	0x00000000
     29c:	b0000000 	.word	0xb0000000
     2a0:	b2000001 	.word	0xb2000001
     2a4:	01000001 	.word	0x01000001
     2a8:	01b25d00 	.word	0x01b25d00
     2ac:	01b80000 	.word	0x01b80000
     2b0:	00020000 	.word	0x00020000
     2b4:	01b8147d 	.word	0x01b8147d
     2b8:	020c0000 	.word	0x020c0000
     2bc:	00020000 	.word	0x00020000
     2c0:	0000187d 	.word	0x0000187d
     2c4:	00000000 	.word	0x00000000
     2c8:	01b00000 	.word	0x01b00000
     2cc:	01c40000 	.word	0x01c40000
     2d0:	00010000 	.word	0x00010000
     2d4:	0001c450 	.word	0x0001c450
     2d8:	00020c00 	.word	0x00020c00
     2dc:	55000100 	.word	0x55000100
	...
     2e8:	000001b0 	.word	0x000001b0
     2ec:	000001cc 	.word	0x000001cc
     2f0:	cc510001 	.word	0xcc510001
     2f4:	0c000001 	.word	0x0c000001
     2f8:	01000002 	.word	0x01000002
     2fc:	00005600 	.word	0x00005600
     300:	00000000 	.word	0x00000000
     304:	01b00000 	.word	0x01b00000
     308:	01cc0000 	.word	0x01cc0000
     30c:	00010000 	.word	0x00010000
     310:	0001cc52 	.word	0x0001cc52
     314:	00020c00 	.word	0x00020c00
     318:	57000100 	.word	0x57000100
	...
     324:	000001ce 	.word	0x000001ce
     328:	000001ea 	.word	0x000001ea
     32c:	f0500001 	.word	0xf0500001
     330:	fc000001 	.word	0xfc000001
     334:	01000001 	.word	0x01000001
     338:	00005000 	.word	0x00005000
     33c:	00000000 	.word	0x00000000
     340:	020c0000 	.word	0x020c0000
     344:	020e0000 	.word	0x020e0000
     348:	00010000 	.word	0x00010000
     34c:	00020e5d 	.word	0x00020e5d
     350:	00021200 	.word	0x00021200
     354:	7d000200 	.word	0x7d000200
     358:	0002120c 	.word	0x0002120c
     35c:	0002a800 	.word	0x0002a800
     360:	7d000200 	.word	0x7d000200
     364:	00000010 	.word	0x00000010
     368:	00000000 	.word	0x00000000
     36c:	00020c00 	.word	0x00020c00
     370:	00021600 	.word	0x00021600
     374:	50000100 	.word	0x50000100
     378:	00000216 	.word	0x00000216
     37c:	000002a8 	.word	0x000002a8
     380:	00550001 	.word	0x00550001
     384:	00000000 	.word	0x00000000
     388:	1c000000 	.word	0x1c000000
     38c:	26000002 	.word	0x26000002
     390:	01000002 	.word	0x01000002
     394:	02465000 	.word	0x02465000
     398:	02720000 	.word	0x02720000
     39c:	00010000 	.word	0x00010000
     3a0:	00027850 	.word	0x00027850
     3a4:	00029800 	.word	0x00029800
     3a8:	50000100 	.word	0x50000100
	...
     3b4:	000002a8 	.word	0x000002a8
     3b8:	000002aa 	.word	0x000002aa
     3bc:	aa5d0001 	.word	0xaa5d0001
     3c0:	68000002 	.word	0x68000002
     3c4:	02000003 	.word	0x02000003
     3c8:	00087d00 	.word	0x00087d00
     3cc:	00000000 	.word	0x00000000
     3d0:	a8000000 	.word	0xa8000000
     3d4:	ae000002 	.word	0xae000002
     3d8:	01000002 	.word	0x01000002
     3dc:	02ae5000 	.word	0x02ae5000
     3e0:	03680000 	.word	0x03680000
     3e4:	00010000 	.word	0x00010000
     3e8:	00000054 	.word	0x00000054
     3ec:	00000000 	.word	0x00000000
     3f0:	0002ca00 	.word	0x0002ca00
     3f4:	0002de00 	.word	0x0002de00
     3f8:	51000100 	.word	0x51000100
     3fc:	000002de 	.word	0x000002de
     400:	00000302 	.word	0x00000302
     404:	02510001 	.word	0x02510001
     408:	26000003 	.word	0x26000003
     40c:	01000003 	.word	0x01000003
     410:	03265100 	.word	0x03265100
     414:	03460000 	.word	0x03460000
     418:	00010000 	.word	0x00010000
     41c:	00034651 	.word	0x00034651
     420:	00034c00 	.word	0x00034c00
     424:	51000100 	.word	0x51000100
	...
     430:	000002e4 	.word	0x000002e4
     434:	00000302 	.word	0x00000302
     438:	02520001 	.word	0x02520001
     43c:	08000003 	.word	0x08000003
     440:	01000003 	.word	0x01000003
     444:	00005200 	.word	0x00005200
     448:	00000000 	.word	0x00000000
     44c:	03080000 	.word	0x03080000
     450:	03260000 	.word	0x03260000
     454:	00010000 	.word	0x00010000
     458:	00032652 	.word	0x00032652
     45c:	00032800 	.word	0x00032800
     460:	52000100 	.word	0x52000100
	...
     46c:	00000328 	.word	0x00000328
     470:	00000346 	.word	0x00000346
     474:	46520001 	.word	0x46520001
     478:	52000003 	.word	0x52000003
     47c:	01000003 	.word	0x01000003
     480:	00005200 	.word	0x00005200
     484:	00000000 	.word	0x00000000
     488:	02b40000 	.word	0x02b40000
     48c:	02d80000 	.word	0x02d80000
     490:	00010000 	.word	0x00010000
     494:	0002de50 	.word	0x0002de50
     498:	0002fc00 	.word	0x0002fc00
     49c:	50000100 	.word	0x50000100
     4a0:	00000302 	.word	0x00000302
     4a4:	00000320 	.word	0x00000320
     4a8:	26500001 	.word	0x26500001
     4ac:	40000003 	.word	0x40000003
     4b0:	01000003 	.word	0x01000003
     4b4:	03465000 	.word	0x03465000
     4b8:	03580000 	.word	0x03580000
     4bc:	00010000 	.word	0x00010000
     4c0:	00000050 	.word	0x00000050
     4c4:	00000000 	.word	0x00000000
     4c8:	00036800 	.word	0x00036800
     4cc:	00036a00 	.word	0x00036a00
     4d0:	5d000100 	.word	0x5d000100
     4d4:	0000036a 	.word	0x0000036a
     4d8:	000003ac 	.word	0x000003ac
     4dc:	107d0002 	.word	0x107d0002
	...
     4e8:	00000368 	.word	0x00000368
     4ec:	0000036e 	.word	0x0000036e
     4f0:	6e500001 	.word	0x6e500001
     4f4:	ac000003 	.word	0xac000003
     4f8:	01000003 	.word	0x01000003
     4fc:	00005600 	.word	0x00005600
     500:	00000000 	.word	0x00000000
     504:	03680000 	.word	0x03680000
     508:	03740000 	.word	0x03740000
     50c:	00010000 	.word	0x00010000
     510:	00037451 	.word	0x00037451
     514:	0003ac00 	.word	0x0003ac00
     518:	55000100 	.word	0x55000100
	...
     524:	00000376 	.word	0x00000376
     528:	0000037e 	.word	0x0000037e
     52c:	96500001 	.word	0x96500001
     530:	a2000003 	.word	0xa2000003
     534:	01000003 	.word	0x01000003
     538:	00005000 	.word	0x00005000
     53c:	00000000 	.word	0x00000000
     540:	03ac0000 	.word	0x03ac0000
     544:	03ae0000 	.word	0x03ae0000
     548:	00010000 	.word	0x00010000
     54c:	0003ae5d 	.word	0x0003ae5d
     550:	0003e400 	.word	0x0003e400
     554:	7d000200 	.word	0x7d000200
     558:	00000010 	.word	0x00000010
     55c:	00000000 	.word	0x00000000
     560:	0003ac00 	.word	0x0003ac00
     564:	0003b200 	.word	0x0003b200
     568:	50000100 	.word	0x50000100
     56c:	000003b2 	.word	0x000003b2
     570:	000003e4 	.word	0x000003e4
     574:	00560001 	.word	0x00560001
     578:	00000000 	.word	0x00000000
     57c:	ac000000 	.word	0xac000000
     580:	b8000003 	.word	0xb8000003
     584:	01000003 	.word	0x01000003
     588:	03b85100 	.word	0x03b85100
     58c:	03e40000 	.word	0x03e40000
     590:	00010000 	.word	0x00010000
     594:	00000055 	.word	0x00000055
     598:	00000000 	.word	0x00000000
     59c:	0003ba00 	.word	0x0003ba00
     5a0:	0003c000 	.word	0x0003c000
     5a4:	50000100 	.word	0x50000100
     5a8:	000003d0 	.word	0x000003d0
     5ac:	000003dc 	.word	0x000003dc
     5b0:	00500001 	.word	0x00500001
     5b4:	00000000 	.word	0x00000000
     5b8:	e4000000 	.word	0xe4000000
     5bc:	e6000003 	.word	0xe6000003
     5c0:	01000003 	.word	0x01000003
     5c4:	03e65d00 	.word	0x03e65d00
     5c8:	042c0000 	.word	0x042c0000
     5cc:	00020000 	.word	0x00020000
     5d0:	0000107d 	.word	0x0000107d
     5d4:	00000000 	.word	0x00000000
     5d8:	03e40000 	.word	0x03e40000
     5dc:	03ea0000 	.word	0x03ea0000
     5e0:	00010000 	.word	0x00010000
     5e4:	0003ea50 	.word	0x0003ea50
     5e8:	00042c00 	.word	0x00042c00
     5ec:	56000100 	.word	0x56000100
	...
     5f8:	000003e4 	.word	0x000003e4
     5fc:	000003f0 	.word	0x000003f0
     600:	f0510001 	.word	0xf0510001
     604:	2c000003 	.word	0x2c000003
     608:	01000004 	.word	0x01000004
     60c:	00005500 	.word	0x00005500
     610:	00000000 	.word	0x00000000
     614:	03f20000 	.word	0x03f20000
     618:	03f80000 	.word	0x03f80000
     61c:	00010000 	.word	0x00010000
     620:	00040a50 	.word	0x00040a50
     624:	00041200 	.word	0x00041200
     628:	50000100 	.word	0x50000100
     62c:	00000416 	.word	0x00000416
     630:	00000424 	.word	0x00000424
     634:	00500001 	.word	0x00500001
     638:	00000000 	.word	0x00000000
     63c:	2c000000 	.word	0x2c000000
     640:	2e000004 	.word	0x2e000004
     644:	01000004 	.word	0x01000004
     648:	042e5d00 	.word	0x042e5d00
     64c:	04a40000 	.word	0x04a40000
     650:	00020000 	.word	0x00020000
     654:	0000087d 	.word	0x0000087d
     658:	00000000 	.word	0x00000000
     65c:	04380000 	.word	0x04380000
     660:	04420000 	.word	0x04420000
     664:	00010000 	.word	0x00010000
     668:	00046250 	.word	0x00046250
     66c:	00048000 	.word	0x00048000
     670:	50000100 	.word	0x50000100
     674:	00000486 	.word	0x00000486
     678:	00000494 	.word	0x00000494
     67c:	00500001 	.word	0x00500001
     680:	00000000 	.word	0x00000000
     684:	a4000000 	.word	0xa4000000
     688:	a6000004 	.word	0xa6000004
     68c:	01000004 	.word	0x01000004
     690:	04a65d00 	.word	0x04a65d00
     694:	04e00000 	.word	0x04e00000
     698:	00020000 	.word	0x00020000
     69c:	0000087d 	.word	0x0000087d
     6a0:	00000000 	.word	0x00000000
     6a4:	04b00000 	.word	0x04b00000
     6a8:	04c00000 	.word	0x04c00000
     6ac:	00010000 	.word	0x00010000
     6b0:	0004ce50 	.word	0x0004ce50
     6b4:	0004da00 	.word	0x0004da00
     6b8:	50000100 	.word	0x50000100
	...
     6c4:	000004e0 	.word	0x000004e0
     6c8:	000004e2 	.word	0x000004e2
     6cc:	e25d0001 	.word	0xe25d0001
     6d0:	e6000004 	.word	0xe6000004
     6d4:	02000004 	.word	0x02000004
     6d8:	e60c7d00 	.word	0xe60c7d00
     6dc:	28000004 	.word	0x28000004
     6e0:	02000005 	.word	0x02000005
     6e4:	00107d00 	.word	0x00107d00
     6e8:	00000000 	.word	0x00000000
     6ec:	e0000000 	.word	0xe0000000
     6f0:	ea000004 	.word	0xea000004
     6f4:	01000004 	.word	0x01000004
     6f8:	04ea5000 	.word	0x04ea5000
     6fc:	05280000 	.word	0x05280000
     700:	00010000 	.word	0x00010000
     704:	00000055 	.word	0x00000055
     708:	00000000 	.word	0x00000000
     70c:	0004f000 	.word	0x0004f000
     710:	0004f800 	.word	0x0004f800
     714:	50000100 	.word	0x50000100
     718:	00000512 	.word	0x00000512
     71c:	0000051e 	.word	0x0000051e
     720:	00500001 	.word	0x00500001
	...
     72c:	02000000 	.word	0x02000000
     730:	01000000 	.word	0x01000000
     734:	00025d00 	.word	0x00025d00
     738:	001c0000 	.word	0x001c0000
     73c:	00020000 	.word	0x00020000
     740:	001c147d 	.word	0x001c147d
     744:	00a60000 	.word	0x00a60000
     748:	00020000 	.word	0x00020000
     74c:	0000207d 	.word	0x0000207d
	...
     758:	00220000 	.word	0x00220000
     75c:	00010000 	.word	0x00010000
     760:	00005c51 	.word	0x00005c51
     764:	00006400 	.word	0x00006400
     768:	51000100 	.word	0x51000100
     76c:	000000a2 	.word	0x000000a2
     770:	000000a6 	.word	0x000000a6
     774:	00510001 	.word	0x00510001
     778:	00000000 	.word	0x00000000
     77c:	22000000 	.word	0x22000000
     780:	34000000 	.word	0x34000000
     784:	01000000 	.word	0x01000000
     788:	00545300 	.word	0x00545300
     78c:	006a0000 	.word	0x006a0000
     790:	00010000 	.word	0x00010000
     794:	00006e53 	.word	0x00006e53
     798:	00007a00 	.word	0x00007a00
     79c:	53000100 	.word	0x53000100
     7a0:	0000009a 	.word	0x0000009a
     7a4:	000000a6 	.word	0x000000a6
     7a8:	00530001 	.word	0x00530001
     7ac:	00000000 	.word	0x00000000
     7b0:	b8000000 	.word	0xb8000000
     7b4:	c2000000 	.word	0xc2000000
     7b8:	01000000 	.word	0x01000000
     7bc:	00005000 	.word	0x00005000
     7c0:	00000000 	.word	0x00000000
     7c4:	00c40000 	.word	0x00c40000
     7c8:	00c60000 	.word	0x00c60000
     7cc:	00010000 	.word	0x00010000
     7d0:	00000050 	.word	0x00000050
     7d4:	00000000 	.word	0x00000000
     7d8:	0000cc00 	.word	0x0000cc00
     7dc:	0000d600 	.word	0x0000d600
     7e0:	50000100 	.word	0x50000100
	...
     7ec:	000000d8 	.word	0x000000d8
     7f0:	000000da 	.word	0x000000da
     7f4:	00500001 	.word	0x00500001
     7f8:	00000000 	.word	0x00000000
     7fc:	08000000 	.word	0x08000000
     800:	18000001 	.word	0x18000001
     804:	01000001 	.word	0x01000001
     808:	00005100 	.word	0x00005100
     80c:	00000000 	.word	0x00000000
     810:	01100000 	.word	0x01100000
     814:	01140000 	.word	0x01140000
     818:	00010000 	.word	0x00010000
     81c:	00011453 	.word	0x00011453
     820:	00011800 	.word	0x00011800
     824:	52000100 	.word	0x52000100
     828:	00000118 	.word	0x00000118
     82c:	0000011c 	.word	0x0000011c
     830:	1c510001 	.word	0x1c510001
     834:	1e000001 	.word	0x1e000001
     838:	01000001 	.word	0x01000001
     83c:	011e5300 	.word	0x011e5300
     840:	01280000 	.word	0x01280000
     844:	00010000 	.word	0x00010000
     848:	00000051 	.word	0x00000051
     84c:	00000000 	.word	0x00000000
     850:	00013400 	.word	0x00013400
     854:	00013600 	.word	0x00013600
     858:	5d000100 	.word	0x5d000100
     85c:	00000136 	.word	0x00000136
     860:	00000194 	.word	0x00000194
     864:	0c7d0002 	.word	0x0c7d0002
	...
     870:	00000134 	.word	0x00000134
     874:	00000140 	.word	0x00000140
     878:	40510001 	.word	0x40510001
     87c:	94000001 	.word	0x94000001
     880:	01000001 	.word	0x01000001
     884:	00005500 	.word	0x00005500
     888:	00000000 	.word	0x00000000
     88c:	014a0000 	.word	0x014a0000
     890:	01520000 	.word	0x01520000
     894:	00010000 	.word	0x00010000
     898:	0001525c 	.word	0x0001525c
     89c:	00015a00 	.word	0x00015a00
     8a0:	52000100 	.word	0x52000100
     8a4:	0000015a 	.word	0x0000015a
     8a8:	00000178 	.word	0x00000178
     8ac:	785c0001 	.word	0x785c0001
     8b0:	7c000001 	.word	0x7c000001
     8b4:	01000001 	.word	0x01000001
     8b8:	017c5300 	.word	0x017c5300
     8bc:	01940000 	.word	0x01940000
     8c0:	00010000 	.word	0x00010000
     8c4:	00000052 	.word	0x00000052
     8c8:	00000000 	.word	0x00000000
     8cc:	00019400 	.word	0x00019400
     8d0:	00019600 	.word	0x00019600
     8d4:	5d000100 	.word	0x5d000100
     8d8:	00000196 	.word	0x00000196
     8dc:	000001c8 	.word	0x000001c8
     8e0:	087d0002 	.word	0x087d0002
	...
     8ec:	00000194 	.word	0x00000194
     8f0:	000001a2 	.word	0x000001a2
     8f4:	00500001 	.word	0x00500001
     8f8:	00000000 	.word	0x00000000
     8fc:	94000000 	.word	0x94000000
     900:	a8000001 	.word	0xa8000001
     904:	01000001 	.word	0x01000001
     908:	00005100 	.word	0x00005100
     90c:	00000000 	.word	0x00000000
     910:	01c80000 	.word	0x01c80000
     914:	01ca0000 	.word	0x01ca0000
     918:	00010000 	.word	0x00010000
     91c:	0001ca5d 	.word	0x0001ca5d
     920:	0001d000 	.word	0x0001d000
     924:	7d000200 	.word	0x7d000200
     928:	0001d004 	.word	0x0001d004
     92c:	0001e000 	.word	0x0001e000
     930:	7d000200 	.word	0x7d000200
     934:	00000008 	.word	0x00000008
     938:	00000000 	.word	0x00000000
     93c:	0001e000 	.word	0x0001e000
     940:	0001e200 	.word	0x0001e200
     944:	5d000100 	.word	0x5d000100
     948:	000001e2 	.word	0x000001e2
     94c:	000001e6 	.word	0x000001e6
     950:	047d0002 	.word	0x047d0002
     954:	000001e6 	.word	0x000001e6
     958:	00000288 	.word	0x00000288
     95c:	107d0002 	.word	0x107d0002
	...
     968:	000001e0 	.word	0x000001e0
     96c:	000001e8 	.word	0x000001e8
     970:	ea500001 	.word	0xea500001
     974:	88000001 	.word	0x88000001
     978:	02000002 	.word	0x02000002
     97c:	00047d00 	.word	0x00047d00
     980:	00000000 	.word	0x00000000
     984:	0000      	.short	0x0000
     986:	00          	.byte	0x00
     987:	64          	.byte	0x64
     988:	68000000 	.word	0x68000000
     98c:	01000000 	.word	0x01000000
     990:	00005000 	.word	0x00005000
     994:	00000000 	.word	0x00000000
     998:	00780000 	.word	0x00780000
     99c:	007a0000 	.word	0x007a0000
     9a0:	00010000 	.word	0x00010000
     9a4:	00007a5d 	.word	0x00007a5d
     9a8:	0000f400 	.word	0x0000f400
     9ac:	7d000200 	.word	0x7d000200
     9b0:	0000000c 	.word	0x0000000c
     9b4:	00000000 	.word	0x00000000
     9b8:	00007800 	.word	0x00007800
     9bc:	0000a200 	.word	0x0000a200
     9c0:	50000100 	.word	0x50000100
     9c4:	000000d8 	.word	0x000000d8
     9c8:	000000f4 	.word	0x000000f4
     9cc:	00500001 	.word	0x00500001
     9d0:	00000000 	.word	0x00000000
     9d4:	92000000 	.word	0x92000000
     9d8:	98000000 	.word	0x98000000
     9dc:	01000000 	.word	0x01000000
     9e0:	00985200 	.word	0x00985200
     9e4:	00a60000 	.word	0x00a60000
     9e8:	00010000 	.word	0x00010000
     9ec:	0000a651 	.word	0x0000a651
     9f0:	0000be00 	.word	0x0000be00
     9f4:	53000100 	.word	0x53000100
	...
     a00:	000000bc 	.word	0x000000bc
     a04:	000000c4 	.word	0x000000c4
     a08:	c4510001 	.word	0xc4510001
     a0c:	ce000000 	.word	0xce000000
     a10:	01000000 	.word	0x01000000
     a14:	00005300 	.word	0x00005300
     a18:	00000000 	.word	0x00000000
     a1c:	00ae0000 	.word	0x00ae0000
     a20:	00cc0000 	.word	0x00cc0000
     a24:	00010000 	.word	0x00010000
     a28:	00000052 	.word	0x00000052
     a2c:	00000000 	.word	0x00000000
     a30:	00011800 	.word	0x00011800
     a34:	00012200 	.word	0x00012200
     a38:	50000100 	.word	0x50000100
	...
     a44:	00000148 	.word	0x00000148
     a48:	00000150 	.word	0x00000150
     a4c:	00500001 	.word	0x00500001
     a50:	00000000 	.word	0x00000000
     a54:	70000000 	.word	0x70000000
     a58:	7a000001 	.word	0x7a000001
     a5c:	01000001 	.word	0x01000001
     a60:	00005000 	.word	0x00005000
     a64:	00000000 	.word	0x00000000
     a68:	01a00000 	.word	0x01a00000
     a6c:	01a40000 	.word	0x01a40000
     a70:	00010000 	.word	0x00010000
     a74:	00000051 	.word	0x00000051
     a78:	00000000 	.word	0x00000000
     a7c:	0001f000 	.word	0x0001f000
     a80:	0001f400 	.word	0x0001f400
     a84:	50000100 	.word	0x50000100
	...
     a90:	00000218 	.word	0x00000218
     a94:	0000021a 	.word	0x0000021a
     a98:	1a5d0001 	.word	0x1a5d0001
     a9c:	70000002 	.word	0x70000002
     aa0:	02000002 	.word	0x02000002
     aa4:	00087d00 	.word	0x00087d00
     aa8:	00000000 	.word	0x00000000
     aac:	18000000 	.word	0x18000000
     ab0:	42000002 	.word	0x42000002
     ab4:	01000002 	.word	0x01000002
     ab8:	00005000 	.word	0x00005000
     abc:	00000000 	.word	0x00000000
     ac0:	02180000 	.word	0x02180000
     ac4:	02300000 	.word	0x02300000
     ac8:	00010000 	.word	0x00010000
     acc:	00000051 	.word	0x00000051
     ad0:	00000000 	.word	0x00000000
     ad4:	00021800 	.word	0x00021800
     ad8:	00023a00 	.word	0x00023a00
     adc:	52000100 	.word	0x52000100
	...
     ae8:	00000240 	.word	0x00000240
     aec:	00000252 	.word	0x00000252
     af0:	00510001 	.word	0x00510001
     af4:	00000000 	.word	0x00000000
     af8:	28000000 	.word	0x28000000
     afc:	30000002 	.word	0x30000002
     b00:	01000002 	.word	0x01000002
     b04:	02305300 	.word	0x02305300
     b08:	023c0000 	.word	0x023c0000
     b0c:	00010000 	.word	0x00010000
     b10:	00023c51 	.word	0x00023c51
     b14:	00024e00 	.word	0x00024e00
     b18:	52000100 	.word	0x52000100
	...
     b24:	00000270 	.word	0x00000270
     b28:	00000272 	.word	0x00000272
     b2c:	00500001 	.word	0x00500001
     b30:	00000000 	.word	0x00000000
     b34:	72000000 	.word	0x72000000
     b38:	76000002 	.word	0x76000002
     b3c:	01000002 	.word	0x01000002
     b40:	027a5000 	.word	0x027a5000
     b44:	02900000 	.word	0x02900000
     b48:	00010000 	.word	0x00010000
     b4c:	00000053 	.word	0x00000053
     b50:	00000000 	.word	0x00000000
     b54:	00029000 	.word	0x00029000
     b58:	00029400 	.word	0x00029400
     b5c:	50000100 	.word	0x50000100
	...
     b68:	000002a8 	.word	0x000002a8
     b6c:	000002ac 	.word	0x000002ac
     b70:	00500001 	.word	0x00500001
     b74:	00000000 	.word	0x00000000
     b78:	c0000000 	.word	0xc0000000
     b7c:	c2000002 	.word	0xc2000002
     b80:	01000002 	.word	0x01000002
     b84:	00005000 	.word	0x00005000
     b88:	00000000 	.word	0x00000000
     b8c:	02e00000 	.word	0x02e00000
     b90:	02ec0000 	.word	0x02ec0000
     b94:	00010000 	.word	0x00010000
     b98:	0002ee50 	.word	0x0002ee50
     b9c:	00030c00 	.word	0x00030c00
     ba0:	50000100 	.word	0x50000100
     ba4:	0000031a 	.word	0x0000031a
     ba8:	0000031e 	.word	0x0000031e
     bac:	00500001 	.word	0x00500001
     bb0:	00000000 	.word	0x00000000
     bb4:	ec000000 	.word	0xec000000
     bb8:	ee000002 	.word	0xee000002
     bbc:	01000002 	.word	0x01000002
     bc0:	030c5000 	.word	0x030c5000
     bc4:	031a0000 	.word	0x031a0000
     bc8:	00010000 	.word	0x00010000
     bcc:	00031e50 	.word	0x00031e50
     bd0:	00031e00 	.word	0x00031e00
     bd4:	50000100 	.word	0x50000100
	...
     be0:	000002e6 	.word	0x000002e6
     be4:	000002ea 	.word	0x000002ea
     be8:	ee530001 	.word	0xee530001
     bec:	f6000002 	.word	0xf6000002
     bf0:	01000002 	.word	0x01000002
     bf4:	031a5300 	.word	0x031a5300
     bf8:	031c0000 	.word	0x031c0000
     bfc:	00010000 	.word	0x00010000
     c00:	00000053 	.word	0x00000053
     c04:	00000000 	.word	0x00000000
     c08:	00030400 	.word	0x00030400
     c0c:	00031a00 	.word	0x00031a00
     c10:	52000100 	.word	0x52000100
     c14:	0000031e 	.word	0x0000031e
     c18:	00000324 	.word	0x00000324
     c1c:	00520001 	.word	0x00520001
     c20:	00000000 	.word	0x00000000
     c24:	24000000 	.word	0x24000000
     c28:	30000003 	.word	0x30000003
     c2c:	01000003 	.word	0x01000003
     c30:	00005000 	.word	0x00005000
     c34:	00000000 	.word	0x00000000
     c38:	03300000 	.word	0x03300000
     c3c:	03320000 	.word	0x03320000
     c40:	00010000 	.word	0x00010000
     c44:	00000050 	.word	0x00000050
     c48:	00000000 	.word	0x00000000
     c4c:	00033800 	.word	0x00033800
     c50:	00033a00 	.word	0x00033a00
     c54:	5d000100 	.word	0x5d000100
     c58:	0000033a 	.word	0x0000033a
     c5c:	0000033c 	.word	0x0000033c
     c60:	047d0002 	.word	0x047d0002
     c64:	0000033c 	.word	0x0000033c
     c68:	00000344 	.word	0x00000344
     c6c:	087d0002 	.word	0x087d0002
	...
     c78:	00000344 	.word	0x00000344
     c7c:	00000346 	.word	0x00000346
     c80:	465d0001 	.word	0x465d0001
     c84:	4a000003 	.word	0x4a000003
     c88:	02000003 	.word	0x02000003
     c8c:	4a047d00 	.word	0x4a047d00
     c90:	52000003 	.word	0x52000003
     c94:	02000003 	.word	0x02000003
     c98:	00087d00 	.word	0x00087d00
     c9c:	00000000 	.word	0x00000000
     ca0:	44000000 	.word	0x44000000
     ca4:	48000003 	.word	0x48000003
     ca8:	01000003 	.word	0x01000003
     cac:	00005000 	.word	0x00005000
     cb0:	00000000 	.word	0x00000000
     cb4:	03540000 	.word	0x03540000
     cb8:	03560000 	.word	0x03560000
     cbc:	00010000 	.word	0x00010000
     cc0:	0003565d 	.word	0x0003565d
     cc4:	00035800 	.word	0x00035800
     cc8:	7d000200 	.word	0x7d000200
     ccc:	00035804 	.word	0x00035804
     cd0:	00036000 	.word	0x00036000
     cd4:	7d000200 	.word	0x7d000200
     cd8:	00000008 	.word	0x00000008
     cdc:	00000000 	.word	0x00000000
     ce0:	00036000 	.word	0x00036000
     ce4:	00036200 	.word	0x00036200
     ce8:	5d000100 	.word	0x5d000100
     cec:	00000362 	.word	0x00000362
     cf0:	00000364 	.word	0x00000364
     cf4:	047d0002 	.word	0x047d0002
     cf8:	00000364 	.word	0x00000364
     cfc:	0000036c 	.word	0x0000036c
     d00:	087d0002 	.word	0x087d0002
	...
     d0c:	0000036c 	.word	0x0000036c
     d10:	0000036e 	.word	0x0000036e
     d14:	6e5d0001 	.word	0x6e5d0001
     d18:	70000003 	.word	0x70000003
     d1c:	02000003 	.word	0x02000003
     d20:	70047d00 	.word	0x70047d00
     d24:	78000003 	.word	0x78000003
     d28:	02000003 	.word	0x02000003
     d2c:	00087d00 	.word	0x00087d00
     d30:	00000000 	.word	0x00000000
     d34:	78000000 	.word	0x78000000
     d38:	7a000003 	.word	0x7a000003
     d3c:	01000003 	.word	0x01000003
     d40:	037a5d00 	.word	0x037a5d00
     d44:	037c0000 	.word	0x037c0000
     d48:	00020000 	.word	0x00020000
     d4c:	037c047d 	.word	0x037c047d
     d50:	03840000 	.word	0x03840000
     d54:	00020000 	.word	0x00020000
     d58:	0000087d 	.word	0x0000087d
     d5c:	00000000 	.word	0x00000000
     d60:	0000      	.short	0x0000
     d62:	0018      	.short	0x0018
     d64:	00220000 	.word	0x00220000
     d68:	00010000 	.word	0x00010000
     d6c:	00000050 	.word	0x00000050
     d70:	00000000 	.word	0x00000000
     d74:	00001c00 	.word	0x00001c00
     d78:	00002200 	.word	0x00002200
     d7c:	53000100 	.word	0x53000100
     d80:	00000022 	.word	0x00000022
     d84:	0000002c 	.word	0x0000002c
     d88:	00500001 	.word	0x00500001
     d8c:	00000000 	.word	0x00000000
     d90:	38000000 	.word	0x38000000
     d94:	44000000 	.word	0x44000000
     d98:	01000000 	.word	0x01000000
     d9c:	00005000 	.word	0x00005000
     da0:	00000000 	.word	0x00000000
     da4:	005c0000 	.word	0x005c0000
     da8:	00600000 	.word	0x00600000
     dac:	00010000 	.word	0x00010000
     db0:	0000605d 	.word	0x0000605d
     db4:	00006400 	.word	0x00006400
     db8:	7d000200 	.word	0x7d000200
     dbc:	00006404 	.word	0x00006404
     dc0:	00009000 	.word	0x00009000
     dc4:	7d000200 	.word	0x7d000200
     dc8:	00000008 	.word	0x00000008
     dcc:	00000000 	.word	0x00000000
     dd0:	00009000 	.word	0x00009000
     dd4:	00009400 	.word	0x00009400
     dd8:	5d000100 	.word	0x5d000100
     ddc:	00000094 	.word	0x00000094
     de0:	00000098 	.word	0x00000098
     de4:	047d0002 	.word	0x047d0002
     de8:	00000098 	.word	0x00000098
     dec:	000000c8 	.word	0x000000c8
     df0:	087d0002 	.word	0x087d0002
	...
     dfc:	00000090 	.word	0x00000090
     e00:	0000009e 	.word	0x0000009e
     e04:	00500001 	.word	0x00500001
     e08:	00000000 	.word	0x00000000
     e0c:	90000000 	.word	0x90000000
     e10:	ba000000 	.word	0xba000000
     e14:	01000000 	.word	0x01000000
     e18:	00bc5100 	.word	0x00bc5100
     e1c:	00c00000 	.word	0x00c00000
     e20:	00010000 	.word	0x00010000
     e24:	00000051 	.word	0x00000051
     e28:	00000000 	.word	0x00000000
     e2c:	00009600 	.word	0x00009600
     e30:	00009e00 	.word	0x00009e00
     e34:	53000100 	.word	0x53000100
     e38:	0000009e 	.word	0x0000009e
     e3c:	000000ba 	.word	0x000000ba
     e40:	bc500001 	.word	0xbc500001
     e44:	c0000000 	.word	0xc0000000
     e48:	01000000 	.word	0x01000000
     e4c:	00005000 	.word	0x00005000
     e50:	00000000 	.word	0x00000000
     e54:	00c80000 	.word	0x00c80000
     e58:	00ca0000 	.word	0x00ca0000
     e5c:	00010000 	.word	0x00010000
     e60:	0000ca5d 	.word	0x0000ca5d
     e64:	0000e000 	.word	0x0000e000
     e68:	7d000200 	.word	0x7d000200
     e6c:	00000008 	.word	0x00000008
     e70:	00000000 	.word	0x00000000
     e74:	00007400 	.word	0x00007400
     e78:	00007600 	.word	0x00007600
     e7c:	5d000100 	.word	0x5d000100
     e80:	00000076 	.word	0x00000076
     e84:	000000a4 	.word	0x000000a4
     e88:	087d0002 	.word	0x087d0002
	...
     e94:	0000007c 	.word	0x0000007c
     e98:	00000082 	.word	0x00000082
     e9c:	047d0002 	.word	0x047d0002
     ea0:	00000082 	.word	0x00000082
     ea4:	0000008a 	.word	0x0000008a
     ea8:	8a530001 	.word	0x8a530001
     eac:	a4000000 	.word	0xa4000000
     eb0:	02000000 	.word	0x02000000
     eb4:	00047d00 	.word	0x00047d00
     eb8:	00000000 	.word	0x00000000
     ebc:	96000000 	.word	0x96000000
     ec0:	98000000 	.word	0x98000000
     ec4:	01000000 	.word	0x01000000
     ec8:	00005000 	.word	0x00005000
     ecc:	00000000 	.word	0x00000000
     ed0:	00c40000 	.word	0x00c40000
     ed4:	00ce0000 	.word	0x00ce0000
     ed8:	00010000 	.word	0x00010000
     edc:	00000050 	.word	0x00000050
     ee0:	00000000 	.word	0x00000000
     ee4:	0000c800 	.word	0x0000c800
     ee8:	0000cc00 	.word	0x0000cc00
     eec:	53000100 	.word	0x53000100
     ef0:	000000d0 	.word	0x000000d0
     ef4:	000000d8 	.word	0x000000d8
     ef8:	00500001 	.word	0x00500001
     efc:	00000000 	.word	0x00000000
     f00:	e4000000 	.word	0xe4000000
     f04:	ee000000 	.word	0xee000000
     f08:	01000000 	.word	0x01000000
     f0c:	00005000 	.word	0x00005000
     f10:	00000000 	.word	0x00000000
     f14:	00e80000 	.word	0x00e80000
     f18:	00ee0000 	.word	0x00ee0000
     f1c:	00010000 	.word	0x00010000
     f20:	0000ee53 	.word	0x0000ee53
     f24:	0000f800 	.word	0x0000f800
     f28:	50000100 	.word	0x50000100
	...
     f34:	00000108 	.word	0x00000108
     f38:	00000112 	.word	0x00000112
     f3c:	00500001 	.word	0x00500001
     f40:	00000000 	.word	0x00000000
     f44:	0c000000 	.word	0x0c000000
     f48:	12000001 	.word	0x12000001
     f4c:	01000001 	.word	0x01000001
     f50:	01125300 	.word	0x01125300
     f54:	011c0000 	.word	0x011c0000
     f58:	00010000 	.word	0x00010000
     f5c:	00000050 	.word	0x00000050
     f60:	00000000 	.word	0x00000000
     f64:	00011c00 	.word	0x00011c00
     f68:	00012600 	.word	0x00012600
     f6c:	50000100 	.word	0x50000100
	...
     f78:	00000120 	.word	0x00000120
     f7c:	00000126 	.word	0x00000126
     f80:	26530001 	.word	0x26530001
     f84:	30000001 	.word	0x30000001
     f88:	01000001 	.word	0x01000001
     f8c:	00005000 	.word	0x00005000
     f90:	00000000 	.word	0x00000000
     f94:	016c0000 	.word	0x016c0000
     f98:	01760000 	.word	0x01760000
     f9c:	00010000 	.word	0x00010000
     fa0:	00000050 	.word	0x00000050
     fa4:	00000000 	.word	0x00000000
     fa8:	00017000 	.word	0x00017000
     fac:	00017600 	.word	0x00017600
     fb0:	53000100 	.word	0x53000100
     fb4:	00000176 	.word	0x00000176
     fb8:	00000180 	.word	0x00000180
     fbc:	00500001 	.word	0x00500001
     fc0:	00000000 	.word	0x00000000
     fc4:	ac000000 	.word	0xac000000
     fc8:	b2000001 	.word	0xb2000001
     fcc:	01000001 	.word	0x01000001
     fd0:	00005000 	.word	0x00005000
     fd4:	00000000 	.word	0x00000000
     fd8:	01c80000 	.word	0x01c80000
     fdc:	01d60000 	.word	0x01d60000
     fe0:	00010000 	.word	0x00010000
     fe4:	0001d650 	.word	0x0001d650
     fe8:	00028000 	.word	0x00028000
     fec:	5c000100 	.word	0x5c000100
	...
     ff8:	0000022a 	.word	0x0000022a
     ffc:	0000022c 	.word	0x0000022c
    1000:	3e530001 	.word	0x3e530001
    1004:	40000002 	.word	0x40000002
    1008:	01000002 	.word	0x01000002
    100c:	02505300 	.word	0x02505300
    1010:	02520000 	.word	0x02520000
    1014:	00010000 	.word	0x00010000
    1018:	00026253 	.word	0x00026253
    101c:	00026400 	.word	0x00026400
    1020:	53000100 	.word	0x53000100
	...
    102c:	000001e4 	.word	0x000001e4
    1030:	0000021a 	.word	0x0000021a
    1034:	1c520001 	.word	0x1c520001
    1038:	26000002 	.word	0x26000002
    103c:	01000002 	.word	0x01000002
    1040:	00005200 	.word	0x00005200
    1044:	00000000 	.word	0x00000000
    1048:	03300000 	.word	0x03300000
    104c:	03660000 	.word	0x03660000
    1050:	00010000 	.word	0x00010000
    1054:	00000050 	.word	0x00000050
    1058:	00000000 	.word	0x00000000
    105c:	00033200 	.word	0x00033200
    1060:	00033a00 	.word	0x00033a00
    1064:	53000100 	.word	0x53000100
    1068:	00000348 	.word	0x00000348
    106c:	00000350 	.word	0x00000350
    1070:	5e530001 	.word	0x5e530001
    1074:	60000003 	.word	0x60000003
    1078:	01000003 	.word	0x01000003
    107c:	00005300 	.word	0x00005300
    1080:	00000000 	.word	0x00000000
    1084:	03460000 	.word	0x03460000
    1088:	03480000 	.word	0x03480000
    108c:	00010000 	.word	0x00010000
    1090:	00035c53 	.word	0x00035c53
    1094:	00035e00 	.word	0x00035e00
    1098:	53000100 	.word	0x53000100
    109c:	00000362 	.word	0x00000362
    10a0:	00000374 	.word	0x00000374
    10a4:	00530001 	.word	0x00530001
    10a8:	00000000 	.word	0x00000000
    10ac:	84000000 	.word	0x84000000
    10b0:	90000003 	.word	0x90000003
    10b4:	01000003 	.word	0x01000003
    10b8:	00005000 	.word	0x00005000
    10bc:	00000000 	.word	0x00000000
    10c0:	007c0000 	.word	0x007c0000
    10c4:	00840000 	.word	0x00840000
    10c8:	00010000 	.word	0x00010000
    10cc:	00008450 	.word	0x00008450
    10d0:	0000a400 	.word	0x0000a400
    10d4:	52000100 	.word	0x52000100
	...
    10e0:	00000090 	.word	0x00000090
    10e4:	00000092 	.word	0x00000092
    10e8:	96500001 	.word	0x96500001
    10ec:	98000000 	.word	0x98000000
    10f0:	01000000 	.word	0x01000000
    10f4:	00005000 	.word	0x00005000
	...
    1100:	000a0000 	.word	0x000a0000
    1104:	00010000 	.word	0x00010000
    1108:	00000a5d 	.word	0x00000a5d
    110c:	00005400 	.word	0x00005400
    1110:	7d000200 	.word	0x7d000200
    1114:	00000008 	.word	0x00000008
    1118:	00000000 	.word	0x00000000
    111c:	00002600 	.word	0x00002600
    1120:	00003800 	.word	0x00003800
    1124:	53000100 	.word	0x53000100
	...
    1134:	00000004 	.word	0x00000004
    1138:	045d0001 	.word	0x045d0001
    113c:	10000000 	.word	0x10000000
    1140:	02000000 	.word	0x02000000
    1144:	10047d00 	.word	0x10047d00
    1148:	28000000 	.word	0x28000000
    114c:	02000000 	.word	0x02000000
    1150:	00087d00 	.word	0x00087d00
	...
    115c:	0c000000 	.word	0x0c000000
    1160:	01000000 	.word	0x01000000
    1164:	000c5000 	.word	0x000c5000
    1168:	001c0000 	.word	0x001c0000
    116c:	00010000 	.word	0x00010000
    1170:	00000051 	.word	0x00000051
	...
    117c:	00000c00 	.word	0x00000c00
    1180:	50000100 	.word	0x50000100
    1184:	0000000c 	.word	0x0000000c
    1188:	00000030 	.word	0x00000030
    118c:	00540001 	.word	0x00540001
	...
    1198:	04000000 	.word	0x04000000
    119c:	01000000 	.word	0x01000000
    11a0:	00045d00 	.word	0x00045d00
    11a4:	00480000 	.word	0x00480000
    11a8:	00020000 	.word	0x00020000
    11ac:	0000107d 	.word	0x0000107d
    11b0:	00000000 	.word	0x00000000
    11b4:	00480000 	.word	0x00480000
    11b8:	004c0000 	.word	0x004c0000
    11bc:	00010000 	.word	0x00010000
    11c0:	00004c5d 	.word	0x00004c5d
    11c4:	0000c800 	.word	0x0000c800
    11c8:	7d000200 	.word	0x7d000200
    11cc:	00000010 	.word	0x00000010
	...
    11d8:	00000800 	.word	0x00000800
    11dc:	5d000100 	.word	0x5d000100
    11e0:	00000008 	.word	0x00000008
    11e4:	000000d0 	.word	0x000000d0
    11e8:	087d0002 	.word	0x087d0002
	...
    11f8:	00000018 	.word	0x00000018
    11fc:	18500001 	.word	0x18500001
    1200:	20000000 	.word	0x20000000
    1204:	01000000 	.word	0x01000000
    1208:	00205400 	.word	0x00205400
    120c:	00380000 	.word	0x00380000
    1210:	00010000 	.word	0x00010000
    1214:	00003850 	.word	0x00003850
    1218:	0000d000 	.word	0x0000d000
    121c:	54000100 	.word	0x54000100
	...
    122c:	0000002c 	.word	0x0000002c
    1230:	a4510001 	.word	0xa4510001
    1234:	b0000000 	.word	0xb0000000
    1238:	01000000 	.word	0x01000000
    123c:	00c45100 	.word	0x00c45100
    1240:	00d00000 	.word	0x00d00000
    1244:	00010000 	.word	0x00010000
    1248:	00000051 	.word	0x00000051
	...
    1254:	00003800 	.word	0x00003800
    1258:	52000100 	.word	0x52000100
    125c:	00000038 	.word	0x00000038
    1260:	00000060 	.word	0x00000060
    1264:	605c0001 	.word	0x605c0001
    1268:	90000000 	.word	0x90000000
    126c:	01000000 	.word	0x01000000
    1270:	00a05200 	.word	0x00a05200
    1274:	00d00000 	.word	0x00d00000
    1278:	00010000 	.word	0x00010000
    127c:	00000052 	.word	0x00000052
    1280:	00000000 	.word	0x00000000
    1284:	00000c00 	.word	0x00000c00
    1288:	00003000 	.word	0x00003000
    128c:	5c000100 	.word	0x5c000100
    1290:	000000a4 	.word	0x000000a4
    1294:	000000d0 	.word	0x000000d0
    1298:	005c0001 	.word	0x005c0001
    129c:	00000000 	.word	0x00000000
    12a0:	28000000 	.word	0x28000000
    12a4:	2c000000 	.word	0x2c000000
    12a8:	01000000 	.word	0x01000000
    12ac:	002c5300 	.word	0x002c5300
    12b0:	00b00000 	.word	0x00b00000
    12b4:	00010000 	.word	0x00010000
    12b8:	0000c451 	.word	0x0000c451
    12bc:	0000d000 	.word	0x0000d000
    12c0:	51000100 	.word	0x51000100
	...
    12cc:	00000034 	.word	0x00000034
    12d0:	0000005c 	.word	0x0000005c
    12d4:	70530001 	.word	0x70530001
    12d8:	74000000 	.word	0x74000000
    12dc:	01000000 	.word	0x01000000
    12e0:	00745000 	.word	0x00745000
    12e4:	00840000 	.word	0x00840000
    12e8:	00010000 	.word	0x00010000
    12ec:	00008453 	.word	0x00008453
    12f0:	0000c800 	.word	0x0000c800
    12f4:	50000100 	.word	0x50000100
	...
    1304:	00000008 	.word	0x00000008
    1308:	085d0001 	.word	0x085d0001
    130c:	9c000000 	.word	0x9c000000
    1310:	02000000 	.word	0x02000000
    1314:	00147d00 	.word	0x00147d00
	...
    1320:	20000000 	.word	0x20000000
    1324:	01000000 	.word	0x01000000
    1328:	00205000 	.word	0x00205000
    132c:	009c0000 	.word	0x009c0000
    1330:	00010000 	.word	0x00010000
    1334:	00000055 	.word	0x00000055
	...
    1340:	00003c00 	.word	0x00003c00
    1344:	51000100 	.word	0x51000100
    1348:	0000003c 	.word	0x0000003c
    134c:	0000009c 	.word	0x0000009c
    1350:	00580001 	.word	0x00580001
	...
    135c:	3c000000 	.word	0x3c000000
    1360:	01000000 	.word	0x01000000
    1364:	003c5200 	.word	0x003c5200
    1368:	009c0000 	.word	0x009c0000
    136c:	00010000 	.word	0x00010000
    1370:	00000056 	.word	0x00000056
	...
    137c:	00003c00 	.word	0x00003c00
    1380:	53000100 	.word	0x53000100
    1384:	0000003c 	.word	0x0000003c
    1388:	0000009c 	.word	0x0000009c
    138c:	00570001 	.word	0x00570001
	...
    1398:	04000000 	.word	0x04000000
    139c:	01000000 	.word	0x01000000
    13a0:	00045d00 	.word	0x00045d00
    13a4:	00100000 	.word	0x00100000
    13a8:	00020000 	.word	0x00020000
    13ac:	0010247d 	.word	0x0010247d
    13b0:	010c0000 	.word	0x010c0000
    13b4:	00020000 	.word	0x00020000
    13b8:	0000307d 	.word	0x0000307d
	...
    13c4:	00240000 	.word	0x00240000
    13c8:	00010000 	.word	0x00010000
    13cc:	00002450 	.word	0x00002450
    13d0:	0000c000 	.word	0x0000c000
    13d4:	7d000200 	.word	0x7d000200
    13d8:	0000c004 	.word	0x0000c004
    13dc:	0000d400 	.word	0x0000d400
    13e0:	91000200 	.word	0x91000200
    13e4:	0000d470 	.word	0x0000d470
    13e8:	0000e800 	.word	0x0000e800
    13ec:	7d000200 	.word	0x7d000200
    13f0:	0000e804 	.word	0x0000e804
    13f4:	0000f400 	.word	0x0000f400
    13f8:	91000200 	.word	0x91000200
    13fc:	0000f470 	.word	0x0000f470
    1400:	00010c00 	.word	0x00010c00
    1404:	7d000200 	.word	0x7d000200
    1408:	00000004 	.word	0x00000004
	...
    1414:	00002400 	.word	0x00002400
    1418:	51000100 	.word	0x51000100
    141c:	00000024 	.word	0x00000024
    1420:	0000010c 	.word	0x0000010c
    1424:	00570001 	.word	0x00570001
    1428:	00000000 	.word	0x00000000
    142c:	44000000 	.word	0x44000000
    1430:	c0000000 	.word	0xc0000000
    1434:	01000000 	.word	0x01000000
    1438:	00d45c00 	.word	0x00d45c00
    143c:	00dc0000 	.word	0x00dc0000
    1440:	00010000 	.word	0x00010000
    1444:	0000f85c 	.word	0x0000f85c
    1448:	00010400 	.word	0x00010400
    144c:	5c000100 	.word	0x5c000100
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	524f4305 	subpl	r4, pc, #335544320	; 0x14000000
  14:	2d584554 	cfldr64cs	mvdx4, [r8, #-336]
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	084d070a 	stmdaeq	sp, {r1, r3, r8, r9, sl}^
  20:	12020901 	andne	r0, r2, #16384	; 0x4000
  24:	15011404 	strne	r1, [r1, #-1028]
  28:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  2c:	1a011901 	bne	46438 <__Stack_Size+0x46038>
  30:	Address 0x00000030 is out of bounds.


Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 	undefined instruction 0xffffffff
	...
  20:	0000011e 	andeq	r0, r0, lr, lsl r1
  24:	00000120 	andeq	r0, r0, r0, lsr #2
  28:	00000126 	andeq	r0, r0, r6, lsr #2
  2c:	0000014a 	andeq	r0, r0, sl, asr #2
  30:	00000122 	andeq	r0, r0, r2, lsr #2
  34:	00000124 	andeq	r0, r0, r4, lsr #2
	...
  40:	0000011e 	andeq	r0, r0, lr, lsl r1
  44:	00000120 	andeq	r0, r0, r0, lsr #2
  48:	00000130 	andeq	r0, r0, r0, lsr r1
  4c:	0000014a 	andeq	r0, r0, sl, asr #2
  50:	00000122 	andeq	r0, r0, r2, lsr #2
  54:	00000124 	andeq	r0, r0, r4, lsr #2
	...
  60:	0000014a 	andeq	r0, r0, sl, asr #2
  64:	0000015e 	andeq	r0, r0, lr, asr r1
  68:	00000188 	andeq	r0, r0, r8, lsl #3
  6c:	0000018e 	andeq	r0, r0, lr, lsl #3
	...
  78:	0000014a 	andeq	r0, r0, sl, asr #2
  7c:	0000015e 	andeq	r0, r0, lr, asr r1
  80:	00000188 	andeq	r0, r0, r8, lsl #3
  84:	0000018e 	andeq	r0, r0, lr, lsl #3
	...
  90:	0000015e 	andeq	r0, r0, lr, asr r1
  94:	00000182 	andeq	r0, r0, r2, lsl #3
  98:	00000186 	andeq	r0, r0, r6, lsl #3
  9c:	00000188 	andeq	r0, r0, r8, lsl #3
	...
  a8:	0000015e 	andeq	r0, r0, lr, asr r1
  ac:	00000160 	andeq	r0, r0, r0, ror #2
  b0:	00000186 	andeq	r0, r0, r6, lsl #3
  b4:	00000188 	andeq	r0, r0, r8, lsl #3
  b8:	0000016a 	andeq	r0, r0, sl, ror #2
  bc:	00000182 	andeq	r0, r0, r2, lsl #3
	...
  c8:	00000078 	andeq	r0, r0, r8, ror r0
  cc:	0000007a 	andeq	r0, r0, sl, ror r0
  d0:	0000007c 	andeq	r0, r0, ip, ror r0
  d4:	0000007e 	andeq	r0, r0, lr, ror r0
	...
  e0:	00000078 	andeq	r0, r0, r8, ror r0
  e4:	0000007a 	andeq	r0, r0, sl, ror r0
  e8:	0000007c 	andeq	r0, r0, ip, ror r0
  ec:	0000007e 	andeq	r0, r0, lr, ror r0
	...
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000024 	andeq	r0, r0, r4, lsr #32
 100:	00000070 	andeq	r0, r0, r0, ror r0
 104:	0000010c 	andeq	r0, r0, ip, lsl #2
 108:	00000044 	andeq	r0, r0, r4, asr #32
 10c:	00000058 	andeq	r0, r0, r8, asr r0
	...
 118:	ffffffff 	undefined instruction 0xffffffff
	...
